/*
 * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing.
 *
 * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:
 * https://github.com/OrfeasZ/ZHMModSDK
 */

#include "ZHMGen.h"
#include "ZHMProperties.h"
#include "ZHMEnums.h"

ZHMTypeInfo ZBehaviorTreeVariable::TypeInfo = ZHMTypeInfo("ZBehaviorTreeVariable", ZBehaviorTreeVariable::WriteJson, ZBehaviorTreeVariable::WriteSimpleJson);

void ZBehaviorTreeVariable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZBehaviorTreeVariable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZBehaviorTreeVariable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZBehaviorTreeVariable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SConditionBase::TypeInfo = ZHMTypeInfo("SConditionBase", SConditionBase::WriteJson, SConditionBase::WriteSimpleJson);

void SConditionBase::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConditionBase*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("eConditionType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECompiledConditionType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eConditionType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECompiledConditionType", static_cast<int>(s_Object->eConditionType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nConditionModifiers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nConditionModifiers;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("assignTo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->assignTo, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SConditionBase::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConditionBase*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("eConditionType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECompiledConditionType", static_cast<int>(s_Object->eConditionType)));
	p_Stream << ",";

	p_Stream << JsonStr("nConditionModifiers") << ":";
	p_Stream << s_Object->nConditionModifiers;
	p_Stream << ",";

	p_Stream << JsonStr("assignTo") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->assignTo, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_GetRandomFightTarget::TypeInfo = ZHMTypeInfo("SCondition_GetRandomFightTarget", SCondition_GetRandomFightTarget::WriteJson, SCondition_GetRandomFightTarget::WriteSimpleJson);

void SCondition_GetRandomFightTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_GetRandomFightTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("combatPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->combatPosition, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_GetRandomFightTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_GetRandomFightTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("combatPosition") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->combatPosition, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo float4::TypeInfo = ZHMTypeInfo("float4", float4::WriteJson, float4::WriteSimpleJson);

void float4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<float4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->z;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->w;
	p_Stream << "}";

	p_Stream << "}";
}

void float4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<float4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << s_Object->z;
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << s_Object->w;

	p_Stream << "}";
}

ZHMTypeInfo SMatrix::TypeInfo = ZHMTypeInfo("SMatrix", SMatrix::WriteJson, SMatrix::WriteSimpleJson);

void SMatrix::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("XAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->XAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->YAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->ZAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->Trans, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("XAxis") << ":";
	float4::WriteSimpleJson(&s_Object->XAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	float4::WriteSimpleJson(&s_Object->YAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	float4::WriteSimpleJson(&s_Object->ZAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	float4::WriteSimpleJson(&s_Object->Trans, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SVRConfigCameraComponent::TypeInfo = ZHMTypeInfo("SVRConfigCameraComponent", SVRConfigCameraComponent::WriteJson, SVRConfigCameraComponent::WriteSimpleJson);

void SVRConfigCameraComponent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVRConfigCameraComponent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eHeadAnchorMode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EVRConfigHeadAnchorMode") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eHeadAnchorMode) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EVRConfigHeadAnchorMode", static_cast<int>(s_Object->m_eHeadAnchorMode))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uRecenterRequestCounter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uRecenterRequestCounter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fVRUserInputWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fVRUserInputWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffsetSneaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffsetSneaking;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHeadBoneAttacherOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHeadBoneAttacherOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vAnchorPosOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vAnchorPosOffset, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mAnchorRotOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mAnchorRotOffset, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SVRConfigCameraComponent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVRConfigCameraComponent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eHeadAnchorMode") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EVRConfigHeadAnchorMode", static_cast<int>(s_Object->m_eHeadAnchorMode)));
	p_Stream << ",";

	p_Stream << JsonStr("m_uRecenterRequestCounter") << ":";
	p_Stream << s_Object->m_uRecenterRequestCounter;
	p_Stream << ",";

	p_Stream << JsonStr("m_fVRUserInputWeight") << ":";
	p_Stream << s_Object->m_fVRUserInputWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridSize") << ":";
	p_Stream << s_Object->m_fGridSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffset") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffsetSneaking") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffsetSneaking;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHeadBoneAttacherOffset") << ":";
	p_Stream << s_Object->m_fHeadBoneAttacherOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_vAnchorPosOffset") << ":";
	float4::WriteSimpleJson(&s_Object->m_vAnchorPosOffset, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_mAnchorRotOffset") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mAnchorRotOffset, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IComponentInterface::TypeInfo = ZHMTypeInfo("IComponentInterface", IComponentInterface::WriteJson, IComponentInterface::WriteSimpleJson);

void IComponentInterface::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IComponentInterface*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IComponentInterface::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IComponentInterface*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZMapTrackerListProvider::TypeInfo = ZHMTypeInfo("ZMapTrackerListProvider", ZMapTrackerListProvider::WriteJson, ZMapTrackerListProvider::WriteSimpleJson);

void ZMapTrackerListProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZMapTrackerListProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZMapTrackerListProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZMapTrackerListProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsSeasonTwoCombatEnabled::TypeInfo = ZHMTypeInfo("SCondition_IsSeasonTwoCombatEnabled", SCondition_IsSeasonTwoCombatEnabled::WriteJson, SCondition_IsSeasonTwoCombatEnabled::WriteSimpleJson);

void SCondition_IsSeasonTwoCombatEnabled::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSeasonTwoCombatEnabled*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_IsSeasonTwoCombatEnabled::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSeasonTwoCombatEnabled*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SPhysicsSaveData::TypeInfo = ZHMTypeInfo("SPhysicsSaveData", SPhysicsSaveData::WriteJson, SPhysicsSaveData::WriteSimpleJson);

void SPhysicsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPhysicsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsInPhysicsWorld") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsInPhysicsWorld;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsKinematicBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsKinematicBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SPhysicsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPhysicsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsInPhysicsWorld") << ":";
	p_Stream << s_Object->m_bIsInPhysicsWorld;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsKinematicBody") << ":";
	p_Stream << s_Object->m_bIsKinematicBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;

	p_Stream << "}";
}

ZHMTypeInfo IPureWaterReflectable::TypeInfo = ZHMTypeInfo("IPureWaterReflectable", IPureWaterReflectable::WriteJson, IPureWaterReflectable::WriteSimpleJson);

void IPureWaterReflectable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPureWaterReflectable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPureWaterReflectable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPureWaterReflectable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_AreVisibleWeaponsSuspicious::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleWeaponsSuspicious", SCondition_AreVisibleWeaponsSuspicious::WriteJson, SCondition_AreVisibleWeaponsSuspicious::WriteSimpleJson);

void SCondition_AreVisibleWeaponsSuspicious::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleWeaponsSuspicious*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_AreVisibleWeaponsSuspicious::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleWeaponsSuspicious*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasConfiguredSpeak::TypeInfo = ZHMTypeInfo("SCondition_HasConfiguredSpeak", SCondition_HasConfiguredSpeak::WriteJson, SCondition_HasConfiguredSpeak::WriteSimpleJson);

void SCondition_HasConfiguredSpeak::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasConfiguredSpeak*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("speak") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->speak);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasConfiguredSpeak::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasConfiguredSpeak*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("speak") << ":";
	p_Stream << JsonStr(s_Object->speak);

	p_Stream << "}";
}

ZHMTypeInfo SActorSoundDefs::TypeInfo = ZHMTypeInfo("SActorSoundDefs", SActorSoundDefs::WriteJson, SActorSoundDefs::WriteSimpleJson);

void SActorSoundDefs::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSoundDefs*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SActorSoundDefs::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSoundDefs*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SGetHelpOrderSaveData::TypeInfo = ZHMTypeInfo("SGetHelpOrderSaveData", SGetHelpOrderSaveData::WriteJson, SGetHelpOrderSaveData::WriteSimpleJson);

void SGetHelpOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_helpType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_helpType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_helpType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInitialGuard;
	p_Stream << "}";

	p_Stream << "}";
}

void SGetHelpOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_helpType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_helpType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialGuard") << ":";
	p_Stream << s_Object->m_rInitialGuard;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDistractionTargetBeingHandled::TypeInfo = ZHMTypeInfo("SCondition_IsDistractionTargetBeingHandled", SCondition_IsDistractionTargetBeingHandled::WriteJson, SCondition_IsDistractionTargetBeingHandled::WriteSimpleJson);

void SCondition_IsDistractionTargetBeingHandled::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistractionTargetBeingHandled*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("distractionTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->distractionTarget, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsDistractionTargetBeingHandled::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistractionTargetBeingHandled*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("distractionTarget") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->distractionTarget, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SVoidSignalEntitySaveData::TypeInfo = ZHMTypeInfo("SVoidSignalEntitySaveData", SVoidSignalEntitySaveData::WriteJson, SVoidSignalEntitySaveData::WriteSimpleJson);

void SVoidSignalEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVoidSignalEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSignaling") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSignaling;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFiredAtTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFiredAtTime;
	p_Stream << "}";

	p_Stream << "}";
}

void SVoidSignalEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVoidSignalEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSignaling") << ":";
	p_Stream << s_Object->m_bSignaling;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFiredAtTime") << ":";
	p_Stream << s_Object->m_fFiredAtTime;

	p_Stream << "}";
}

ZHMTypeInfo IHM5BaseCharacter::TypeInfo = ZHMTypeInfo("IHM5BaseCharacter", IHM5BaseCharacter::WriteJson, IHM5BaseCharacter::WriteSimpleJson);

void IHM5BaseCharacter::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5BaseCharacter*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5BaseCharacter::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5BaseCharacter*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorProviderDirectSaveData::TypeInfo = ZHMTypeInfo("SActorProviderDirectSaveData", SActorProviderDirectSaveData::WriteJson, SActorProviderDirectSaveData::WriteSimpleJson);

void SActorProviderDirectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProviderDirectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRunning;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProviderDirectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProviderDirectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << s_Object->m_bRunning;

	p_Stream << "}";
}

ZHMTypeInfo STimerEntitySaveData::TypeInfo = ZHMTypeInfo("STimerEntitySaveData", STimerEntitySaveData::WriteJson, STimerEntitySaveData::WriteSimpleJson);

void STimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsOfType::TypeInfo = ZHMTypeInfo("SCondition_IsOfType", SCondition_IsOfType::WriteJson, SCondition_IsOfType::WriteSimpleJson);

void SCondition_IsOfType::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOfType*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EKnownEntityType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EKnownEntityType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsOfType::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOfType*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EKnownEntityType", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo ISoundAmbienceElement::TypeInfo = ZHMTypeInfo("ISoundAmbienceElement", ISoundAmbienceElement::WriteJson, ISoundAmbienceElement::WriteSimpleJson);

void ISoundAmbienceElement::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundAmbienceElement*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundAmbienceElement::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundAmbienceElement*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsSharedOlder::TypeInfo = ZHMTypeInfo("SCondition_IsSharedOlder", SCondition_IsSharedOlder::WriteJson, SCondition_IsSharedOlder::WriteSimpleJson);

void SCondition_IsSharedOlder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSharedOlder*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("stype") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->stype) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->stype))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsSharedOlder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSharedOlder*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("stype") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->stype)));

	p_Stream << "}";
}

ZHMTypeInfo IParticleHeirEntity::TypeInfo = ZHMTypeInfo("IParticleHeirEntity", IParticleHeirEntity::WriteJson, IParticleHeirEntity::WriteSimpleJson);

void IParticleHeirEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleHeirEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IParticleHeirEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleHeirEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IMorphemeEventConsumer::TypeInfo = ZHMTypeInfo("IMorphemeEventConsumer", IMorphemeEventConsumer::WriteJson, IMorphemeEventConsumer::WriteSimpleJson);

void IMorphemeEventConsumer::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeEventConsumer*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeEventConsumer::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeEventConsumer*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IAmmoProperties::TypeInfo = ZHMTypeInfo("IAmmoProperties", IAmmoProperties::WriteJson, IAmmoProperties::WriteSimpleJson);

void IAmmoProperties::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAmmoProperties*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAmmoProperties::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAmmoProperties*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IMenuController::TypeInfo = ZHMTypeInfo("IMenuController", IMenuController::WriteJson, IMenuController::WriteSimpleJson);

void IMenuController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMenuController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMenuController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMenuController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAudioEmitterSwitchSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterSwitchSaveData", SAudioEmitterSwitchSaveData::WriteJson, SAudioEmitterSwitchSaveData::WriteSimpleJson);

void SAudioEmitterSwitchSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterSwitchSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nStateId;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterSwitchSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterSwitchSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << s_Object->m_nStateId;

	p_Stream << "}";
}

ZHMTypeInfo SVector2::TypeInfo = ZHMTypeInfo("SVector2", SVector2::WriteJson, SVector2::WriteSimpleJson);

void SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";

	p_Stream << "}";
}

void SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;

	p_Stream << "}";
}

ZHMTypeInfo SMathDistanceSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector2", SMathDistanceSaveData_SVector2::WriteJson, SMathDistanceSaveData_SVector2::WriteSimpleJson);

void SMathDistanceSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fB, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SItemStorageSaveData::TypeInfo = ZHMTypeInfo("SItemStorageSaveData", SItemStorageSaveData::WriteJson, SItemStorageSaveData::WriteSimpleJson);

void SItemStorageSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemStorageSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Storage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_Storage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ContainedItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ContainedItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_ContainedItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_ContainedItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SItemStorageSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemStorageSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Storage") << ":";
	p_Stream << s_Object->m_Storage;
	p_Stream << ",";

	p_Stream << JsonStr("m_ContainedItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ContainedItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_ContainedItems[i];
		p_Stream << s_Item;

		if (i < s_Object->m_ContainedItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDistanceFromKnownToActualLessThan::TypeInfo = ZHMTypeInfo("SCondition_IsDistanceFromKnownToActualLessThan", SCondition_IsDistanceFromKnownToActualLessThan::WriteJson, SCondition_IsDistanceFromKnownToActualLessThan::WriteSimpleJson);

void SCondition_IsDistanceFromKnownToActualLessThan::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistanceFromKnownToActualLessThan*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("knownEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->knownEntity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("distance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->distance;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsDistanceFromKnownToActualLessThan::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistanceFromKnownToActualLessThan*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("knownEntity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->knownEntity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("distance") << ":";
	p_Stream << s_Object->distance;

	p_Stream << "}";
}

ZHMTypeInfo ZWebSocketManager::TypeInfo = ZHMTypeInfo("ZWebSocketManager", ZWebSocketManager::WriteJson, ZWebSocketManager::WriteSimpleJson);

void ZWebSocketManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZWebSocketManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZWebSocketManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZWebSocketManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SBehaviorTreeInputPinCondition::TypeInfo = ZHMTypeInfo("SBehaviorTreeInputPinCondition", SBehaviorTreeInputPinCondition::WriteJson, SBehaviorTreeInputPinCondition::WriteSimpleJson);

void SBehaviorTreeInputPinCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeInputPinCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);

	p_Stream << "}";
}

ZHMTypeInfo SItemWeaponSaveData::TypeInfo = ZHMTypeInfo("SItemWeaponSaveData", SItemWeaponSaveData::WriteJson, SItemWeaponSaveData::WriteSimpleJson);

void SItemWeaponSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemWeaponSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_magazineBulletsByAmmoType") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_magazineBulletsByAmmoType.size(); ++i)
	{
		auto& s_Item = s_Object->m_magazineBulletsByAmmoType[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_magazineBulletsByAmmoType.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nExtraMagazineBullets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nExtraMagazineBullets;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePendingDeathContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePendingDeathContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_ePendingDeathContext))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDeathContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_eDeathContext))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemWeaponSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemWeaponSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_magazineBulletsByAmmoType") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_magazineBulletsByAmmoType.size(); ++i)
	{
		auto& s_Item = s_Object->m_magazineBulletsByAmmoType[i];
		p_Stream << s_Item;

		if (i < s_Object->m_magazineBulletsByAmmoType.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nExtraMagazineBullets") << ":";
	p_Stream << s_Object->m_nExtraMagazineBullets;
	p_Stream << ",";

	p_Stream << JsonStr("m_ePendingDeathContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_ePendingDeathContext)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_eDeathContext)));

	p_Stream << "}";
}

ZHMTypeInfo SDestructibleInteractionHandlerData::TypeInfo = ZHMTypeInfo("SDestructibleInteractionHandlerData", SDestructibleInteractionHandlerData::WriteJson, SDestructibleInteractionHandlerData::WriteSimpleJson);

void SDestructibleInteractionHandlerData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleInteractionHandlerData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSettleTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSettleTime;
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleInteractionHandlerData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleInteractionHandlerData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSettleTime") << ":";
	p_Stream << s_Object->m_fSettleTime;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxActualDistance::TypeInfo = ZHMTypeInfo("SCondition_MaxActualDistance", SCondition_MaxActualDistance::WriteJson, SCondition_MaxActualDistance::WriteSimpleJson);

void SCondition_MaxActualDistance::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxActualDistance*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("a0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a0, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a1, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDistance;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxActualDistance::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxActualDistance*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("a0") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a0, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a1, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("fDistance") << ":";
	p_Stream << s_Object->fDistance;

	p_Stream << "}";
}

ZHMTypeInfo ZSituationGroup::TypeInfo = ZHMTypeInfo("ZSituationGroup", ZSituationGroup::WriteJson, ZSituationGroup::WriteSimpleJson);

void ZSituationGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSituationGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSituationGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSituationGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZTriggerAlarmGroup::TypeInfo = ZHMTypeInfo("ZTriggerAlarmGroup", ZTriggerAlarmGroup::WriteJson, ZTriggerAlarmGroup::WriteSimpleJson);

void ZTriggerAlarmGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZTriggerAlarmGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZTriggerAlarmGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZTriggerAlarmGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZGameTime::TypeInfo = ZHMTypeInfo("ZGameTime", ZGameTime::WriteJson, ZGameTime::WriteSimpleJson);

void ZGameTime::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGameTime*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nTicks") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTicks;
	p_Stream << "}";

	p_Stream << "}";
}

void ZGameTime::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGameTime*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nTicks") << ":";
	p_Stream << s_Object->m_nTicks;

	p_Stream << "}";
}

ZHMTypeInfo SAIEventSaveData::TypeInfo = ZHMTypeInfo("SAIEventSaveData", SAIEventSaveData::WriteJson, SAIEventSaveData::WriteSimpleJson);

void SAIEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHandled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHandled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nEnd, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAIEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bHandled") << ":";
	p_Stream << s_Object->m_bHandled;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nEnd, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SKnownEntitySaveData::TypeInfo = ZHMTypeInfo("SKnownEntitySaveData", SKnownEntitySaveData::WriteJson, SKnownEntitySaveData::WriteSimpleJson);

void SKnownEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKnownEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nSharedIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSharedIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAIEventSaveData") << "," << JsonStr("$val") << ":";
		SAIEventSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBooleanEvents;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEventsHandled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBooleanEventsHandled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_knownWorldMatrix") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_knownWorldMatrix, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastWorldMatrixUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastWorldMatrixUpdate, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGoals") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGoals;
	p_Stream << "}";

	p_Stream << "}";
}

void SKnownEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKnownEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nSharedIndex") << ":";
	p_Stream << s_Object->m_nSharedIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEvents[i];
		SAIEventSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEvents") << ":";
	p_Stream << s_Object->m_nBooleanEvents;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEventsHandled") << ":";
	p_Stream << s_Object->m_nBooleanEventsHandled;
	p_Stream << ",";

	p_Stream << JsonStr("m_knownWorldMatrix") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_knownWorldMatrix, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastWorldMatrixUpdate") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastWorldMatrixUpdate, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nGoals") << ":";
	p_Stream << s_Object->m_nGoals;

	p_Stream << "}";
}

ZHMTypeInfo SActorGoalSaveData::TypeInfo = ZHMTypeInfo("SActorGoalSaveData", SActorGoalSaveData::WriteJson, SActorGoalSaveData::WriteSimpleJson);

void SActorGoalSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorGoalSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aHandled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHandled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aHandled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aHandled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIsCurrent") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIsCurrent.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIsCurrent[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aIsCurrent.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fExpiredTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_fExpiredTime.size(); ++i)
	{
		auto& s_Item = s_Object->m_fExpiredTime[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_fExpiredTime.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorGoalSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorGoalSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aHandled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHandled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aHandled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aHandled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIsCurrent") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIsCurrent.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIsCurrent[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aIsCurrent.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fExpiredTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_fExpiredTime.size(); ++i)
	{
		auto& s_Item = s_Object->m_fExpiredTime[i];
		p_Stream << s_Item;

		if (i < s_Object->m_fExpiredTime.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SKnowledgeSaveData::TypeInfo = ZHMTypeInfo("SKnowledgeSaveData", SKnowledgeSaveData::WriteJson, SKnowledgeSaveData::WriteSimpleJson);

void SKnowledgeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKnowledgeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aKnownEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKnownEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SKnownEntitySaveData") << "," << JsonStr("$val") << ":";
		SKnownEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aKnownEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoalKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoalKeys.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGoalKeys[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIGoal") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Item))) << "}";
		p_Stream << "}";

		if (i < s_Object->m_aGoalKeys.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoals") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoals.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGoals[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorGoalSaveData") << "," << JsonStr("$val") << ":";
		SActorGoalSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGoals.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttentionLastUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMAttentionLastUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMDisguiseAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMDisguiseAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMTrespassingAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMTrespassingAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMLastTrespassingAttentionMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMLastTrespassingAttentionMax;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTrespassingAttentionGain") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastTrespassingAttentionGain, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastAttentionEvaluate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastAttentionEvaluate, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMWeaponAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttentionChange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMWeaponAttentionChange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGameTension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGameTension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eGameTension))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tAmbientStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tAmbientStartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiredAIModifierSuppressSocialGreeting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiredAIModifierSuppressSocialGreeting, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_behaviorModifiers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_behaviorModifiers;
	p_Stream << "}";

	p_Stream << "}";
}

void SKnowledgeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKnowledgeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aKnownEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKnownEntities[i];
		SKnownEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aKnownEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoalKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoalKeys.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGoalKeys[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Item)));

		if (i < s_Object->m_aGoalKeys.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoals") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoals.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGoals[i];
		SActorGoalSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGoals.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttention") << ":";
	p_Stream << s_Object->m_fHMAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttentionLastUpdate") << ":";
	p_Stream << s_Object->m_fHMAttentionLastUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMDisguiseAttention") << ":";
	p_Stream << s_Object->m_fHMDisguiseAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMTrespassingAttention") << ":";
	p_Stream << s_Object->m_fHMTrespassingAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMLastTrespassingAttentionMax") << ":";
	p_Stream << s_Object->m_fHMLastTrespassingAttentionMax;
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTrespassingAttentionGain") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastTrespassingAttentionGain, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastAttentionEvaluate") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastAttentionEvaluate, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttention") << ":";
	p_Stream << s_Object->m_fHMWeaponAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttentionChange") << ":";
	p_Stream << s_Object->m_fHMWeaponAttentionChange;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGameTension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eGameTension)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tAmbientStartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tAmbientStartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiredAIModifierSuppressSocialGreeting") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiredAIModifierSuppressSocialGreeting, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_behaviorModifiers") << ":";
	p_Stream << s_Object->m_behaviorModifiers;

	p_Stream << "}";
}

ZHMTypeInfo STimerEntityCommandSaveData::TypeInfo = ZHMTypeInfo("STimerEntityCommandSaveData", STimerEntityCommandSaveData::WriteJson, STimerEntityCommandSaveData::WriteSimpleJson);

void STimerEntityCommandSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntityCommandSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ETimerEntityCommandType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ETimerEntityCommandType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInterval;
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntityCommandSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntityCommandSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ETimerEntityCommandType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_fInterval") << ":";
	p_Stream << s_Object->m_fInterval;

	p_Stream << "}";
}

ZHMTypeInfo STimerEntityStateSaveData::TypeInfo = ZHMTypeInfo("STimerEntityStateSaveData", STimerEntityStateSaveData::WriteJson, STimerEntityStateSaveData::WriteSimpleJson);

void STimerEntityStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntityStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fNextEventTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fNextEventTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPending") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPending;
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntityStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntityStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_fNextEventTime") << ":";
	p_Stream << s_Object->m_fNextEventTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPending") << ":";
	p_Stream << s_Object->m_bPending;

	p_Stream << "}";
}

ZHMTypeInfo SGameTimersSaveData::TypeInfo = ZHMTypeInfo("SGameTimersSaveData", SGameTimersSaveData::WriteJson, SGameTimersSaveData::WriteSimpleJson);

void SGameTimersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameTimersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aTimerEntityCommands") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityCommands.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTimerEntityCommands[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntityCommandSaveData") << "," << JsonStr("$val") << ":";
		STimerEntityCommandSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTimerEntityCommands.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aTimerEntityState") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityState.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTimerEntityState[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntityStateSaveData") << "," << JsonStr("$val") << ":";
		STimerEntityStateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTimerEntityState.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingTimers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingTimers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPendingTimers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aPendingTimers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGameTimersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameTimersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aTimerEntityCommands") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityCommands.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTimerEntityCommands[i];
		STimerEntityCommandSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aTimerEntityCommands.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aTimerEntityState") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityState.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTimerEntityState[i];
		STimerEntityStateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aTimerEntityState.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingTimers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingTimers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPendingTimers[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aPendingTimers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ISoundAmbienceController::TypeInfo = ZHMTypeInfo("ISoundAmbienceController", ISoundAmbienceController::WriteJson, ISoundAmbienceController::WriteSimpleJson);

void ISoundAmbienceController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundAmbienceController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundAmbienceController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundAmbienceController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IUIMapExporter::TypeInfo = ZHMTypeInfo("IUIMapExporter", IUIMapExporter::WriteJson, IUIMapExporter::WriteSimpleJson);

void IUIMapExporter::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIMapExporter*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IUIMapExporter::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIMapExporter*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SStepCounterEntitySaveData::TypeInfo = ZHMTypeInfo("SStepCounterEntitySaveData", SStepCounterEntitySaveData::WriteJson, SStepCounterEntitySaveData::WriteSimpleJson);

void SStepCounterEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStepCounterEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLoopIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLoopIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirst") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirst;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountFrom") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCountFrom;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountTo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCountTo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStepSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nStepSize;
	p_Stream << "}";

	p_Stream << "}";
}

void SStepCounterEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStepCounterEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLoopIndex") << ":";
	p_Stream << s_Object->m_nLoopIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirst") << ":";
	p_Stream << s_Object->m_bFirst;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountFrom") << ":";
	p_Stream << s_Object->m_nCountFrom;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountTo") << ":";
	p_Stream << s_Object->m_nCountTo;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStepSize") << ":";
	p_Stream << s_Object->m_nStepSize;

	p_Stream << "}";
}

ZHMTypeInfo SExtendedCppEntityProperty::TypeInfo = ZHMTypeInfo("SExtendedCppEntityProperty", SExtendedCppEntityProperty::WriteJson, SExtendedCppEntityProperty::WriteSimpleJson);

void SExtendedCppEntityProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExtendedCppEntityProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("propertyName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->propertyName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EExtendedPropertyType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->propertyType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EExtendedPropertyType", static_cast<int>(s_Object->propertyType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rtEditable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rtEditable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("extraData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->extraData;
	p_Stream << "}";

	p_Stream << "}";
}

void SExtendedCppEntityProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExtendedCppEntityProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("propertyName") << ":";
	p_Stream << JsonStr(s_Object->propertyName);
	p_Stream << ",";

	p_Stream << JsonStr("propertyType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EExtendedPropertyType", static_cast<int>(s_Object->propertyType)));
	p_Stream << ",";

	p_Stream << JsonStr("rtEditable") << ":";
	p_Stream << s_Object->rtEditable;
	p_Stream << ",";

	p_Stream << JsonStr("extraData") << ":";
	p_Stream << s_Object->extraData;

	p_Stream << "}";
}

ZHMTypeInfo SExtendedCppEntityBlueprint::TypeInfo = ZHMTypeInfo("SExtendedCppEntityBlueprint", SExtendedCppEntityBlueprint::WriteJson, SExtendedCppEntityBlueprint::WriteSimpleJson);

void SExtendedCppEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExtendedCppEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("properties") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->properties.size(); ++i)
	{
		auto& s_Item = s_Object->properties[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExtendedCppEntityProperty") << "," << JsonStr("$val") << ":";
		SExtendedCppEntityProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->properties.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SExtendedCppEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExtendedCppEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("properties") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->properties.size(); ++i)
	{
		auto& s_Item = s_Object->properties[i];
		SExtendedCppEntityProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->properties.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZEvacuateTrespassGroup::TypeInfo = ZHMTypeInfo("ZEvacuateTrespassGroup", ZEvacuateTrespassGroup::WriteJson, ZEvacuateTrespassGroup::WriteSimpleJson);

void ZEvacuateTrespassGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEvacuateTrespassGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEvacuateTrespassGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEvacuateTrespassGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZSituationOrder::TypeInfo = ZHMTypeInfo("ZSituationOrder", ZSituationOrder::WriteJson, ZSituationOrder::WriteSimpleJson);

void ZSituationOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSituationOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSituationOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSituationOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZGetHelpOrder::TypeInfo = ZHMTypeInfo("ZGetHelpOrder", ZGetHelpOrder::WriteJson, ZGetHelpOrder::WriteSimpleJson);

void ZGetHelpOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGetHelpOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGetHelpOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGetHelpOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SSentryOrderSaveData::TypeInfo = ZHMTypeInfo("SSentryOrderSaveData", SSentryOrderSaveData::WriteJson, SSentryOrderSaveData::WriteSimpleJson);

void SSentryOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSentryZone;
	p_Stream << "}";

	p_Stream << "}";
}

void SSentryOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << s_Object->m_rSentryZone;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_AreVisibleItemsIllegal::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleItemsIllegal", SCondition_AreVisibleItemsIllegal::WriteJson, SCondition_AreVisibleItemsIllegal::WriteSimpleJson);

void SCondition_AreVisibleItemsIllegal::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleItemsIllegal*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->includeWeapons;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_AreVisibleItemsIllegal::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleItemsIllegal*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << s_Object->includeWeapons;

	p_Stream << "}";
}

ZHMTypeInfo SVector4::TypeInfo = ZHMTypeInfo("SVector4", SVector4::WriteJson, SVector4::WriteSimpleJson);

void SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->z;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->w;
	p_Stream << "}";

	p_Stream << "}";
}

void SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << s_Object->z;
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << s_Object->w;

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector4", SMathLerpSaveData_SVector4::WriteJson, SMathLerpSaveData_SVector4::WriteSimpleJson);

void SMathLerpSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpsSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector4", SMathLerpsSaveData_SVector4::WriteJson, SMathLerpsSaveData_SVector4::WriteSimpleJson);

void SMathLerpsSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SVector4") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SVector4::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SVector4::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SHUDPromptDisplayInfo::TypeInfo = ZHMTypeInfo("SHUDPromptDisplayInfo", SHUDPromptDisplayInfo::WriteJson, SHUDPromptDisplayInfo::WriteSimpleJson);

void SHUDPromptDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPromptDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActionPromptState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActionPromptState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nIconId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIconId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTypeId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_eTypeId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoActionAvailable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNoActionAvailable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLabel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sLabel);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sDescription") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sDescription);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sGlyph") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sGlyph);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOpacity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegalItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIllegalItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSuspiciousItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSuspiciousItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropTempHolsterableItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropTempHolsterableItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFontSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFontSize;
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDPromptDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPromptDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActionPromptState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nIconId") << ":";
	p_Stream << s_Object->m_nIconId;
	p_Stream << ",";

	p_Stream << JsonStr("m_eTypeId") << ":";
	p_Stream << s_Object->m_eTypeId;
	p_Stream << ",";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << s_Object->m_fDistance;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowWarning") << ":";
	p_Stream << s_Object->m_bShowWarning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoActionAvailable") << ":";
	p_Stream << s_Object->m_bNoActionAvailable;
	p_Stream << ",";

	p_Stream << JsonStr("m_sLabel") << ":";
	p_Stream << JsonStr(s_Object->m_sLabel);
	p_Stream << ",";

	p_Stream << JsonStr("m_sDescription") << ":";
	p_Stream << JsonStr(s_Object->m_sDescription);
	p_Stream << ",";

	p_Stream << JsonStr("m_sGlyph") << ":";
	p_Stream << JsonStr(s_Object->m_sGlyph);
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << s_Object->m_fOpacity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegalItem") << ":";
	p_Stream << s_Object->m_bIllegalItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSuspiciousItem") << ":";
	p_Stream << s_Object->m_bSuspiciousItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropTempHolsterableItems") << ":";
	p_Stream << s_Object->m_bDropTempHolsterableItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFontSize") << ":";
	p_Stream << s_Object->m_nFontSize;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsActorDeafBlind::TypeInfo = ZHMTypeInfo("SCondition_IsActorDeafBlind", SCondition_IsActorDeafBlind::WriteJson, SCondition_IsActorDeafBlind::WriteSimpleJson);

void SCondition_IsActorDeafBlind::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorDeafBlind*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Actors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_Actors, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsActorDeafBlind::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorDeafBlind*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Actors") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_Actors, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_TargetsNotInSituation::TypeInfo = ZHMTypeInfo("SCondition_TargetsNotInSituation", SCondition_TargetsNotInSituation::WriteJson, SCondition_TargetsNotInSituation::WriteSimpleJson);

void SCondition_TargetsNotInSituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_TargetsNotInSituation*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("targets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->targets, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_TargetsNotInSituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_TargetsNotInSituation*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("targets") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->targets, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZGuid::TypeInfo = ZHMTypeInfo("ZGuid", ZGuid::WriteJson, ZGuid::WriteSimpleJson);

void ZGuid::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuid*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("_a") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->_a;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->_b;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_c") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->_c;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_d") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_d);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_e") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_e);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_f") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_f);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_g") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_g);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_h") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_h);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_i") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_i);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_j") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_j);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_k") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_k);
	p_Stream << "}";

	p_Stream << "}";
}

void ZGuid::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuid*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("_a") << ":";
	p_Stream << s_Object->_a;
	p_Stream << ",";

	p_Stream << JsonStr("_b") << ":";
	p_Stream << s_Object->_b;
	p_Stream << ",";

	p_Stream << JsonStr("_c") << ":";
	p_Stream << s_Object->_c;
	p_Stream << ",";

	p_Stream << JsonStr("_d") << ":";
	p_Stream << static_cast<int>(s_Object->_d);
	p_Stream << ",";

	p_Stream << JsonStr("_e") << ":";
	p_Stream << static_cast<int>(s_Object->_e);
	p_Stream << ",";

	p_Stream << JsonStr("_f") << ":";
	p_Stream << static_cast<int>(s_Object->_f);
	p_Stream << ",";

	p_Stream << JsonStr("_g") << ":";
	p_Stream << static_cast<int>(s_Object->_g);
	p_Stream << ",";

	p_Stream << JsonStr("_h") << ":";
	p_Stream << static_cast<int>(s_Object->_h);
	p_Stream << ",";

	p_Stream << JsonStr("_i") << ":";
	p_Stream << static_cast<int>(s_Object->_i);
	p_Stream << ",";

	p_Stream << JsonStr("_j") << ":";
	p_Stream << static_cast<int>(s_Object->_j);
	p_Stream << ",";

	p_Stream << JsonStr("_k") << ":";
	p_Stream << static_cast<int>(s_Object->_k);

	p_Stream << "}";
}

ZHMTypeInfo SActivity::TypeInfo = ZHMTypeInfo("SActivity", SActivity::WriteJson, SActivity::WriteSimpleJson);

void SActivity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGuid") << "," << JsonStr("$val") << ":";
	ZGuid::WriteJson(&s_Object->id, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("activityId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->activityId);
	p_Stream << "}";

	p_Stream << "}";
}

void SActivity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("id") << ":";
	ZGuid::WriteSimpleJson(&s_Object->id, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("activityId") << ":";
	p_Stream << JsonStr(s_Object->activityId);

	p_Stream << "}";
}

ZHMTypeInfo SActivityExits::TypeInfo = ZHMTypeInfo("SActivityExits", SActivityExits::WriteJson, SActivityExits::WriteSimpleJson);

void SActivityExits::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityExits*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("activity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
	SActivity::WriteJson(&s_Object->activity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exits.size(); ++i)
	{
		auto& s_Item = s_Object->exits[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->exits.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActivityExits::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityExits*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("activity") << ":";
	SActivity::WriteSimpleJson(&s_Object->activity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exits.size(); ++i)
	{
		auto& s_Item = s_Object->exits[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->exits.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ISoundAmbienceGroup::TypeInfo = ZHMTypeInfo("ISoundAmbienceGroup", ISoundAmbienceGroup::WriteJson, ISoundAmbienceGroup::WriteSimpleJson);

void ISoundAmbienceGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundAmbienceGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundAmbienceGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundAmbienceGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector4", SMathMultiplyDivideSaveData_SVector4::WriteJson, SMathMultiplyDivideSaveData_SVector4::WriteSimpleJson);

void SMathMultiplyDivideSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

ZHMTypeInfo SMathMultipliesSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector4", SMathMultipliesSaveData_SVector4::WriteJson, SMathMultipliesSaveData_SVector4::WriteSimpleJson);

void SMathMultipliesSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_SVector4") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_SVector4::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_SVector4::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo S25DProjectionSettingsCurveEntry::TypeInfo = ZHMTypeInfo("S25DProjectionSettingsCurveEntry", S25DProjectionSettingsCurveEntry::WriteJson, S25DProjectionSettingsCurveEntry::WriteSimpleJson);

void S25DProjectionSettingsCurveEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S25DProjectionSettingsCurveEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fValue;
	p_Stream << "}";

	p_Stream << "}";
}

void S25DProjectionSettingsCurveEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S25DProjectionSettingsCurveEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fDistance") << ":";
	p_Stream << s_Object->fDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fValue") << ":";
	p_Stream << s_Object->fValue;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsAccidentVictimDisposable::TypeInfo = ZHMTypeInfo("SCondition_IsAccidentVictimDisposable", SCondition_IsAccidentVictimDisposable::WriteJson, SCondition_IsAccidentVictimDisposable::WriteSimpleJson);

void SCondition_IsAccidentVictimDisposable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAccidentVictimDisposable*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsAccidentVictimDisposable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAccidentVictimDisposable*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SuspiciousItemPickedUp::TypeInfo = ZHMTypeInfo("SCondition_SuspiciousItemPickedUp", SCondition_SuspiciousItemPickedUp::WriteJson, SCondition_SuspiciousItemPickedUp::WriteSimpleJson);

void SCondition_SuspiciousItemPickedUp::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuspiciousItemPickedUp*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->includeWeapons;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SuspiciousItemPickedUp::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuspiciousItemPickedUp*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << s_Object->includeWeapons;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CurrentSetpieceVisualDistractions::TypeInfo = ZHMTypeInfo("SCondition_CurrentSetpieceVisualDistractions", SCondition_CurrentSetpieceVisualDistractions::WriteJson, SCondition_CurrentSetpieceVisualDistractions::WriteSimpleJson);

void SCondition_CurrentSetpieceVisualDistractions::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CurrentSetpieceVisualDistractions*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CurrentSetpieceVisualDistractions::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CurrentSetpieceVisualDistractions*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsItemSuspiciousOnHitman::TypeInfo = ZHMTypeInfo("SCondition_IsItemSuspiciousOnHitman", SCondition_IsItemSuspiciousOnHitman::WriteJson, SCondition_IsItemSuspiciousOnHitman::WriteSimpleJson);

void SCondition_IsItemSuspiciousOnHitman::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsItemSuspiciousOnHitman*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsItemSuspiciousOnHitman::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsItemSuspiciousOnHitman*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IPriorityNode::TypeInfo = ZHMTypeInfo("IPriorityNode", IPriorityNode::WriteJson, IPriorityNode::WriteSimpleJson);

void IPriorityNode::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPriorityNode*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPriorityNode::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPriorityNode*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMusicGridData::TypeInfo = ZHMTypeInfo("SMusicGridData", SMusicGridData::WriteJson, SMusicGridData::WriteSimpleJson);

void SMusicGridData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMusicGridData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fGridDurationSec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridDurationSec;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridOffsetSec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridOffsetSec;
	p_Stream << "}";

	p_Stream << "}";
}

void SMusicGridData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMusicGridData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fGridDurationSec") << ":";
	p_Stream << s_Object->m_fGridDurationSec;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridOffsetSec") << ":";
	p_Stream << s_Object->m_fGridOffsetSec;

	p_Stream << "}";
}

ZHMTypeInfo ZRepositionOrder::TypeInfo = ZHMTypeInfo("ZRepositionOrder", ZRepositionOrder::WriteJson, ZRepositionOrder::WriteSimpleJson);

void ZRepositionOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRepositionOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZRepositionOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRepositionOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCollidingParticle::TypeInfo = ZHMTypeInfo("SCollidingParticle", SCollidingParticle::WriteJson, SCollidingParticle::WriteSimpleJson);

void SCollidingParticle::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollidingParticle*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vNewVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vNewVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nColor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nColor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSize;
	p_Stream << "}";

	p_Stream << "}";
}

void SCollidingParticle::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollidingParticle*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vNewVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_vNewVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nColor") << ":";
	p_Stream << s_Object->m_nColor;
	p_Stream << ",";

	p_Stream << JsonStr("m_fSize") << ":";
	p_Stream << s_Object->m_fSize;

	p_Stream << "}";
}

ZHMTypeInfo IActorPickerFilter::TypeInfo = ZHMTypeInfo("IActorPickerFilter", IActorPickerFilter::WriteJson, IActorPickerFilter::WriteSimpleJson);

void IActorPickerFilter::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorPickerFilter*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorPickerFilter::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorPickerFilter*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IEntityGroupTargetProxy::TypeInfo = ZHMTypeInfo("IEntityGroupTargetProxy", IEntityGroupTargetProxy::WriteJson, IEntityGroupTargetProxy::WriteSimpleJson);

void IEntityGroupTargetProxy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEntityGroupTargetProxy*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEntityGroupTargetProxy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEntityGroupTargetProxy*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SRepositionOrderSaveData::TypeInfo = ZHMTypeInfo("SRepositionOrderSaveData", SRepositionOrderSaveData::WriteJson, SRepositionOrderSaveData::WriteSimpleJson);

void SRepositionOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRepositionOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bStrafe") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStrafe;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAtTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAimAtTarget;
	p_Stream << "}";

	p_Stream << "}";
}

void SRepositionOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRepositionOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bStrafe") << ":";
	p_Stream << s_Object->m_bStrafe;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAtTarget") << ":";
	p_Stream << s_Object->m_bAimAtTarget;

	p_Stream << "}";
}

ZHMTypeInfo SSecuritySystemCameraSaveData::TypeInfo = ZHMTypeInfo("SSecuritySystemCameraSaveData", SSecuritySystemCameraSaveData::WriteJson, SSecuritySystemCameraSaveData::WriteSimpleJson);

void SSecuritySystemCameraSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSecuritySystemCameraSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEscalation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEscalation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFunctional;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasEnteredOnce") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasEnteredOnce;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasInvestigated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << "}";

	p_Stream << "}";
}

void SSecuritySystemCameraSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSecuritySystemCameraSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEscalation") << ":";
	p_Stream << s_Object->m_nEscalation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << s_Object->m_bIsFunctional;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasEnteredOnce") << ":";
	p_Stream << s_Object->m_bHasEnteredOnce;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasInvestigated") << ":";
	p_Stream << s_Object->m_bWasInvestigated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << s_Object->m_bDestroyed;

	p_Stream << "}";
}

ZHMTypeInfo SVector3::TypeInfo = ZHMTypeInfo("SVector3", SVector3::WriteJson, SVector3::WriteSimpleJson);

void SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->z;
	p_Stream << "}";

	p_Stream << "}";
}

void SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << s_Object->z;

	p_Stream << "}";
}

ZHMTypeInfo SSpatialSaveData::TypeInfo = ZHMTypeInfo("SSpatialSaveData", SSpatialSaveData::WriteJson, SSpatialSaveData::WriteSimpleJson);

void SSpatialSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpatialSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternionRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vQuaternionRotation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSpatialSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpatialSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternionRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vQuaternionRotation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasGoalOnTarget::TypeInfo = ZHMTypeInfo("SCondition_HasGoalOnTarget", SCondition_HasGoalOnTarget::WriteJson, SCondition_HasGoalOnTarget::WriteSimpleJson);

void SCondition_HasGoalOnTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasGoalOnTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIGoal") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasGoalOnTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasGoalOnTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo ITimerEventListener::TypeInfo = ZHMTypeInfo("ITimerEventListener", ITimerEventListener::WriteJson, ITimerEventListener::WriteSimpleJson);

void ITimerEventListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITimerEventListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITimerEventListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITimerEventListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IContractEvaluationContextListener::TypeInfo = ZHMTypeInfo("IContractEvaluationContextListener", IContractEvaluationContextListener::WriteJson, IContractEvaluationContextListener::WriteSimpleJson);

void IContractEvaluationContextListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractEvaluationContextListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContractEvaluationContextListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractEvaluationContextListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZChallengesManager::TypeInfo = ZHMTypeInfo("ZChallengesManager", ZChallengesManager::WriteJson, ZChallengesManager::WriteSimpleJson);

void ZChallengesManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZChallengesManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZChallengesManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZChallengesManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CanArrestReasonEscalateTo::TypeInfo = ZHMTypeInfo("SCondition_CanArrestReasonEscalateTo", SCondition_CanArrestReasonEscalateTo::WriteJson, SCondition_CanArrestReasonEscalateTo::WriteSimpleJson);

void SCondition_CanArrestReasonEscalateTo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanArrestReasonEscalateTo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("targets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->targets, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("reason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->reason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->reason))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CanArrestReasonEscalateTo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanArrestReasonEscalateTo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("targets") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->targets, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("reason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->reason)));

	p_Stream << "}";
}

ZHMTypeInfo ZRuntimeResourceID::TypeInfo = ZHMTypeInfo("ZRuntimeResourceID", ZRuntimeResourceID::WriteJson, ZRuntimeResourceID::WriteSimpleJson);

void ZRuntimeResourceID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRuntimeResourceID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_IDHigh") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IDHigh;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IDLow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IDLow;
	p_Stream << "}";

	p_Stream << "}";
}

void ZRuntimeResourceID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRuntimeResourceID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_IDHigh") << ":";
	p_Stream << s_Object->m_IDHigh;
	p_Stream << ",";

	p_Stream << JsonStr("m_IDLow") << ":";
	p_Stream << s_Object->m_IDLow;

	p_Stream << "}";
}

ZHMTypeInfo SWeaponStatusUIData::TypeInfo = ZHMTypeInfo("SWeaponStatusUIData", SWeaponStatusUIData::WriteJson, SWeaponStatusUIData::WriteSimpleJson);

void SWeaponStatusUIData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWeaponStatusUIData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->containedIcon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sWeaponName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sWeaponName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContainedItemName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContainedItemName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSilenced") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSilenced;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsFirearm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsFirearm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHolstered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHolstered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bCannotBeHolstered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bCannotBeHolstered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bCanReload") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bCanReload;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsReloading") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsReloading;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fReloadDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fReloadDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInfiniteAmmo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInfiniteAmmo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsContainer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsContainer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainsItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainsItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fLastBulletFiredTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fLastBulletFiredTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fTimeBetweenBullets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fTimeBetweenBullets;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aPerks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aPerks.size(); ++i)
	{
		auto& s_Item = s_Object->aPerks[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->aPerks.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAmmoTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAmmoTypes.size(); ++i)
	{
		auto& s_Item = s_Object->aAmmoTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->aAmmoTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("nCurrentAmmoType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nCurrentAmmoType;
	p_Stream << "}";

	p_Stream << "}";
}

void SWeaponStatusUIData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWeaponStatusUIData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->containedIcon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("sWeaponName") << ":";
	p_Stream << JsonStr(s_Object->sWeaponName);
	p_Stream << ",";

	p_Stream << JsonStr("sContainedItemName") << ":";
	p_Stream << JsonStr(s_Object->sContainedItemName);
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << ",";

	p_Stream << JsonStr("bSilenced") << ":";
	p_Stream << s_Object->bSilenced;
	p_Stream << ",";

	p_Stream << JsonStr("bIsFirearm") << ":";
	p_Stream << s_Object->bIsFirearm;
	p_Stream << ",";

	p_Stream << JsonStr("bHolstered") << ":";
	p_Stream << s_Object->bHolstered;
	p_Stream << ",";

	p_Stream << JsonStr("bCannotBeHolstered") << ":";
	p_Stream << s_Object->bCannotBeHolstered;
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("bCanReload") << ":";
	p_Stream << s_Object->bCanReload;
	p_Stream << ",";

	p_Stream << JsonStr("bIsReloading") << ":";
	p_Stream << s_Object->bIsReloading;
	p_Stream << ",";

	p_Stream << JsonStr("fReloadDuration") << ":";
	p_Stream << s_Object->fReloadDuration;
	p_Stream << ",";

	p_Stream << JsonStr("bInfiniteAmmo") << ":";
	p_Stream << s_Object->bInfiniteAmmo;
	p_Stream << ",";

	p_Stream << JsonStr("bIsContainer") << ":";
	p_Stream << s_Object->bIsContainer;
	p_Stream << ",";

	p_Stream << JsonStr("bContainsItem") << ":";
	p_Stream << s_Object->bContainsItem;
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << ",";

	p_Stream << JsonStr("fLastBulletFiredTime") << ":";
	p_Stream << s_Object->fLastBulletFiredTime;
	p_Stream << ",";

	p_Stream << JsonStr("fTimeBetweenBullets") << ":";
	p_Stream << s_Object->fTimeBetweenBullets;
	p_Stream << ",";

	p_Stream << JsonStr("aPerks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aPerks.size(); ++i)
	{
		auto& s_Item = s_Object->aPerks[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->aPerks.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAmmoTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAmmoTypes.size(); ++i)
	{
		auto& s_Item = s_Object->aAmmoTypes[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->aAmmoTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("nCurrentAmmoType") << ":";
	p_Stream << s_Object->nCurrentAmmoType;

	p_Stream << "}";
}

ZHMTypeInfo IActorPickerEffect::TypeInfo = ZHMTypeInfo("IActorPickerEffect", IActorPickerEffect::WriteJson, IActorPickerEffect::WriteSimpleJson);

void IActorPickerEffect::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorPickerEffect*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorPickerEffect::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorPickerEffect*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SEntityTemplatePropertyAlias::TypeInfo = ZHMTypeInfo("SEntityTemplatePropertyAlias", SEntityTemplatePropertyAlias::WriteJson, SEntityTemplatePropertyAlias::WriteSimpleJson);

void SEntityTemplatePropertyAlias::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePropertyAlias*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sAliasName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sAliasName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sPropertyName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sPropertyName);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePropertyAlias::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePropertyAlias*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sAliasName") << ":";
	p_Stream << JsonStr(s_Object->sAliasName);
	p_Stream << ",";

	p_Stream << JsonStr("entityID") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << ",";

	p_Stream << JsonStr("sPropertyName") << ":";
	p_Stream << JsonStr(s_Object->sPropertyName);

	p_Stream << "}";
}

ZHMTypeInfo IScreenplayRole::TypeInfo = ZHMTypeInfo("IScreenplayRole", IScreenplayRole::WriteJson, IScreenplayRole::WriteSimpleJson);

void IScreenplayRole::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IScreenplayRole*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IScreenplayRole::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IScreenplayRole*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CombatSituationsThatCanDiscardCombatants::TypeInfo = ZHMTypeInfo("SCondition_CombatSituationsThatCanDiscardCombatants", SCondition_CombatSituationsThatCanDiscardCombatants::WriteJson, SCondition_CombatSituationsThatCanDiscardCombatants::WriteSimpleJson);

void SCondition_CombatSituationsThatCanDiscardCombatants::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CombatSituationsThatCanDiscardCombatants*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatSituations") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_CombatSituations, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CombatSituationsThatCanDiscardCombatants::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CombatSituationsThatCanDiscardCombatants*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatSituations") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_CombatSituations, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZDynamicObject::TypeInfo = ZHMTypeInfo("ZDynamicObject", ZDynamicObject::WriteJson, ZDynamicObject::WriteSimpleJson);

void ZDynamicObject::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDynamicObject*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZDynamicObject::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDynamicObject*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_value") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_value, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SChallengeSaveData::TypeInfo = ZHMTypeInfo("SChallengeSaveData", SChallengeSaveData::WriteJson, SChallengeSaveData::WriteSimpleJson);

void SChallengeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChallengeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_State") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_State, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SChallengeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChallengeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sId") << ":";
	p_Stream << JsonStr(s_Object->m_sId);
	p_Stream << ",";

	p_Stream << JsonStr("m_State") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_State, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SDrama2ActorSaveState::TypeInfo = ZHMTypeInfo("SDrama2ActorSaveState", SDrama2ActorSaveState::WriteJson, SDrama2ActorSaveState::WriteSimpleJson);

void SDrama2ActorSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2ActorSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSpeaking;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOwnsCurrentBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOwnsCurrentBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequired") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRequired;
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2ActorSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2ActorSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << s_Object->m_bIsSpeaking;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOwnsCurrentBehavior") << ":";
	p_Stream << s_Object->m_bOwnsCurrentBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequired") << ":";
	p_Stream << s_Object->m_bRequired;

	p_Stream << "}";
}

ZHMTypeInfo IParticleModifierEntity::TypeInfo = ZHMTypeInfo("IParticleModifierEntity", IParticleModifierEntity::WriteJson, IParticleModifierEntity::WriteSimpleJson);

void IParticleModifierEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleModifierEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IParticleModifierEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleModifierEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CombatSituationsStandingDown::TypeInfo = ZHMTypeInfo("SCondition_CombatSituationsStandingDown", SCondition_CombatSituationsStandingDown::WriteJson, SCondition_CombatSituationsStandingDown::WriteSimpleJson);

void SCondition_CombatSituationsStandingDown::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CombatSituationsStandingDown*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatSituations") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_CombatSituations, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CombatSituationsStandingDown::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CombatSituationsStandingDown*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatSituations") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_CombatSituations, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SSpatialMoverEntitySaveData::TypeInfo = ZHMTypeInfo("SSpatialMoverEntitySaveData", SSpatialMoverEntitySaveData::WriteJson, SSpatialMoverEntitySaveData::WriteSimpleJson);

void SSpatialMoverEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpatialMoverEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBackwards") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBackwards;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFrameUpdateRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFrameUpdateRegistered;
	p_Stream << "}";

	p_Stream << "}";
}

void SSpatialMoverEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpatialMoverEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSpeed") << ":";
	p_Stream << s_Object->m_fSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBackwards") << ":";
	p_Stream << s_Object->m_bBackwards;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFrameUpdateRegistered") << ":";
	p_Stream << s_Object->m_bIsFrameUpdateRegistered;

	p_Stream << "}";
}

ZHMTypeInfo SLayerBehaviorConfiguration::TypeInfo = ZHMTypeInfo("SLayerBehaviorConfiguration", SLayerBehaviorConfiguration::WriteJson, SLayerBehaviorConfiguration::WriteSimpleJson);

void SLayerBehaviorConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLayerBehaviorConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bTrigger") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTrigger;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollector") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCollector;
	p_Stream << "}";

	p_Stream << "}";
}

void SLayerBehaviorConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLayerBehaviorConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bTrigger") << ":";
	p_Stream << s_Object->m_bTrigger;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollector") << ":";
	p_Stream << s_Object->m_bCollector;

	p_Stream << "}";
}

ZHMTypeInfo ZRepositoryID::TypeInfo = ZHMTypeInfo("ZRepositoryID", ZRepositoryID::WriteJson, ZRepositoryID::WriteSimpleJson);

void ZRepositoryID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRepositoryID*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZRepositoryID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRepositoryID*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SInventoryItem::TypeInfo = ZHMTypeInfo("SInventoryItem", SInventoryItem::WriteJson, SInventoryItem::WriteSimpleJson);

void SInventoryItem::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryItem*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sInstanceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sInstanceId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sUnlockableId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sUnlockableId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("repositoryId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->repositoryId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aRepositoryAssetIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRepositoryAssetIds.size(); ++i)
	{
		auto& s_Item = s_Object->aRepositoryAssetIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aRepositoryAssetIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aModifierIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aModifierIds.size(); ++i)
	{
		auto& s_Item = s_Object->aModifierIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aModifierIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SInventoryItem::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryItem*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sInstanceId") << ":";
	p_Stream << JsonStr(s_Object->sInstanceId);
	p_Stream << ",";

	p_Stream << JsonStr("sUnlockableId") << ":";
	p_Stream << JsonStr(s_Object->sUnlockableId);
	p_Stream << ",";

	p_Stream << JsonStr("repositoryId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->repositoryId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("aRepositoryAssetIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRepositoryAssetIds.size(); ++i)
	{
		auto& s_Item = s_Object->aRepositoryAssetIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->aRepositoryAssetIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aModifierIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aModifierIds.size(); ++i)
	{
		auto& s_Item = s_Object->aModifierIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->aModifierIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SContainerItemInfo::TypeInfo = ZHMTypeInfo("SContainerItemInfo", SContainerItemInfo::WriteJson, SContainerItemInfo::WriteSimpleJson);

void SContainerItemInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContainerItemInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sContainerInstanceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sContainerInstanceId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_concealedItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryItem") << "," << JsonStr("$val") << ":";
	SInventoryItem::WriteJson(&s_Object->m_concealedItem, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SContainerItemInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContainerItemInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sContainerInstanceId") << ":";
	p_Stream << JsonStr(s_Object->m_sContainerInstanceId);
	p_Stream << ",";

	p_Stream << JsonStr("m_concealedItem") << ":";
	SInventoryItem::WriteSimpleJson(&s_Object->m_concealedItem, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SInventoryInfo::TypeInfo = ZHMTypeInfo("SInventoryInfo", SInventoryInfo::WriteJson, SInventoryInfo::WriteSimpleJson);

void SInventoryInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aPockets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPockets.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPockets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryItem") << "," << JsonStr("$val") << ":";
		SInventoryItem::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPockets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_CarriedItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryItem") << "," << JsonStr("$val") << ":";
	SInventoryItem::WriteJson(&s_Object->m_CarriedItem, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aContainerItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aContainerItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aContainerItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SContainerItemInfo") << "," << JsonStr("$val") << ":";
		SContainerItemInfo::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aContainerItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SInventoryInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aPockets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPockets.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPockets[i];
		SInventoryItem::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aPockets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_CarriedItem") << ":";
	SInventoryItem::WriteSimpleJson(&s_Object->m_CarriedItem, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aContainerItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aContainerItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aContainerItems[i];
		SContainerItemInfo::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aContainerItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZRayQueryInput::TypeInfo = ZHMTypeInfo("ZRayQueryInput", ZRayQueryInput::WriteJson, ZRayQueryInput::WriteSimpleJson);

void ZRayQueryInput::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRayQueryInput*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZRayQueryInput::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRayQueryInput*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IHM5AttentionDevice::TypeInfo = ZHMTypeInfo("IHM5AttentionDevice", IHM5AttentionDevice::WriteJson, IHM5AttentionDevice::WriteSimpleJson);

void IHM5AttentionDevice::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5AttentionDevice*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5AttentionDevice::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5AttentionDevice*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZCautiousInvestigateGroup::TypeInfo = ZHMTypeInfo("ZCautiousInvestigateGroup", ZCautiousInvestigateGroup::WriteJson, ZCautiousInvestigateGroup::WriteSimpleJson);

void ZCautiousInvestigateGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCautiousInvestigateGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZCautiousInvestigateGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCautiousInvestigateGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SContextActionSaveData::TypeInfo = ZHMTypeInfo("SContextActionSaveData", SContextActionSaveData::WriteJson, SContextActionSaveData::WriteSimpleJson);

void SContextActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContextActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShouldShow;
	p_Stream << "}";

	p_Stream << "}";
}

void SContextActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContextActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggered") << ":";
	p_Stream << s_Object->m_bTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldShow") << ":";
	p_Stream << s_Object->m_bShouldShow;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsInSniperIsland::TypeInfo = ZHMTypeInfo("SCondition_IsInSniperIsland", SCondition_IsInSniperIsland::WriteJson, SCondition_IsInSniperIsland::WriteSimpleJson);

void SCondition_IsInSniperIsland::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsInSniperIsland*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("a0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a0, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsInSniperIsland::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsInSniperIsland*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("a0") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a0, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZGuardPointOrder::TypeInfo = ZHMTypeInfo("ZGuardPointOrder", ZGuardPointOrder::WriteJson, ZGuardPointOrder::WriteSimpleJson);

void ZGuardPointOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuardPointOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGuardPointOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuardPointOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorThrowSaveData::TypeInfo = ZHMTypeInfo("SActorThrowSaveData", SActorThrowSaveData::WriteJson, SActorThrowSaveData::WriteSimpleJson);

void SActorThrowSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorThrowSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vStartPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vStartPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vEndPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vEndPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vItemVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vItemVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistance;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorThrowSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorThrowSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_vStartPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vStartPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vEndPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vEndPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vItemVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_vItemVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << s_Object->m_fDistance;

	p_Stream << "}";
}

ZHMTypeInfo SIntelListDisplayInfo::TypeInfo = ZHMTypeInfo("SIntelListDisplayInfo", SIntelListDisplayInfo::WriteJson, SIntelListDisplayInfo::WriteSimpleJson);

void SIntelListDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelListDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("index") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->index;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->active;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("newInfo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->newInfo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelListDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelListDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("index") << ":";
	p_Stream << s_Object->index;
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << s_Object->active;
	p_Stream << ",";

	p_Stream << JsonStr("newInfo") << ":";
	p_Stream << s_Object->newInfo;
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);

	p_Stream << "}";
}

ZHMTypeInfo ZCharacterStateBase::TypeInfo = ZHMTypeInfo("ZCharacterStateBase", ZCharacterStateBase::WriteJson, ZCharacterStateBase::WriteSimpleJson);

void ZCharacterStateBase::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCharacterStateBase*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZCharacterStateBase::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCharacterStateBase*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IEngineMode::TypeInfo = ZHMTypeInfo("IEngineMode", IEngineMode::WriteJson, IEngineMode::WriteSimpleJson);

void IEngineMode::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEngineMode*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEngineMode::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEngineMode*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_FindStashPointsForItem::TypeInfo = ZHMTypeInfo("SCondition_FindStashPointsForItem", SCondition_FindStashPointsForItem::WriteJson, SCondition_FindStashPointsForItem::WriteSimpleJson);

void SCondition_FindStashPointsForItem::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_FindStashPointsForItem*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_FindStashPointsForItem::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_FindStashPointsForItem*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SFSMSaveData::TypeInfo = ZHMTypeInfo("SFSMSaveData", SFSMSaveData::WriteJson, SFSMSaveData::WriteSimpleJson);

void SFSMSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFSMSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eStateStatus") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EFSMStateStatus") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStateStatus) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EFSMStateStatus", static_cast<int>(s_Object->m_eStateStatus))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_state;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_prevState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_prevState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tCurrentStateEnterTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tCurrentStateEnterTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SFSMSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFSMSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eStateStatus") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EFSMStateStatus", static_cast<int>(s_Object->m_eStateStatus)));
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << s_Object->m_state;
	p_Stream << ",";

	p_Stream << JsonStr("m_prevState") << ":";
	p_Stream << s_Object->m_prevState;
	p_Stream << ",";

	p_Stream << JsonStr("m_tCurrentStateEnterTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tCurrentStateEnterTime, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SGetHelpGroupSaveData::TypeInfo = ZHMTypeInfo("SGetHelpGroupSaveData", SGetHelpGroupSaveData::WriteJson, SGetHelpGroupSaveData::WriteSimpleJson);

void SGetHelpGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vLastKnownTargetPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vLastKnownTargetPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rReturnNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rReturnNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_blocked") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_blocked.size(); ++i)
	{
		auto& s_Item = s_Object->m_blocked[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_blocked.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportingToHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReportingToHitman;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStartedReportDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStartedReportDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMultipleBodies") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMultipleBodies;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGetHelpOrderCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGetHelpOrderCompleted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDoneReporting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDoneReporting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tGetHelpCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tGetHelpCompleted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pReporter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pReporter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IllegalItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IllegalItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_additionalGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_additionalGuards.size(); ++i)
	{
		auto& s_Item = s_Object->m_additionalGuards[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_additionalGuards.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGetHelpGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vLastKnownTargetPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vLastKnownTargetPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rReturnNode") << ":";
	p_Stream << s_Object->m_rReturnNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_blocked") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_blocked.size(); ++i)
	{
		auto& s_Item = s_Object->m_blocked[i];
		p_Stream << s_Item;

		if (i < s_Object->m_blocked.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportingToHitman") << ":";
	p_Stream << s_Object->m_bReportingToHitman;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStartedReportDialog") << ":";
	p_Stream << s_Object->m_bStartedReportDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMultipleBodies") << ":";
	p_Stream << s_Object->m_bMultipleBodies;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGetHelpOrderCompleted") << ":";
	p_Stream << s_Object->m_bGetHelpOrderCompleted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDoneReporting") << ":";
	p_Stream << s_Object->m_bDoneReporting;
	p_Stream << ",";

	p_Stream << JsonStr("m_tGetHelpCompleted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tGetHelpCompleted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type)));
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_pReporter") << ":";
	p_Stream << s_Object->m_pReporter;
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuard") << ":";
	p_Stream << s_Object->m_pGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_IllegalItem") << ":";
	p_Stream << s_Object->m_IllegalItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_additionalGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_additionalGuards.size(); ++i)
	{
		auto& s_Item = s_Object->m_additionalGuards[i];
		p_Stream << s_Item;

		if (i < s_Object->m_additionalGuards.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_ActorsNotInSituation::TypeInfo = ZHMTypeInfo("SCondition_ActorsNotInSituation", SCondition_ActorsNotInSituation::WriteJson, SCondition_ActorsNotInSituation::WriteSimpleJson);

void SCondition_ActorsNotInSituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_ActorsNotInSituation*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("actors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actors, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_ActorsNotInSituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_ActorsNotInSituation*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("actors") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actors, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsCurrent::TypeInfo = ZHMTypeInfo("SCondition_IsCurrent", SCondition_IsCurrent::WriteJson, SCondition_IsCurrent::WriteSimpleJson);

void SCondition_IsCurrent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsCurrent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAndUnhandled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAndUnhandled;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsCurrent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsCurrent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("nAndUnhandled") << ":";
	p_Stream << s_Object->nAndUnhandled;

	p_Stream << "}";
}

ZHMTypeInfo SShotListenerSaveData::TypeInfo = ZHMTypeInfo("SShotListenerSaveData", SShotListenerSaveData::WriteJson, SShotListenerSaveData::WriteSimpleJson);

void SShotListenerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SShotListenerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNPCShotProcessed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNPCShotProcessed;
	p_Stream << "}";

	p_Stream << "}";
}

void SShotListenerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SShotListenerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNPCShotProcessed") << ":";
	p_Stream << s_Object->m_bNPCShotProcessed;

	p_Stream << "}";
}

ZHMTypeInfo SShotListenersSaveData::TypeInfo = ZHMTypeInfo("SShotListenersSaveData", SShotListenersSaveData::WriteJson, SShotListenersSaveData::WriteSimpleJson);

void SShotListenersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SShotListenersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SShotListenerSaveData") << "," << JsonStr("$val") << ":";
		SShotListenerSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SShotListenersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SShotListenersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SShotListenerSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZSentryOrder::TypeInfo = ZHMTypeInfo("ZSentryOrder", ZSentryOrder::WriteJson, ZSentryOrder::WriteSimpleJson);

void ZSentryOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSentryOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSentryOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSentryOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MinSharedEventAge::TypeInfo = ZHMTypeInfo("SCondition_MinSharedEventAge", SCondition_MinSharedEventAge::WriteJson, SCondition_MinSharedEventAge::WriteSimpleJson);

void SCondition_MinSharedEventAge::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinSharedEventAge*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("age") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->age;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MinSharedEventAge::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinSharedEventAge*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("age") << ":";
	p_Stream << s_Object->age;

	p_Stream << "}";
}

ZHMTypeInfo SVariantStruct::TypeInfo = ZHMTypeInfo("SVariantStruct", SVariantStruct::WriteJson, SVariantStruct::WriteSimpleJson);

void SVariantStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVariantStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Data, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SVariantStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVariantStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Data") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Data, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IActListener::TypeInfo = ZHMTypeInfo("IActListener", IActListener::WriteJson, IActListener::WriteSimpleJson);

void IActListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsEqual::TypeInfo = ZHMTypeInfo("SCondition_IsEqual", SCondition_IsEqual::WriteJson, SCondition_IsEqual::WriteSimpleJson);

void SCondition_IsEqual::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsEqual*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("a") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->b, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsEqual::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsEqual*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("a") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->b, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SBehaviorTreeEntityReference::TypeInfo = ZHMTypeInfo("SBehaviorTreeEntityReference", SBehaviorTreeEntityReference::WriteJson, SBehaviorTreeEntityReference::WriteSimpleJson);

void SBehaviorTreeEntityReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEntityReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bList") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bList;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEntityReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEntityReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bList") << ":";
	p_Stream << s_Object->m_bList;
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);

	p_Stream << "}";
}

ZHMTypeInfo SBehaviorTreeInfo::TypeInfo = ZHMTypeInfo("SBehaviorTreeInfo", SBehaviorTreeInfo::WriteJson, SBehaviorTreeInfo::WriteSimpleJson);

void SBehaviorTreeInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_references.size(); ++i)
	{
		auto& s_Item = s_Object->m_references[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBehaviorTreeEntityReference") << "," << JsonStr("$val") << ":";
		SBehaviorTreeEntityReference::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_references.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_inputPinConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_inputPinConditions.size(); ++i)
	{
		auto& s_Item = s_Object->m_inputPinConditions[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBehaviorTreeInputPinCondition") << "," << JsonStr("$val") << ":";
		SBehaviorTreeInputPinCondition::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_inputPinConditions.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_references.size(); ++i)
	{
		auto& s_Item = s_Object->m_references[i];
		SBehaviorTreeEntityReference::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_references.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_inputPinConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_inputPinConditions.size(); ++i)
	{
		auto& s_Item = s_Object->m_inputPinConditions[i];
		SBehaviorTreeInputPinCondition::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_inputPinConditions.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsOfActorRole::TypeInfo = ZHMTypeInfo("SCondition_IsOfActorRole", SCondition_IsOfActorRole::WriteJson, SCondition_IsOfActorRole::WriteSimpleJson);

void SCondition_IsOfActorRole::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOfActorRole*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eRole") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorRole") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eRole) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorRole", static_cast<int>(s_Object->eRole))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsOfActorRole::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOfActorRole*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("eRole") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorRole", static_cast<int>(s_Object->eRole)));

	p_Stream << "}";
}

ZHMTypeInfo IMiddleGrayCurveEntity::TypeInfo = ZHMTypeInfo("IMiddleGrayCurveEntity", IMiddleGrayCurveEntity::WriteJson, IMiddleGrayCurveEntity::WriteSimpleJson);

void IMiddleGrayCurveEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMiddleGrayCurveEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMiddleGrayCurveEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMiddleGrayCurveEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZFleeOrder::TypeInfo = ZHMTypeInfo("ZFleeOrder", ZFleeOrder::WriteJson, ZFleeOrder::WriteSimpleJson);

void ZFleeOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZFleeOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZFleeOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZFleeOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SComboDeviceBinding::TypeInfo = ZHMTypeInfo("SComboDeviceBinding", SComboDeviceBinding::WriteJson, SComboDeviceBinding::WriteSimpleJson);

void SComboDeviceBinding::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SComboDeviceBinding*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->type;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("button") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->button;
	p_Stream << "}";

	p_Stream << "}";
}

void SComboDeviceBinding::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SComboDeviceBinding*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << s_Object->type;
	p_Stream << ",";

	p_Stream << JsonStr("button") << ":";
	p_Stream << s_Object->button;

	p_Stream << "}";
}

ZHMTypeInfo ZPatrolOrder::TypeInfo = ZHMTypeInfo("ZPatrolOrder", ZPatrolOrder::WriteJson, ZPatrolOrder::WriteSimpleJson);

void ZPatrolOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPatrolOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPatrolOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPatrolOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZActOrder::TypeInfo = ZHMTypeInfo("ZActOrder", ZActOrder::WriteJson, ZActOrder::WriteSimpleJson);

void ZActOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZActOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZActOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZActOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMatrix33::TypeInfo = ZHMTypeInfo("SMatrix33", SMatrix33::WriteJson, SMatrix33::WriteSimpleJson);

void SMatrix33::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix33*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("XAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->XAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->YAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->ZAxis, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix33::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix33*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("XAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->XAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->YAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->ZAxis, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IControllableCharacter::TypeInfo = ZHMTypeInfo("IControllableCharacter", IControllableCharacter::WriteJson, IControllableCharacter::WriteSimpleJson);

void IControllableCharacter::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IControllableCharacter*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IControllableCharacter::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IControllableCharacter*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCrowdBodySaveData::TypeInfo = ZHMTypeInfo("SCrowdBodySaveData", SCrowdBodySaveData::WriteJson, SCrowdBodySaveData::WriteSimpleJson);

void SCrowdBodySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdBodySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pCorpseBodybagEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pCorpseBodybagEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCrowdEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCrowdEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iActorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iActorIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rPerceptibleEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rPerceptibleEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aKnownBy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownBy.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKnownBy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aKnownBy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bManaged") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bManaged;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBagSharedKnowledge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBagSharedKnowledge;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdBodySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdBodySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pCorpseBodybagEntity") << ":";
	p_Stream << s_Object->m_pCorpseBodybagEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCrowdEntity") << ":";
	p_Stream << s_Object->m_rCrowdEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_iActorIndex") << ":";
	p_Stream << s_Object->m_iActorIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_rPerceptibleEntity") << ":";
	p_Stream << s_Object->m_rPerceptibleEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_aKnownBy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownBy.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKnownBy[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aKnownBy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bManaged") << ":";
	p_Stream << s_Object->m_bManaged;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBagSharedKnowledge") << ":";
	p_Stream << s_Object->m_rBagSharedKnowledge;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_InSituation::TypeInfo = ZHMTypeInfo("SCondition_InSituation", SCondition_InSituation::WriteJson, SCondition_InSituation::WriteSimpleJson);

void SCondition_InSituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_InSituation*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_InSituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_InSituation*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo SMovementLadderSaveData::TypeInfo = ZHMTypeInfo("SMovementLadderSaveData", SMovementLadderSaveData::WriteJson, SMovementLadderSaveData::WriteSimpleJson);

void SMovementLadderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementLadderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rLadder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rLadder;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementLadderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementLadderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rLadder") << ":";
	p_Stream << s_Object->m_rLadder;

	p_Stream << "}";
}

ZHMTypeInfo SAIModifierServiceActorSaveData::TypeInfo = ZHMTypeInfo("SAIModifierServiceActorSaveData", SAIModifierServiceActorSaveData::WriteJson, SAIModifierServiceActorSaveData::WriteSimpleJson);

void SAIModifierServiceActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIModifierServiceActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActorRef;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsVolumeUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNeedsVolumeUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsKnowledgeUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNeedsKnowledgeUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModVolume") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModVolume;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModRole") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModRole;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModOutfit;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOverride") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModOverride;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModStatus") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModStatus;
	p_Stream << "}";

	p_Stream << "}";
}

void SAIModifierServiceActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIModifierServiceActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << s_Object->m_rActorRef;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsVolumeUpdate") << ":";
	p_Stream << s_Object->m_bNeedsVolumeUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsKnowledgeUpdate") << ":";
	p_Stream << s_Object->m_bNeedsKnowledgeUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModVolume") << ":";
	p_Stream << s_Object->m_uiModVolume;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModBehavior") << ":";
	p_Stream << s_Object->m_uiModBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModRole") << ":";
	p_Stream << s_Object->m_uiModRole;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModItem") << ":";
	p_Stream << s_Object->m_uiModItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModSituation") << ":";
	p_Stream << s_Object->m_uiModSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOutfit") << ":";
	p_Stream << s_Object->m_uiModOutfit;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOverride") << ":";
	p_Stream << s_Object->m_uiModOverride;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModStatus") << ":";
	p_Stream << s_Object->m_uiModStatus;

	p_Stream << "}";
}

ZHMTypeInfo SAIModifierServiceSaveData::TypeInfo = ZHMTypeInfo("SAIModifierServiceSaveData", SAIModifierServiceSaveData::WriteJson, SAIModifierServiceSaveData::WriteSimpleJson);

void SAIModifierServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIModifierServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bFullVolumeUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFullVolumeUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAIModifierServiceActorSaveData") << "," << JsonStr("$val") << ":";
		SAIModifierServiceActorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAIModifierServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIModifierServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bFullVolumeUpdate") << ":";
	p_Stream << s_Object->m_bFullVolumeUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		SAIModifierServiceActorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ISoundGateController::TypeInfo = ZHMTypeInfo("ISoundGateController", ISoundGateController::WriteJson, ISoundGateController::WriteSimpleJson);

void ISoundGateController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundGateController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundGateController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundGateController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsAccidentScaleContext::TypeInfo = ZHMTypeInfo("SCondition_IsAccidentScaleContext", SCondition_IsAccidentScaleContext::WriteJson, SCondition_IsAccidentScaleContext::WriteSimpleJson);

void SCondition_IsAccidentScaleContext::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAccidentScaleContext*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("scaleContextType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAccidentScaleContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->scaleContextType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAccidentScaleContext", static_cast<int>(s_Object->scaleContextType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsAccidentScaleContext::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAccidentScaleContext*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("scaleContextType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAccidentScaleContext", static_cast<int>(s_Object->scaleContextType)));

	p_Stream << "}";
}

ZHMTypeInfo ZDialogEventItemTypedIndex::TypeInfo = ZHMTypeInfo("ZDialogEventItemTypedIndex", ZDialogEventItemTypedIndex::WriteJson, ZDialogEventItemTypedIndex::WriteSimpleJson);

void ZDialogEventItemTypedIndex::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDialogEventItemTypedIndex*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZDialogEventItemTypedIndex::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDialogEventItemTypedIndex*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IItemWeapon::TypeInfo = ZHMTypeInfo("IItemWeapon", IItemWeapon::WriteJson, IItemWeapon::WriteSimpleJson);

void IItemWeapon::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemWeapon*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IItemWeapon::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemWeapon*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ICubemapProbeEntity::TypeInfo = ZHMTypeInfo("ICubemapProbeEntity", ICubemapProbeEntity::WriteJson, ICubemapProbeEntity::WriteSimpleJson);

void ICubemapProbeEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICubemapProbeEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICubemapProbeEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICubemapProbeEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsCurrentDistractionTarget::TypeInfo = ZHMTypeInfo("SCondition_IsCurrentDistractionTarget", SCondition_IsCurrentDistractionTarget::WriteJson, SCondition_IsCurrentDistractionTarget::WriteSimpleJson);

void SCondition_IsCurrentDistractionTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsCurrentDistractionTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsCurrentDistractionTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsCurrentDistractionTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SSniperScoringEvent::TypeInfo = ZHMTypeInfo("SSniperScoringEvent", SSniperScoringEvent::WriteJson, SSniperScoringEvent::WriteSimpleJson);

void SSniperScoringEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSniperScoringEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_iPoints") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iPoints;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iPlayer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iPlayer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iScoringMachine") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_iScoringMachine);
	p_Stream << "}";

	p_Stream << "}";
}

void SSniperScoringEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSniperScoringEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_iPoints") << ":";
	p_Stream << s_Object->m_iPoints;
	p_Stream << ",";

	p_Stream << JsonStr("m_iPlayer") << ":";
	p_Stream << s_Object->m_iPlayer;
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_sText") << ":";
	p_Stream << JsonStr(s_Object->m_sText);
	p_Stream << ",";

	p_Stream << JsonStr("m_iType") << ":";
	p_Stream << s_Object->m_iType;
	p_Stream << ",";

	p_Stream << JsonStr("m_iScoringMachine") << ":";
	p_Stream << static_cast<int>(s_Object->m_iScoringMachine);

	p_Stream << "}";
}

ZHMTypeInfo ZAMDEvent::TypeInfo = ZHMTypeInfo("ZAMDEvent", ZAMDEvent::WriteJson, ZAMDEvent::WriteSimpleJson);

void ZAMDEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEventID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStartFraction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_customData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZAMDEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << s_Object->m_nEventID;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartFraction") << ":";
	p_Stream << s_Object->m_fStartFraction;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_customData, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZAMDEventTrack::TypeInfo = ZHMTypeInfo("ZAMDEventTrack", ZAMDEventTrack::WriteJson, ZAMDEventTrack::WriteSimpleJson);

void ZAMDEventTrack::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDEventTrack*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_events") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_events.size(); ++i)
	{
		auto& s_Item = s_Object->m_events[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZAMDEvent") << "," << JsonStr("$val") << ":";
		ZAMDEvent::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_events.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void ZAMDEventTrack::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDEventTrack*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_events") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_events.size(); ++i)
	{
		auto& s_Item = s_Object->m_events[i];
		ZAMDEvent::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_events.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZAMDTake::TypeInfo = ZHMTypeInfo("ZAMDTake", ZAMDTake::WriteJson, ZAMDTake::WriteSimpleJson);

void ZAMDTake::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDTake*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eventTracks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_eventTracks.size(); ++i)
	{
		auto& s_Item = s_Object->m_eventTracks[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZAMDEventTrack") << "," << JsonStr("$val") << ":";
		ZAMDEventTrack::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_eventTracks.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_customData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSyncTrackIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSyncTrackIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void ZAMDTake::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDTake*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eventTracks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_eventTracks.size(); ++i)
	{
		auto& s_Item = s_Object->m_eventTracks[i];
		ZAMDEventTrack::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_eventTracks.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_customData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nSyncTrackIndex") << ":";
	p_Stream << s_Object->m_nSyncTrackIndex;

	p_Stream << "}";
}

ZHMTypeInfo IScreenplayListener::TypeInfo = ZHMTypeInfo("IScreenplayListener", IScreenplayListener::WriteJson, IScreenplayListener::WriteSimpleJson);

void IScreenplayListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IScreenplayListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IScreenplayListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IScreenplayListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SItemActionSaveData::TypeInfo = ZHMTypeInfo("SItemActionSaveData", SItemActionSaveData::WriteJson, SItemActionSaveData::WriteSimpleJson);

void SItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

ZHMTypeInfo IAudioVolumetricGeom::TypeInfo = ZHMTypeInfo("IAudioVolumetricGeom", IAudioVolumetricGeom::WriteJson, IAudioVolumetricGeom::WriteSimpleJson);

void IAudioVolumetricGeom::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAudioVolumetricGeom*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAudioVolumetricGeom::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAudioVolumetricGeom*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZGuidString::TypeInfo = ZHMTypeInfo("ZGuidString", ZGuidString::WriteJson, ZGuidString::WriteSimpleJson);

void ZGuidString::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuidString*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGuidString::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuidString*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SRemoteControlReceiverSaveData::TypeInfo = ZHMTypeInfo("SRemoteControlReceiverSaveData", SRemoteControlReceiverSaveData::WriteJson, SRemoteControlReceiverSaveData::WriteSimpleJson);

void SRemoteControlReceiverSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRemoteControlReceiverSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReceiverActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReceiverActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << "}";

	p_Stream << "}";
}

void SRemoteControlReceiverSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRemoteControlReceiverSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bReceiverActivated") << ":";
	p_Stream << s_Object->m_bReceiverActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << s_Object->m_bDestroyed;

	p_Stream << "}";
}

ZHMTypeInfo IActorProviderFilter::TypeInfo = ZHMTypeInfo("IActorProviderFilter", IActorProviderFilter::WriteJson, IActorProviderFilter::WriteSimpleJson);

void IActorProviderFilter::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProviderFilter*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorProviderFilter::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProviderFilter*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IUIMovie::TypeInfo = ZHMTypeInfo("IUIMovie", IUIMovie::WriteJson, IUIMovie::WriteSimpleJson);

void IUIMovie::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIMovie*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IUIMovie::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIMovie*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CanJoinSituation::TypeInfo = ZHMTypeInfo("SCondition_CanJoinSituation", SCondition_CanJoinSituation::WriteJson, SCondition_CanJoinSituation::WriteSimpleJson);

void SCondition_CanJoinSituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanJoinSituation*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CanJoinSituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanJoinSituation*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo S3rdPersonCameraSaveData::TypeInfo = ZHMTypeInfo("S3rdPersonCameraSaveData", S3rdPersonCameraSaveData::WriteJson, S3rdPersonCameraSaveData::WriteSimpleJson);

void S3rdPersonCameraSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S3rdPersonCameraSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fAngleYaw") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAngleYaw;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnglePitch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAnglePitch;
	p_Stream << "}";

	p_Stream << "}";
}

void S3rdPersonCameraSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S3rdPersonCameraSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fAngleYaw") << ":";
	p_Stream << s_Object->m_fAngleYaw;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnglePitch") << ":";
	p_Stream << s_Object->m_fAnglePitch;

	p_Stream << "}";
}

ZHMTypeInfo SChallengesSaveData::TypeInfo = ZHMTypeInfo("SChallengesSaveData", SChallengesSaveData::WriteJson, SChallengesSaveData::WriteSimpleJson);

void SChallengesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChallengesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_mChallengeStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mChallengeStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_mChallengeStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SChallengeSaveData") << "," << JsonStr("$val") << ":";
		SChallengeSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_mChallengeStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SChallengesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChallengesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_mChallengeStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mChallengeStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_mChallengeStates[i];
		SChallengeSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_mChallengeStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SBehaviorTreeEvaluationLogEntry::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLogEntry", SBehaviorTreeEvaluationLogEntry::WriteJson, SBehaviorTreeEvaluationLogEntry::WriteSimpleJson);

void SBehaviorTreeEvaluationLogEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nBehaviorTreeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBehaviorTreeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nConditionOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nConditionOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bResult") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bResult;
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLogEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nBehaviorTreeIndex") << ":";
	p_Stream << s_Object->m_nBehaviorTreeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nConditionOffset") << ":";
	p_Stream << s_Object->m_nConditionOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_bResult") << ":";
	p_Stream << s_Object->m_bResult;

	p_Stream << "}";
}

ZHMTypeInfo ZResourceID::TypeInfo = ZHMTypeInfo("ZResourceID", ZResourceID::WriteJson, ZResourceID::WriteSimpleJson);

void ZResourceID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZResourceID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_uri") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_uri);
	p_Stream << "}";

	p_Stream << "}";
}

void ZResourceID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZResourceID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_uri") << ":";
	p_Stream << JsonStr(s_Object->m_uri);

	p_Stream << "}";
}

ZHMTypeInfo SBehaviorTreeEvaluationLog::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLog", SBehaviorTreeEvaluationLog::WriteJson, SBehaviorTreeEvaluationLog::WriteSimpleJson);

void SBehaviorTreeEvaluationLog::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_BehaviorTrees") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_BehaviorTrees.size(); ++i)
	{
		auto& s_Item = s_Object->m_BehaviorTrees[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_BehaviorTrees.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_Entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Entries.size(); ++i)
	{
		auto& s_Item = s_Object->m_Entries[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBehaviorTreeEvaluationLogEntry") << "," << JsonStr("$val") << ":";
		SBehaviorTreeEvaluationLogEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_Entries.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLog::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_BehaviorTrees") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_BehaviorTrees.size(); ++i)
	{
		auto& s_Item = s_Object->m_BehaviorTrees[i];
		ZResourceID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_BehaviorTrees.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_Entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Entries.size(); ++i)
	{
		auto& s_Item = s_Object->m_Entries[i];
		SBehaviorTreeEvaluationLogEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_Entries.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo STargetInfoObjectiveCondition::TypeInfo = ZHMTypeInfo("STargetInfoObjectiveCondition", STargetInfoObjectiveCondition::WriteJson, STargetInfoObjectiveCondition::WriteSimpleJson);

void STargetInfoObjectiveCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoObjectiveCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("header") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->header);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("title") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->title);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->icon);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->type);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("hardCondition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->hardCondition;
	p_Stream << "}";

	p_Stream << "}";
}

void STargetInfoObjectiveCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoObjectiveCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("header") << ":";
	p_Stream << JsonStr(s_Object->header);
	p_Stream << ",";

	p_Stream << JsonStr("title") << ":";
	p_Stream << JsonStr(s_Object->title);
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << JsonStr(s_Object->icon);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(s_Object->type);
	p_Stream << ",";

	p_Stream << JsonStr("hardCondition") << ":";
	p_Stream << s_Object->hardCondition;

	p_Stream << "}";
}

ZHMTypeInfo STargetInfoDisplayData::TypeInfo = ZHMTypeInfo("STargetInfoDisplayData", STargetInfoDisplayData::WriteJson, STargetInfoDisplayData::WriteSimpleJson);

void STargetInfoDisplayData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoDisplayData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("npcName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->npcName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("disguiseName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->disguiseName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectiveType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->objectiveType);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectiveConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectiveConditions.size(); ++i)
	{
		auto& s_Item = s_Object->objectiveConditions[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STargetInfoObjectiveCondition") << "," << JsonStr("$val") << ":";
		STargetInfoObjectiveCondition::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->objectiveConditions.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("fX") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fX;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fY") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fY;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsTarget;
	p_Stream << "}";

	p_Stream << "}";
}

void STargetInfoDisplayData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoDisplayData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("npcName") << ":";
	p_Stream << JsonStr(s_Object->npcName);
	p_Stream << ",";

	p_Stream << JsonStr("disguiseName") << ":";
	p_Stream << JsonStr(s_Object->disguiseName);
	p_Stream << ",";

	p_Stream << JsonStr("objectiveType") << ":";
	p_Stream << JsonStr(s_Object->objectiveType);
	p_Stream << ",";

	p_Stream << JsonStr("objectiveConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectiveConditions.size(); ++i)
	{
		auto& s_Item = s_Object->objectiveConditions[i];
		STargetInfoObjectiveCondition::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->objectiveConditions.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("fX") << ":";
	p_Stream << s_Object->fX;
	p_Stream << ",";

	p_Stream << JsonStr("fY") << ":";
	p_Stream << s_Object->fY;
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("bIsTarget") << ":";
	p_Stream << s_Object->bIsTarget;

	p_Stream << "}";
}

ZHMTypeInfo STargetInfoDisplayData_Dummy::TypeInfo = ZHMTypeInfo("STargetInfoDisplayData_Dummy", STargetInfoDisplayData_Dummy::WriteJson, STargetInfoDisplayData_Dummy::WriteSimpleJson);

void STargetInfoDisplayData_Dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoDisplayData_Dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("__dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->__dummy.size(); ++i)
	{
		auto& s_Item = s_Object->__dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STargetInfoDisplayData") << "," << JsonStr("$val") << ":";
		STargetInfoDisplayData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->__dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STargetInfoDisplayData_Dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoDisplayData_Dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("__dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->__dummy.size(); ++i)
	{
		auto& s_Item = s_Object->__dummy[i];
		STargetInfoDisplayData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->__dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SIntelDisplayInfo::TypeInfo = ZHMTypeInfo("SIntelDisplayInfo", SIntelDisplayInfo::WriteJson, SIntelDisplayInfo::WriteSimpleJson);

void SIntelDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("index") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->index;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("selected") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->selected;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->active;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("headline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->headline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bodyheadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->bodyheadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("text") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->text);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("img") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->img);
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("index") << ":";
	p_Stream << s_Object->index;
	p_Stream << ",";

	p_Stream << JsonStr("selected") << ":";
	p_Stream << s_Object->selected;
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << s_Object->active;
	p_Stream << ",";

	p_Stream << JsonStr("headline") << ":";
	p_Stream << JsonStr(s_Object->headline);
	p_Stream << ",";

	p_Stream << JsonStr("bodyheadline") << ":";
	p_Stream << JsonStr(s_Object->bodyheadline);
	p_Stream << ",";

	p_Stream << JsonStr("text") << ":";
	p_Stream << JsonStr(s_Object->text);
	p_Stream << ",";

	p_Stream << JsonStr("img") << ":";
	p_Stream << JsonStr(s_Object->img);

	p_Stream << "}";
}

ZHMTypeInfo SSoundAmbienceSaveData::TypeInfo = ZHMTypeInfo("SSoundAmbienceSaveData", SSoundAmbienceSaveData::WriteJson, SSoundAmbienceSaveData::WriteSimpleJson);

void SSoundAmbienceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSoundAmbienceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCurrentAmbience") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentAmbience;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentGate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentGate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTransitionAmount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTransitionAmount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnteredFromSide0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnteredFromSide0;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInTransition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInTransition;
	p_Stream << "}";

	p_Stream << "}";
}

void SSoundAmbienceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSoundAmbienceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCurrentAmbience") << ":";
	p_Stream << s_Object->m_rCurrentAmbience;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentGate") << ":";
	p_Stream << s_Object->m_rCurrentGate;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTransitionAmount") << ":";
	p_Stream << s_Object->m_fTransitionAmount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnteredFromSide0") << ":";
	p_Stream << s_Object->m_bEnteredFromSide0;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInTransition") << ":";
	p_Stream << s_Object->m_bInTransition;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SuitcaseAssistanceRequesterRadio::TypeInfo = ZHMTypeInfo("SCondition_SuitcaseAssistanceRequesterRadio", SCondition_SuitcaseAssistanceRequesterRadio::WriteJson, SCondition_SuitcaseAssistanceRequesterRadio::WriteSimpleJson);

void SCondition_SuitcaseAssistanceRequesterRadio::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuitcaseAssistanceRequesterRadio*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_SuitcaseAssistanceRequesterRadio::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuitcaseAssistanceRequesterRadio*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZSoundCollisionInfo::TypeInfo = ZHMTypeInfo("ZSoundCollisionInfo", ZSoundCollisionInfo::WriteJson, ZSoundCollisionInfo::WriteSimpleJson);

void ZSoundCollisionInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSoundCollisionInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSoundCollisionInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSoundCollisionInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZGfxValueWrapper::TypeInfo = ZHMTypeInfo("ZGfxValueWrapper", ZGfxValueWrapper::WriteJson, ZGfxValueWrapper::WriteSimpleJson);

void ZGfxValueWrapper::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGfxValueWrapper*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGfxValueWrapper::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGfxValueWrapper*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAnimatedActorReactOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorReactOrderSaveData", SAnimatedActorReactOrderSaveData::WriteJson, SAnimatedActorReactOrderSaveData::WriteSimpleJson);

void SAnimatedActorReactOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorReactOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vFaceTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vFaceTarget, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLookAtTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLookAtTarget, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_targetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_targetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_targetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadbody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadbody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bExplosion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bExplosion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTrespassing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTrespassing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFaceTargetSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFaceTargetSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLookAtTargetSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLookAtTargetSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorReactOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorReactOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vFaceTarget") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vFaceTarget, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vLookAtTarget") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLookAtTarget, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_targetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_targetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadbody") << ":";
	p_Stream << s_Object->m_bDeadbody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bExplosion") << ":";
	p_Stream << s_Object->m_bExplosion;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTrespassing") << ":";
	p_Stream << s_Object->m_bTrespassing;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFaceTargetSet") << ":";
	p_Stream << s_Object->m_bFaceTargetSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLookAtTargetSet") << ":";
	p_Stream << s_Object->m_bLookAtTargetSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);

	p_Stream << "}";
}

ZHMTypeInfo SSaveGameMetaData::TypeInfo = ZHMTypeInfo("SSaveGameMetaData", SSaveGameMetaData::WriteJson, SSaveGameMetaData::WriteSimpleJson);

void SSaveGameMetaData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameMetaData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nSlot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->nSlot);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eSaveType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESaveType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eSaveType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESaveType", static_cast<int>(s_Object->eSaveType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eDifficultyLevel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->eDifficultyLevel;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractTitle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractTitle);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractType);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sLocationId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sLocationId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractSessionId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractSessionId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sLastEventToken") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sLastEventToken);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsOnline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsOnline;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsVR") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsVR;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aScreenShot") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScreenShot.size(); ++i)
	{
		auto& s_Item = s_Object->aScreenShot[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->aScreenShot.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aRequirements") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRequirements.size(); ++i)
	{
		auto& s_Item = s_Object->aRequirements[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ERequirementId") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ERequirementId", static_cast<int>(s_Item))) << "}";
		p_Stream << "}";

		if (i < s_Object->aRequirements.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSaveGameMetaData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameMetaData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nSlot") << ":";
	p_Stream << static_cast<int>(s_Object->nSlot);
	p_Stream << ",";

	p_Stream << JsonStr("eSaveType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESaveType", static_cast<int>(s_Object->eSaveType)));
	p_Stream << ",";

	p_Stream << JsonStr("eDifficultyLevel") << ":";
	p_Stream << s_Object->eDifficultyLevel;
	p_Stream << ",";

	p_Stream << JsonStr("sContractId") << ":";
	p_Stream << JsonStr(s_Object->sContractId);
	p_Stream << ",";

	p_Stream << JsonStr("sContractTitle") << ":";
	p_Stream << JsonStr(s_Object->sContractTitle);
	p_Stream << ",";

	p_Stream << JsonStr("sContractType") << ":";
	p_Stream << JsonStr(s_Object->sContractType);
	p_Stream << ",";

	p_Stream << JsonStr("sLocationId") << ":";
	p_Stream << JsonStr(s_Object->sLocationId);
	p_Stream << ",";

	p_Stream << JsonStr("sContractSessionId") << ":";
	p_Stream << JsonStr(s_Object->sContractSessionId);
	p_Stream << ",";

	p_Stream << JsonStr("sLastEventToken") << ":";
	p_Stream << JsonStr(s_Object->sLastEventToken);
	p_Stream << ",";

	p_Stream << JsonStr("bIsOnline") << ":";
	p_Stream << s_Object->bIsOnline;
	p_Stream << ",";

	p_Stream << JsonStr("bIsVR") << ":";
	p_Stream << s_Object->bIsVR;
	p_Stream << ",";

	p_Stream << JsonStr("aScreenShot") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScreenShot.size(); ++i)
	{
		auto& s_Item = s_Object->aScreenShot[i];
		p_Stream << s_Item;

		if (i < s_Object->aScreenShot.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aRequirements") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRequirements.size(); ++i)
	{
		auto& s_Item = s_Object->aRequirements[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ERequirementId", static_cast<int>(s_Item)));

		if (i < s_Object->aRequirements.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SSaveGameHeader::TypeInfo = ZHMTypeInfo("SSaveGameHeader", SSaveGameHeader::WriteJson, SSaveGameHeader::WriteSimpleJson);

void SSaveGameHeader::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameHeader*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nFourCC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nFourCC;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nVersion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nVersion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nCrc32") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nCrc32;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nTimeStamp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nTimeStamp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("MetaData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSaveGameMetaData") << "," << JsonStr("$val") << ":";
	SSaveGameMetaData::WriteJson(&s_Object->MetaData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSaveGameHeader::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameHeader*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nFourCC") << ":";
	p_Stream << s_Object->nFourCC;
	p_Stream << ",";

	p_Stream << JsonStr("nVersion") << ":";
	p_Stream << s_Object->nVersion;
	p_Stream << ",";

	p_Stream << JsonStr("nCrc32") << ":";
	p_Stream << s_Object->nCrc32;
	p_Stream << ",";

	p_Stream << JsonStr("nSize") << ":";
	p_Stream << s_Object->nSize;
	p_Stream << ",";

	p_Stream << JsonStr("nTimeStamp") << ":";
	p_Stream << s_Object->nTimeStamp;
	p_Stream << ",";

	p_Stream << JsonStr("MetaData") << ":";
	SSaveGameMetaData::WriteSimpleJson(&s_Object->MetaData, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IFloat3CurvesEntity::TypeInfo = ZHMTypeInfo("IFloat3CurvesEntity", IFloat3CurvesEntity::WriteJson, IFloat3CurvesEntity::WriteSimpleJson);

void IFloat3CurvesEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFloat3CurvesEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IFloat3CurvesEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFloat3CurvesEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IKeywordProvider::TypeInfo = ZHMTypeInfo("IKeywordProvider", IKeywordProvider::WriteJson, IKeywordProvider::WriteSimpleJson);

void IKeywordProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKeywordProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IKeywordProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKeywordProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IKeywordHolder::TypeInfo = ZHMTypeInfo("IKeywordHolder", IKeywordHolder::WriteJson, IKeywordHolder::WriteSimpleJson);

void IKeywordHolder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKeywordHolder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IKeywordHolder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKeywordHolder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IItem::TypeInfo = ZHMTypeInfo("IItem", IItem::WriteJson, IItem::WriteSimpleJson);

void IItem::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItem*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IItem::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItem*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxSharedEventAge::TypeInfo = ZHMTypeInfo("SCondition_MaxSharedEventAge", SCondition_MaxSharedEventAge::WriteJson, SCondition_MaxSharedEventAge::WriteSimpleJson);

void SCondition_MaxSharedEventAge::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxSharedEventAge*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("age") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->age;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxSharedEventAge::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxSharedEventAge*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("age") << ":";
	p_Stream << s_Object->age;

	p_Stream << "}";
}

ZHMTypeInfo SGateSaveData::TypeInfo = ZHMTypeInfo("SGateSaveData", SGateSaveData::WriteJson, SGateSaveData::WriteSimpleJson);

void SGateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOpen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOpen;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpenFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOpenFraction;
	p_Stream << "}";

	p_Stream << "}";
}

void SGateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOpen") << ":";
	p_Stream << s_Object->m_bIsOpen;
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpenFraction") << ":";
	p_Stream << s_Object->m_fOpenFraction;

	p_Stream << "}";
}

ZHMTypeInfo IBoxReflectionEntity::TypeInfo = ZHMTypeInfo("IBoxReflectionEntity", IBoxReflectionEntity::WriteJson, IBoxReflectionEntity::WriteSimpleJson);

void IBoxReflectionEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoxReflectionEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoxReflectionEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoxReflectionEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsItemLegalOnHitman::TypeInfo = ZHMTypeInfo("SCondition_IsItemLegalOnHitman", SCondition_IsItemLegalOnHitman::WriteJson, SCondition_IsItemLegalOnHitman::WriteSimpleJson);

void SCondition_IsItemLegalOnHitman::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsItemLegalOnHitman*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsItemLegalOnHitman::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsItemLegalOnHitman*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IFreeCameraControl::TypeInfo = ZHMTypeInfo("IFreeCameraControl", IFreeCameraControl::WriteJson, IFreeCameraControl::WriteSimpleJson);

void IFreeCameraControl::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFreeCameraControl*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IFreeCameraControl::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFreeCameraControl*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SSpeakEntitySaveData::TypeInfo = ZHMTypeInfo("SSpeakEntitySaveData", SSpeakEntitySaveData::WriteJson, SSpeakEntitySaveData::WriteSimpleJson);

void SSpeakEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSeekPosition;
	p_Stream << "}";

	p_Stream << "}";
}

void SSpeakEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << s_Object->m_fSeekPosition;

	p_Stream << "}";
}

ZHMTypeInfo IContractModule::TypeInfo = ZHMTypeInfo("IContractModule", IContractModule::WriteJson, IContractModule::WriteSimpleJson);

void IContractModule::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractModule*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContractModule::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractModule*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ILightEntity::TypeInfo = ZHMTypeInfo("ILightEntity", ILightEntity::WriteJson, ILightEntity::WriteSimpleJson);

void ILightEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ILightEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ILightEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ILightEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsNull::TypeInfo = ZHMTypeInfo("SCondition_IsNull", SCondition_IsNull::WriteJson, SCondition_IsNull::WriteSimpleJson);

void SCondition_IsNull::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsNull*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("ref") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->ref, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsNull::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsNull*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("ref") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->ref, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_OnlyLegalItemsDropped::TypeInfo = ZHMTypeInfo("SCondition_OnlyLegalItemsDropped", SCondition_OnlyLegalItemsDropped::WriteJson, SCondition_OnlyLegalItemsDropped::WriteSimpleJson);

void SCondition_OnlyLegalItemsDropped::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_OnlyLegalItemsDropped*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->includeWeapons;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_OnlyLegalItemsDropped::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_OnlyLegalItemsDropped*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << s_Object->includeWeapons;

	p_Stream << "}";
}

ZHMTypeInfo SBoneTransformSaveData::TypeInfo = ZHMTypeInfo("SBoneTransformSaveData", SBoneTransformSaveData::WriteJson, SBoneTransformSaveData::WriteSimpleJson);

void SBoneTransformSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneTransformSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SBoneTransformSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneTransformSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZCrowdGridPoint::TypeInfo = ZHMTypeInfo("ZCrowdGridPoint", ZCrowdGridPoint::WriteJson, ZCrowdGridPoint::WriteSimpleJson);

void ZCrowdGridPoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCrowdGridPoint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nHeightOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nHeightOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOnNavGrid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_nOnNavGrid);
	p_Stream << "}";

	p_Stream << "}";
}

void ZCrowdGridPoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCrowdGridPoint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nHeightOffset") << ":";
	p_Stream << s_Object->m_nHeightOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_nOnNavGrid") << ":";
	p_Stream << static_cast<int>(s_Object->m_nOnNavGrid);

	p_Stream << "}";
}

ZHMTypeInfo SLampCoreSaveState::TypeInfo = ZHMTypeInfo("SLampCoreSaveState", SLampCoreSaveState::WriteJson, SLampCoreSaveState::WriteSimpleJson);

void SLampCoreSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLampCoreSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSwitchState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSwitchState;
	p_Stream << "}";

	p_Stream << "}";
}

void SLampCoreSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLampCoreSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSwitchState") << ":";
	p_Stream << s_Object->m_bSwitchState;

	p_Stream << "}";
}

ZHMTypeInfo SLampCoreSaveData::TypeInfo = ZHMTypeInfo("SLampCoreSaveData", SLampCoreSaveData::WriteJson, SLampCoreSaveData::WriteSimpleJson);

void SLampCoreSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLampCoreSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLampCoreSaveState") << "," << JsonStr("$val") << ":";
		SLampCoreSaveState::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SLampCoreSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLampCoreSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SLampCoreSaveState::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ISoundMaterialDescriptor::TypeInfo = ZHMTypeInfo("ISoundMaterialDescriptor", ISoundMaterialDescriptor::WriteJson, ISoundMaterialDescriptor::WriteSimpleJson);

void ISoundMaterialDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundMaterialDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundMaterialDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundMaterialDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_RemoveSituationsWithDesiredNumberOfCombatants::TypeInfo = ZHMTypeInfo("SCondition_RemoveSituationsWithDesiredNumberOfCombatants", SCondition_RemoveSituationsWithDesiredNumberOfCombatants::WriteJson, SCondition_RemoveSituationsWithDesiredNumberOfCombatants::WriteSimpleJson);

void SCondition_RemoveSituationsWithDesiredNumberOfCombatants::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_RemoveSituationsWithDesiredNumberOfCombatants*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatSituations") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_CombatSituations, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_RemoveSituationsWithDesiredNumberOfCombatants::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_RemoveSituationsWithDesiredNumberOfCombatants*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatSituations") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_CombatSituations, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SDisturbanceSaveData::TypeInfo = ZHMTypeInfo("SDisturbanceSaveData", SDisturbanceSaveData::WriteJson, SDisturbanceSaveData::WriteSimpleJson);

void SDisturbanceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDisturbanceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_object") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_object;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECautiousDisturbanceState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_state) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECautiousDisturbanceState", static_cast<int>(s_Object->m_state))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_started") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_started, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pInvestigateGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pInvestigateGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockOnHitmanPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockOnHitmanPosition;
	p_Stream << "}";

	p_Stream << "}";
}

void SDisturbanceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDisturbanceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_object") << ":";
	p_Stream << s_Object->m_object;
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type)));
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECautiousDisturbanceState", static_cast<int>(s_Object->m_state)));
	p_Stream << ",";

	p_Stream << JsonStr("m_started") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_started, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_pInvestigateGroup") << ":";
	p_Stream << s_Object->m_pInvestigateGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockOnHitmanPosition") << ":";
	p_Stream << s_Object->m_bLockOnHitmanPosition;

	p_Stream << "}";
}

ZHMTypeInfo SInvestigateWeaponGroupSaveData::TypeInfo = ZHMTypeInfo("SInvestigateWeaponGroupSaveData", SInvestigateWeaponGroupSaveData::WriteJson, SInvestigateWeaponGroupSaveData::WriteSimpleJson);

void SInvestigateWeaponGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInvestigateWeaponGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rReporter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rReporter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInvestigator") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInvestigator;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ReporterIsVIPWithAmbientEscort") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_ReporterIsVIPWithAmbientEscort;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastGuardSearch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastGuardSearch, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aUnconsciousGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aUnconsciousGuards.size(); ++i)
	{
		auto& s_Item = s_Object->m_aUnconsciousGuards[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aUnconsciousGuards.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SInvestigateWeaponGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInvestigateWeaponGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rReporter") << ":";
	p_Stream << s_Object->m_rReporter;
	p_Stream << ",";

	p_Stream << JsonStr("m_rInvestigator") << ":";
	p_Stream << s_Object->m_rInvestigator;
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_ReporterIsVIPWithAmbientEscort") << ":";
	p_Stream << s_Object->m_ReporterIsVIPWithAmbientEscort;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastGuardSearch") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastGuardSearch, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aUnconsciousGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aUnconsciousGuards.size(); ++i)
	{
		auto& s_Item = s_Object->m_aUnconsciousGuards[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aUnconsciousGuards.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SAttentionHUDUIElement::TypeInfo = ZHMTypeInfo("SAttentionHUDUIElement", SAttentionHUDUIElement::WriteJson, SAttentionHUDUIElement::WriteSimpleJson);

void SAttentionHUDUIElement::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAttentionHUDUIElement*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fRadius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fRadius;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nColor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nColor;
	p_Stream << "}";

	p_Stream << "}";
}

void SAttentionHUDUIElement::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAttentionHUDUIElement*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fAngle") << ":";
	p_Stream << s_Object->fAngle;
	p_Stream << ",";

	p_Stream << JsonStr("fAttention") << ":";
	p_Stream << s_Object->fAttention;
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fRadius") << ":";
	p_Stream << s_Object->fRadius;
	p_Stream << ",";

	p_Stream << JsonStr("nColor") << ":";
	p_Stream << s_Object->nColor;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxAge::TypeInfo = ZHMTypeInfo("SCondition_MaxAge", SCondition_MaxAge::WriteJson, SCondition_MaxAge::WriteSimpleJson);

void SCondition_MaxAge::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxAge*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("age") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->age;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxAge::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxAge*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("age") << ":";
	p_Stream << s_Object->age;

	p_Stream << "}";
}

ZHMTypeInfo IGamePostfilterControllerEntity::TypeInfo = ZHMTypeInfo("IGamePostfilterControllerEntity", IGamePostfilterControllerEntity::WriteJson, IGamePostfilterControllerEntity::WriteSimpleJson);

void IGamePostfilterControllerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGamePostfilterControllerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IGamePostfilterControllerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGamePostfilterControllerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SEntityTemplateReference::TypeInfo = ZHMTypeInfo("SEntityTemplateReference", SEntityTemplateReference::WriteJson, SEntityTemplateReference::WriteSimpleJson);

void SEntityTemplateReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->externalSceneIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->exposedEntity);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entityID") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneIndex") << ":";
	p_Stream << s_Object->externalSceneIndex;
	p_Stream << ",";

	p_Stream << JsonStr("entityIndex") << ":";
	p_Stream << s_Object->entityIndex;
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntity") << ":";
	p_Stream << JsonStr(s_Object->exposedEntity);

	p_Stream << "}";
}

ZHMTypeInfo SEntityTemplateProperty::TypeInfo = ZHMTypeInfo("SEntityTemplateProperty", SEntityTemplateProperty::WriteJson, SEntityTemplateProperty::WriteSimpleJson);

void SEntityTemplateProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nPropertyID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nPropertyID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nPropertyID") << ":";
	{
		auto s_PropertyName = ZHMProperties::PropertyToString(s_Object->nPropertyID);

		if (s_PropertyName.size() == 0)
			p_Stream << s_Object->nPropertyID;
		else
			p_Stream << JsonStr(s_PropertyName);
	}
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	ZVariant::WriteSimpleJson(&s_Object->value, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SEntityTemplatePlatformSpecificProperty::TypeInfo = ZHMTypeInfo("SEntityTemplatePlatformSpecificProperty", SEntityTemplatePlatformSpecificProperty::WriteJson, SEntityTemplatePlatformSpecificProperty::WriteSimpleJson);

void SEntityTemplatePlatformSpecificProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePlatformSpecificProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("propertyValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
	SEntityTemplateProperty::WriteJson(&s_Object->propertyValue, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("platform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EVirtualPlatformID") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->platform) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EVirtualPlatformID", static_cast<int>(s_Object->platform))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("postInit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->postInit;
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePlatformSpecificProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePlatformSpecificProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("propertyValue") << ":";
	SEntityTemplateProperty::WriteSimpleJson(&s_Object->propertyValue, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("platform") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EVirtualPlatformID", static_cast<int>(s_Object->platform)));
	p_Stream << ",";

	p_Stream << JsonStr("postInit") << ":";
	p_Stream << s_Object->postInit;

	p_Stream << "}";
}

ZHMTypeInfo STemplateFactorySubEntity::TypeInfo = ZHMTypeInfo("STemplateFactorySubEntity", STemplateFactorySubEntity::WriteJson, STemplateFactorySubEntity::WriteSimpleJson);

void STemplateFactorySubEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateFactorySubEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("logicalParent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->logicalParent, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->propertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplateProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("postInitPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->postInitPropertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->postInitPropertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplateProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->postInitPropertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("platformSpecificPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->platformSpecificPropertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->platformSpecificPropertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePlatformSpecificProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplatePlatformSpecificProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->platformSpecificPropertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STemplateFactorySubEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateFactorySubEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("logicalParent") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->logicalParent, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->propertyValues[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("postInitPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->postInitPropertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->postInitPropertyValues[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->postInitPropertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("platformSpecificPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->platformSpecificPropertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->platformSpecificPropertyValues[i];
		SEntityTemplatePlatformSpecificProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->platformSpecificPropertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SRotateEntitySaveData::TypeInfo = ZHMTypeInfo("SRotateEntitySaveData", SRotateEntitySaveData::WriteJson, SRotateEntitySaveData::WriteSimpleJson);

void SRotateEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRotateEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fXAxisSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fXAxisSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fYAxisSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fYAxisSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fZAxisSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fZAxisSpeed;
	p_Stream << "}";

	p_Stream << "}";
}

void SRotateEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRotateEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fXAxisSpeed") << ":";
	p_Stream << s_Object->m_fXAxisSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_fYAxisSpeed") << ":";
	p_Stream << s_Object->m_fYAxisSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_fZAxisSpeed") << ":";
	p_Stream << s_Object->m_fZAxisSpeed;

	p_Stream << "}";
}

ZHMTypeInfo SDynamicEnforcerCandidateSaveData::TypeInfo = ZHMTypeInfo("SDynamicEnforcerCandidateSaveData", SDynamicEnforcerCandidateSaveData::WriteJson, SDynamicEnforcerCandidateSaveData::WriteSimpleJson);

void SDynamicEnforcerCandidateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicEnforcerCandidateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRadius;
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicEnforcerCandidateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicEnforcerCandidateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadius") << ":";
	p_Stream << s_Object->m_fRadius;

	p_Stream << "}";
}

ZHMTypeInfo SDynamicEnforcerServiceSaveData::TypeInfo = ZHMTypeInfo("SDynamicEnforcerServiceSaveData", SDynamicEnforcerServiceSaveData::WriteJson, SDynamicEnforcerServiceSaveData::WriteSimpleJson);

void SDynamicEnforcerServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicEnforcerServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDynamicEnforcerCandidateSaveData") << "," << JsonStr("$val") << ":";
		SDynamicEnforcerCandidateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDynamicEnforcerServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicEnforcerServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCandidates[i];
		SDynamicEnforcerCandidateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SActorStandInSaveData::TypeInfo = ZHMTypeInfo("SActorStandInSaveData", SActorStandInSaveData::WriteJson, SActorStandInSaveData::WriteSimpleJson);

void SActorStandInSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorStandInSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorStandInSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorStandInSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo SDynamicRayCastEntitySaveData::TypeInfo = ZHMTypeInfo("SDynamicRayCastEntitySaveData", SDynamicRayCastEntitySaveData::WriteJson, SDynamicRayCastEntitySaveData::WriteSimpleJson);

void SDynamicRayCastEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicRayCastEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRayIntersecting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsRayIntersecting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCurrentlyEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsCurrentlyEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicRayCastEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicRayCastEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRayIntersecting") << ":";
	p_Stream << s_Object->m_bIsRayIntersecting;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCurrentlyEnabled") << ":";
	p_Stream << s_Object->m_bIsCurrentlyEnabled;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CombatSituationsWithDesiredNumberOfCombatants::TypeInfo = ZHMTypeInfo("SCondition_CombatSituationsWithDesiredNumberOfCombatants", SCondition_CombatSituationsWithDesiredNumberOfCombatants::WriteJson, SCondition_CombatSituationsWithDesiredNumberOfCombatants::WriteSimpleJson);

void SCondition_CombatSituationsWithDesiredNumberOfCombatants::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CombatSituationsWithDesiredNumberOfCombatants*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatSituations") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_CombatSituations, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CombatSituationsWithDesiredNumberOfCombatants::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CombatSituationsWithDesiredNumberOfCombatants*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatSituations") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_CombatSituations, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZRuntimePinConDesc::TypeInfo = ZHMTypeInfo("ZRuntimePinConDesc", ZRuntimePinConDesc::WriteJson, ZRuntimePinConDesc::WriteSimpleJson);

void ZRuntimePinConDesc::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRuntimePinConDesc*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nFromEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFromEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nToEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nToEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFromPinID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFromPinID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nToPinID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nToPinID;
	p_Stream << "}";

	p_Stream << "}";
}

void ZRuntimePinConDesc::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRuntimePinConDesc*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nFromEntityID") << ":";
	p_Stream << s_Object->m_nFromEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nToEntityID") << ":";
	p_Stream << s_Object->m_nToEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFromPinID") << ":";
	p_Stream << s_Object->m_nFromPinID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nToPinID") << ":";
	p_Stream << s_Object->m_nToPinID;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxActorsWithGoal::TypeInfo = ZHMTypeInfo("SCondition_MaxActorsWithGoal", SCondition_MaxActorsWithGoal::WriteJson, SCondition_MaxActorsWithGoal::WriteSimpleJson);

void SCondition_MaxActorsWithGoal::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxActorsWithGoal*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIGoal") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("maxActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->maxActors;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxActorsWithGoal::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxActorsWithGoal*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("maxActors") << ":";
	p_Stream << s_Object->maxActors;

	p_Stream << "}";
}

ZHMTypeInfo SColorRGB::TypeInfo = ZHMTypeInfo("SColorRGB", SColorRGB::WriteJson, SColorRGB::WriteSimpleJson);

void SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("r") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->r;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->g;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->b;
	p_Stream << "}";

	p_Stream << "}";
}

void SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("r") << ":";
	p_Stream << s_Object->r;
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << s_Object->g;
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << s_Object->b;

	p_Stream << "}";
}

ZHMTypeInfo SPostfilterParametersSaveData::TypeInfo = ZHMTypeInfo("SPostfilterParametersSaveData", SPostfilterParametersSaveData::WriteJson, SPostfilterParametersSaveData::WriteSimpleJson);

void SPostfilterParametersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPostfilterParametersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDepthOfFieldEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDepthOfFieldEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDepthOfFieldBlurriness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDepthOfFieldBlurriness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRadialBlurEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRadialBlurEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurriness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRadialBlurriness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vRadialBlurCenter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vRadialBlurCenter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRadialBlurStart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialBlurEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSpatialBlurEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurriness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpatialBlurriness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vSpatialBlurCenter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vSpatialBlurCenter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpatialBlurStart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurFade") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpatialBlurFade;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDistortionWobbleEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistortionWobbleScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistortionWobbleScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleWaveLength") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vDistortionWobbleWaveLength, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vDistortionWobbleSpeed, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleUseRealTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDistortionWobbleUseRealTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDRActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHDRActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDREnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHDREnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vHDRAdaptationSpeed, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationLuminanceMinMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vHDRAdaptationLuminanceMinMax, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationMiddleGrayMinMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vHDRAdaptationMiddleGrayMinMax, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRWhitePoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHDRWhitePoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassThreshold") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHDRBrightPassThreshold;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassMaxPercentage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHDRBrightPassMaxPercentage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HDRColorTint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_HDRColorTint, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SPostfilterParametersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPostfilterParametersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDepthOfFieldEnabled") << ":";
	p_Stream << s_Object->m_bDepthOfFieldEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDepthOfFieldBlurriness") << ":";
	p_Stream << s_Object->m_fDepthOfFieldBlurriness;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRadialBlurEnabled") << ":";
	p_Stream << s_Object->m_bRadialBlurEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurriness") << ":";
	p_Stream << s_Object->m_fRadialBlurriness;
	p_Stream << ",";

	p_Stream << JsonStr("m_vRadialBlurCenter") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vRadialBlurCenter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurStart") << ":";
	p_Stream << s_Object->m_fRadialBlurStart;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialBlurEnabled") << ":";
	p_Stream << s_Object->m_bSpatialBlurEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurriness") << ":";
	p_Stream << s_Object->m_fSpatialBlurriness;
	p_Stream << ",";

	p_Stream << JsonStr("m_vSpatialBlurCenter") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vSpatialBlurCenter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurStart") << ":";
	p_Stream << s_Object->m_fSpatialBlurStart;
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurFade") << ":";
	p_Stream << s_Object->m_fSpatialBlurFade;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleEnabled") << ":";
	p_Stream << s_Object->m_bDistortionWobbleEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistortionWobbleScale") << ":";
	p_Stream << s_Object->m_fDistortionWobbleScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleWaveLength") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vDistortionWobbleWaveLength, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleSpeed") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vDistortionWobbleSpeed, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleUseRealTime") << ":";
	p_Stream << s_Object->m_bDistortionWobbleUseRealTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDRActive") << ":";
	p_Stream << s_Object->m_bHDRActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDREnabled") << ":";
	p_Stream << s_Object->m_bHDREnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationSpeed") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vHDRAdaptationSpeed, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationLuminanceMinMax") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vHDRAdaptationLuminanceMinMax, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationMiddleGrayMinMax") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vHDRAdaptationMiddleGrayMinMax, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRWhitePoint") << ":";
	p_Stream << s_Object->m_fHDRWhitePoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassThreshold") << ":";
	p_Stream << s_Object->m_fHDRBrightPassThreshold;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassMaxPercentage") << ":";
	p_Stream << s_Object->m_fHDRBrightPassMaxPercentage;
	p_Stream << ",";

	p_Stream << JsonStr("m_HDRColorTint") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_HDRColorTint, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SEventHistorySaveData::TypeInfo = ZHMTypeInfo("SEventHistorySaveData", SEventHistorySaveData::WriteJson, SEventHistorySaveData::WriteSimpleJson);

void SEventHistorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventHistorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aOccurences") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aOccurences.size(); ++i)
	{
		auto& s_Item = s_Object->m_aOccurences[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
		ZGameTime::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aOccurences.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEventHistorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventHistorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aOccurences") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aOccurences.size(); ++i)
	{
		auto& s_Item = s_Object->m_aOccurences[i];
		ZGameTime::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aOccurences.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZManhuntGroup::TypeInfo = ZHMTypeInfo("ZManhuntGroup", ZManhuntGroup::WriteJson, ZManhuntGroup::WriteSimpleJson);

void ZManhuntGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZManhuntGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZManhuntGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZManhuntGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SSerializedValue::TypeInfo = ZHMTypeInfo("SSerializedValue", SSerializedValue::WriteJson, SSerializedValue::WriteSimpleJson);

void SSerializedValue::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSerializedValue*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SSerializedValue::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSerializedValue*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IValueVector3Get::TypeInfo = ZHMTypeInfo("IValueVector3Get", IValueVector3Get::WriteJson, IValueVector3Get::WriteSimpleJson);

void IValueVector3Get::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueVector3Get*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueVector3Get::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueVector3Get*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZEntityPath::TypeInfo = ZHMTypeInfo("ZEntityPath", ZEntityPath::WriteJson, ZEntityPath::WriteSimpleJson);

void ZEntityPath::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityPath*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEntityPath::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityPath*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IRenderPostfilterParametersEntity::TypeInfo = ZHMTypeInfo("IRenderPostfilterParametersEntity", IRenderPostfilterParametersEntity::WriteJson, IRenderPostfilterParametersEntity::WriteSimpleJson);

void IRenderPostfilterParametersEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderPostfilterParametersEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderPostfilterParametersEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderPostfilterParametersEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZInteractionData::TypeInfo = ZHMTypeInfo("ZInteractionData", ZInteractionData::WriteJson, ZInteractionData::WriteSimpleJson);

void ZInteractionData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInteractionData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZInteractionData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInteractionData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMovementAgilitySaveData::TypeInfo = ZHMTypeInfo("SMovementAgilitySaveData", SMovementAgilitySaveData::WriteJson, SMovementAgilitySaveData::WriteSimpleJson);

void SMovementAgilitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementAgilitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rLedgeGuide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rLedgeGuide;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceLeftRightTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFaceLeftRightTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePrevAgilityState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAgilityState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePrevAgilityState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_ePrevAgilityState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAgilityState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAgilityState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAgilityState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_eAgilityState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nActiveAnimNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nActiveAnimNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eCameraOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECameraOffset_old") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eCameraOffset) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECameraOffset_old", static_cast<int>(s_Object->m_eCameraOffset))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementAgilitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementAgilitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rLedgeGuide") << ":";
	p_Stream << s_Object->m_rLedgeGuide;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceLeftRightTarget") << ":";
	p_Stream << s_Object->m_fFaceLeftRightTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_ePrevAgilityState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_ePrevAgilityState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eAgilityState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_eAgilityState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nActiveAnimNode") << ":";
	p_Stream << s_Object->m_nActiveAnimNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_eCameraOffset") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECameraOffset_old", static_cast<int>(s_Object->m_eCameraOffset)));

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsNotCurrentDistractionTarget::TypeInfo = ZHMTypeInfo("SCondition_IsNotCurrentDistractionTarget", SCondition_IsNotCurrentDistractionTarget::WriteJson, SCondition_IsNotCurrentDistractionTarget::WriteSimpleJson);

void SCondition_IsNotCurrentDistractionTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsNotCurrentDistractionTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsNotCurrentDistractionTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsNotCurrentDistractionTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SClothVertex::TypeInfo = ZHMTypeInfo("SClothVertex", SClothVertex::WriteJson, SClothVertex::WriteSimpleJson);

void SClothVertex::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothVertex*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nColumn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nColumn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRow;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothVertex::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothVertex*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nColumn") << ":";
	p_Stream << s_Object->m_nColumn;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRow") << ":";
	p_Stream << s_Object->m_nRow;

	p_Stream << "}";
}

ZHMTypeInfo SActorManagerReferencableData::TypeInfo = ZHMTypeInfo("SActorManagerReferencableData", SActorManagerReferencableData::WriteJson, SActorManagerReferencableData::WriteSimpleJson);

void SActorManagerReferencableData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorManagerReferencableData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aSituationTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSituationTypes.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSituationTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Item))) << "}";
		p_Stream << "}";

		if (i < s_Object->m_aSituationTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorManagerReferencableData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorManagerReferencableData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aSituationTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSituationTypes.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSituationTypes[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Item)));

		if (i < s_Object->m_aSituationTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IPhysicsAccessor::TypeInfo = ZHMTypeInfo("IPhysicsAccessor", IPhysicsAccessor::WriteJson, IPhysicsAccessor::WriteSimpleJson);

void IPhysicsAccessor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPhysicsAccessor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPhysicsAccessor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPhysicsAccessor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IStaticPhysics::TypeInfo = ZHMTypeInfo("IStaticPhysics", IStaticPhysics::WriteJson, IStaticPhysics::WriteSimpleJson);

void IStaticPhysics::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IStaticPhysics*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IStaticPhysics::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IStaticPhysics*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZEntityRef::TypeInfo = ZHMTypeInfo("ZEntityRef", ZEntityRef::WriteJson, ZEntityRef::WriteSimpleJson);

void ZEntityRef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityRef*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEntityRef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityRef*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IRenderPostfilterControllerEntity::TypeInfo = ZHMTypeInfo("IRenderPostfilterControllerEntity", IRenderPostfilterControllerEntity::WriteJson, IRenderPostfilterControllerEntity::WriteSimpleJson);

void IRenderPostfilterControllerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderPostfilterControllerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderPostfilterControllerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderPostfilterControllerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IColorCorrectionCurvesEntity::TypeInfo = ZHMTypeInfo("IColorCorrectionCurvesEntity", IColorCorrectionCurvesEntity::WriteJson, IColorCorrectionCurvesEntity::WriteSimpleJson);

void IColorCorrectionCurvesEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IColorCorrectionCurvesEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IColorCorrectionCurvesEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IColorCorrectionCurvesEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SharedEventCurrent::TypeInfo = ZHMTypeInfo("SCondition_SharedEventCurrent", SCondition_SharedEventCurrent::WriteJson, SCondition_SharedEventCurrent::WriteSimpleJson);

void SCondition_SharedEventCurrent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SharedEventCurrent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SharedEventCurrent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SharedEventCurrent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo SDeadBodyInfoSaveData::TypeInfo = ZHMTypeInfo("SDeadBodyInfoSaveData", SDeadBodyInfoSaveData::WriteJson, SDeadBodyInfoSaveData::WriteSimpleJson);

void SDeadBodyInfoSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDeadBodyInfoSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_knownByActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_knownByActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_knownByActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_knownByActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tKnownSince") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tKnownSince, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tInvestigatedSince") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tInvestigatedSince, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGuarded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGuarded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBodyInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBodyInvestigated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByAccident") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadByAccident;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByUnnoticed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadByUnnoticed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHitmanSuspectedInCurrentOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHitmanSuspectedInCurrentOutfit;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByExplosion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadByExplosion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsFoundOutsideNavmeshAndIgnored") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsFoundOutsideNavmeshAndIgnored;
	p_Stream << "}";

	p_Stream << "}";
}

void SDeadBodyInfoSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDeadBodyInfoSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_knownByActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_knownByActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_knownByActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_knownByActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tKnownSince") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tKnownSince, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tInvestigatedSince") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tInvestigatedSince, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bGuarded") << ":";
	p_Stream << s_Object->m_bGuarded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBodyInvestigated") << ":";
	p_Stream << s_Object->m_bBodyInvestigated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHidden") << ":";
	p_Stream << s_Object->m_bHidden;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByAccident") << ":";
	p_Stream << s_Object->m_bDeadByAccident;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByUnnoticed") << ":";
	p_Stream << s_Object->m_bDeadByUnnoticed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHitmanSuspectedInCurrentOutfit") << ":";
	p_Stream << s_Object->m_bHitmanSuspectedInCurrentOutfit;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByExplosion") << ":";
	p_Stream << s_Object->m_bDeadByExplosion;
	p_Stream << ",";

	p_Stream << JsonStr("m_IsFoundOutsideNavmeshAndIgnored") << ":";
	p_Stream << s_Object->m_IsFoundOutsideNavmeshAndIgnored;

	p_Stream << "}";
}

ZHMTypeInfo SDeadBodySensorSaveData::TypeInfo = ZHMTypeInfo("SDeadBodySensorSaveData", SDeadBodySensorSaveData::WriteJson, SDeadBodySensorSaveData::WriteSimpleJson);

void SDeadBodySensorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDeadBodySensorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBodies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDeadBodyInfoSaveData") << "," << JsonStr("$val") << ":";
		SDeadBodyInfoSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBodies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBodyIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SDeadBodySensorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDeadBodySensorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBodies[i];
		SDeadBodyInfoSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBodies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyIndex") << ":";
	p_Stream << s_Object->m_nBodyIndex;

	p_Stream << "}";
}

ZHMTypeInfo SCheckLastPositionGroupSaveData::TypeInfo = ZHMTypeInfo("SCheckLastPositionGroupSaveData", SCheckLastPositionGroupSaveData::WriteJson, SCheckLastPositionGroupSaveData::WriteSimpleJson);

void SCheckLastPositionGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCheckLastPositionGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLeaderTargetNodeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLeaderTargetNodeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeaderOrderAssigned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLeaderOrderAssigned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAssistantOrderAssigned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAssistantOrderAssigned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSearchCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSearchCompleted;
	p_Stream << "}";

	p_Stream << "}";
}

void SCheckLastPositionGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCheckLastPositionGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLeaderTargetNodeIndex") << ":";
	p_Stream << s_Object->m_nLeaderTargetNodeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeaderOrderAssigned") << ":";
	p_Stream << s_Object->m_bLeaderOrderAssigned;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAssistantOrderAssigned") << ":";
	p_Stream << s_Object->m_bAssistantOrderAssigned;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSearchCompleted") << ":";
	p_Stream << s_Object->m_bSearchCompleted;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsValidForSuitcaseAssistance::TypeInfo = ZHMTypeInfo("SCondition_IsValidForSuitcaseAssistance", SCondition_IsValidForSuitcaseAssistance::WriteJson, SCondition_IsValidForSuitcaseAssistance::WriteSimpleJson);

void SCondition_IsValidForSuitcaseAssistance::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsValidForSuitcaseAssistance*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("npc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->npc, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsValidForSuitcaseAssistance::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsValidForSuitcaseAssistance*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("npc") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->npc, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SItemInstanceSaveData::TypeInfo = ZHMTypeInfo("SItemInstanceSaveData", SItemInstanceSaveData::WriteJson, SItemInstanceSaveData::WriteSimpleJson);

void SItemInstanceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemInstanceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_repositoryId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_repositoryId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sOnlineInstanceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sOnlineInstanceId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aItemModifierIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemModifierIds.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItemModifierIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItemModifierIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SItemInstanceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemInstanceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_repositoryId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_repositoryId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_sOnlineInstanceId") << ":";
	p_Stream << JsonStr(s_Object->m_sOnlineInstanceId);
	p_Stream << ",";

	p_Stream << JsonStr("m_aItemModifierIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemModifierIds.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItemModifierIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aItemModifierIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SWorldInventoryInstanceSaveData::TypeInfo = ZHMTypeInfo("SWorldInventoryInstanceSaveData", SWorldInventoryInstanceSaveData::WriteJson, SWorldInventoryInstanceSaveData::WriteSimpleJson);

void SWorldInventoryInstanceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWorldInventoryInstanceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItemInstanceSaveData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemInstanceSaveData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItemInstanceSaveData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemInstanceSaveData") << "," << JsonStr("$val") << ":";
		SItemInstanceSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItemInstanceSaveData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SWorldInventoryInstanceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWorldInventoryInstanceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItemInstanceSaveData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemInstanceSaveData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItemInstanceSaveData[i];
		SItemInstanceSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aItemInstanceSaveData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ICameraController::TypeInfo = ZHMTypeInfo("ICameraController", ICameraController::WriteJson, ICameraController::WriteSimpleJson);

void ICameraController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICameraController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICameraController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICameraController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorSpreadTransitionOperatorMaterialActorSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadTransitionOperatorMaterialActorSaveData", SActorSpreadTransitionOperatorMaterialActorSaveData::WriteJson, SActorSpreadTransitionOperatorMaterialActorSaveData::WriteSimpleJson);

void SActorSpreadTransitionOperatorMaterialActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_Actor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOpacity;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Actor") << ":";
	p_Stream << s_Object->m_Actor;
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << s_Object->m_fOpacity;

	p_Stream << "}";
}

ZHMTypeInfo SEntityPath::TypeInfo = ZHMTypeInfo("SEntityPath", SEntityPath::WriteJson, SEntityPath::WriteSimpleJson);

void SEntityPath::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPath*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nOwnerID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOwnerID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityPath[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntityPath.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEntityPath::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPath*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nOwnerID") << ":";
	p_Stream << s_Object->m_nOwnerID;
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityPath[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntityPath.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsHighestPriorityTypeToInvestigate::TypeInfo = ZHMTypeInfo("SCondition_IsHighestPriorityTypeToInvestigate", SCondition_IsHighestPriorityTypeToInvestigate::WriteJson, SCondition_IsHighestPriorityTypeToInvestigate::WriteSimpleJson);

void SCondition_IsHighestPriorityTypeToInvestigate::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsHighestPriorityTypeToInvestigate*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("distractionType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->distractionType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->distractionType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsHighestPriorityTypeToInvestigate::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsHighestPriorityTypeToInvestigate*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("distractionType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->distractionType)));

	p_Stream << "}";
}

ZHMTypeInfo IScreenplayContext::TypeInfo = ZHMTypeInfo("IScreenplayContext", IScreenplayContext::WriteJson, IScreenplayContext::WriteSimpleJson);

void IScreenplayContext::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IScreenplayContext*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IScreenplayContext::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IScreenplayContext*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ICharacterCoreInventoryState::TypeInfo = ZHMTypeInfo("ICharacterCoreInventoryState", ICharacterCoreInventoryState::WriteJson, ICharacterCoreInventoryState::WriteSimpleJson);

void ICharacterCoreInventoryState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterCoreInventoryState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterCoreInventoryState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterCoreInventoryState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ICharacterInventoryState::TypeInfo = ZHMTypeInfo("ICharacterInventoryState", ICharacterInventoryState::WriteJson, ICharacterInventoryState::WriteSimpleJson);

void ICharacterInventoryState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterInventoryState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterInventoryState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterInventoryState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SZHUDIgnoreVisibilitySaveData::TypeInfo = ZHMTypeInfo("SZHUDIgnoreVisibilitySaveData", SZHUDIgnoreVisibilitySaveData::WriteJson, SZHUDIgnoreVisibilitySaveData::WriteSimpleJson);

void SZHUDIgnoreVisibilitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SZHUDIgnoreVisibilitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("alpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->alpha;
	p_Stream << "}";

	p_Stream << "}";
}

void SZHUDIgnoreVisibilitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SZHUDIgnoreVisibilitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("alpha") << ":";
	p_Stream << s_Object->alpha;

	p_Stream << "}";
}

ZHMTypeInfo SGameCamProfileEntitySaveData::TypeInfo = ZHMTypeInfo("SGameCamProfileEntitySaveData", SGameCamProfileEntitySaveData::WriteJson, SGameCamProfileEntitySaveData::WriteSimpleJson);

void SGameCamProfileEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameCamProfileEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << "}";

	p_Stream << "}";
}

void SGameCamProfileEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameCamProfileEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << s_Object->m_rHero;

	p_Stream << "}";
}

ZHMTypeInfo SEntityTemplateExposedEntity::TypeInfo = ZHMTypeInfo("SEntityTemplateExposedEntity", SEntityTemplateExposedEntity::WriteJson, SEntityTemplateExposedEntity::WriteSimpleJson);

void SEntityTemplateExposedEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateExposedEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aTargets.size(); ++i)
	{
		auto& s_Item = s_Object->aTargets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
		SEntityTemplateReference::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aTargets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTemplateExposedEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateExposedEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << ",";

	p_Stream << JsonStr("aTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aTargets.size(); ++i)
	{
		auto& s_Item = s_Object->aTargets[i];
		SEntityTemplateReference::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->aTargets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IItemContainer::TypeInfo = ZHMTypeInfo("IItemContainer", IItemContainer::WriteJson, IItemContainer::WriteSimpleJson);

void IItemContainer::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemContainer*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IItemContainer::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemContainer*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IWorldMapMarker::TypeInfo = ZHMTypeInfo("IWorldMapMarker", IWorldMapMarker::WriteJson, IWorldMapMarker::WriteSimpleJson);

void IWorldMapMarker::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IWorldMapMarker*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IWorldMapMarker::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IWorldMapMarker*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZAttentionToPersonGroup::TypeInfo = ZHMTypeInfo("ZAttentionToPersonGroup", ZAttentionToPersonGroup::WriteJson, ZAttentionToPersonGroup::WriteSimpleJson);

void ZAttentionToPersonGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAttentionToPersonGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZAttentionToPersonGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAttentionToPersonGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IRenderMaterialOverrideAssociation::TypeInfo = ZHMTypeInfo("IRenderMaterialOverrideAssociation", IRenderMaterialOverrideAssociation::WriteJson, IRenderMaterialOverrideAssociation::WriteSimpleJson);

void IRenderMaterialOverrideAssociation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderMaterialOverrideAssociation*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderMaterialOverrideAssociation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderMaterialOverrideAssociation*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SVolumeTriggerListenerSaveData::TypeInfo = ZHMTypeInfo("SVolumeTriggerListenerSaveData", SVolumeTriggerListenerSaveData::WriteJson, SVolumeTriggerListenerSaveData::WriteSimpleJson);

void SVolumeTriggerListenerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVolumeTriggerListenerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bColliding") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bColliding;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInternalEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInternalEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SVolumeTriggerListenerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVolumeTriggerListenerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bColliding") << ":";
	p_Stream << s_Object->m_bColliding;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInternalEnabled") << ":";
	p_Stream << s_Object->m_bInternalEnabled;

	p_Stream << "}";
}

ZHMTypeInfo SVolumeTriggersSaveData::TypeInfo = ZHMTypeInfo("SVolumeTriggersSaveData", SVolumeTriggersSaveData::WriteJson, SVolumeTriggersSaveData::WriteSimpleJson);

void SVolumeTriggersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVolumeTriggersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVolumeTriggerListenerSaveData") << "," << JsonStr("$val") << ":";
		SVolumeTriggerListenerSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SVolumeTriggersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVolumeTriggersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SVolumeTriggerListenerSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SPerceptibleCrowdBodySaveData::TypeInfo = ZHMTypeInfo("SPerceptibleCrowdBodySaveData", SPerceptibleCrowdBodySaveData::WriteJson, SPerceptibleCrowdBodySaveData::WriteSimpleJson);

void SPerceptibleCrowdBodySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPerceptibleCrowdBodySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCombatZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCombatZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSharedKnowledge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSharedKnowledge;
	p_Stream << "}";

	p_Stream << "}";
}

void SPerceptibleCrowdBodySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPerceptibleCrowdBodySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCombatZone") << ":";
	p_Stream << s_Object->m_rCombatZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSharedKnowledge") << ":";
	p_Stream << s_Object->m_rSharedKnowledge;

	p_Stream << "}";
}

ZHMTypeInfo ICharacterIllegalInteractionsState::TypeInfo = ZHMTypeInfo("ICharacterIllegalInteractionsState", ICharacterIllegalInteractionsState::WriteJson, ICharacterIllegalInteractionsState::WriteSimpleJson);

void ICharacterIllegalInteractionsState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterIllegalInteractionsState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterIllegalInteractionsState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterIllegalInteractionsState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ICharacterSpeakController::TypeInfo = ZHMTypeInfo("ICharacterSpeakController", ICharacterSpeakController::WriteJson, ICharacterSpeakController::WriteSimpleJson);

void ICharacterSpeakController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterSpeakController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterSpeakController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterSpeakController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SFaceOrderSaveData::TypeInfo = ZHMTypeInfo("SFaceOrderSaveData", SFaceOrderSaveData::WriteJson, SFaceOrderSaveData::WriteSimpleJson);

void SFaceOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFaceOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bLookAt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLookAt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAimAt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateKnownPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUpdateKnownPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopActFast;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDurationVariance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDurationVariance;
	p_Stream << "}";

	p_Stream << "}";
}

void SFaceOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFaceOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bLookAt") << ":";
	p_Stream << s_Object->m_bLookAt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAt") << ":";
	p_Stream << s_Object->m_bAimAt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateKnownPosition") << ":";
	p_Stream << s_Object->m_bUpdateKnownPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << s_Object->m_bStopActFast;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDurationVariance") << ":";
	p_Stream << s_Object->m_fDurationVariance;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IllegalItemPickedUp::TypeInfo = ZHMTypeInfo("SCondition_IllegalItemPickedUp", SCondition_IllegalItemPickedUp::WriteJson, SCondition_IllegalItemPickedUp::WriteSimpleJson);

void SCondition_IllegalItemPickedUp::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IllegalItemPickedUp*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->includeWeapons;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IllegalItemPickedUp::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IllegalItemPickedUp*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << s_Object->includeWeapons;

	p_Stream << "}";
}

ZHMTypeInfo SExactCompressedGridFloatField::TypeInfo = ZHMTypeInfo("SExactCompressedGridFloatField", SExactCompressedGridFloatField::WriteJson, SExactCompressedGridFloatField::WriteSimpleJson);

void SExactCompressedGridFloatField::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExactCompressedGridFloatField*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_aValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SExactCompressedGridFloatField::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExactCompressedGridFloatField*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_aValues[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SIntelData::TypeInfo = ZHMTypeInfo("SIntelData", SIntelData::WriteJson, SIntelData::WriteSimpleJson);

void SIntelData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sHeadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sHeadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyHeadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyHeadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodytext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sBodytext);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sImage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sImage);
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sHeadline") << ":";
	p_Stream << JsonStr(s_Object->m_sHeadline);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyHeadline") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyHeadline);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodytext") << ":";
	p_Stream << JsonStr(s_Object->m_sBodytext);
	p_Stream << ",";

	p_Stream << JsonStr("m_sImage") << ":";
	p_Stream << JsonStr(s_Object->m_sImage);

	p_Stream << "}";
}

ZHMTypeInfo SColorRGBA::TypeInfo = ZHMTypeInfo("SColorRGBA", SColorRGBA::WriteJson, SColorRGBA::WriteSimpleJson);

void SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("r") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->r;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->g;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->b;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->a;
	p_Stream << "}";

	p_Stream << "}";
}

void SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("r") << ":";
	p_Stream << s_Object->r;
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << s_Object->g;
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << s_Object->b;
	p_Stream << ",";

	p_Stream << JsonStr("a") << ":";
	p_Stream << s_Object->a;

	p_Stream << "}";
}

ZHMTypeInfo SLightSaveData::TypeInfo = ZHMTypeInfo("SLightSaveData", SLightSaveData::WriteJson, SLightSaveData::WriteSimpleJson);

void SLightSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLightSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DiffuseColor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_DiffuseColor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAspectXByY_Actual") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAspectXByY_Actual;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SLightSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLightSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_DiffuseColor") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_DiffuseColor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAspectXByY_Actual") << ":";
	p_Stream << s_Object->m_fAspectXByY_Actual;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

ZHMTypeInfo SEntityTemplatePropertyOverride::TypeInfo = ZHMTypeInfo("SEntityTemplatePropertyOverride", SEntityTemplatePropertyOverride::WriteJson, SEntityTemplatePropertyOverride::WriteSimpleJson);

void SEntityTemplatePropertyOverride::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePropertyOverride*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("propertyOwner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->propertyOwner, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
	SEntityTemplateProperty::WriteJson(&s_Object->propertyValue, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePropertyOverride::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePropertyOverride*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("propertyOwner") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->propertyOwner, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("propertyValue") << ":";
	SEntityTemplateProperty::WriteSimpleJson(&s_Object->propertyValue, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo STemplateEntityFactory::TypeInfo = ZHMTypeInfo("STemplateEntityFactory", STemplateEntityFactory::WriteJson, STemplateEntityFactory::WriteSimpleJson);

void STemplateEntityFactory::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateEntityFactory*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("subType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->subType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item = s_Object->subEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STemplateFactorySubEntity") << "," << JsonStr("$val") << ":";
		STemplateFactorySubEntity::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("propertyOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->propertyOverrides[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePropertyOverride") << "," << JsonStr("$val") << ":";
		SEntityTemplatePropertyOverride::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyOverrides.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntityFactory::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateEntityFactory*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("subType") << ":";
	p_Stream << s_Object->subType;
	p_Stream << ",";

	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item = s_Object->subEntities[i];
		STemplateFactorySubEntity::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("propertyOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->propertyOverrides[i];
		SEntityTemplatePropertyOverride::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->propertyOverrides.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << s_Item;

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_FindSuitcaseAssitanceForSentry::TypeInfo = ZHMTypeInfo("SCondition_FindSuitcaseAssitanceForSentry", SCondition_FindSuitcaseAssitanceForSentry::WriteJson, SCondition_FindSuitcaseAssitanceForSentry::WriteSimpleJson);

void SCondition_FindSuitcaseAssitanceForSentry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_FindSuitcaseAssitanceForSentry*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_FindSuitcaseAssitanceForSentry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_FindSuitcaseAssitanceForSentry*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMathDistanceSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector3", SMathDistanceSaveData_SVector3::WriteJson, SMathDistanceSaveData_SVector3::WriteSimpleJson);

void SMathDistanceSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fB, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SGuardPointOrderSaveData::TypeInfo = ZHMTypeInfo("SGuardPointOrderSaveData", SGuardPointOrderSaveData::WriteJson, SGuardPointOrderSaveData::WriteSimpleJson);

void SGuardPointOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardPointOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_guardPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_guardPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_walkOnly") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_walkOnly;
	p_Stream << "}";

	p_Stream << "}";
}

void SGuardPointOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardPointOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_guardPoint") << ":";
	p_Stream << s_Object->m_guardPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_walkOnly") << ":";
	p_Stream << s_Object->m_walkOnly;

	p_Stream << "}";
}

ZHMTypeInfo SSavableData::TypeInfo = ZHMTypeInfo("SSavableData", SSavableData::WriteJson, SSavableData::WriteSimpleJson);

void SSavableData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSavableData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_EntitiesData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_EntitiesData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Data, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nId;
	p_Stream << "}";

	p_Stream << "}";
}

void SSavableData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSavableData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_EntitiesData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_EntitiesData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Data, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nId") << ":";
	p_Stream << s_Object->m_nId;

	p_Stream << "}";
}

ZHMTypeInfo ICollisionShapeProvider::TypeInfo = ZHMTypeInfo("ICollisionShapeProvider", ICollisionShapeProvider::WriteJson, ICollisionShapeProvider::WriteSimpleJson);

void ICollisionShapeProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICollisionShapeProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICollisionShapeProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICollisionShapeProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorVisibilityConditionSaveData::TypeInfo = ZHMTypeInfo("SActorVisibilityConditionSaveData", SActorVisibilityConditionSaveData::WriteJson, SActorVisibilityConditionSaveData::WriteSimpleJson);

void SActorVisibilityConditionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorVisibilityConditionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorVisibilityConditionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorVisibilityConditionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pActor") << ":";
	p_Stream << s_Object->m_pActor;

	p_Stream << "}";
}

ZHMTypeInfo SUIBreadcrumbDataSaveData::TypeInfo = ZHMTypeInfo("SUIBreadcrumbDataSaveData", SUIBreadcrumbDataSaveData::WriteJson, SUIBreadcrumbDataSaveData::WriteSimpleJson);

void SUIBreadcrumbDataSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SUIBreadcrumbDataSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nState;
	p_Stream << "}";

	p_Stream << "}";
}

void SUIBreadcrumbDataSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SUIBreadcrumbDataSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << s_Object->m_nState;

	p_Stream << "}";
}

ZHMTypeInfo SRandomTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SRandomTimerEntitySaveData", SRandomTimerEntitySaveData::WriteJson, SRandomTimerEntitySaveData::WriteSimpleJson);

void SRandomTimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRandomTimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMinTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMinTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMaxTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMaxTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fProbability") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProbability;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << "}";

	p_Stream << "}";
}

void SRandomTimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRandomTimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << ",";

	p_Stream << JsonStr("m_fMinTime") << ":";
	p_Stream << s_Object->m_fMinTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fMaxTime") << ":";
	p_Stream << s_Object->m_fMaxTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fProbability") << ":";
	p_Stream << s_Object->m_fProbability;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << s_Object->m_nRemaining;

	p_Stream << "}";
}

ZHMTypeInfo IHM5GameMonitor::TypeInfo = ZHMTypeInfo("IHM5GameMonitor", IHM5GameMonitor::WriteJson, IHM5GameMonitor::WriteSimpleJson);

void IHM5GameMonitor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5GameMonitor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5GameMonitor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5GameMonitor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ICharacterShowItemState::TypeInfo = ZHMTypeInfo("ICharacterShowItemState", ICharacterShowItemState::WriteJson, ICharacterShowItemState::WriteSimpleJson);

void ICharacterShowItemState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterShowItemState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterShowItemState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterShowItemState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsItemIllegalOnHitman::TypeInfo = ZHMTypeInfo("SCondition_IsItemIllegalOnHitman", SCondition_IsItemIllegalOnHitman::WriteJson, SCondition_IsItemIllegalOnHitman::WriteSimpleJson);

void SCondition_IsItemIllegalOnHitman::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsItemIllegalOnHitman*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsItemIllegalOnHitman::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsItemIllegalOnHitman*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector3", SMathMultiplyDivideSaveData_SVector3::WriteJson, SMathMultiplyDivideSaveData_SVector3::WriteSimpleJson);

void SMathMultiplyDivideSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

ZHMTypeInfo SMathMultipliesSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector3", SMathMultipliesSaveData_SVector3::WriteJson, SMathMultipliesSaveData_SVector3::WriteSimpleJson);

void SMathMultipliesSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_SVector3") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_SVector3::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_SVector3::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ITriggerVolume::TypeInfo = ZHMTypeInfo("ITriggerVolume", ITriggerVolume::WriteJson, ITriggerVolume::WriteSimpleJson);

void ITriggerVolume::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITriggerVolume*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITriggerVolume::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITriggerVolume*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasTension::TypeInfo = ZHMTypeInfo("SCondition_HasTension", SCondition_HasTension::WriteJson, SCondition_HasTension::WriteSimpleJson);

void SCondition_HasTension::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasTension*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("tension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->tension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->tension))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasTension::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasTension*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("tension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->tension)));

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpSaveData_SColorRGBA::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SColorRGBA", SMathLerpSaveData_SColorRGBA::WriteJson, SMathLerpSaveData_SColorRGBA::WriteSimpleJson);

void SMathLerpSaveData_SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGBA") << "," << JsonStr("$val") << ":";
	SColorRGBA::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGBA") << "," << JsonStr("$val") << ":";
	SColorRGBA::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SColorRGBA::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SColorRGBA::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector3", SMathLerpSaveData_SVector3::WriteJson, SMathLerpSaveData_SVector3::WriteSimpleJson);

void SMathLerpSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

ZHMTypeInfo IRoomEntity::TypeInfo = ZHMTypeInfo("IRoomEntity", IRoomEntity::WriteJson, IRoomEntity::WriteSimpleJson);

void IRoomEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRoomEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRoomEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRoomEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SDrama2ActorCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2ActorCollectionSaveData", SDrama2ActorCollectionSaveData::WriteJson, SDrama2ActorCollectionSaveData::WriteSimpleJson);

void SDrama2ActorCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2ActorCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2ActorSaveState") << "," << JsonStr("$val") << ":";
		SDrama2ActorSaveState::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2ActorCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2ActorCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDrama2ActorSaveState::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SDramaActorSaveState::TypeInfo = ZHMTypeInfo("SDramaActorSaveState", SDramaActorSaveState::WriteJson, SDramaActorSaveState::WriteSimpleJson);

void SDramaActorSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaActorSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSpeaking;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaActorSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaActorSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << s_Object->m_bIsSpeaking;

	p_Stream << "}";
}

ZHMTypeInfo SDramaActorCollectionSaveData::TypeInfo = ZHMTypeInfo("SDramaActorCollectionSaveData", SDramaActorCollectionSaveData::WriteJson, SDramaActorCollectionSaveData::WriteSimpleJson);

void SDramaActorCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaActorCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaActorSaveState") << "," << JsonStr("$val") << ":";
		SDramaActorSaveState::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDramaActorCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaActorCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDramaActorSaveState::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SDrama2SituationSaveData::TypeInfo = ZHMTypeInfo("SDrama2SituationSaveData", SDrama2SituationSaveData::WriteJson, SDrama2SituationSaveData::WriteSimpleJson);

void SDrama2SituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nDoneTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDoneTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnCooldown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOnCooldown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bProvidersStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsTerminated;
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2SituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << ",";

	p_Stream << JsonStr("m_nDoneTime") << ":";
	p_Stream << s_Object->m_nDoneTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnCooldown") << ":";
	p_Stream << s_Object->m_bIsOnCooldown;
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << s_Object->m_bProvidersStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << s_Object->m_bIsTerminated;

	p_Stream << "}";
}

ZHMTypeInfo SDrama2SituationCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2SituationCollectionSaveData", SDrama2SituationCollectionSaveData::WriteJson, SDrama2SituationCollectionSaveData::WriteSimpleJson);

void SDrama2SituationCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SituationCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2SituationSaveData") << "," << JsonStr("$val") << ":";
		SDrama2SituationSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2SituationCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SituationCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDrama2SituationSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SDramaSituationSaveData::TypeInfo = ZHMTypeInfo("SDramaSituationSaveData", SDramaSituationSaveData::WriteJson, SDramaSituationSaveData::WriteSimpleJson);

void SDramaSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsTerminated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bProvidersStarted;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << s_Object->m_bIsTerminated;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << s_Object->m_bProvidersStarted;

	p_Stream << "}";
}

ZHMTypeInfo SDramaSituationCollectionSaveData::TypeInfo = ZHMTypeInfo("SDramaSituationCollectionSaveData", SDramaSituationCollectionSaveData::WriteJson, SDramaSituationCollectionSaveData::WriteSimpleJson);

void SDramaSituationCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaSituationCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaSituationSaveData") << "," << JsonStr("$val") << ":";
		SDramaSituationSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDramaSituationCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaSituationCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDramaSituationSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SDrama2SetupSaveData::TypeInfo = ZHMTypeInfo("SDrama2SetupSaveData", SDrama2SetupSaveData::WriteJson, SDrama2SetupSaveData::WriteSimpleJson);

void SDrama2SetupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SetupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bDoneTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDoneTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EScreenPlayState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EScreenPlayState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2SetupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SetupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bDoneTriggered") << ":";
	p_Stream << s_Object->m_bDoneTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EScreenPlayState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << s_Object->m_rSituation;

	p_Stream << "}";
}

ZHMTypeInfo SDrama2SetupCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2SetupCollectionSaveData", SDrama2SetupCollectionSaveData::WriteJson, SDrama2SetupCollectionSaveData::WriteSimpleJson);

void SDrama2SetupCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SetupCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2SetupSaveData") << "," << JsonStr("$val") << ":";
		SDrama2SetupSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2SetupCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SetupCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDrama2SetupSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SInventoryUISlotSlim::TypeInfo = ZHMTypeInfo("SInventoryUISlotSlim", SInventoryUISlotSlim::WriteJson, SInventoryUISlotSlim::WriteSimpleJson);

void SInventoryUISlotSlim::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUISlotSlim*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->containedIcon, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryUISlotSlim::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUISlotSlim*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZVariant::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	ZVariant::WriteSimpleJson(&s_Object->containedIcon, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SInventoryUI::TypeInfo = ZHMTypeInfo("SInventoryUI", SInventoryUI::WriteJson, SInventoryUI::WriteSimpleJson);

void SInventoryUI::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUI*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mainslotsSlim") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslotsSlim.size(); ++i)
	{
		auto& s_Item = s_Object->mainslotsSlim[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryUISlotSlim") << "," << JsonStr("$val") << ":";
		SInventoryUISlotSlim::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->mainslotsSlim.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("otherslotsCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->otherslotsCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("selectedIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->selectedIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("isActionInventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->isActionInventory;
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryUI::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUI*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mainslotsSlim") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslotsSlim.size(); ++i)
	{
		auto& s_Item = s_Object->mainslotsSlim[i];
		SInventoryUISlotSlim::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->mainslotsSlim.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("otherslotsCount") << ":";
	p_Stream << s_Object->otherslotsCount;
	p_Stream << ",";

	p_Stream << JsonStr("selectedIndex") << ":";
	p_Stream << s_Object->selectedIndex;
	p_Stream << ",";

	p_Stream << JsonStr("isActionInventory") << ":";
	p_Stream << s_Object->isActionInventory;

	p_Stream << "}";
}

ZHMTypeInfo SActorBoneAttachSaveData::TypeInfo = ZHMTypeInfo("SActorBoneAttachSaveData", SActorBoneAttachSaveData::WriteJson, SActorBoneAttachSaveData::WriteSimpleJson);

void SActorBoneAttachSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneAttachSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rAttachmentTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rAttachmentTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsAttached;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorBoneAttachSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneAttachSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rAttachmentTarget") << ":";
	p_Stream << s_Object->m_rAttachmentTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << s_Object->m_bIsAttached;

	p_Stream << "}";
}

ZHMTypeInfo SActorBoneAttachmentsSaveData::TypeInfo = ZHMTypeInfo("SActorBoneAttachmentsSaveData", SActorBoneAttachmentsSaveData::WriteJson, SActorBoneAttachmentsSaveData::WriteSimpleJson);

void SActorBoneAttachmentsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneAttachmentsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorBoneAttachSaveData") << "," << JsonStr("$val") << ":";
		SActorBoneAttachSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorBoneAttachmentsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneAttachmentsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SActorBoneAttachSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IMorphemeCutSequenceAnimatable::TypeInfo = ZHMTypeInfo("IMorphemeCutSequenceAnimatable", IMorphemeCutSequenceAnimatable::WriteJson, IMorphemeCutSequenceAnimatable::WriteSimpleJson);

void IMorphemeCutSequenceAnimatable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeCutSequenceAnimatable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IInputListener::TypeInfo = ZHMTypeInfo("IInputListener", IInputListener::WriteJson, IInputListener::WriteSimpleJson);

void IInputListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IInputListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IInputListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IInputListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SOptionValueSaveData::TypeInfo = ZHMTypeInfo("SOptionValueSaveData", SOptionValueSaveData::WriteJson, SOptionValueSaveData::WriteSimpleJson);

void SOptionValueSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOptionValueSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SOptionValueSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOptionValueSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Value") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Value, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SFontDefinition::TypeInfo = ZHMTypeInfo("SFontDefinition", SFontDefinition::WriteJson, SFontDefinition::WriteSimpleJson);

void SFontDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFontDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sFontId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFontId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sFontName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFontName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eFontFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EFontFlags") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eFontFlags) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EFontFlags", static_cast<int>(s_Object->eFontFlags))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fScaleFactor;
	p_Stream << "}";

	p_Stream << "}";
}

void SFontDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFontDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sFontId") << ":";
	p_Stream << JsonStr(s_Object->sFontId);
	p_Stream << ",";

	p_Stream << JsonStr("sFontName") << ":";
	p_Stream << JsonStr(s_Object->sFontName);
	p_Stream << ",";

	p_Stream << JsonStr("eFontFlags") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EFontFlags", static_cast<int>(s_Object->eFontFlags)));
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << s_Object->fScaleFactor;

	p_Stream << "}";
}

ZHMTypeInfo SFontLibraryDefinition::TypeInfo = ZHMTypeInfo("SFontLibraryDefinition", SFontLibraryDefinition::WriteJson, SFontLibraryDefinition::WriteSimpleJson);

void SFontLibraryDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFontLibraryDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sFontLocaleID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFontLocaleID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFontDefinitions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFontDefinitions.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFontDefinitions[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFontDefinition") << "," << JsonStr("$val") << ":";
		SFontDefinition::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aFontDefinitions.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SFontLibraryDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFontLibraryDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sFontLocaleID") << ":";
	p_Stream << JsonStr(s_Object->sFontLocaleID);
	p_Stream << ",";

	p_Stream << JsonStr("m_aFontDefinitions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFontDefinitions.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFontDefinitions[i];
		SFontDefinition::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aFontDefinitions.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IBoneAttachEntity::TypeInfo = ZHMTypeInfo("IBoneAttachEntity", IBoneAttachEntity::WriteJson, IBoneAttachEntity::WriteSimpleJson);

void IBoneAttachEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneAttachEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneAttachEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneAttachEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IDynamicAttachment::TypeInfo = ZHMTypeInfo("IDynamicAttachment", IDynamicAttachment::WriteJson, IDynamicAttachment::WriteSimpleJson);

void IDynamicAttachment::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDynamicAttachment*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IDynamicAttachment::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDynamicAttachment*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCautiousVIPGroupState::TypeInfo = ZHMTypeInfo("SCautiousVIPGroupState", SCautiousVIPGroupState::WriteJson, SCautiousVIPGroupState::WriteSimpleJson);

void SCautiousVIPGroupState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousVIPGroupState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tMove") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tMove, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousVIPGroupState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousVIPGroupState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tMove") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tMove, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCautiousVIPGroupSaveData::TypeInfo = ZHMTypeInfo("SCautiousVIPGroupSaveData", SCautiousVIPGroupSaveData::WriteJson, SCautiousVIPGroupSaveData::WriteSimpleJson);

void SCautiousVIPGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousVIPGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_vip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_stateData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCautiousVIPGroupState") << "," << JsonStr("$val") << ":";
	SCautiousVIPGroupState::WriteJson(&s_Object->m_stateData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vipTargetNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_vipTargetNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_occupancyNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_occupancyNode;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousVIPGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousVIPGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vip") << ":";
	p_Stream << s_Object->m_vip;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_stateData") << ":";
	SCautiousVIPGroupState::WriteSimpleJson(&s_Object->m_stateData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vipTargetNode") << ":";
	p_Stream << s_Object->m_vipTargetNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_occupancyNode") << ":";
	p_Stream << s_Object->m_occupancyNode;

	p_Stream << "}";
}

ZHMTypeInfo SSituationGroupSaveData::TypeInfo = ZHMTypeInfo("SSituationGroupSaveData", SSituationGroupSaveData::WriteJson, SSituationGroupSaveData::WriteSimpleJson);

void SSituationGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << ",";

	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << s_Object->m_nGroupID;
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomData, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector2", SMathLerpSaveData_SVector2::WriteJson, SMathLerpSaveData_SVector2::WriteSimpleJson);

void SMathLerpSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpsSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector2", SMathLerpsSaveData_SVector2::WriteJson, SMathLerpsSaveData_SVector2::WriteSimpleJson);

void SMathLerpsSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SVector2") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SVector2::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SVector2::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZPlanningObjectiveInfoBuilder::TypeInfo = ZHMTypeInfo("ZPlanningObjectiveInfoBuilder", ZPlanningObjectiveInfoBuilder::WriteJson, ZPlanningObjectiveInfoBuilder::WriteSimpleJson);

void ZPlanningObjectiveInfoBuilder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPlanningObjectiveInfoBuilder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPlanningObjectiveInfoBuilder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPlanningObjectiveInfoBuilder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAnimatedActorStandOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorStandOrderSaveData", SAnimatedActorStandOrderSaveData::WriteJson, SAnimatedActorStandOrderSaveData::WriteSimpleJson);

void SAnimatedActorStandOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorStandOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vFacingDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vFacingDirection, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorStandOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorStandOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vFacingDirection") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vFacingDirection, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IRoleEventSource::TypeInfo = ZHMTypeInfo("IRoleEventSource", IRoleEventSource::WriteJson, IRoleEventSource::WriteSimpleJson);

void IRoleEventSource::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRoleEventSource*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRoleEventSource::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRoleEventSource*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCrowdFlowChannel::TypeInfo = ZHMTypeInfo("SCrowdFlowChannel", SCrowdFlowChannel::WriteJson, SCrowdFlowChannel::WriteSimpleJson);

void SCrowdFlowChannel::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdFlowChannel*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aFlowVectorIndex") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowVectorIndex.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFlowVectorIndex[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aFlowVectorIndex.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFlowCost") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowCost.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFlowCost[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aFlowCost.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdFlowChannel::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdFlowChannel*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aFlowVectorIndex") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowVectorIndex.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFlowVectorIndex[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_aFlowVectorIndex.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFlowCost") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowCost.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFlowCost[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aFlowCost.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MinDistance::TypeInfo = ZHMTypeInfo("SCondition_MinDistance", SCondition_MinDistance::WriteJson, SCondition_MinDistance::WriteSimpleJson);

void SCondition_MinDistance::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinDistance*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("a0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a0, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a1, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->a2;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MinDistance::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinDistance*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("a0") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a0, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a1, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("a2") << ":";
	p_Stream << s_Object->a2;

	p_Stream << "}";
}

ZHMTypeInfo SMovementDisguiseSafeZoneSaveData::TypeInfo = ZHMTypeInfo("SMovementDisguiseSafeZoneSaveData", SMovementDisguiseSafeZoneSaveData::WriteJson, SMovementDisguiseSafeZoneSaveData::WriteSimpleJson);

void SMovementDisguiseSafeZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDisguiseSafeZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rSafeZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSafeZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSafeZoneAnimNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSafeZoneAnimNode;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementDisguiseSafeZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDisguiseSafeZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rSafeZone") << ":";
	p_Stream << s_Object->m_rSafeZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_nSafeZoneAnimNode") << ":";
	p_Stream << s_Object->m_nSafeZoneAnimNode;

	p_Stream << "}";
}

ZHMTypeInfo IParticleEmitterEntity::TypeInfo = ZHMTypeInfo("IParticleEmitterEntity", IParticleEmitterEntity::WriteJson, IParticleEmitterEntity::WriteSimpleJson);

void IParticleEmitterEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleEmitterEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IParticleEmitterEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleEmitterEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZCautiousSearchGroup::TypeInfo = ZHMTypeInfo("ZCautiousSearchGroup", ZCautiousSearchGroup::WriteJson, ZCautiousSearchGroup::WriteSimpleJson);

void ZCautiousSearchGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCautiousSearchGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZCautiousSearchGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCautiousSearchGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAccessoryItemSaveData::TypeInfo = ZHMTypeInfo("SAccessoryItemSaveData", SAccessoryItemSaveData::WriteJson, SAccessoryItemSaveData::WriteSimpleJson);

void SAccessoryItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAccessoryItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBoneId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBoneId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAttached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SAccessoryItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAccessoryItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBoneId") << ":";
	p_Stream << s_Object->m_nBoneId;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << s_Object->m_bAttached;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

ZHMTypeInfo SKeywordSaveData::TypeInfo = ZHMTypeInfo("SKeywordSaveData", SKeywordSaveData::WriteJson, SKeywordSaveData::WriteSimpleJson);

void SKeywordSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKeywordSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_HolderSaveableId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HolderSaveableId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_KeywordID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_KeywordID;
	p_Stream << "}";

	p_Stream << "}";
}

void SKeywordSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKeywordSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_HolderSaveableId") << ":";
	p_Stream << s_Object->m_HolderSaveableId;
	p_Stream << ",";

	p_Stream << JsonStr("m_KeywordID") << ":";
	p_Stream << s_Object->m_KeywordID;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasCustomDistractionAckSoundDef::TypeInfo = ZHMTypeInfo("SCondition_HasCustomDistractionAckSoundDef", SCondition_HasCustomDistractionAckSoundDef::WriteJson, SCondition_HasCustomDistractionAckSoundDef::WriteSimpleJson);

void SCondition_HasCustomDistractionAckSoundDef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasCustomDistractionAckSoundDef*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasCustomDistractionAckSoundDef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasCustomDistractionAckSoundDef*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SituationHuntTarget::TypeInfo = ZHMTypeInfo("SCondition_SituationHuntTarget", SCondition_SituationHuntTarget::WriteJson, SCondition_SituationHuntTarget::WriteSimpleJson);

void SCondition_SituationHuntTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationHuntTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SituationHuntTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationHuntTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SRenderMaterialSaveData::TypeInfo = ZHMTypeInfo("SRenderMaterialSaveData", SRenderMaterialSaveData::WriteJson, SRenderMaterialSaveData::WriteSimpleJson);

void SRenderMaterialSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRenderMaterialSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicParametersData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDynamicParametersData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aDynamicParametersData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SRenderMaterialSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRenderMaterialSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicParametersData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDynamicParametersData[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_aDynamicParametersData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;

	p_Stream << "}";
}

ZHMTypeInfo IAISoundEventModifier::TypeInfo = ZHMTypeInfo("IAISoundEventModifier", IAISoundEventModifier::WriteJson, IAISoundEventModifier::WriteSimpleJson);

void IAISoundEventModifier::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAISoundEventModifier*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAISoundEventModifier::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAISoundEventModifier*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ITransitionTarget::TypeInfo = ZHMTypeInfo("ITransitionTarget", ITransitionTarget::WriteJson, ITransitionTarget::WriteSimpleJson);

void ITransitionTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITransitionTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITransitionTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITransitionTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsAIModified::TypeInfo = ZHMTypeInfo("SCondition_IsAIModified", SCondition_IsAIModified::WriteJson, SCondition_IsAIModified::WriteSimpleJson);

void SCondition_IsAIModified::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAIModified*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("modifier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIModifiers") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->modifier) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIModifiers", static_cast<int>(s_Object->modifier))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsAIModified::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAIModified*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("modifier") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIModifiers", static_cast<int>(s_Object->modifier)));

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CurrentSetpieceSoundDistractions::TypeInfo = ZHMTypeInfo("SCondition_CurrentSetpieceSoundDistractions", SCondition_CurrentSetpieceSoundDistractions::WriteJson, SCondition_CurrentSetpieceSoundDistractions::WriteSimpleJson);

void SCondition_CurrentSetpieceSoundDistractions::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CurrentSetpieceSoundDistractions*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CurrentSetpieceSoundDistractions::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CurrentSetpieceSoundDistractions*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MinActualDistance2D::TypeInfo = ZHMTypeInfo("SCondition_MinActualDistance2D", SCondition_MinActualDistance2D::WriteJson, SCondition_MinActualDistance2D::WriteSimpleJson);

void SCondition_MinActualDistance2D::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinActualDistance2D*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_From") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_From, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_To") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_To, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Distance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_Distance;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MinActualDistance2D::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinActualDistance2D*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_From") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_From, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_To") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_To, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Distance") << ":";
	p_Stream << s_Object->m_Distance;

	p_Stream << "}";
}

ZHMTypeInfo IActorSpreadTransitionOperator::TypeInfo = ZHMTypeInfo("IActorSpreadTransitionOperator", IActorSpreadTransitionOperator::WriteJson, IActorSpreadTransitionOperator::WriteSimpleJson);

void IActorSpreadTransitionOperator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorSpreadTransitionOperator*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorSpreadTransitionOperator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorSpreadTransitionOperator*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsConfiguredConditionTrue::TypeInfo = ZHMTypeInfo("SCondition_IsConfiguredConditionTrue", SCondition_IsConfiguredConditionTrue::WriteJson, SCondition_IsConfiguredConditionTrue::WriteSimpleJson);

void SCondition_IsConfiguredConditionTrue::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsConfiguredConditionTrue*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("condition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->condition);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsConfiguredConditionTrue::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsConfiguredConditionTrue*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("condition") << ":";
	p_Stream << JsonStr(s_Object->condition);

	p_Stream << "}";
}

ZHMTypeInfo SValueBoolDelayedEntitySaveData::TypeInfo = ZHMTypeInfo("SValueBoolDelayedEntitySaveData", SValueBoolDelayedEntitySaveData::WriteJson, SValueBoolDelayedEntitySaveData::WriteSimpleJson);

void SValueBoolDelayedEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueBoolDelayedEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitingValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWaitingValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;
	p_Stream << "}";

	p_Stream << "}";
}

void SValueBoolDelayedEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueBoolDelayedEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitingValue") << ":";
	p_Stream << s_Object->m_bWaitingValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;

	p_Stream << "}";
}

ZHMTypeInfo IActorProvider::TypeInfo = ZHMTypeInfo("IActorProvider", IActorProvider::WriteJson, IActorProvider::WriteSimpleJson);

void IActorProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCppEntity::TypeInfo = ZHMTypeInfo("SCppEntity", SCppEntity::WriteJson, SCppEntity::WriteSimpleJson);

void SCppEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCppEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->propertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplateProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCppEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCppEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->propertyValues[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IDramaListener::TypeInfo = ZHMTypeInfo("IDramaListener", IDramaListener::WriteJson, IDramaListener::WriteSimpleJson);

void IDramaListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDramaListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IDramaListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDramaListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IOrderedEntity::TypeInfo = ZHMTypeInfo("IOrderedEntity", IOrderedEntity::WriteJson, IOrderedEntity::WriteSimpleJson);

void IOrderedEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IOrderedEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IOrderedEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IOrderedEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCrowdPoseBoneSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseBoneSaveData", SCrowdPoseBoneSaveData::WriteJson, SCrowdPoseBoneSaveData::WriteSimpleJson);

void SCrowdPoseBoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseBoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdPoseBoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseBoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IHM5HMStateSoundController::TypeInfo = ZHMTypeInfo("IHM5HMStateSoundController", IHM5HMStateSoundController::WriteJson, IHM5HMStateSoundController::WriteSimpleJson);

void IHM5HMStateSoundController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5HMStateSoundController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5HMStateSoundController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5HMStateSoundController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IValueColorRGBGet::TypeInfo = ZHMTypeInfo("IValueColorRGBGet", IValueColorRGBGet::WriteJson, IValueColorRGBGet::WriteSimpleJson);

void IValueColorRGBGet::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueColorRGBGet*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueColorRGBGet::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueColorRGBGet*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SGeomScaleSaveData::TypeInfo = ZHMTypeInfo("SGeomScaleSaveData", SGeomScaleSaveData::WriteJson, SGeomScaleSaveData::WriteSimpleJson);

void SGeomScaleSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGeomScaleSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPrimitiveScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vPrimitiveScale, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SGeomScaleSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGeomScaleSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPrimitiveScale") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vPrimitiveScale, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IBoneCollidable::TypeInfo = ZHMTypeInfo("IBoneCollidable", IBoneCollidable::WriteJson, IBoneCollidable::WriteSimpleJson);

void IBoneCollidable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneCollidable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneCollidable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneCollidable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ISecuritySystemDevice::TypeInfo = ZHMTypeInfo("ISecuritySystemDevice", ISecuritySystemDevice::WriteJson, ISecuritySystemDevice::WriteSimpleJson);

void ISecuritySystemDevice::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISecuritySystemDevice*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISecuritySystemDevice::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISecuritySystemDevice*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_AreVisibleItemsSuspicious::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleItemsSuspicious", SCondition_AreVisibleItemsSuspicious::WriteJson, SCondition_AreVisibleItemsSuspicious::WriteSimpleJson);

void SCondition_AreVisibleItemsSuspicious::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleItemsSuspicious*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->includeWeapons;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_AreVisibleItemsSuspicious::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleItemsSuspicious*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << s_Object->includeWeapons;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsHighestPriorityTypeToInvestigateFor::TypeInfo = ZHMTypeInfo("SCondition_IsHighestPriorityTypeToInvestigateFor", SCondition_IsHighestPriorityTypeToInvestigateFor::WriteJson, SCondition_IsHighestPriorityTypeToInvestigateFor::WriteSimpleJson);

void SCondition_IsHighestPriorityTypeToInvestigateFor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsHighestPriorityTypeToInvestigateFor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("otherNPC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->otherNPC, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("distractionType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->distractionType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->distractionType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsHighestPriorityTypeToInvestigateFor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsHighestPriorityTypeToInvestigateFor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("otherNPC") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->otherNPC, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("distractionType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->distractionType)));

	p_Stream << "}";
}

ZHMTypeInfo SWeaponCustomControlSaveData::TypeInfo = ZHMTypeInfo("SWeaponCustomControlSaveData", SWeaponCustomControlSaveData::WriteJson, SWeaponCustomControlSaveData::WriteSimpleJson);

void SWeaponCustomControlSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWeaponCustomControlSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetRegistered;
	p_Stream << "}";

	p_Stream << "}";
}

void SWeaponCustomControlSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWeaponCustomControlSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetRegistered") << ":";
	p_Stream << s_Object->m_bTargetRegistered;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MinAge::TypeInfo = ZHMTypeInfo("SCondition_MinAge", SCondition_MinAge::WriteJson, SCondition_MinAge::WriteSimpleJson);

void SCondition_MinAge::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinAge*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("age") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->age;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MinAge::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinAge*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("age") << ":";
	p_Stream << s_Object->age;

	p_Stream << "}";
}

ZHMTypeInfo ZInvestigateWeaponGroup::TypeInfo = ZHMTypeInfo("ZInvestigateWeaponGroup", ZInvestigateWeaponGroup::WriteJson, ZInvestigateWeaponGroup::WriteSimpleJson);

void ZInvestigateWeaponGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInvestigateWeaponGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZInvestigateWeaponGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInvestigateWeaponGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCrowdPoseSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseSaveData", SCrowdPoseSaveData::WriteJson, SCrowdPoseSaveData::WriteSimpleJson);

void SCrowdPoseSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdPoseBoneSaveData") << "," << JsonStr("$val") << ":";
		SCrowdPoseBoneSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdPoseSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		SCrowdPoseBoneSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCrowdPoseCollectionSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseCollectionSaveData", SCrowdPoseCollectionSaveData::WriteJson, SCrowdPoseCollectionSaveData::WriteSimpleJson);

void SCrowdPoseCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_id;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPoses") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoses.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPoses[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdPoseSaveData") << "," << JsonStr("$val") << ":";
		SCrowdPoseSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPoses.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdPoseCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_id") << ":";
	p_Stream << s_Object->m_id;
	p_Stream << ",";

	p_Stream << JsonStr("m_aPoses") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoses.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPoses[i];
		SCrowdPoseSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aPoses.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SEventSaveData::TypeInfo = ZHMTypeInfo("SEventSaveData", SEventSaveData::WriteJson, SEventSaveData::WriteSimpleJson);

void SEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_nType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nEnd, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_nType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nEnd, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsSharedEventCurrent::TypeInfo = ZHMTypeInfo("SCondition_IsSharedEventCurrent", SCondition_IsSharedEventCurrent::WriteJson, SCondition_IsSharedEventCurrent::WriteSimpleJson);

void SCondition_IsSharedEventCurrent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSharedEventCurrent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsSharedEventCurrent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSharedEventCurrent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsActorRoleVIP::TypeInfo = ZHMTypeInfo("SCondition_IsActorRoleVIP", SCondition_IsActorRoleVIP::WriteJson, SCondition_IsActorRoleVIP::WriteSimpleJson);

void SCondition_IsActorRoleVIP::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorRoleVIP*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsActorRoleVIP::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorRoleVIP*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZComponentCreator::TypeInfo = ZHMTypeInfo("ZComponentCreator", ZComponentCreator::WriteJson, ZComponentCreator::WriteSimpleJson);

void ZComponentCreator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZComponentCreator*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sComponentName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sComponentName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aArgs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aArgs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aArgs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
		ZVariant::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aArgs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void ZComponentCreator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZComponentCreator*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sComponentName") << ":";
	p_Stream << JsonStr(s_Object->m_sComponentName);
	p_Stream << ",";

	p_Stream << JsonStr("m_aArgs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aArgs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aArgs[i];
		ZVariant::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aArgs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IRenderGraphNodeProducer::TypeInfo = ZHMTypeInfo("IRenderGraphNodeProducer", IRenderGraphNodeProducer::WriteJson, IRenderGraphNodeProducer::WriteSimpleJson);

void IRenderGraphNodeProducer::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderGraphNodeProducer*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderGraphNodeProducer::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderGraphNodeProducer*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_AreVisibleWeaponsLegal::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleWeaponsLegal", SCondition_AreVisibleWeaponsLegal::WriteJson, SCondition_AreVisibleWeaponsLegal::WriteSimpleJson);

void SCondition_AreVisibleWeaponsLegal::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleWeaponsLegal*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_AreVisibleWeaponsLegal::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleWeaponsLegal*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IHM5Door::TypeInfo = ZHMTypeInfo("IHM5Door", IHM5Door::WriteJson, IHM5Door::WriteSimpleJson);

void IHM5Door::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5Door*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5Door::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5Door*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpsSaveData_SColorRGBA::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SColorRGBA", SMathLerpsSaveData_SColorRGBA::WriteJson, SMathLerpsSaveData_SColorRGBA::WriteSimpleJson);

void SMathLerpsSaveData_SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SColorRGBA") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SColorRGBA::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SColorRGBA::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SActorSpreadTransitionOperatorMaterialSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadTransitionOperatorMaterialSaveData", SActorSpreadTransitionOperatorMaterialSaveData::WriteJson, SActorSpreadTransitionOperatorMaterialSaveData::WriteSimpleJson);

void SActorSpreadTransitionOperatorMaterialSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aActorMaterialOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorMaterialOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActorMaterialOverrides[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorSpreadTransitionOperatorMaterialActorSaveData") << "," << JsonStr("$val") << ":";
		SActorSpreadTransitionOperatorMaterialActorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActorMaterialOverrides.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aActorMaterialOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorMaterialOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActorMaterialOverrides[i];
		SActorSpreadTransitionOperatorMaterialActorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aActorMaterialOverrides.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsHighestPriorityTypeToReact::TypeInfo = ZHMTypeInfo("SCondition_IsHighestPriorityTypeToReact", SCondition_IsHighestPriorityTypeToReact::WriteJson, SCondition_IsHighestPriorityTypeToReact::WriteSimpleJson);

void SCondition_IsHighestPriorityTypeToReact::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsHighestPriorityTypeToReact*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("distractionType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->distractionType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->distractionType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsHighestPriorityTypeToReact::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsHighestPriorityTypeToReact*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("distractionType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->distractionType)));

	p_Stream << "}";
}

ZHMTypeInfo ICrowdAIActor::TypeInfo = ZHMTypeInfo("ICrowdAIActor", ICrowdAIActor::WriteJson, ICrowdAIActor::WriteSimpleJson);

void ICrowdAIActor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICrowdAIActor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICrowdAIActor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICrowdAIActor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAgitatedBystanderOrderSaveData::TypeInfo = ZHMTypeInfo("SAgitatedBystanderOrderSaveData", SAgitatedBystanderOrderSaveData::WriteJson, SAgitatedBystanderOrderSaveData::WriteSimpleJson);

void SAgitatedBystanderOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAgitatedBystanderOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rBystanderPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBystanderPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vCover, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCoverDir") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vCoverDir, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAgitatedBystanderOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAgitatedBystanderOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rBystanderPoint") << ":";
	p_Stream << s_Object->m_rBystanderPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_vCover") << ":";
	float4::WriteSimpleJson(&s_Object->m_vCover, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vCoverDir") << ":";
	float4::WriteSimpleJson(&s_Object->m_vCoverDir, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SActorAccessoryItemActionSaveData::TypeInfo = ZHMTypeInfo("SActorAccessoryItemActionSaveData", SActorAccessoryItemActionSaveData::WriteJson, SActorAccessoryItemActionSaveData::WriteSimpleJson);

void SActorAccessoryItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAccessoryItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAccessoryItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAccessoryItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo SGameStatsWeapon::TypeInfo = ZHMTypeInfo("SGameStatsWeapon", SGameStatsWeapon::WriteJson, SGameStatsWeapon::WriteSimpleJson);

void SGameStatsWeapon::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameStatsWeapon*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_WeaponRepositoryID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_WeaponRepositoryID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemWeapon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("eItemType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eItemWeapon) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("eItemType", static_cast<int>(s_Object->m_eItemWeapon))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eSpecialSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EWeaponSpecialSituation") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eSpecialSituation) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EWeaponSpecialSituation", static_cast<int>(s_Object->m_eSpecialSituation))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAmmoType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("eAmmoType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAmmoType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("eAmmoType", static_cast<int>(s_Object->m_eAmmoType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SGameStatsWeapon::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameStatsWeapon*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_WeaponRepositoryID") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_WeaponRepositoryID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemWeapon") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("eItemType", static_cast<int>(s_Object->m_eItemWeapon)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eSpecialSituation") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EWeaponSpecialSituation", static_cast<int>(s_Object->m_eSpecialSituation)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eAmmoType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("eAmmoType", static_cast<int>(s_Object->m_eAmmoType)));

	p_Stream << "}";
}

ZHMTypeInfo SGUIViewPort::TypeInfo = ZHMTypeInfo("SGUIViewPort", SGUIViewPort::WriteJson, SGUIViewPort::WriteSimpleJson);

void SGUIViewPort::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGUIViewPort*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("h") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->h;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->w;
	p_Stream << "}";

	p_Stream << "}";
}

void SGUIViewPort::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGUIViewPort*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("h") << ":";
	p_Stream << s_Object->h;
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << s_Object->w;

	p_Stream << "}";
}

ZHMTypeInfo IEnableConditionListener::TypeInfo = ZHMTypeInfo("IEnableConditionListener", IEnableConditionListener::WriteJson, IEnableConditionListener::WriteSimpleJson);

void IEnableConditionListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEnableConditionListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEnableConditionListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEnableConditionListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IValueVector2Get::TypeInfo = ZHMTypeInfo("IValueVector2Get", IValueVector2Get::WriteJson, IValueVector2Get::WriteSimpleJson);

void IValueVector2Get::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueVector2Get*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueVector2Get::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueVector2Get*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SSaveGameData::TypeInfo = ZHMTypeInfo("SSaveGameData", SSaveGameData::WriteJson, SSaveGameData::WriteSimpleJson);

void SSaveGameData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nVersion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nVersion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSavableObjectsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSavableObjectsData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSavableObjectsData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSavableData") << "," << JsonStr("$val") << ":";
		SSavableData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aSavableObjectsData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPaths") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPaths.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityPaths[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityPath") << "," << JsonStr("$val") << ":";
		SEntityPath::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityPaths.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSaveGameData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nVersion") << ":";
	p_Stream << s_Object->m_nVersion;
	p_Stream << ",";

	p_Stream << JsonStr("m_aSavableObjectsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSavableObjectsData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSavableObjectsData[i];
		SSavableData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aSavableObjectsData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPaths") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPaths.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityPaths[i];
		SEntityPath::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEntityPaths.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZFormationMoveOrder::TypeInfo = ZHMTypeInfo("ZFormationMoveOrder", ZFormationMoveOrder::WriteJson, ZFormationMoveOrder::WriteSimpleJson);

void ZFormationMoveOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZFormationMoveOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZFormationMoveOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZFormationMoveOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsOrderInvalid::TypeInfo = ZHMTypeInfo("SCondition_IsOrderInvalid", SCondition_IsOrderInvalid::WriteJson, SCondition_IsOrderInvalid::WriteSimpleJson);

void SCondition_IsOrderInvalid::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOrderInvalid*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsOrderInvalid::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOrderInvalid*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SActorInventoryItemSaveData::TypeInfo = ZHMTypeInfo("SActorInventoryItemSaveData", SActorInventoryItemSaveData::WriteJson, SActorInventoryItemSaveData::WriteSimpleJson);

void SActorInventoryItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorInventoryItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAttachLocation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAttachLocation") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAttachLocation) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAttachLocation", static_cast<int>(s_Object->m_eAttachLocation))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eMaxTension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eMaxTension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eMaxTension))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftHand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLeftHand;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeapon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWeapon;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrenade") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGrenade;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorInventoryItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorInventoryItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_eAttachLocation") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAttachLocation", static_cast<int>(s_Object->m_eAttachLocation)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eMaxTension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eMaxTension)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftHand") << ":";
	p_Stream << s_Object->m_bLeftHand;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeapon") << ":";
	p_Stream << s_Object->m_bWeapon;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrenade") << ":";
	p_Stream << s_Object->m_bGrenade;

	p_Stream << "}";
}

ZHMTypeInfo SDestructibleRuntimeConnnection::TypeInfo = ZHMTypeInfo("SDestructibleRuntimeConnnection", SDestructibleRuntimeConnnection::WriteJson, SDestructibleRuntimeConnnection::WriteSimpleJson);

void SDestructibleRuntimeConnnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleRuntimeConnnection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnections.size(); ++i)
	{
		auto& s_Item = s_Object->m_aConnections[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aConnections.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDestructibleRuntimeConnnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleRuntimeConnnection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnections.size(); ++i)
	{
		auto& s_Item = s_Object->m_aConnections[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aConnections.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDifficultyGreaterOrEqual::TypeInfo = ZHMTypeInfo("SCondition_IsDifficultyGreaterOrEqual", SCondition_IsDifficultyGreaterOrEqual::WriteJson, SCondition_IsDifficultyGreaterOrEqual::WriteSimpleJson);

void SCondition_IsDifficultyGreaterOrEqual::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDifficultyGreaterOrEqual*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("difficultyLevel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->difficultyLevel;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsDifficultyGreaterOrEqual::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDifficultyGreaterOrEqual*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("difficultyLevel") << ":";
	p_Stream << s_Object->difficultyLevel;

	p_Stream << "}";
}

ZHMTypeInfo SActorProviderApproachSaveData::TypeInfo = ZHMTypeInfo("SActorProviderApproachSaveData", SActorProviderApproachSaveData::WriteJson, SActorProviderApproachSaveData::WriteSimpleJson);

void SActorProviderApproachSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProviderApproachSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCastActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCastActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProviderApproachSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProviderApproachSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCastActor") << ":";
	p_Stream << s_Object->m_rCastActor;

	p_Stream << "}";
}

ZHMTypeInfo ZAutoNullEntityRef::TypeInfo = ZHMTypeInfo("ZAutoNullEntityRef", ZAutoNullEntityRef::WriteJson, ZAutoNullEntityRef::WriteSimpleJson);

void ZAutoNullEntityRef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAutoNullEntityRef*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZAutoNullEntityRef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAutoNullEntityRef*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SItemOnBackUIData::TypeInfo = ZHMTypeInfo("SItemOnBackUIData", SItemOnBackUIData::WriteJson, SItemOnBackUIData::WriteSimpleJson);

void SItemOnBackUIData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemOnBackUIData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemOnBackUIData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemOnBackUIData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << s_Object->bIllegal;

	p_Stream << "}";
}

ZHMTypeInfo SOnlineSaveData::TypeInfo = ZHMTypeInfo("SOnlineSaveData", SOnlineSaveData::WriteJson, SOnlineSaveData::WriteSimpleJson);

void SOnlineSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOnlineSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeStamp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTimeStamp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOnline;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractSessionId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sContractSessionId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLastEventToken") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sLastEventToken);
	p_Stream << "}";

	p_Stream << "}";
}

void SOnlineSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOnlineSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeStamp") << ":";
	p_Stream << s_Object->m_nTimeStamp;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnline") << ":";
	p_Stream << s_Object->m_bIsOnline;
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractSessionId") << ":";
	p_Stream << JsonStr(s_Object->m_sContractSessionId);
	p_Stream << ",";

	p_Stream << JsonStr("m_sLastEventToken") << ":";
	p_Stream << JsonStr(s_Object->m_sLastEventToken);

	p_Stream << "}";
}

ZHMTypeInfo SLongTermMemorySaveData::TypeInfo = ZHMTypeInfo("SLongTermMemorySaveData", SLongTermMemorySaveData::WriteJson, SLongTermMemorySaveData::WriteSimpleJson);

void SLongTermMemorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLongTermMemorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_sOutfit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Memory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_Memory);
	p_Stream << "}";

	p_Stream << "}";
}

void SLongTermMemorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLongTermMemorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sOutfit") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_sOutfit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Memory") << ":";
	p_Stream << static_cast<int>(s_Object->m_Memory);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxExpired::TypeInfo = ZHMTypeInfo("SCondition_MaxExpired", SCondition_MaxExpired::WriteJson, SCondition_MaxExpired::WriteSimpleJson);

void SCondition_MaxExpired::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxExpired*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("time") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->time;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxExpired::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxExpired*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("time") << ":";
	p_Stream << s_Object->time;

	p_Stream << "}";
}

ZHMTypeInfo SCombatOrderSaveData::TypeInfo = ZHMTypeInfo("SCombatOrderSaveData", SCombatOrderSaveData::WriteJson, SCombatOrderSaveData::WriteSimpleJson);

void SCombatOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPos") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPos, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_coverPlane") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_coverPlane;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInteraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInteraction;
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPos") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPos, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_coverPlane") << ":";
	p_Stream << s_Object->m_coverPlane;
	p_Stream << ",";

	p_Stream << JsonStr("m_rInteraction") << ":";
	p_Stream << s_Object->m_rInteraction;

	p_Stream << "}";
}

ZHMTypeInfo SHintEntrySaveData::TypeInfo = ZHMTypeInfo("SHintEntrySaveData", SHintEntrySaveData::WriteJson, SHintEntrySaveData::WriteSimpleJson);

void SHintEntrySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHintEntrySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsValid;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_hint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_hint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_context") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_context;
	p_Stream << "}";

	p_Stream << "}";
}

void SHintEntrySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHintEntrySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsValid") << ":";
	p_Stream << s_Object->m_bIsValid;
	p_Stream << ",";

	p_Stream << JsonStr("m_hint") << ":";
	p_Stream << s_Object->m_hint;
	p_Stream << ",";

	p_Stream << JsonStr("m_context") << ":";
	p_Stream << s_Object->m_context;

	p_Stream << "}";
}

ZHMTypeInfo SHintManagerSaveData::TypeInfo = ZHMTypeInfo("SHintManagerSaveData", SHintManagerSaveData::WriteJson, SHintManagerSaveData::WriteSimpleJson);

void SHintManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHintManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_activeHint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHintEntrySaveData") << "," << JsonStr("$val") << ":";
	SHintEntrySaveData::WriteJson(&s_Object->m_activeHint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aQueue") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aQueue.size(); ++i)
	{
		auto& s_Item = s_Object->m_aQueue[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHintEntrySaveData") << "," << JsonStr("$val") << ":";
		SHintEntrySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aQueue.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsRunning;
	p_Stream << "}";

	p_Stream << "}";
}

void SHintManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHintManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_activeHint") << ":";
	SHintEntrySaveData::WriteSimpleJson(&s_Object->m_activeHint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aQueue") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aQueue.size(); ++i)
	{
		auto& s_Item = s_Object->m_aQueue[i];
		SHintEntrySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aQueue.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRunning") << ":";
	p_Stream << s_Object->m_bIsRunning;

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpsSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector3", SMathLerpsSaveData_SVector3::WriteJson, SMathLerpsSaveData_SVector3::WriteSimpleJson);

void SMathLerpsSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SVector3") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SVector3::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SVector3::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo STrackDollyControllerSaveData::TypeInfo = ZHMTypeInfo("STrackDollyControllerSaveData", STrackDollyControllerSaveData::WriteJson, STrackDollyControllerSaveData::WriteSimpleJson);

void STrackDollyControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackDollyControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTrackPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTrackPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDollyAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsDollyAttached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vDollyPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vDollyRotation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STrackDollyControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackDollyControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTrackPosition") << ":";
	p_Stream << s_Object->m_fTrackPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDollyAttached") << ":";
	p_Stream << s_Object->m_bIsDollyAttached;
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vDollyPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vDollyRotation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasCustomInvestigationAckSoundDef::TypeInfo = ZHMTypeInfo("SCondition_HasCustomInvestigationAckSoundDef", SCondition_HasCustomInvestigationAckSoundDef::WriteJson, SCondition_HasCustomInvestigationAckSoundDef::WriteSimpleJson);

void SCondition_HasCustomInvestigationAckSoundDef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasCustomInvestigationAckSoundDef*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasCustomInvestigationAckSoundDef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasCustomInvestigationAckSoundDef*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SValueFloatSaveData::TypeInfo = ZHMTypeInfo("SValueFloatSaveData", SValueFloatSaveData::WriteJson, SValueFloatSaveData::WriteSimpleJson);

void SValueFloatSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueFloatSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SValueFloatSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueFloatSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZAvoidDangerousAreaGroup::TypeInfo = ZHMTypeInfo("ZAvoidDangerousAreaGroup", ZAvoidDangerousAreaGroup::WriteJson, ZAvoidDangerousAreaGroup::WriteSimpleJson);

void ZAvoidDangerousAreaGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAvoidDangerousAreaGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZAvoidDangerousAreaGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAvoidDangerousAreaGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SHUDTimerControllerSaveData::TypeInfo = ZHMTypeInfo("SHUDTimerControllerSaveData", SHUDTimerControllerSaveData::WriteJson, SHUDTimerControllerSaveData::WriteSimpleJson);

void SHUDTimerControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDTimerControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pCurrentInstance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pCurrentInstance;
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDTimerControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDTimerControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pCurrentInstance") << ":";
	p_Stream << s_Object->m_pCurrentInstance;

	p_Stream << "}";
}

ZHMTypeInfo SSituationConversationGroupSaveData::TypeInfo = ZHMTypeInfo("SSituationConversationGroupSaveData", SSituationConversationGroupSaveData::WriteJson, SSituationConversationGroupSaveData::WriteSimpleJson);

void SSituationConversationGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationConversationGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_members") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_members.size(); ++i)
	{
		auto& s_Item = s_Object->m_members[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_members.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSituationConversationGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationConversationGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_members") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_members.size(); ++i)
	{
		auto& s_Item = s_Object->m_members[i];
		p_Stream << s_Item;

		if (i < s_Object->m_members.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SituationFromTarget::TypeInfo = ZHMTypeInfo("SCondition_SituationFromTarget", SCondition_SituationFromTarget::WriteJson, SCondition_SituationFromTarget::WriteSimpleJson);

void SCondition_SituationFromTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationFromTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("targets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->targets, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SituationFromTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationFromTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("targets") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->targets, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SMathDistanceSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector4", SMathDistanceSaveData_SVector4::WriteJson, SMathDistanceSaveData_SVector4::WriteSimpleJson);

void SMathDistanceSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fB, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_RemoveCombatSituationsStandingDown::TypeInfo = ZHMTypeInfo("SCondition_RemoveCombatSituationsStandingDown", SCondition_RemoveCombatSituationsStandingDown::WriteJson, SCondition_RemoveCombatSituationsStandingDown::WriteSimpleJson);

void SCondition_RemoveCombatSituationsStandingDown::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_RemoveCombatSituationsStandingDown*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatSituations") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_CombatSituations, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_RemoveCombatSituationsStandingDown::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_RemoveCombatSituationsStandingDown*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatSituations") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_CombatSituations, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SActivityObjective::TypeInfo = ZHMTypeInfo("SActivityObjective", SActivityObjective::WriteJson, SActivityObjective::WriteSimpleJson);

void SActivityObjective::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityObjective*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("activity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
	SActivity::WriteJson(&s_Object->activity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("opportunities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->opportunities.size(); ++i)
	{
		auto& s_Item = s_Object->opportunities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
		SActivity::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->opportunities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActivityObjective::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityObjective*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("activity") << ":";
	SActivity::WriteSimpleJson(&s_Object->activity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("opportunities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->opportunities.size(); ++i)
	{
		auto& s_Item = s_Object->opportunities[i];
		SActivity::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->opportunities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SActivityDefinition::TypeInfo = ZHMTypeInfo("SActivityDefinition", SActivityDefinition::WriteJson, SActivityDefinition::WriteSimpleJson);

void SActivityDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("activity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
	SActivity::WriteJson(&s_Object->activity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectives") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectives.size(); ++i)
	{
		auto& s_Item = s_Object->objectives[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivityObjective") << "," << JsonStr("$val") << ":";
		SActivityObjective::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->objectives.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivityExits") << "," << JsonStr("$val") << ":";
	SActivityExits::WriteJson(&s_Object->exits, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SActivityDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("activity") << ":";
	SActivity::WriteSimpleJson(&s_Object->activity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("objectives") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectives.size(); ++i)
	{
		auto& s_Item = s_Object->objectives[i];
		SActivityObjective::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->objectives.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	SActivityExits::WriteSimpleJson(&s_Object->exits, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZPostfilterGraphBaseNode::TypeInfo = ZHMTypeInfo("ZPostfilterGraphBaseNode", ZPostfilterGraphBaseNode::WriteJson, ZPostfilterGraphBaseNode::WriteSimpleJson);

void ZPostfilterGraphBaseNode::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPostfilterGraphBaseNode*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPostfilterGraphBaseNode::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPostfilterGraphBaseNode*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SDangerousAreaSaveData::TypeInfo = ZHMTypeInfo("SDangerousAreaSaveData", SDangerousAreaSaveData::WriteJson, SDangerousAreaSaveData::WriteSimpleJson);

void SDangerousAreaSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDangerousAreaSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bDangerous") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDangerous;
	p_Stream << "}";

	p_Stream << "}";
}

void SDangerousAreaSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDangerousAreaSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bDangerous") << ":";
	p_Stream << s_Object->m_bDangerous;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_OnlyLegalWeaponsPickedUp::TypeInfo = ZHMTypeInfo("SCondition_OnlyLegalWeaponsPickedUp", SCondition_OnlyLegalWeaponsPickedUp::WriteJson, SCondition_OnlyLegalWeaponsPickedUp::WriteSimpleJson);

void SCondition_OnlyLegalWeaponsPickedUp::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_OnlyLegalWeaponsPickedUp*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_OnlyLegalWeaponsPickedUp::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_OnlyLegalWeaponsPickedUp*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IParticleControllerEntity::TypeInfo = ZHMTypeInfo("IParticleControllerEntity", IParticleControllerEntity::WriteJson, IParticleControllerEntity::WriteSimpleJson);

void IParticleControllerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleControllerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IParticleControllerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleControllerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SHM5CrippleBoxSaveData::TypeInfo = ZHMTypeInfo("SHM5CrippleBoxSaveData", SHM5CrippleBoxSaveData::WriteJson, SHM5CrippleBoxSaveData::WriteSimpleJson);

void SHM5CrippleBoxSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHM5CrippleBoxSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bInSequence") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInSequence;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllowBaseMovements") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllowBaseMovements;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSequenceAllowCamera") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSequenceAllowCamera;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLedges") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLedges;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCover;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTakeClothes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTakeClothes;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLadder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLadder;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPullVictimFromWindow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPullVictimFromWindow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFiberWireKill") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFiberWireKill;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bClimbWindow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bClimbWindow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowBodyOverRail") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bThrowBodyOverRail;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDumpBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDumpBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOperateCPDoor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOperateCPDoor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHideInCloset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHideInCloset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombat;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrabVictim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGrabVictim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPushVictimThroughWindowAndRail") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPushVictimThroughWindowAndRail;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bKickVictimOverLedge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bKickVictimOverLedge;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPickupItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPickupItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDragBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDragBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bThrowItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlaceItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlaceItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseDeathAnimation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUseDeathAnimation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLimitedAmmo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLimitedAmmo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRun") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRun;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTurn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSneak") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSneak;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoSnapSneak") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNoSnapSneak;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandUp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandUp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWalk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFastWalk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMovementAllowed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMovementAllowed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIdleAnimationsAllowed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIdleAnimationsAllowed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanHolsterItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCanHolsterItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverTakedown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCoverTakedown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCoverScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverToCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCoverToCover;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatSnapNeck") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatSnapNeck;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatChoke") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatChoke;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatPistolFinish") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatPistolFinish;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatProps") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatProps;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatStandart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatStandart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatFakeSwing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatFakeSwing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGameCameraAutoAlign") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGameCameraAutoAlign;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCameraSide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCameraSide;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInstinct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInstinct;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlindFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBlindFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHairTrigger") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHairTrigger;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenLogbook") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOpenLogbook;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenPauseMenu") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOpenPauseMenu;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActivatedByPinSignal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActivatedByPinSignal;
	p_Stream << "}";

	p_Stream << "}";
}

void SHM5CrippleBoxSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHM5CrippleBoxSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bInSequence") << ":";
	p_Stream << s_Object->m_bInSequence;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllowBaseMovements") << ":";
	p_Stream << s_Object->m_bAllowBaseMovements;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSequenceAllowCamera") << ":";
	p_Stream << s_Object->m_bSequenceAllowCamera;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLedges") << ":";
	p_Stream << s_Object->m_bLedges;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCover") << ":";
	p_Stream << s_Object->m_bCover;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTakeClothes") << ":";
	p_Stream << s_Object->m_bTakeClothes;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLadder") << ":";
	p_Stream << s_Object->m_bLadder;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPullVictimFromWindow") << ":";
	p_Stream << s_Object->m_bPullVictimFromWindow;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFiberWireKill") << ":";
	p_Stream << s_Object->m_bFiberWireKill;
	p_Stream << ",";

	p_Stream << JsonStr("m_bClimbWindow") << ":";
	p_Stream << s_Object->m_bClimbWindow;
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowBodyOverRail") << ":";
	p_Stream << s_Object->m_bThrowBodyOverRail;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDumpBody") << ":";
	p_Stream << s_Object->m_bDumpBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOperateCPDoor") << ":";
	p_Stream << s_Object->m_bOperateCPDoor;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHideInCloset") << ":";
	p_Stream << s_Object->m_bHideInCloset;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombat") << ":";
	p_Stream << s_Object->m_bCloseCombat;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrabVictim") << ":";
	p_Stream << s_Object->m_bGrabVictim;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPushVictimThroughWindowAndRail") << ":";
	p_Stream << s_Object->m_bPushVictimThroughWindowAndRail;
	p_Stream << ",";

	p_Stream << JsonStr("m_bKickVictimOverLedge") << ":";
	p_Stream << s_Object->m_bKickVictimOverLedge;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPickupItem") << ":";
	p_Stream << s_Object->m_bPickupItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropItem") << ":";
	p_Stream << s_Object->m_bDropItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDragBody") << ":";
	p_Stream << s_Object->m_bDragBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowItem") << ":";
	p_Stream << s_Object->m_bThrowItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlaceItem") << ":";
	p_Stream << s_Object->m_bPlaceItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseDeathAnimation") << ":";
	p_Stream << s_Object->m_bUseDeathAnimation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLimitedAmmo") << ":";
	p_Stream << s_Object->m_bLimitedAmmo;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRun") << ":";
	p_Stream << s_Object->m_bRun;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurn") << ":";
	p_Stream << s_Object->m_bTurn;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSneak") << ":";
	p_Stream << s_Object->m_bSneak;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoSnapSneak") << ":";
	p_Stream << s_Object->m_bNoSnapSneak;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandUp") << ":";
	p_Stream << s_Object->m_bStandUp;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWalk") << ":";
	p_Stream << s_Object->m_bFastWalk;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMovementAllowed") << ":";
	p_Stream << s_Object->m_bMovementAllowed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIdleAnimationsAllowed") << ":";
	p_Stream << s_Object->m_bIdleAnimationsAllowed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bItems") << ":";
	p_Stream << s_Object->m_bItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanHolsterItems") << ":";
	p_Stream << s_Object->m_bCanHolsterItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverTakedown") << ":";
	p_Stream << s_Object->m_bCoverTakedown;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverScale") << ":";
	p_Stream << s_Object->m_bCoverScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverToCover") << ":";
	p_Stream << s_Object->m_bCoverToCover;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatSnapNeck") << ":";
	p_Stream << s_Object->m_bCloseCombatSnapNeck;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatChoke") << ":";
	p_Stream << s_Object->m_bCloseCombatChoke;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatPistolFinish") << ":";
	p_Stream << s_Object->m_bCloseCombatPistolFinish;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatProps") << ":";
	p_Stream << s_Object->m_bCloseCombatProps;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatStandart") << ":";
	p_Stream << s_Object->m_bCloseCombatStandart;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatFakeSwing") << ":";
	p_Stream << s_Object->m_bCloseCombatFakeSwing;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGameCameraAutoAlign") << ":";
	p_Stream << s_Object->m_bGameCameraAutoAlign;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCameraSide") << ":";
	p_Stream << s_Object->m_bCameraSide;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInstinct") << ":";
	p_Stream << s_Object->m_bInstinct;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlindFire") << ":";
	p_Stream << s_Object->m_bBlindFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAim") << ":";
	p_Stream << s_Object->m_bAim;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHairTrigger") << ":";
	p_Stream << s_Object->m_bHairTrigger;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFire") << ":";
	p_Stream << s_Object->m_bFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenLogbook") << ":";
	p_Stream << s_Object->m_bOpenLogbook;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenPauseMenu") << ":";
	p_Stream << s_Object->m_bOpenPauseMenu;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActivatedByPinSignal") << ":";
	p_Stream << s_Object->m_bActivatedByPinSignal;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxActualDistance2D::TypeInfo = ZHMTypeInfo("SCondition_MaxActualDistance2D", SCondition_MaxActualDistance2D::WriteJson, SCondition_MaxActualDistance2D::WriteSimpleJson);

void SCondition_MaxActualDistance2D::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxActualDistance2D*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_From") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_From, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_To") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_To, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Distance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_Distance;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxActualDistance2D::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxActualDistance2D*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_From") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_From, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_To") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_To, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Distance") << ":";
	p_Stream << s_Object->m_Distance;

	p_Stream << "}";
}

ZHMTypeInfo SCrowdReactionSaveData::TypeInfo = ZHMTypeInfo("SCrowdReactionSaveData", SCrowdReactionSaveData::WriteJson, SCrowdReactionSaveData::WriteSimpleJson);

void SCrowdReactionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdReactionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nNumPacify") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumPacify;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumShotsFired") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumShotsFired;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumDeaths") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumDeaths;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumScared") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumScared;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarzoneSpawned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWarzoneSpawned;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdReactionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdReactionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nNumPacify") << ":";
	p_Stream << s_Object->m_nNumPacify;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumShotsFired") << ":";
	p_Stream << s_Object->m_nNumShotsFired;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumDeaths") << ":";
	p_Stream << s_Object->m_nNumDeaths;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumScared") << ":";
	p_Stream << s_Object->m_nNumScared;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarzoneSpawned") << ":";
	p_Stream << s_Object->m_bWarzoneSpawned;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDifficultyLessOrEqual::TypeInfo = ZHMTypeInfo("SCondition_IsDifficultyLessOrEqual", SCondition_IsDifficultyLessOrEqual::WriteJson, SCondition_IsDifficultyLessOrEqual::WriteSimpleJson);

void SCondition_IsDifficultyLessOrEqual::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDifficultyLessOrEqual*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("difficultyLevel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->difficultyLevel;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsDifficultyLessOrEqual::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDifficultyLessOrEqual*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("difficultyLevel") << ":";
	p_Stream << s_Object->difficultyLevel;

	p_Stream << "}";
}

ZHMTypeInfo SMovementDragBodySaveData::TypeInfo = ZHMTypeInfo("SMovementDragBodySaveData", SMovementDragBodySaveData::WriteJson, SMovementDragBodySaveData::WriteSimpleJson);

void SMovementDragBodySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDragBodySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rDraggedActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDraggedActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGrabBoneID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGrabBoneID;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementDragBodySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDragBodySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rDraggedActor") << ":";
	p_Stream << s_Object->m_rDraggedActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGrabBoneID") << ":";
	p_Stream << s_Object->m_nGrabBoneID;

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpSaveData_float32::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_float32", SMathLerpSaveData_float32::WriteJson, SMathLerpSaveData_float32::WriteSimpleJson);

void SMathLerpSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_A;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_B;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	p_Stream << s_Object->m_A;
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << s_Object->m_B;
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

ZHMTypeInfo ZJumpToOrder::TypeInfo = ZHMTypeInfo("ZJumpToOrder", ZJumpToOrder::WriteJson, ZJumpToOrder::WriteSimpleJson);

void ZJumpToOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZJumpToOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZJumpToOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZJumpToOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo INotificationCategoryDefinition::TypeInfo = ZHMTypeInfo("INotificationCategoryDefinition", INotificationCategoryDefinition::WriteJson, INotificationCategoryDefinition::WriteSimpleJson);

void INotificationCategoryDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<INotificationCategoryDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void INotificationCategoryDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<INotificationCategoryDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SEntityTemplateEntitySubset::TypeInfo = ZHMTypeInfo("SEntityTemplateEntitySubset", SEntityTemplateEntitySubset::WriteJson, SEntityTemplateEntitySubset::WriteSimpleJson);

void SEntityTemplateEntitySubset::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateEntitySubset*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entities.size(); ++i)
	{
		auto& s_Item = s_Object->entities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->entities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTemplateEntitySubset::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateEntitySubset*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entities.size(); ++i)
	{
		auto& s_Item = s_Object->entities[i];
		p_Stream << s_Item;

		if (i < s_Object->entities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SActorDamageControlSaveData::TypeInfo = ZHMTypeInfo("SActorDamageControlSaveData", SActorDamageControlSaveData::WriteJson, SActorDamageControlSaveData::WriteSimpleJson);

void SActorDamageControlSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDamageControlSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("bExplosive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bExplosive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bProjectile") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bProjectile;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHeadshot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHeadshot;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSniperShot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSniperShot;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bThroughWall") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bThroughWall;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bKillByAccident") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bKillByAccident;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bWeaponSilenced") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bWeaponSilenced;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bLongRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bLongRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fTotalDamage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fTotalDamage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fPacifyDamage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fPacifyDamage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nImpactBodyPart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nImpactBodyPart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("maxDeathType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->maxDeathType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathType", static_cast<int>(s_Object->maxDeathType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("maxDeathContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->maxDeathContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->maxDeathContext))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rAccidentSetup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rAccidentSetup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bFirearmPacifiesTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bFirearmPacifiesTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bBulletCausesHitReaction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bBulletCausesHitReaction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fHitsNumberTimeout") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fHitsNumberTimeout;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fHealthPercentTimeout") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fHealthPercentTimeout;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rCharacter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rCharacter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rSource") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rSource;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_accuseUnconsciousOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_accuseUnconsciousOutfit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidAccuseUnconsciousOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValidAccuseUnconsciousOutfit;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eDeathSpeak") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorSoundDefs") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eDeathSpeak) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->eDeathSpeak))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bDefaultDeathSound") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bDefaultDeathSound;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("iEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->iEvents;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAgilityElementUncosciousTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAgilityElementUncosciousTime;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDamageControlSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDamageControlSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("bExplosive") << ":";
	p_Stream << s_Object->bExplosive;
	p_Stream << ",";

	p_Stream << JsonStr("bProjectile") << ":";
	p_Stream << s_Object->bProjectile;
	p_Stream << ",";

	p_Stream << JsonStr("bHeadshot") << ":";
	p_Stream << s_Object->bHeadshot;
	p_Stream << ",";

	p_Stream << JsonStr("bSniperShot") << ":";
	p_Stream << s_Object->bSniperShot;
	p_Stream << ",";

	p_Stream << JsonStr("bThroughWall") << ":";
	p_Stream << s_Object->bThroughWall;
	p_Stream << ",";

	p_Stream << JsonStr("bKillByAccident") << ":";
	p_Stream << s_Object->bKillByAccident;
	p_Stream << ",";

	p_Stream << JsonStr("bWeaponSilenced") << ":";
	p_Stream << s_Object->bWeaponSilenced;
	p_Stream << ",";

	p_Stream << JsonStr("bLongRange") << ":";
	p_Stream << s_Object->bLongRange;
	p_Stream << ",";

	p_Stream << JsonStr("fTotalDamage") << ":";
	p_Stream << s_Object->fTotalDamage;
	p_Stream << ",";

	p_Stream << JsonStr("fPacifyDamage") << ":";
	p_Stream << s_Object->fPacifyDamage;
	p_Stream << ",";

	p_Stream << JsonStr("nImpactBodyPart") << ":";
	p_Stream << s_Object->nImpactBodyPart;
	p_Stream << ",";

	p_Stream << JsonStr("maxDeathType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathType", static_cast<int>(s_Object->maxDeathType)));
	p_Stream << ",";

	p_Stream << JsonStr("maxDeathContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->maxDeathContext)));
	p_Stream << ",";

	p_Stream << JsonStr("rAccidentSetup") << ":";
	p_Stream << s_Object->rAccidentSetup;
	p_Stream << ",";

	p_Stream << JsonStr("bFirearmPacifiesTarget") << ":";
	p_Stream << s_Object->bFirearmPacifiesTarget;
	p_Stream << ",";

	p_Stream << JsonStr("bBulletCausesHitReaction") << ":";
	p_Stream << s_Object->bBulletCausesHitReaction;
	p_Stream << ",";

	p_Stream << JsonStr("fHitsNumberTimeout") << ":";
	p_Stream << s_Object->fHitsNumberTimeout;
	p_Stream << ",";

	p_Stream << JsonStr("fHealthPercentTimeout") << ":";
	p_Stream << s_Object->fHealthPercentTimeout;
	p_Stream << ",";

	p_Stream << JsonStr("rCharacter") << ":";
	p_Stream << s_Object->rCharacter;
	p_Stream << ",";

	p_Stream << JsonStr("rSource") << ":";
	p_Stream << s_Object->rSource;
	p_Stream << ",";

	p_Stream << JsonStr("m_accuseUnconsciousOutfit") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_accuseUnconsciousOutfit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidAccuseUnconsciousOutfit") << ":";
	p_Stream << s_Object->m_bValidAccuseUnconsciousOutfit;
	p_Stream << ",";

	p_Stream << JsonStr("eDeathSpeak") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->eDeathSpeak)));
	p_Stream << ",";

	p_Stream << JsonStr("bDefaultDeathSound") << ":";
	p_Stream << s_Object->bDefaultDeathSound;
	p_Stream << ",";

	p_Stream << JsonStr("iEvents") << ":";
	p_Stream << s_Object->iEvents;
	p_Stream << ",";

	p_Stream << JsonStr("fAgilityElementUncosciousTime") << ":";
	p_Stream << s_Object->fAgilityElementUncosciousTime;

	p_Stream << "}";
}

ZHMTypeInfo IHM5ActionDevice::TypeInfo = ZHMTypeInfo("IHM5ActionDevice", IHM5ActionDevice::WriteJson, IHM5ActionDevice::WriteSimpleJson);

void IHM5ActionDevice::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5ActionDevice*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5ActionDevice::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5ActionDevice*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_GetItemDroppedBy::TypeInfo = ZHMTypeInfo("SCondition_GetItemDroppedBy", SCondition_GetItemDroppedBy::WriteJson, SCondition_GetItemDroppedBy::WriteSimpleJson);

void SCondition_GetItemDroppedBy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_GetItemDroppedBy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("character") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->character, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_GetItemDroppedBy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_GetItemDroppedBy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("character") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->character, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SClothWireEntitySaveData::TypeInfo = ZHMTypeInfo("SClothWireEntitySaveData", SClothWireEntitySaveData::WriteJson, SClothWireEntitySaveData::WriteSimpleJson);

void SClothWireEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothWireEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fWireLength") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fWireLength;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttachToAnchorTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAttachToAnchorTransform;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSimulationEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSimulationEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothWireEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothWireEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fWireLength") << ":";
	p_Stream << s_Object->m_fWireLength;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttachToAnchorTransform") << ":";
	p_Stream << s_Object->m_bAttachToAnchorTransform;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSimulationEnabled") << ":";
	p_Stream << s_Object->m_bSimulationEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

ZHMTypeInfo SParticleEmitterSaveData::TypeInfo = ZHMTypeInfo("SParticleEmitterSaveData", SParticleEmitterSaveData::WriteJson, SParticleEmitterSaveData::WriteSimpleJson);

void SParticleEmitterSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SParticleEmitterSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeLeft") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEmissionTimeLeft;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEmissionTimeFraction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionCntLeft") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEmissionCntLeft;
	p_Stream << "}";

	p_Stream << "}";
}

void SParticleEmitterSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SParticleEmitterSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsActivated") << ":";
	p_Stream << s_Object->m_bIsActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeLeft") << ":";
	p_Stream << s_Object->m_fEmissionTimeLeft;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeFraction") << ":";
	p_Stream << s_Object->m_fEmissionTimeFraction;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionCntLeft") << ":";
	p_Stream << s_Object->m_fEmissionCntLeft;

	p_Stream << "}";
}

ZHMTypeInfo SBoneAttachSaveData::TypeInfo = ZHMTypeInfo("SBoneAttachSaveData", SBoneAttachSaveData::WriteJson, SBoneAttachSaveData::WriteSimpleJson);

void SBoneAttachSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneAttachSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsAttached;
	p_Stream << "}";

	p_Stream << "}";
}

void SBoneAttachSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneAttachSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << s_Object->m_bIsAttached;

	p_Stream << "}";
}

ZHMTypeInfo SGameplayRenderablesSaveData::TypeInfo = ZHMTypeInfo("SGameplayRenderablesSaveData", SGameplayRenderablesSaveData::WriteJson, SGameplayRenderablesSaveData::WriteSimpleJson);

void SGameplayRenderablesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameplayRenderablesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aLightData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLightData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLightData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLightSaveData") << "," << JsonStr("$val") << ":";
		SLightSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aLightData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMaterialData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMaterialData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aMaterialData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRenderMaterialSaveData") << "," << JsonStr("$val") << ":";
		SRenderMaterialSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aMaterialData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aParticleData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aParticleData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aParticleData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SParticleEmitterSaveData") << "," << JsonStr("$val") << ":";
		SParticleEmitterSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aParticleData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneAttachData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneAttachData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneAttachData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBoneAttachSaveData") << "," << JsonStr("$val") << ":";
		SBoneAttachSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBoneAttachData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPostFilterParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPostFilterParametersData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPostFilterParametersData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SPostfilterParametersSaveData") << "," << JsonStr("$val") << ":";
		SPostfilterParametersSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPostFilterParametersData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGateData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGateData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGateData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGateSaveData") << "," << JsonStr("$val") << ":";
		SGateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGateData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGameplayRenderablesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameplayRenderablesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aLightData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLightData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLightData[i];
		SLightSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aLightData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMaterialData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMaterialData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aMaterialData[i];
		SRenderMaterialSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aMaterialData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aParticleData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aParticleData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aParticleData[i];
		SParticleEmitterSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aParticleData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneAttachData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneAttachData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneAttachData[i];
		SBoneAttachSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBoneAttachData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPostFilterParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPostFilterParametersData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPostFilterParametersData[i];
		SPostfilterParametersSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aPostFilterParametersData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGateData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGateData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGateData[i];
		SGateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGateData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SDoorSoundDefs::TypeInfo = ZHMTypeInfo("SDoorSoundDefs", SDoorSoundDefs::WriteJson, SDoorSoundDefs::WriteSimpleJson);

void SDoorSoundDefs::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorSoundDefs*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SDoorSoundDefs::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorSoundDefs*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SItsATrapSaveData::TypeInfo = ZHMTypeInfo("SItsATrapSaveData", SItsATrapSaveData::WriteJson, SItsATrapSaveData::WriteSimpleJson);

void SItsATrapSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItsATrapSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimer;
	p_Stream << "}";

	p_Stream << "}";
}

void SItsATrapSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItsATrapSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << s_Object->m_fTimer;

	p_Stream << "}";
}

ZHMTypeInfo SActorBoneSaveData::TypeInfo = ZHMTypeInfo("SActorBoneSaveData", SActorBoneSaveData::WriteJson, SActorBoneSaveData::WriteSimpleJson);

void SActorBoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SActorBoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SMovementLocomotionSaveData::TypeInfo = ZHMTypeInfo("SMovementLocomotionSaveData", SMovementLocomotionSaveData::WriteJson, SMovementLocomotionSaveData::WriteSimpleJson);

void SMovementLocomotionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementLocomotionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsSneaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSneaking;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementLocomotionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementLocomotionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsSneaking") << ":";
	p_Stream << s_Object->m_bIsSneaking;

	p_Stream << "}";
}

ZHMTypeInfo SSharedKnowledgeSaveData::TypeInfo = ZHMTypeInfo("SSharedKnowledgeSaveData", SSharedKnowledgeSaveData::WriteJson, SSharedKnowledgeSaveData::WriteSimpleJson);

void SSharedKnowledgeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSharedKnowledgeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_OutfitId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActualMatrix") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_ActualMatrix, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEventSaveData") << "," << JsonStr("$val") << ":";
		SEventSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSharedKnowledgeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSharedKnowledgeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_OutfitId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ActualMatrix") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_ActualMatrix, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEvents[i];
		SEventSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SSituationMemberSaveData", SSituationMemberSaveData::WriteJson, SSituationMemberSaveData::WriteSimpleJson);

void SSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eJoinReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationJoinReason") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eJoinReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationJoinReason", static_cast<int>(s_Object->m_eJoinReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOrderValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOrderValid;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_OrderData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_PendingOrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_PendingOrderData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDramaRole") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDramaRole;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_eJoinReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationJoinReason", static_cast<int>(s_Object->m_eJoinReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOrderValid") << ":";
	p_Stream << s_Object->m_bIsOrderValid;
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_OrderData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_PendingOrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_PendingOrderData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rDramaRole") << ":";
	p_Stream << s_Object->m_rDramaRole;
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomData, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SSituationSaveData::TypeInfo = ZHMTypeInfo("SSituationSaveData", SSituationSaveData::WriteJson, SSituationSaveData::WriteSimpleJson);

void SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetSharedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTargetSharedEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Data, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMemberData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMemberData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aMemberData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSituationMemberSaveData") << "," << JsonStr("$val") << ":";
		SSituationMemberSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aMemberData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGroupData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGroupData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGroupData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSituationGroupSaveData") << "," << JsonStr("$val") << ":";
		SSituationGroupSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGroupData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNextGroupID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNextGroupID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_situationStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_situationStartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationEnded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationEnded;
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetSharedEntity") << ":";
	p_Stream << s_Object->m_nTargetSharedEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Data, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aMemberData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMemberData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aMemberData[i];
		SSituationMemberSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aMemberData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGroupData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGroupData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGroupData[i];
		SSituationGroupSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGroupData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNextGroupID") << ":";
	p_Stream << s_Object->m_nNextGroupID;
	p_Stream << ",";

	p_Stream << JsonStr("m_situationStartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_situationStartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationEnded") << ":";
	p_Stream << s_Object->m_bSituationEnded;

	p_Stream << "}";
}

ZHMTypeInfo SCautiousSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SCautiousSituationMemberSaveData", SCautiousSituationMemberSaveData::WriteJson, SCautiousSituationMemberSaveData::WriteSimpleJson);

void SCautiousSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tLastDisturbance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastDisturbance, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCalc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastSearchCalc, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInfluenceCalc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastInfluenceCalc, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastSearchCompleted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInvestigationCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastInvestigationCompleted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tTimeIdling") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tTimeIdling, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBulletImpactsHeard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBulletImpactsHeard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBanterCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBanterCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCivOccupant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCivOccupant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRecievingNewHuntTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRecievingNewHuntTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownEnforcer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockdownEnforcer;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tLastDisturbance") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastDisturbance, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCalc") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastSearchCalc, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInfluenceCalc") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastInfluenceCalc, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCompleted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastSearchCompleted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInvestigationCompleted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastInvestigationCompleted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tTimeIdling") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tTimeIdling, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBulletImpactsHeard") << ":";
	p_Stream << s_Object->m_nBulletImpactsHeard;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBanterCandidate") << ":";
	p_Stream << s_Object->m_bBanterCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCivOccupant") << ":";
	p_Stream << s_Object->m_bCivOccupant;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRecievingNewHuntTarget") << ":";
	p_Stream << s_Object->m_bRecievingNewHuntTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownEnforcer") << ":";
	p_Stream << s_Object->m_bLockdownEnforcer;

	p_Stream << "}";
}

ZHMTypeInfo SSniperCombatGroupSaveData::TypeInfo = ZHMTypeInfo("SSniperCombatGroupSaveData", SSniperCombatGroupSaveData::WriteJson, SSniperCombatGroupSaveData::WriteSimpleJson);

void SSniperCombatGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSniperCombatGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscapeTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEscapeTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTauntTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastTauntTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSniperCombatGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSniperCombatGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFailed") << ":";
	p_Stream << s_Object->m_bFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscapeTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEscapeTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTauntTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastTauntTime, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SMovementCoverSaveData::TypeInfo = ZHMTypeInfo("SMovementCoverSaveData", SMovementCoverSaveData::WriteJson, SMovementCoverSaveData::WriteSimpleJson);

void SMovementCoverSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementCoverSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCoverPlane") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCoverPlane;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCoverAnimNodeID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCoverAnimNodeID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftSideFacing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLeftSideFacing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCrouched") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCrouched;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mPositionInCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mPositionInCover, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementCoverSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementCoverSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCoverPlane") << ":";
	p_Stream << s_Object->m_rCoverPlane;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCoverAnimNodeID") << ":";
	p_Stream << s_Object->m_nCoverAnimNodeID;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftSideFacing") << ":";
	p_Stream << s_Object->m_bLeftSideFacing;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCrouched") << ":";
	p_Stream << s_Object->m_bCrouched;
	p_Stream << ",";

	p_Stream << JsonStr("m_mPositionInCover") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mPositionInCover, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ITriggerPhysics::TypeInfo = ZHMTypeInfo("ITriggerPhysics", ITriggerPhysics::WriteJson, ITriggerPhysics::WriteSimpleJson);

void ITriggerPhysics::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITriggerPhysics*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITriggerPhysics::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITriggerPhysics*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZEntityID::TypeInfo = ZHMTypeInfo("ZEntityID", ZEntityID::WriteJson, ZEntityID::WriteSimpleJson);

void ZEntityID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sStr") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sStr);
	p_Stream << "}";

	p_Stream << "}";
}

void ZEntityID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sStr") << ":";
	p_Stream << JsonStr(s_Object->m_sStr);

	p_Stream << "}";
}

ZHMTypeInfo ZGridFloatField::TypeInfo = ZHMTypeInfo("ZGridFloatField", ZGridFloatField::WriteJson, ZGridFloatField::WriteSimpleJson);

void ZGridFloatField::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGridFloatField*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_field") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_field.size(); ++i)
	{
		auto& s_Item = s_Object->m_field[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_field.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void ZGridFloatField::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGridFloatField*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_field") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_field.size(); ++i)
	{
		auto& s_Item = s_Object->m_field[i];
		p_Stream << s_Item;

		if (i < s_Object->m_field.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCrowdActivitySaveData::TypeInfo = ZHMTypeInfo("SCrowdActivitySaveData", SCrowdActivitySaveData::WriteJson, SCrowdActivitySaveData::WriteSimpleJson);

void SCrowdActivitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdActivitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGait") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGait) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_eGait))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxEnterDelaySec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMaxEnterDelaySec;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxLeaveDelaySec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMaxLeaveDelaySec;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdActivitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdActivitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGait") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_eGait)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxEnterDelaySec") << ":";
	p_Stream << s_Object->m_nMaxEnterDelaySec;
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxLeaveDelaySec") << ":";
	p_Stream << s_Object->m_nMaxLeaveDelaySec;

	p_Stream << "}";
}

ZHMTypeInfo SSituationOrderSaveData::TypeInfo = ZHMTypeInfo("SSituationOrderSaveData", SSituationOrderSaveData::WriteJson, SSituationOrderSaveData::WriteSimpleJson);

void SSituationOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTarget") << ":";
	p_Stream << s_Object->m_nTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasPosition") << ":";
	p_Stream << s_Object->m_bHasPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomData, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IDramaResource::TypeInfo = ZHMTypeInfo("IDramaResource", IDramaResource::WriteJson, IDramaResource::WriteSimpleJson);

void IDramaResource::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDramaResource*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IDramaResource::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDramaResource*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZObserversGroup::TypeInfo = ZHMTypeInfo("ZObserversGroup", ZObserversGroup::WriteJson, ZObserversGroup::WriteSimpleJson);

void ZObserversGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZObserversGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZObserversGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZObserversGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IUIControlEntity::TypeInfo = ZHMTypeInfo("IUIControlEntity", IUIControlEntity::WriteJson, IUIControlEntity::WriteSimpleJson);

void IUIControlEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIControlEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IUIControlEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIControlEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo STemplateBlueprintSubEntity::TypeInfo = ZHMTypeInfo("STemplateBlueprintSubEntity", STemplateBlueprintSubEntity::WriteJson, STemplateBlueprintSubEntity::WriteSimpleJson);

void STemplateBlueprintSubEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateBlueprintSubEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("logicalParent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->logicalParent, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("editorOnly") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->editorOnly;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->entityName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyAliases") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyAliases.size(); ++i)
	{
		auto& s_Item = s_Object->propertyAliases[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePropertyAlias") << "," << JsonStr("$val") << ":";
		SEntityTemplatePropertyAlias::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyAliases.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntities.size(); ++i)
	{
		auto& s_Item = s_Object->exposedEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateExposedEntity") << "," << JsonStr("$val") << ":";
		SEntityTemplateExposedEntity::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->exposedEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedInterfaces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedInterfaces.size(); ++i)
	{
		auto& s_Item = s_Object->exposedInterfaces[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TPair<ZString,int32>") << "," << JsonStr("$val") << ":";
		TPair<ZString,int32>::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->exposedInterfaces.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("entitySubsets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entitySubsets.size(); ++i)
	{
		auto& s_Item = s_Object->entitySubsets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TPair<ZString,SEntityTemplateEntitySubset>") << "," << JsonStr("$val") << ":";
		TPair<ZString,SEntityTemplateEntitySubset>::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->entitySubsets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STemplateBlueprintSubEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateBlueprintSubEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("logicalParent") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->logicalParent, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("entityId") << ":";
	p_Stream << s_Object->entityId;
	p_Stream << ",";

	p_Stream << JsonStr("editorOnly") << ":";
	p_Stream << s_Object->editorOnly;
	p_Stream << ",";

	p_Stream << JsonStr("entityName") << ":";
	p_Stream << JsonStr(s_Object->entityName);
	p_Stream << ",";

	p_Stream << JsonStr("propertyAliases") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyAliases.size(); ++i)
	{
		auto& s_Item = s_Object->propertyAliases[i];
		SEntityTemplatePropertyAlias::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->propertyAliases.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntities.size(); ++i)
	{
		auto& s_Item = s_Object->exposedEntities[i];
		SEntityTemplateExposedEntity::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->exposedEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedInterfaces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedInterfaces.size(); ++i)
	{
		auto& s_Item = s_Object->exposedInterfaces[i];
		TPair<ZString,int32>::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->exposedInterfaces.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("entitySubsets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entitySubsets.size(); ++i)
	{
		auto& s_Item = s_Object->entitySubsets[i];
		TPair<ZString,SEntityTemplateEntitySubset>::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->entitySubsets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SLoadRuntimeResourceResult::TypeInfo = ZHMTypeInfo("SLoadRuntimeResourceResult", SLoadRuntimeResourceResult::WriteJson, SLoadRuntimeResourceResult::WriteSimpleJson);

void SLoadRuntimeResourceResult::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLoadRuntimeResourceResult*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sFilePath") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFilePath);
	p_Stream << "}";

	p_Stream << "}";
}

void SLoadRuntimeResourceResult::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLoadRuntimeResourceResult*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sFilePath") << ":";
	p_Stream << JsonStr(s_Object->sFilePath);

	p_Stream << "}";
}

ZHMTypeInfo IDynamicPhysics::TypeInfo = ZHMTypeInfo("IDynamicPhysics", IDynamicPhysics::WriteJson, IDynamicPhysics::WriteSimpleJson);

void IDynamicPhysics::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDynamicPhysics*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IDynamicPhysics::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDynamicPhysics*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SDestructiblePieceSaveData::TypeInfo = ZHMTypeInfo("SDestructiblePieceSaveData", SDestructiblePieceSaveData::WriteJson, SDestructiblePieceSaveData::WriteSimpleJson);

void SDestructiblePieceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructiblePieceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_mTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mTransform, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMass") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMass;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePhysicsType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EPhysicsObjectType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePhysicsType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_ePhysicsType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAwake") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsAwake;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLinearVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_fLinearVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngularVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_fAngularVelocity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructiblePieceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructiblePieceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_mTransform") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mTransform, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMass") << ":";
	p_Stream << s_Object->m_fMass;
	p_Stream << ",";

	p_Stream << JsonStr("m_ePhysicsType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_ePhysicsType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAwake") << ":";
	p_Stream << s_Object->m_bIsAwake;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLinearVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_fLinearVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngularVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_fAngularVelocity, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SDestructibleRuntimeDamage::TypeInfo = ZHMTypeInfo("SDestructibleRuntimeDamage", SDestructibleRuntimeDamage::WriteJson, SDestructibleRuntimeDamage::WriteSimpleJson);

void SDestructibleRuntimeDamage::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleRuntimeDamage*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDamage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDamage;
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleRuntimeDamage::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleRuntimeDamage*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDamage") << ":";
	p_Stream << s_Object->m_fDamage;

	p_Stream << "}";
}

ZHMTypeInfo SDestructibleObjectSaveData::TypeInfo = ZHMTypeInfo("SDestructibleObjectSaveData", SDestructibleObjectSaveData::WriteJson, SDestructibleObjectSaveData::WriteSimpleJson);

void SDestructibleObjectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleObjectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_interactionData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructibleInteractionHandlerData") << "," << JsonStr("$val") << ":";
	SDestructibleInteractionHandlerData::WriteJson(&s_Object->m_interactionData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDestructiblePieces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDestructiblePieces.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDestructiblePieces[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructiblePieceSaveData") << "," << JsonStr("$val") << ":";
		SDestructiblePieceSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDestructiblePieces.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnectionData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnectionData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aConnectionData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructibleRuntimeConnnection") << "," << JsonStr("$val") << ":";
		SDestructibleRuntimeConnnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aConnectionData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDamageData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDamageData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDamageData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructibleRuntimeDamage") << "," << JsonStr("$val") << ":";
		SDestructibleRuntimeDamage::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDamageData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumAnchors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumAnchors;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eRuntimeMemoryAllocationState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ERuntimeMemoryAllocationState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ERuntimeMemoryAllocationState", static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eSystemPhysicsType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EPhysicsObjectType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eSystemPhysicsType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_eSystemPhysicsType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenDetached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasSystemBeenDetached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenFractured") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasSystemBeenFractured;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPhysicsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPhysicsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestructionEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestructionEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleObjectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleObjectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_interactionData") << ":";
	SDestructibleInteractionHandlerData::WriteSimpleJson(&s_Object->m_interactionData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aDestructiblePieces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDestructiblePieces.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDestructiblePieces[i];
		SDestructiblePieceSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aDestructiblePieces.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnectionData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnectionData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aConnectionData[i];
		SDestructibleRuntimeConnnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aConnectionData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDamageData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDamageData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDamageData[i];
		SDestructibleRuntimeDamage::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aDamageData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumAnchors") << ":";
	p_Stream << s_Object->m_nNumAnchors;
	p_Stream << ",";

	p_Stream << JsonStr("m_eRuntimeMemoryAllocationState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ERuntimeMemoryAllocationState", static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eSystemPhysicsType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_eSystemPhysicsType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenDetached") << ":";
	p_Stream << s_Object->m_bHasSystemBeenDetached;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenFractured") << ":";
	p_Stream << s_Object->m_bHasSystemBeenFractured;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPhysicsEnabled") << ":";
	p_Stream << s_Object->m_bPhysicsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestructionEnabled") << ":";
	p_Stream << s_Object->m_bDestructionEnabled;

	p_Stream << "}";
}

ZHMTypeInfo SIntelDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SIntelDisplayInfoArray_dummy", SIntelDisplayInfoArray_dummy::WriteJson, SIntelDisplayInfoArray_dummy::WriteSimpleJson);

void SIntelDisplayInfoArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SIntelDisplayInfo") << "," << JsonStr("$val") << ":";
		SIntelDisplayInfo::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SIntelDisplayInfoArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SIntelDisplayInfo::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsActorInSituation::TypeInfo = ZHMTypeInfo("SCondition_IsActorInSituation", SCondition_IsActorInSituation::WriteJson, SCondition_IsActorInSituation::WriteSimpleJson);

void SCondition_IsActorInSituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorInSituation*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsActorInSituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorInSituation*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SManHuntServiceSaveData::TypeInfo = ZHMTypeInfo("SManHuntServiceSaveData", SManHuntServiceSaveData::WriteJson, SManHuntServiceSaveData::WriteSimpleJson);

void SManHuntServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SManHuntServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rGuardNodes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_rGuardNodes.size(); ++i)
	{
		auto& s_Item = s_Object->m_rGuardNodes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_rGuardNodes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInitialNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGuardSightRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGuardSightRange;
	p_Stream << "}";

	p_Stream << "}";
}

void SManHuntServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SManHuntServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rGuardNodes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_rGuardNodes.size(); ++i)
	{
		auto& s_Item = s_Object->m_rGuardNodes[i];
		p_Stream << s_Item;

		if (i < s_Object->m_rGuardNodes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialNode") << ":";
	p_Stream << s_Object->m_rInitialNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGuardSightRange") << ":";
	p_Stream << s_Object->m_fGuardSightRange;

	p_Stream << "}";
}

ZHMTypeInfo IMorphemeCutSequenceAnimationEntity::TypeInfo = ZHMTypeInfo("IMorphemeCutSequenceAnimationEntity", IMorphemeCutSequenceAnimationEntity::WriteJson, IMorphemeCutSequenceAnimationEntity::WriteSimpleJson);

void IMorphemeCutSequenceAnimationEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeCutSequenceAnimationEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeCutSequenceAnimationEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeCutSequenceAnimationEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZChoiceManager::TypeInfo = ZHMTypeInfo("ZChoiceManager", ZChoiceManager::WriteJson, ZChoiceManager::WriteSimpleJson);

void ZChoiceManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZChoiceManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZChoiceManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZChoiceManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SEventChannelSaveData::TypeInfo = ZHMTypeInfo("SEventChannelSaveData", SEventChannelSaveData::WriteJson, SEventChannelSaveData::WriteSimpleJson);

void SEventChannelSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventChannelSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SEventChannelSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventChannelSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

ZHMTypeInfo SCCEffectSet::TypeInfo = ZHMTypeInfo("SCCEffectSet", SCCEffectSet::WriteJson, SCCEffectSet::WriteSimpleJson);

void SCCEffectSet::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCCEffectSet*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eDecalEffect") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECCDecalEffect") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDecalEffect) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECCDecalEffect", static_cast<int>(s_Object->m_eDecalEffect))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmitterEffect") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECCEmitterEffect") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmitterEffect) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECCEmitterEffect", static_cast<int>(s_Object->m_eEmitterEffect))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCCEffectSet::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCCEffectSet*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eDecalEffect") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECCDecalEffect", static_cast<int>(s_Object->m_eDecalEffect)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmitterEffect") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECCEmitterEffect", static_cast<int>(s_Object->m_eEmitterEffect)));

	p_Stream << "}";
}

ZHMTypeInfo STypeReference::TypeInfo = ZHMTypeInfo("STypeReference", STypeReference::WriteJson, STypeReference::WriteSimpleJson);

void STypeReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STypeReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sEntityID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sTypeArgName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sTypeArgName);
	p_Stream << "}";

	p_Stream << "}";
}

void STypeReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STypeReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sEntityID") << ":";
	p_Stream << JsonStr(s_Object->sEntityID);
	p_Stream << ",";

	p_Stream << JsonStr("sTypeArgName") << ":";
	p_Stream << JsonStr(s_Object->sTypeArgName);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SuspiciousWeaponDropped::TypeInfo = ZHMTypeInfo("SCondition_SuspiciousWeaponDropped", SCondition_SuspiciousWeaponDropped::WriteJson, SCondition_SuspiciousWeaponDropped::WriteSimpleJson);

void SCondition_SuspiciousWeaponDropped::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuspiciousWeaponDropped*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SuspiciousWeaponDropped::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuspiciousWeaponDropped*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SHeroStandInSaveState::TypeInfo = ZHMTypeInfo("SHeroStandInSaveState", SHeroStandInSaveState::WriteJson, SHeroStandInSaveState::WriteSimpleJson);

void SHeroStandInSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroStandInSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroStandInSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroStandInSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;

	p_Stream << "}";
}

ZHMTypeInfo IHM5ActionEntityListener::TypeInfo = ZHMTypeInfo("IHM5ActionEntityListener", IHM5ActionEntityListener::WriteJson, IHM5ActionEntityListener::WriteSimpleJson);

void IHM5ActionEntityListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5ActionEntityListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5ActionEntityListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5ActionEntityListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SValueBoolsSaveData::TypeInfo = ZHMTypeInfo("SValueBoolsSaveData", SValueBoolsSaveData::WriteJson, SValueBoolsSaveData::WriteSimpleJson);

void SValueBoolsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueBoolsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SValueBoolsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueBoolsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZResourcePtr::TypeInfo = ZHMTypeInfo("ZResourcePtr", ZResourcePtr::WriteJson, ZResourcePtr::WriteSimpleJson);

void ZResourcePtr::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZResourcePtr*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZResourcePtr::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZResourcePtr*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SBodybagBoneSaveData::TypeInfo = ZHMTypeInfo("SBodybagBoneSaveData", SBodybagBoneSaveData::WriteJson, SBodybagBoneSaveData::WriteSimpleJson);

void SBodybagBoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodybagBoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SBodybagBoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodybagBoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SAIPerceptibleEntitySaveData::TypeInfo = ZHMTypeInfo("SAIPerceptibleEntitySaveData", SAIPerceptibleEntitySaveData::WriteJson, SAIPerceptibleEntitySaveData::WriteSimpleJson);

void SAIPerceptibleEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIPerceptibleEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPerceptibleEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPerceptibleEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SAIPerceptibleEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIPerceptibleEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPerceptibleEnabled") << ":";
	p_Stream << s_Object->m_bPerceptibleEnabled;

	p_Stream << "}";
}

ZHMTypeInfo IUIMapSpaceProvider::TypeInfo = ZHMTypeInfo("IUIMapSpaceProvider", IUIMapSpaceProvider::WriteJson, IUIMapSpaceProvider::WriteSimpleJson);

void IUIMapSpaceProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIMapSpaceProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IUIMapSpaceProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIMapSpaceProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IUIMapProvider::TypeInfo = ZHMTypeInfo("IUIMapProvider", IUIMapProvider::WriteJson, IUIMapProvider::WriteSimpleJson);

void IUIMapProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIMapProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IUIMapProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIMapProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZSniperCombatGroup::TypeInfo = ZHMTypeInfo("ZSniperCombatGroup", ZSniperCombatGroup::WriteJson, ZSniperCombatGroup::WriteSimpleJson);

void ZSniperCombatGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSniperCombatGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSniperCombatGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSniperCombatGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SClothBundleSaveData::TypeInfo = ZHMTypeInfo("SClothBundleSaveData", SClothBundleSaveData::WriteJson, SClothBundleSaveData::WriteSimpleJson);

void SClothBundleSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothBundleSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vQuaternion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_OutfitID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSpawnedByHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSpawnedByHitman;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothBundleSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothBundleSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternion") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vQuaternion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitID") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_OutfitID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << ",";

	p_Stream << JsonStr("bSpawnedByHitman") << ":";
	p_Stream << s_Object->bSpawnedByHitman;

	p_Stream << "}";
}

ZHMTypeInfo SCrowdDeadPoseRepositorySaveData::TypeInfo = ZHMTypeInfo("SCrowdDeadPoseRepositorySaveData", SCrowdDeadPoseRepositorySaveData::WriteJson, SCrowdDeadPoseRepositorySaveData::WriteSimpleJson);

void SCrowdDeadPoseRepositorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdDeadPoseRepositorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aPoseCollections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoseCollections.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPoseCollections[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdPoseCollectionSaveData") << "," << JsonStr("$val") << ":";
		SCrowdPoseCollectionSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPoseCollections.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdDeadPoseRepositorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdDeadPoseRepositorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aPoseCollections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoseCollections.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPoseCollections[i];
		SCrowdPoseCollectionSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aPoseCollections.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsExpired::TypeInfo = ZHMTypeInfo("SCondition_IsExpired", SCondition_IsExpired::WriteJson, SCondition_IsExpired::WriteSimpleJson);

void SCondition_IsExpired::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsExpired*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("tTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->tTime;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsExpired::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsExpired*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("tTime") << ":";
	p_Stream << s_Object->tTime;

	p_Stream << "}";
}

ZHMTypeInfo ISavableEntity::TypeInfo = ZHMTypeInfo("ISavableEntity", ISavableEntity::WriteJson, ISavableEntity::WriteSimpleJson);

void ISavableEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISavableEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISavableEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISavableEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxSituationAge::TypeInfo = ZHMTypeInfo("SCondition_MaxSituationAge", SCondition_MaxSituationAge::WriteJson, SCondition_MaxSituationAge::WriteSimpleJson);

void SCondition_MaxSituationAge::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxSituationAge*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fMaxAge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fMaxAge;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxSituationAge::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxSituationAge*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("fMaxAge") << ":";
	p_Stream << s_Object->fMaxAge;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsLegal::TypeInfo = ZHMTypeInfo("SCondition_IsLegal", SCondition_IsLegal::WriteJson, SCondition_IsLegal::WriteSimpleJson);

void SCondition_IsLegal::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsLegal*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("legalType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAILegalType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->legalType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAILegalType", static_cast<int>(s_Object->legalType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsLegal::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsLegal*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("legalType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAILegalType", static_cast<int>(s_Object->legalType)));

	p_Stream << "}";
}

ZHMTypeInfo SBodyPartDamageMultipliers::TypeInfo = ZHMTypeInfo("SBodyPartDamageMultipliers", SBodyPartDamageMultipliers::WriteJson, SBodyPartDamageMultipliers::WriteSimpleJson);

void SBodyPartDamageMultipliers::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodyPartDamageMultipliers*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fHeadDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHeadDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFaceDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fArmDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fArmDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLArmDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLArmDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRArmDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRArmDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHandDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLHandDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLHandDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRHandDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRHandDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLegDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLegDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLLegDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLLegDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRLegDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRLegDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTorsoDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTorsoDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bApplyLeftRightScalars") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bApplyLeftRightScalars;
	p_Stream << "}";

	p_Stream << "}";
}

void SBodyPartDamageMultipliers::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodyPartDamageMultipliers*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fHeadDamageMultiplier") << ":";
	p_Stream << s_Object->m_fHeadDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceDamageMultiplier") << ":";
	p_Stream << s_Object->m_fFaceDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fArmDamageMultiplier") << ":";
	p_Stream << s_Object->m_fArmDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLArmDamageScalar") << ":";
	p_Stream << s_Object->m_fLArmDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRArmDamageScalar") << ":";
	p_Stream << s_Object->m_fRArmDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandDamageMultiplier") << ":";
	p_Stream << s_Object->m_fHandDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLHandDamageScalar") << ":";
	p_Stream << s_Object->m_fLHandDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRHandDamageScalar") << ":";
	p_Stream << s_Object->m_fRHandDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLegDamageMultiplier") << ":";
	p_Stream << s_Object->m_fLegDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLLegDamageScalar") << ":";
	p_Stream << s_Object->m_fLLegDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRLegDamageScalar") << ":";
	p_Stream << s_Object->m_fRLegDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTorsoDamageMultiplier") << ":";
	p_Stream << s_Object->m_fTorsoDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_bApplyLeftRightScalars") << ":";
	p_Stream << s_Object->m_bApplyLeftRightScalars;

	p_Stream << "}";
}

ZHMTypeInfo SColorRGBSaveData::TypeInfo = ZHMTypeInfo("SColorRGBSaveData", SColorRGBSaveData::WriteJson, SColorRGBSaveData::WriteSimpleJson);

void SColorRGBSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGBSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
		SColorRGB::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SColorRGBSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGBSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SColorRGB::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SValueIntSaveData::TypeInfo = ZHMTypeInfo("SValueIntSaveData", SValueIntSaveData::WriteJson, SValueIntSaveData::WriteSimpleJson);

void SValueIntSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueIntSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SValueIntSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueIntSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SStateControllerSaveDataStruct::TypeInfo = ZHMTypeInfo("SStateControllerSaveDataStruct", SStateControllerSaveDataStruct::WriteJson, SStateControllerSaveDataStruct::WriteSimpleJson);

void SStateControllerSaveDataStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStateControllerSaveDataStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SStateControllerSaveDataStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStateControllerSaveDataStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

ZHMTypeInfo SStateControllerSaveData::TypeInfo = ZHMTypeInfo("SStateControllerSaveData", SStateControllerSaveData::WriteJson, SStateControllerSaveData::WriteSimpleJson);

void SStateControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStateControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SStateControllerSaveDataStruct") << "," << JsonStr("$val") << ":";
		SStateControllerSaveDataStruct::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SStateControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStateControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SStateControllerSaveDataStruct::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SValueSaveData::TypeInfo = ZHMTypeInfo("SValueSaveData", SValueSaveData::WriteJson, SValueSaveData::WriteSimpleJson);

void SValueSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_ValueBool") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SValueBoolsSaveData") << "," << JsonStr("$val") << ":";
	SValueBoolsSaveData::WriteJson(&s_Object->m_ValueBool, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueFloat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SValueFloatSaveData") << "," << JsonStr("$val") << ":";
	SValueFloatSaveData::WriteJson(&s_Object->m_ValueFloat, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueInt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SValueIntSaveData") << "," << JsonStr("$val") << ":";
	SValueIntSaveData::WriteJson(&s_Object->m_ValueInt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_StateController") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SStateControllerSaveData") << "," << JsonStr("$val") << ":";
	SStateControllerSaveData::WriteJson(&s_Object->m_StateController, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueColorRGB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGBSaveData") << "," << JsonStr("$val") << ":";
	SColorRGBSaveData::WriteJson(&s_Object->m_ValueColorRGB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SValueSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_ValueBool") << ":";
	SValueBoolsSaveData::WriteSimpleJson(&s_Object->m_ValueBool, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueFloat") << ":";
	SValueFloatSaveData::WriteSimpleJson(&s_Object->m_ValueFloat, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueInt") << ":";
	SValueIntSaveData::WriteSimpleJson(&s_Object->m_ValueInt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_StateController") << ":";
	SStateControllerSaveData::WriteSimpleJson(&s_Object->m_StateController, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueColorRGB") << ":";
	SColorRGBSaveData::WriteSimpleJson(&s_Object->m_ValueColorRGB, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SHeroItemActionSaveData::TypeInfo = ZHMTypeInfo("SHeroItemActionSaveData", SHeroItemActionSaveData::WriteJson, SHeroItemActionSaveData::WriteSimpleJson);

void SHeroItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

ZHMTypeInfo SBodybagSaveData::TypeInfo = ZHMTypeInfo("SBodybagSaveData", SBodybagSaveData::WriteJson, SBodybagSaveData::WriteSimpleJson);

void SBodybagSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodybagSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vLinkedPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLinkedPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLinkedQuaternionRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vLinkedQuaternionRotation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBodybagBoneSaveData") << "," << JsonStr("$val") << ":";
		SBodybagBoneSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDeadActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInMorgue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsInMorgue;
	p_Stream << "}";

	p_Stream << "}";
}

void SBodybagSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodybagSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vLinkedPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLinkedPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vLinkedQuaternionRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vLinkedQuaternionRotation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		SBodybagBoneSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadActor") << ":";
	p_Stream << s_Object->m_rDeadActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInMorgue") << ":";
	p_Stream << s_Object->m_IsInMorgue;

	p_Stream << "}";
}

ZHMTypeInfo SAudioEmitterStateSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterStateSaveData", SAudioEmitterStateSaveData::WriteJson, SAudioEmitterStateSaveData::WriteSimpleJson);

void SAudioEmitterStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nStateId;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << s_Object->m_nStateId;

	p_Stream << "}";
}

ZHMTypeInfo SEntityTemplatePinConnection::TypeInfo = ZHMTypeInfo("SEntityTemplatePinConnection", SEntityTemplatePinConnection::WriteJson, SEntityTemplatePinConnection::WriteSimpleJson);

void SEntityTemplatePinConnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fromID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fromID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->toID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->constantPinValue, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePinConnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fromID") << ":";
	p_Stream << s_Object->fromID;
	p_Stream << ",";

	p_Stream << JsonStr("toID") << ":";
	p_Stream << s_Object->toID;
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	ZVariant::WriteSimpleJson(&s_Object->constantPinValue, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SEnvironmentConfigResourceEntry::TypeInfo = ZHMTypeInfo("SEnvironmentConfigResourceEntry", SEnvironmentConfigResourceEntry::WriteJson, SEnvironmentConfigResourceEntry::WriteSimpleJson);

void SEnvironmentConfigResourceEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEnvironmentConfigResourceEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Name") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->Name);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ContractsDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->ContractsDatastoreRid, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("UnlockablesDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->UnlockablesDatastoreRid, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("BlobsDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->BlobsDatastoreRid, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ActivityDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->ActivityDatastoreRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEnvironmentConfigResourceEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEnvironmentConfigResourceEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Name") << ":";
	p_Stream << JsonStr(s_Object->Name);
	p_Stream << ",";

	p_Stream << JsonStr("ContractsDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->ContractsDatastoreRid, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("UnlockablesDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->UnlockablesDatastoreRid, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("BlobsDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->BlobsDatastoreRid, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ActivityDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->ActivityDatastoreRid, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SEnvironmentConfigResource::TypeInfo = ZHMTypeInfo("SEnvironmentConfigResource", SEnvironmentConfigResource::WriteJson, SEnvironmentConfigResource::WriteSimpleJson);

void SEnvironmentConfigResource::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEnvironmentConfigResource*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Environments") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Environments.size(); ++i)
	{
		auto& s_Item = s_Object->Environments[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEnvironmentConfigResourceEntry") << "," << JsonStr("$val") << ":";
		SEnvironmentConfigResourceEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->Environments.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEnvironmentConfigResource::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEnvironmentConfigResource*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Environments") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Environments.size(); ++i)
	{
		auto& s_Item = s_Object->Environments[i];
		SEnvironmentConfigResourceEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->Environments.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SEvacuateVIPGroupSaveData::TypeInfo = ZHMTypeInfo("SEvacuateVIPGroupSaveData", SEvacuateVIPGroupSaveData::WriteJson, SEvacuateVIPGroupSaveData::WriteSimpleJson);

void SEvacuateVIPGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateVIPGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIP") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVIP;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIPActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVIPActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rEvacuationNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEvacuationNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSafeRoomNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSafeRoomNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCompromisedEvacNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCompromisedEvacNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_assignedBodyguards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_assignedBodyguards.size(); ++i)
	{
		auto& s_Item = s_Object->m_assignedBodyguards[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_assignedBodyguards.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEvacuationStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEvacuationStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tCornered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tCornered, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tTacticalPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tTacticalPoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoom") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tSafeRoom, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoomStandDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tSafeRoomStandDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInitialFlee") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInitialFlee;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomVIPSentActingStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_safeRoomVIPSentActingStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_isSetupPhaseComplete") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_isSetupPhaseComplete;
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateVIPGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateVIPGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIP") << ":";
	p_Stream << s_Object->m_rVIP;
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIPActor") << ":";
	p_Stream << s_Object->m_rVIPActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rEvacuationNode") << ":";
	p_Stream << s_Object->m_rEvacuationNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSafeRoomNode") << ":";
	p_Stream << s_Object->m_rSafeRoomNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCompromisedEvacNode") << ":";
	p_Stream << s_Object->m_rCompromisedEvacNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_assignedBodyguards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_assignedBodyguards.size(); ++i)
	{
		auto& s_Item = s_Object->m_assignedBodyguards[i];
		p_Stream << s_Item;

		if (i < s_Object->m_assignedBodyguards.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEvacuationStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEvacuationStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tCornered") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tCornered, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tTacticalPoint") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tTacticalPoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoom") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tSafeRoom, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoomStandDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tSafeRoomStandDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bInitialFlee") << ":";
	p_Stream << s_Object->m_bInitialFlee;
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomVIPSentActingStarted") << ":";
	p_Stream << s_Object->m_safeRoomVIPSentActingStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_isSetupPhaseComplete") << ":";
	p_Stream << s_Object->m_isSetupPhaseComplete;

	p_Stream << "}";
}

ZHMTypeInfo SAnimatedActorActOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorActOrderSaveData", SAnimatedActorActOrderSaveData::WriteJson, SAnimatedActorActOrderSaveData::WriteSimpleJson);

void SAnimatedActorActOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorActOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bOverrideExistingAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOverrideExistingAct;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nForcedAnimationNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nForcedAnimationNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rChildNetworkAct;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rListener") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rListener;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vOriginPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginQuaternion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vOriginQuaternion, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorActOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorActOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bOverrideExistingAct") << ":";
	p_Stream << s_Object->m_bOverrideExistingAct;
	p_Stream << ",";

	p_Stream << JsonStr("m_nForcedAnimationNode") << ":";
	p_Stream << s_Object->m_nForcedAnimationNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkAct") << ":";
	p_Stream << s_Object->m_rChildNetworkAct;
	p_Stream << ",";

	p_Stream << JsonStr("m_rListener") << ":";
	p_Stream << s_Object->m_rListener;
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vOriginPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginQuaternion") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vOriginQuaternion, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ICausalNode::TypeInfo = ZHMTypeInfo("ICausalNode", ICausalNode::WriteJson, ICausalNode::WriteSimpleJson);

void ICausalNode::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICausalNode*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICausalNode::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICausalNode*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasBystanderSomethingElseToInvestigate::TypeInfo = ZHMTypeInfo("SCondition_HasBystanderSomethingElseToInvestigate", SCondition_HasBystanderSomethingElseToInvestigate::WriteJson, SCondition_HasBystanderSomethingElseToInvestigate::WriteSimpleJson);

void SCondition_HasBystanderSomethingElseToInvestigate::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasBystanderSomethingElseToInvestigate*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_HasBystanderSomethingElseToInvestigate::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasBystanderSomethingElseToInvestigate*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IRenderCompositorEntity::TypeInfo = ZHMTypeInfo("IRenderCompositorEntity", IRenderCompositorEntity::WriteJson, IRenderCompositorEntity::WriteSimpleJson);

void IRenderCompositorEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderCompositorEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderCompositorEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderCompositorEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsRealCombatSituation::TypeInfo = ZHMTypeInfo("SCondition_IsRealCombatSituation", SCondition_IsRealCombatSituation::WriteJson, SCondition_IsRealCombatSituation::WriteSimpleJson);

void SCondition_IsRealCombatSituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsRealCombatSituation*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatSituations") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_CombatSituations, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsRealCombatSituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsRealCombatSituation*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatSituations") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_CombatSituations, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IParticleRenderEntity::TypeInfo = ZHMTypeInfo("IParticleRenderEntity", IParticleRenderEntity::WriteJson, IParticleRenderEntity::WriteSimpleJson);

void IParticleRenderEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleRenderEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IParticleRenderEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleRenderEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SWorldSpaceSettings::TypeInfo = ZHMTypeInfo("SWorldSpaceSettings", SWorldSpaceSettings::WriteJson, SWorldSpaceSettings::WriteSimpleJson);

void SWorldSpaceSettings::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWorldSpaceSettings*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fCloseupDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fCloseupDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bDynamicScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bDynamicScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDynamicScaleAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleNearDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDynamicScaleNearDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleBlendRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDynamicScaleBlendRange;
	p_Stream << "}";

	p_Stream << "}";
}

void SWorldSpaceSettings::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWorldSpaceSettings*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fCloseupDistance") << ":";
	p_Stream << s_Object->fCloseupDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fScale") << ":";
	p_Stream << s_Object->fScale;
	p_Stream << ",";

	p_Stream << JsonStr("bDynamicScale") << ":";
	p_Stream << s_Object->bDynamicScale;
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleAlpha") << ":";
	p_Stream << s_Object->fDynamicScaleAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleNearDistance") << ":";
	p_Stream << s_Object->fDynamicScaleNearDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleBlendRange") << ":";
	p_Stream << s_Object->fDynamicScaleBlendRange;

	p_Stream << "}";
}

ZHMTypeInfo S25DProjectionSettings::TypeInfo = ZHMTypeInfo("S25DProjectionSettings", S25DProjectionSettings::WriteJson, S25DProjectionSettings::WriteSimpleJson);

void S25DProjectionSettings::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S25DProjectionSettings*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fNearDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearScaleFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearScaleFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarScaleFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarScaleFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fScaleFactor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAlphaFactor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAlphaFactor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aScaleCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScaleCurve.size(); ++i)
	{
		auto& s_Item = s_Object->aScaleCurve[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("S25DProjectionSettingsCurveEntry") << "," << JsonStr("$val") << ":";
		S25DProjectionSettingsCurveEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aScaleCurve.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAlphaCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAlphaCurve.size(); ++i)
	{
		auto& s_Item = s_Object->aAlphaCurve[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("S25DProjectionSettingsCurveEntry") << "," << JsonStr("$val") << ":";
		S25DProjectionSettingsCurveEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aAlphaCurve.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("eViewportLock") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EViewportLock") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eViewportLock) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EViewportLock", static_cast<int>(s_Object->eViewportLock))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fViewportGutter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fViewportGutter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sWorldSpaceSettings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SWorldSpaceSettings") << "," << JsonStr("$val") << ":";
	SWorldSpaceSettings::WriteJson(&s_Object->sWorldSpaceSettings, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void S25DProjectionSettings::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S25DProjectionSettings*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fNearDistance") << ":";
	p_Stream << s_Object->fNearDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fFarDistance") << ":";
	p_Stream << s_Object->fFarDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fNearScale") << ":";
	p_Stream << s_Object->fNearScale;
	p_Stream << ",";

	p_Stream << JsonStr("fFarScale") << ":";
	p_Stream << s_Object->fFarScale;
	p_Stream << ",";

	p_Stream << JsonStr("fNearFov") << ":";
	p_Stream << s_Object->fNearFov;
	p_Stream << ",";

	p_Stream << JsonStr("fFarFov") << ":";
	p_Stream << s_Object->fFarFov;
	p_Stream << ",";

	p_Stream << JsonStr("fNearScaleFov") << ":";
	p_Stream << s_Object->fNearScaleFov;
	p_Stream << ",";

	p_Stream << JsonStr("fFarScaleFov") << ":";
	p_Stream << s_Object->fFarScaleFov;
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << s_Object->fScaleFactor;
	p_Stream << ",";

	p_Stream << JsonStr("fNearAlpha") << ":";
	p_Stream << s_Object->fNearAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fFarAlpha") << ":";
	p_Stream << s_Object->fFarAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fAlphaFactor") << ":";
	p_Stream << s_Object->fAlphaFactor;
	p_Stream << ",";

	p_Stream << JsonStr("aScaleCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScaleCurve.size(); ++i)
	{
		auto& s_Item = s_Object->aScaleCurve[i];
		S25DProjectionSettingsCurveEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->aScaleCurve.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAlphaCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAlphaCurve.size(); ++i)
	{
		auto& s_Item = s_Object->aAlphaCurve[i];
		S25DProjectionSettingsCurveEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->aAlphaCurve.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("eViewportLock") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EViewportLock", static_cast<int>(s_Object->eViewportLock)));
	p_Stream << ",";

	p_Stream << JsonStr("fViewportGutter") << ":";
	p_Stream << s_Object->fViewportGutter;
	p_Stream << ",";

	p_Stream << JsonStr("sWorldSpaceSettings") << ":";
	SWorldSpaceSettings::WriteSimpleJson(&s_Object->sWorldSpaceSettings, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SItemKeywordProxySaveData::TypeInfo = ZHMTypeInfo("SItemKeywordProxySaveData", SItemKeywordProxySaveData::WriteJson, SItemKeywordProxySaveData::WriteSimpleJson);

void SItemKeywordProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemKeywordProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemKeywordProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemKeywordProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_AreVisibleWeaponsIllegal::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleWeaponsIllegal", SCondition_AreVisibleWeaponsIllegal::WriteJson, SCondition_AreVisibleWeaponsIllegal::WriteSimpleJson);

void SCondition_AreVisibleWeaponsIllegal::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleWeaponsIllegal*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_AreVisibleWeaponsIllegal::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleWeaponsIllegal*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDistractionInterruptableByNewOcurrences::TypeInfo = ZHMTypeInfo("SCondition_IsDistractionInterruptableByNewOcurrences", SCondition_IsDistractionInterruptableByNewOcurrences::WriteJson, SCondition_IsDistractionInterruptableByNewOcurrences::WriteSimpleJson);

void SCondition_IsDistractionInterruptableByNewOcurrences::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistractionInterruptableByNewOcurrences*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("distraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->distraction, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsDistractionInterruptableByNewOcurrences::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistractionInterruptableByNewOcurrences*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("distraction") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->distraction, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SVIPEvacuationNodeSaveData::TypeInfo = ZHMTypeInfo("SVIPEvacuationNodeSaveData", SVIPEvacuationNodeSaveData::WriteJson, SVIPEvacuationNodeSaveData::WriteSimpleJson);

void SVIPEvacuationNodeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVIPEvacuationNodeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fPenaltyMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPenaltyMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPenaltyDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPenaltyDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tPenalty") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tPenalty, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_compromisedOnEnter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_compromisedOnEnter;
	p_Stream << "}";

	p_Stream << "}";
}

void SVIPEvacuationNodeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVIPEvacuationNodeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fPenaltyMultiplier") << ":";
	p_Stream << s_Object->m_fPenaltyMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPenaltyDuration") << ":";
	p_Stream << s_Object->m_fPenaltyDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_tPenalty") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tPenalty, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_compromisedOnEnter") << ":";
	p_Stream << s_Object->m_compromisedOnEnter;

	p_Stream << "}";
}

ZHMTypeInfo ZDialogConditionTarget::TypeInfo = ZHMTypeInfo("ZDialogConditionTarget", ZDialogConditionTarget::WriteJson, ZDialogConditionTarget::WriteSimpleJson);

void ZDialogConditionTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDialogConditionTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZDialogConditionTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDialogConditionTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector2", SMathMultiplyDivideSaveData_SVector2::WriteJson, SMathMultiplyDivideSaveData_SVector2::WriteSimpleJson);

void SMathMultiplyDivideSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

ZHMTypeInfo ZContractEventsManager::TypeInfo = ZHMTypeInfo("ZContractEventsManager", ZContractEventsManager::WriteJson, ZContractEventsManager::WriteSimpleJson);

void ZContractEventsManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZContractEventsManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZContractEventsManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZContractEventsManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZGetHelpGroup::TypeInfo = ZHMTypeInfo("ZGetHelpGroup", ZGetHelpGroup::WriteJson, ZGetHelpGroup::WriteSimpleJson);

void ZGetHelpGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGetHelpGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGetHelpGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGetHelpGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZOnlineSocialManager::TypeInfo = ZHMTypeInfo("ZOnlineSocialManager", ZOnlineSocialManager::WriteJson, ZOnlineSocialManager::WriteSimpleJson);

void ZOnlineSocialManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZOnlineSocialManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZOnlineSocialManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZOnlineSocialManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SInventoryUISlot::TypeInfo = ZHMTypeInfo("SInventoryUISlot", SInventoryUISlot::WriteJson, SInventoryUISlot::WriteSimpleJson);

void SInventoryUISlot::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUISlot*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containedLabel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->containedLabel);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("description") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->description);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("perks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->perks.size(); ++i)
	{
		auto& s_Item = s_Object->perks[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->perks.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("silencer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->silencer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("count") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->count;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ammo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->ammo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->id, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("weaponCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->weaponCategory);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->itemCategory);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemCategoryLKey") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->itemCategoryLKey);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("inventoryCategoryIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->inventoryCategoryIcon);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("isDroppable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->isDroppable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("isContainer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->isContainer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containsItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->containsItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("detectedDuringFrisk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->detectedDuringFrisk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("actionAndKillTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->actionAndKillTypes.size(); ++i)
	{
		auto& s_Item = s_Object->actionAndKillTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->actionAndKillTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("suspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->suspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("canReload") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->canReload;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sPoisonType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sPoisonType);
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryUISlot::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUISlot*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << ",";

	p_Stream << JsonStr("containedLabel") << ":";
	p_Stream << JsonStr(s_Object->containedLabel);
	p_Stream << ",";

	p_Stream << JsonStr("description") << ":";
	p_Stream << JsonStr(s_Object->description);
	p_Stream << ",";

	p_Stream << JsonStr("perks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->perks.size(); ++i)
	{
		auto& s_Item = s_Object->perks[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->perks.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("silencer") << ":";
	p_Stream << s_Object->silencer;
	p_Stream << ",";

	p_Stream << JsonStr("count") << ":";
	p_Stream << s_Object->count;
	p_Stream << ",";

	p_Stream << JsonStr("ammo") << ":";
	p_Stream << s_Object->ammo;
	p_Stream << ",";

	p_Stream << JsonStr("id") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->id, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("weaponCategory") << ":";
	p_Stream << JsonStr(s_Object->weaponCategory);
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("itemCategory") << ":";
	p_Stream << JsonStr(s_Object->itemCategory);
	p_Stream << ",";

	p_Stream << JsonStr("itemCategoryLKey") << ":";
	p_Stream << JsonStr(s_Object->itemCategoryLKey);
	p_Stream << ",";

	p_Stream << JsonStr("inventoryCategoryIcon") << ":";
	p_Stream << JsonStr(s_Object->inventoryCategoryIcon);
	p_Stream << ",";

	p_Stream << JsonStr("isDroppable") << ":";
	p_Stream << s_Object->isDroppable;
	p_Stream << ",";

	p_Stream << JsonStr("isContainer") << ":";
	p_Stream << s_Object->isContainer;
	p_Stream << ",";

	p_Stream << JsonStr("containsItem") << ":";
	p_Stream << s_Object->containsItem;
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << ",";

	p_Stream << JsonStr("detectedDuringFrisk") << ":";
	p_Stream << s_Object->detectedDuringFrisk;
	p_Stream << ",";

	p_Stream << JsonStr("actionAndKillTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->actionAndKillTypes.size(); ++i)
	{
		auto& s_Item = s_Object->actionAndKillTypes[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->actionAndKillTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("suspicious") << ":";
	p_Stream << s_Object->suspicious;
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << ",";

	p_Stream << JsonStr("canReload") << ":";
	p_Stream << s_Object->canReload;
	p_Stream << ",";

	p_Stream << JsonStr("sPoisonType") << ":";
	p_Stream << JsonStr(s_Object->sPoisonType);

	p_Stream << "}";
}

ZHMTypeInfo SVisibilitySaveData::TypeInfo = ZHMTypeInfo("SVisibilitySaveData", SVisibilitySaveData::WriteJson, SVisibilitySaveData::WriteSimpleJson);

void SVisibilitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVisibilitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SVisibilitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVisibilitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;

	p_Stream << "}";
}

ZHMTypeInfo ICrowdCoreProvider::TypeInfo = ZHMTypeInfo("ICrowdCoreProvider", ICrowdCoreProvider::WriteJson, ICrowdCoreProvider::WriteSimpleJson);

void ICrowdCoreProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICrowdCoreProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICrowdCoreProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICrowdCoreProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IFloatCurveEntity::TypeInfo = ZHMTypeInfo("IFloatCurveEntity", IFloatCurveEntity::WriteJson, IFloatCurveEntity::WriteSimpleJson);

void IFloatCurveEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFloatCurveEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IFloatCurveEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFloatCurveEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IBaseConstraint::TypeInfo = ZHMTypeInfo("IBaseConstraint", IBaseConstraint::WriteJson, IBaseConstraint::WriteSimpleJson);

void IBaseConstraint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBaseConstraint*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBaseConstraint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBaseConstraint*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IConditionalTextLine::TypeInfo = ZHMTypeInfo("IConditionalTextLine", IConditionalTextLine::WriteJson, IConditionalTextLine::WriteSimpleJson);

void IConditionalTextLine::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IConditionalTextLine*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IConditionalTextLine::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IConditionalTextLine*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZEvacuateVIPGroup::TypeInfo = ZHMTypeInfo("ZEvacuateVIPGroup", ZEvacuateVIPGroup::WriteJson, ZEvacuateVIPGroup::WriteSimpleJson);

void ZEvacuateVIPGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEvacuateVIPGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEvacuateVIPGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEvacuateVIPGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCombatZoneEntitySaveData::TypeInfo = ZHMTypeInfo("SCombatZoneEntitySaveData", SCombatZoneEntitySaveData::WriteJson, SCombatZoneEntitySaveData::WriteSimpleJson);

void SCombatZoneEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatZoneEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsInLockdown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsInLockdown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFalseAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFalseAlarm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECombatZoneState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECombatZoneState", static_cast<int>(s_Object->m_nState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLockdownTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLockdownTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tTriggerTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tTriggerTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEngageTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEngageTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatZoneEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatZoneEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsInLockdown") << ":";
	p_Stream << s_Object->m_bIsInLockdown;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFalseAlarm") << ":";
	p_Stream << s_Object->m_bIsFalseAlarm;
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECombatZoneState", static_cast<int>(s_Object->m_nState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tLockdownTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLockdownTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tTriggerTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tTriggerTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tEngageTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEngageTime, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SGProperties::TypeInfo = ZHMTypeInfo("SGProperties", SGProperties::WriteJson, SGProperties::WriteSimpleJson);

void SGProperties::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGProperties*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("vMin") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->vMin, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("vMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->vMax, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nGridWidth") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nGridWidth;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fGridSpacing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fGridSpacing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nVisibilityRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nVisibilityRange;
	p_Stream << "}";

	p_Stream << "}";
}

void SGProperties::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGProperties*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("vMin") << ":";
	float4::WriteSimpleJson(&s_Object->vMin, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("vMax") << ":";
	float4::WriteSimpleJson(&s_Object->vMax, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nGridWidth") << ":";
	p_Stream << s_Object->nGridWidth;
	p_Stream << ",";

	p_Stream << JsonStr("fGridSpacing") << ":";
	p_Stream << s_Object->fGridSpacing;
	p_Stream << ",";

	p_Stream << JsonStr("nVisibilityRange") << ":";
	p_Stream << s_Object->nVisibilityRange;

	p_Stream << "}";
}

ZHMTypeInfo SCuriousEventSaveData::TypeInfo = ZHMTypeInfo("SCuriousEventSaveData", SCuriousEventSaveData::WriteJson, SCuriousEventSaveData::WriteSimpleJson);

void SCuriousEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCuriousEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tExpiresAt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiresAt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nKnowledgeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nKnowledgeIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SCuriousEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCuriousEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tExpiresAt") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiresAt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nKnowledgeIndex") << ":";
	p_Stream << s_Object->m_nKnowledgeIndex;

	p_Stream << "}";
}

ZHMTypeInfo SCuriousEventServiceSaveData::TypeInfo = ZHMTypeInfo("SCuriousEventServiceSaveData", SCuriousEventServiceSaveData::WriteJson, SCuriousEventServiceSaveData::WriteSimpleJson);

void SCuriousEventServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCuriousEventServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aCuriousEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCuriousEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCuriousEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCuriousEventSaveData") << "," << JsonStr("$val") << ":";
		SCuriousEventSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aCuriousEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCuriousEventServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCuriousEventServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aCuriousEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCuriousEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCuriousEvents[i];
		SCuriousEventSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aCuriousEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IntRuntimeParamEqualsTo::TypeInfo = ZHMTypeInfo("SCondition_IntRuntimeParamEqualsTo", SCondition_IntRuntimeParamEqualsTo::WriteJson, SCondition_IntRuntimeParamEqualsTo::WriteSimpleJson);

void SCondition_IntRuntimeParamEqualsTo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IntRuntimeParamEqualsTo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sParamName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sParamName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IntRuntimeParamEqualsTo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IntRuntimeParamEqualsTo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sParamName") << ":";
	p_Stream << JsonStr(s_Object->sParamName);
	p_Stream << ",";

	p_Stream << JsonStr("nValue") << ":";
	p_Stream << s_Object->nValue;

	p_Stream << "}";
}

ZHMTypeInfo IGameMode::TypeInfo = ZHMTypeInfo("IGameMode", IGameMode::WriteJson, IGameMode::WriteSimpleJson);

void IGameMode::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGameMode*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IGameMode::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGameMode*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IMorphemeEntity::TypeInfo = ZHMTypeInfo("IMorphemeEntity", IMorphemeEntity::WriteJson, IMorphemeEntity::WriteSimpleJson);

void IMorphemeEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SGuardBodySituationSaveData::TypeInfo = ZHMTypeInfo("SGuardBodySituationSaveData", SGuardBodySituationSaveData::WriteJson, SGuardBodySituationSaveData::WriteSimpleJson);

void SGuardBodySituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardBodySituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bBystanderFieldsFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBystanderFieldsFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLastGetHelpGroupFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLastGetHelpGroupFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneCanSeeBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSomeoneCanSeeBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneHandledBodybag") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSomeoneHandledBodybag;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pGetHelpGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGetHelpGroup;
	p_Stream << "}";

	p_Stream << "}";
}

void SGuardBodySituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardBodySituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bBystanderFieldsFailed") << ":";
	p_Stream << s_Object->m_bBystanderFieldsFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLastGetHelpGroupFailed") << ":";
	p_Stream << s_Object->m_bLastGetHelpGroupFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneCanSeeBody") << ":";
	p_Stream << s_Object->m_bSomeoneCanSeeBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneHandledBodybag") << ":";
	p_Stream << s_Object->m_bSomeoneHandledBodybag;
	p_Stream << ",";

	p_Stream << JsonStr("m_pGetHelpGroup") << ":";
	p_Stream << s_Object->m_pGetHelpGroup;

	p_Stream << "}";
}

ZHMTypeInfo STargetTrackingSaveData::TypeInfo = ZHMTypeInfo("STargetTrackingSaveData", STargetTrackingSaveData::WriteJson, STargetTrackingSaveData::WriteSimpleJson);

void STargetTrackingSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetTrackingSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sharedTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_sharedTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_position") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_position, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_time") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_time, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STargetTrackingSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetTrackingSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sharedTarget") << ":";
	p_Stream << s_Object->m_sharedTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_position") << ":";
	float4::WriteSimpleJson(&s_Object->m_position, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_time") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_time, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo STargetTrackingServiceSaveData::TypeInfo = ZHMTypeInfo("STargetTrackingServiceSaveData", STargetTrackingServiceSaveData::WriteJson, STargetTrackingServiceSaveData::WriteSimpleJson);

void STargetTrackingServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetTrackingServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aTrackedTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackedTargets.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTrackedTargets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STargetTrackingSaveData") << "," << JsonStr("$val") << ":";
		STargetTrackingSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTrackedTargets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STargetTrackingServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetTrackingServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aTrackedTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackedTargets.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTrackedTargets[i];
		STargetTrackingSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aTrackedTargets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCollisionControllerAspectSaveData::TypeInfo = ZHMTypeInfo("SCollisionControllerAspectSaveData", SCollisionControllerAspectSaveData::WriteJson, SCollisionControllerAspectSaveData::WriteSimpleJson);

void SCollisionControllerAspectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollisionControllerAspectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bCollideHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCollideHitman;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollideCamera") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCollideCamera;
	p_Stream << "}";

	p_Stream << "}";
}

void SCollisionControllerAspectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollisionControllerAspectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bCollideHitman") << ":";
	p_Stream << s_Object->m_bCollideHitman;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollideCamera") << ":";
	p_Stream << s_Object->m_bCollideCamera;

	p_Stream << "}";
}

ZHMTypeInfo SCollisionControllerAspectsSaveData::TypeInfo = ZHMTypeInfo("SCollisionControllerAspectsSaveData", SCollisionControllerAspectsSaveData::WriteJson, SCollisionControllerAspectsSaveData::WriteSimpleJson);

void SCollisionControllerAspectsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollisionControllerAspectsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCollisionControllerAspectSaveData") << "," << JsonStr("$val") << ":";
		SCollisionControllerAspectSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCollisionControllerAspectsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollisionControllerAspectsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SCollisionControllerAspectSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SActOrderSaveData::TypeInfo = ZHMTypeInfo("SActOrderSaveData", SActOrderSaveData::WriteJson, SActOrderSaveData::WriteSimpleJson);

void SActOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_faceTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_faceTarget, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendOutImmediatelyUponTimeout") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBlendOutImmediatelyUponTimeout;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopCurrentActFast") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopCurrentActFast;
	p_Stream << "}";

	p_Stream << "}";
}

void SActOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_faceTarget") << ":";
	float4::WriteSimpleJson(&s_Object->m_faceTarget, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendOutImmediatelyUponTimeout") << ":";
	p_Stream << s_Object->m_bBlendOutImmediatelyUponTimeout;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopCurrentActFast") << ":";
	p_Stream << s_Object->m_bStopCurrentActFast;

	p_Stream << "}";
}

ZHMTypeInfo SContractObjectiveHudHintEntitySaveData::TypeInfo = ZHMTypeInfo("SContractObjectiveHudHintEntitySaveData", SContractObjectiveHudHintEntitySaveData::WriteJson, SContractObjectiveHudHintEntitySaveData::WriteSimpleJson);

void SContractObjectiveHudHintEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContractObjectiveHudHintEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SContractObjectiveHudHintEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContractObjectiveHudHintEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

ZHMTypeInfo ZInvestigateDisguiseGroup::TypeInfo = ZHMTypeInfo("ZInvestigateDisguiseGroup", ZInvestigateDisguiseGroup::WriteJson, ZInvestigateDisguiseGroup::WriteSimpleJson);

void ZInvestigateDisguiseGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInvestigateDisguiseGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZInvestigateDisguiseGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInvestigateDisguiseGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ICharacterMovementState::TypeInfo = ZHMTypeInfo("ICharacterMovementState", ICharacterMovementState::WriteJson, ICharacterMovementState::WriteSimpleJson);

void ICharacterMovementState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterMovementState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterMovementState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterMovementState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IVariationResourceEntity::TypeInfo = ZHMTypeInfo("IVariationResourceEntity", IVariationResourceEntity::WriteJson, IVariationResourceEntity::WriteSimpleJson);

void IVariationResourceEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IVariationResourceEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IVariationResourceEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IVariationResourceEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMapMarkerData::TypeInfo = ZHMTypeInfo("SMapMarkerData", SMapMarkerData::WriteJson, SMapMarkerData::WriteSimpleJson);

void SMapMarkerData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMapMarkerData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("pathPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pathPoints.size(); ++i)
	{
		auto& s_Item = s_Object->pathPoints[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
		SVector2::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pathPoints.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMapMarkerData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMapMarkerData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("pathPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pathPoints.size(); ++i)
	{
		auto& s_Item = s_Object->pathPoints[i];
		SVector2::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->pathPoints.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SGBufferSample::TypeInfo = ZHMTypeInfo("SGBufferSample", SGBufferSample::WriteJson, SGBufferSample::WriteSimpleJson);

void SGBufferSample::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGBufferSample*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("normal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->normal, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("diffuse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->diffuse, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("specular") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->specular, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("accumulatedLight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->accumulatedLight, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("glossiness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->glossiness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("translucency") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->translucency;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ao") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->ao;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("shadingModel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->shadingModel;
	p_Stream << "}";

	p_Stream << "}";
}

void SGBufferSample::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGBufferSample*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("normal") << ":";
	SVector3::WriteSimpleJson(&s_Object->normal, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("diffuse") << ":";
	SVector3::WriteSimpleJson(&s_Object->diffuse, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("specular") << ":";
	SVector3::WriteSimpleJson(&s_Object->specular, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("accumulatedLight") << ":";
	SVector3::WriteSimpleJson(&s_Object->accumulatedLight, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("glossiness") << ":";
	p_Stream << s_Object->glossiness;
	p_Stream << ",";

	p_Stream << JsonStr("translucency") << ":";
	p_Stream << s_Object->translucency;
	p_Stream << ",";

	p_Stream << JsonStr("ao") << ":";
	p_Stream << s_Object->ao;
	p_Stream << ",";

	p_Stream << JsonStr("shadingModel") << ":";
	p_Stream << s_Object->shadingModel;

	p_Stream << "}";
}

ZHMTypeInfo SRememberActorSaveData::TypeInfo = ZHMTypeInfo("SRememberActorSaveData", SRememberActorSaveData::WriteJson, SRememberActorSaveData::WriteSimpleJson);

void SRememberActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRememberActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Actors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Actors.size(); ++i)
	{
		auto& s_Item = s_Object->m_Actors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_Actors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SRememberActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRememberActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Actors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Actors.size(); ++i)
	{
		auto& s_Item = s_Object->m_Actors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_Actors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SEscortOutBehaviorSaveData::TypeInfo = ZHMTypeInfo("SEscortOutBehaviorSaveData", SEscortOutBehaviorSaveData::WriteJson, SEscortOutBehaviorSaveData::WriteSimpleJson);

void SEscortOutBehaviorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortOutBehaviorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bConversationHelperPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bConversationHelperPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsm, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vExitPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vExitPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWarningTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWarningTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHardWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHardWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscortStateSilenceTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEscortStateSilenceTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyWarningTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWaitHitmanToComplyWarningTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyStateTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWaitHitmanToComplyStateTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastLookBack") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastLookBack, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReachedExitPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReachedExitPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowExitWarningEnded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowExitWarningEnded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bJustShowExit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bJustShowExit;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortOutBehaviorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortOutBehaviorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bConversationHelperPaused") << ":";
	p_Stream << s_Object->m_bConversationHelperPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsm") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsm, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vExitPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vExitPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tWarningTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWarningTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bHardWarning") << ":";
	p_Stream << s_Object->m_bHardWarning;
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscortStateSilenceTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEscortStateSilenceTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyWarningTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWaitHitmanToComplyWarningTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyStateTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWaitHitmanToComplyStateTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastLookBack") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastLookBack, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bReachedExitPosition") << ":";
	p_Stream << s_Object->m_bReachedExitPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowExitWarningEnded") << ":";
	p_Stream << s_Object->m_bShowExitWarningEnded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bJustShowExit") << ":";
	p_Stream << s_Object->m_bJustShowExit;

	p_Stream << "}";
}

ZHMTypeInfo SRecoverUnconsciousGroupSaveData::TypeInfo = ZHMTypeInfo("SRecoverUnconsciousGroupSaveData", SRecoverUnconsciousGroupSaveData::WriteJson, SRecoverUnconsciousGroupSaveData::WriteSimpleJson);

void SRecoverUnconsciousGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRecoverUnconsciousGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rVictim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVictim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rWaker") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rWaker;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEscalate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWokenUpInTheGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWokenUpInTheGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWakeUp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFastWakeUp;
	p_Stream << "}";

	p_Stream << "}";
}

void SRecoverUnconsciousGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRecoverUnconsciousGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rVictim") << ":";
	p_Stream << s_Object->m_rVictim;
	p_Stream << ",";

	p_Stream << JsonStr("m_rWaker") << ":";
	p_Stream << s_Object->m_rWaker;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << s_Object->m_fTimer;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalate") << ":";
	p_Stream << s_Object->m_bEscalate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWokenUpInTheGroup") << ":";
	p_Stream << s_Object->m_bWokenUpInTheGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWakeUp") << ":";
	p_Stream << s_Object->m_bFastWakeUp;

	p_Stream << "}";
}

ZHMTypeInfo SCompressedGridFloatField::TypeInfo = ZHMTypeInfo("SCompressedGridFloatField", SCompressedGridFloatField::WriteJson, SCompressedGridFloatField::WriteSimpleJson);

void SCompressedGridFloatField::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCompressedGridFloatField*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsSparse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSparse;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_aValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCompressedGridFloatField::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCompressedGridFloatField*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsSparse") << ":";
	p_Stream << s_Object->m_bIsSparse;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_aValues[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MinActualDistance::TypeInfo = ZHMTypeInfo("SCondition_MinActualDistance", SCondition_MinActualDistance::WriteJson, SCondition_MinActualDistance::WriteSimpleJson);

void SCondition_MinActualDistance::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinActualDistance*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("a0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a0, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a1, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->a2;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MinActualDistance::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinActualDistance*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("a0") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a0, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a1, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("a2") << ":";
	p_Stream << s_Object->a2;

	p_Stream << "}";
}

ZHMTypeInfo SHeroItemAttachmentSaveData::TypeInfo = ZHMTypeInfo("SHeroItemAttachmentSaveData", SHeroItemAttachmentSaveData::WriteJson, SHeroItemAttachmentSaveData::WriteSimpleJson);

void SHeroItemAttachmentSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroItemAttachmentSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroItemAttachmentSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroItemAttachmentSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SuitcaseAssistanceRequesterFaceToFace::TypeInfo = ZHMTypeInfo("SCondition_SuitcaseAssistanceRequesterFaceToFace", SCondition_SuitcaseAssistanceRequesterFaceToFace::WriteJson, SCondition_SuitcaseAssistanceRequesterFaceToFace::WriteSimpleJson);

void SCondition_SuitcaseAssistanceRequesterFaceToFace::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuitcaseAssistanceRequesterFaceToFace*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_SuitcaseAssistanceRequesterFaceToFace::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuitcaseAssistanceRequesterFaceToFace*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ISequenceAudioPlayer::TypeInfo = ZHMTypeInfo("ISequenceAudioPlayer", ISequenceAudioPlayer::WriteJson, ISequenceAudioPlayer::WriteSimpleJson);

void ISequenceAudioPlayer::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceAudioPlayer*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISequenceAudioPlayer::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceAudioPlayer*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IArticulatedPhysicsAccessor::TypeInfo = ZHMTypeInfo("IArticulatedPhysicsAccessor", IArticulatedPhysicsAccessor::WriteJson, IArticulatedPhysicsAccessor::WriteSimpleJson);

void IArticulatedPhysicsAccessor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IArticulatedPhysicsAccessor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IArticulatedPhysicsAccessor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IArticulatedPhysicsAccessor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ISequenceTrack::TypeInfo = ZHMTypeInfo("ISequenceTrack", ISequenceTrack::WriteJson, ISequenceTrack::WriteSimpleJson);

void ISequenceTrack::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceTrack*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISequenceTrack::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceTrack*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IItemOwner::TypeInfo = ZHMTypeInfo("IItemOwner", IItemOwner::WriteJson, IItemOwner::WriteSimpleJson);

void IItemOwner::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemOwner*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IItemOwner::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemOwner*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMathMultipliesSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector2", SMathMultipliesSaveData_SVector2::WriteJson, SMathMultipliesSaveData_SVector2::WriteSimpleJson);

void SMathMultipliesSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_SVector2") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_SVector2::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_SVector2::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IllegalWeaponPickedUp::TypeInfo = ZHMTypeInfo("SCondition_IllegalWeaponPickedUp", SCondition_IllegalWeaponPickedUp::WriteJson, SCondition_IllegalWeaponPickedUp::WriteSimpleJson);

void SCondition_IllegalWeaponPickedUp::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IllegalWeaponPickedUp*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IllegalWeaponPickedUp::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IllegalWeaponPickedUp*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SSpaceCollectionBehaviorConfiguration::TypeInfo = ZHMTypeInfo("SSpaceCollectionBehaviorConfiguration", SSpaceCollectionBehaviorConfiguration::WriteJson, SSpaceCollectionBehaviorConfiguration::WriteSimpleJson);

void SSpaceCollectionBehaviorConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpaceCollectionBehaviorConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bInclusive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInclusive;
	p_Stream << "}";

	p_Stream << "}";
}

void SSpaceCollectionBehaviorConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpaceCollectionBehaviorConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bInclusive") << ":";
	p_Stream << s_Object->m_bInclusive;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsAccidentDeathContext::TypeInfo = ZHMTypeInfo("SCondition_IsAccidentDeathContext", SCondition_IsAccidentDeathContext::WriteJson, SCondition_IsAccidentDeathContext::WriteSimpleJson);

void SCondition_IsAccidentDeathContext::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAccidentDeathContext*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("deathContextType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAccidentDeathContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->deathContextType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAccidentDeathContext", static_cast<int>(s_Object->deathContextType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsAccidentDeathContext::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAccidentDeathContext*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("deathContextType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAccidentDeathContext", static_cast<int>(s_Object->deathContextType)));

	p_Stream << "}";
}

ZHMTypeInfo IEscortOutSituation::TypeInfo = ZHMTypeInfo("IEscortOutSituation", IEscortOutSituation::WriteJson, IEscortOutSituation::WriteSimpleJson);

void IEscortOutSituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEscortOutSituation*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEscortOutSituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEscortOutSituation*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasTensionOrHigher::TypeInfo = ZHMTypeInfo("SCondition_HasTensionOrHigher", SCondition_HasTensionOrHigher::WriteJson, SCondition_HasTensionOrHigher::WriteSimpleJson);

void SCondition_HasTensionOrHigher::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasTensionOrHigher*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("tension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->tension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->tension))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasTensionOrHigher::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasTensionOrHigher*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("tension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->tension)));

	p_Stream << "}";
}

ZHMTypeInfo SBlobsConfigResourceEntry::TypeInfo = ZHMTypeInfo("SBlobsConfigResourceEntry", SBlobsConfigResourceEntry::WriteJson, SBlobsConfigResourceEntry::WriteSimpleJson);

void SBlobsConfigResourceEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBlobsConfigResourceEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("BlobRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->BlobRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SBlobsConfigResourceEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBlobsConfigResourceEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Id") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << ",";

	p_Stream << JsonStr("BlobRid") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->BlobRid, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IProjectile::TypeInfo = ZHMTypeInfo("IProjectile", IProjectile::WriteJson, IProjectile::WriteSimpleJson);

void IProjectile::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IProjectile*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IProjectile::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IProjectile*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IHM5Projectile::TypeInfo = ZHMTypeInfo("IHM5Projectile", IHM5Projectile::WriteJson, IHM5Projectile::WriteSimpleJson);

void IHM5Projectile::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5Projectile*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5Projectile::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5Projectile*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IContextPropertyEntity::TypeInfo = ZHMTypeInfo("IContextPropertyEntity", IContextPropertyEntity::WriteJson, IContextPropertyEntity::WriteSimpleJson);

void IContextPropertyEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContextPropertyEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContextPropertyEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContextPropertyEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IParticleColliderEntity::TypeInfo = ZHMTypeInfo("IParticleColliderEntity", IParticleColliderEntity::WriteJson, IParticleColliderEntity::WriteSimpleJson);

void IParticleColliderEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleColliderEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IParticleColliderEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleColliderEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IFutureCameraState::TypeInfo = ZHMTypeInfo("IFutureCameraState", IFutureCameraState::WriteJson, IFutureCameraState::WriteSimpleJson);

void IFutureCameraState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFutureCameraState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IFutureCameraState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFutureCameraState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IllegalItemDropped::TypeInfo = ZHMTypeInfo("SCondition_IllegalItemDropped", SCondition_IllegalItemDropped::WriteJson, SCondition_IllegalItemDropped::WriteSimpleJson);

void SCondition_IllegalItemDropped::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IllegalItemDropped*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->includeWeapons;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IllegalItemDropped::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IllegalItemDropped*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << s_Object->includeWeapons;

	p_Stream << "}";
}

ZHMTypeInfo SGuardBodySituationMemberSaveData::TypeInfo = ZHMTypeInfo("SGuardBodySituationMemberSaveData", SGuardBodySituationMemberSaveData::WriteJson, SGuardBodySituationMemberSaveData::WriteSimpleJson);

void SGuardBodySituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardBodySituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSearchingForMorgue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSearchingForMorgue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsExitingSuccessfulBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsExitingSuccessfulBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDeadBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodybag") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBodybag;
	p_Stream << "}";

	p_Stream << "}";
}

void SGuardBodySituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardBodySituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSearchingForMorgue") << ":";
	p_Stream << s_Object->m_bSearchingForMorgue;
	p_Stream << ",";

	p_Stream << JsonStr("m_IsExitingSuccessfulBehavior") << ":";
	p_Stream << s_Object->m_IsExitingSuccessfulBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadBody") << ":";
	p_Stream << s_Object->m_rDeadBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodybag") << ":";
	p_Stream << s_Object->m_rBodybag;

	p_Stream << "}";
}

ZHMTypeInfo IBallAndSocketConstraint::TypeInfo = ZHMTypeInfo("IBallAndSocketConstraint", IBallAndSocketConstraint::WriteJson, IBallAndSocketConstraint::WriteSimpleJson);

void IBallAndSocketConstraint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBallAndSocketConstraint*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBallAndSocketConstraint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBallAndSocketConstraint*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo INetRelevancy::TypeInfo = ZHMTypeInfo("INetRelevancy", INetRelevancy::WriteJson, INetRelevancy::WriteSimpleJson);

void INetRelevancy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<INetRelevancy*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void INetRelevancy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<INetRelevancy*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZAgitatedBystanderOrder::TypeInfo = ZHMTypeInfo("ZAgitatedBystanderOrder", ZAgitatedBystanderOrder::WriteJson, ZAgitatedBystanderOrder::WriteSimpleJson);

void ZAgitatedBystanderOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAgitatedBystanderOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZAgitatedBystanderOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAgitatedBystanderOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMathMultiplyDivideSaveData_float32::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_float32", SMathMultiplyDivideSaveData_float32::WriteJson, SMathMultiplyDivideSaveData_float32::WriteSimpleJson);

void SMathMultiplyDivideSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fA;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fB;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << s_Object->m_fA;
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << s_Object->m_fB;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

ZHMTypeInfo SActorAnimSetVariationIndexSaveData::TypeInfo = ZHMTypeInfo("SActorAnimSetVariationIndexSaveData", SActorAnimSetVariationIndexSaveData::WriteJson, SActorAnimSetVariationIndexSaveData::WriteSimpleJson);

void SActorAnimSetVariationIndexSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAnimSetVariationIndexSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rAnimationSetDefinition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rAnimationSetDefinition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAnimSetVariationIndexSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAnimSetVariationIndexSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rAnimationSetDefinition") << ":";
	p_Stream << s_Object->m_rAnimationSetDefinition;
	p_Stream << ",";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;

	p_Stream << "}";
}

ZHMTypeInfo ICharacterCombatState::TypeInfo = ZHMTypeInfo("ICharacterCombatState", ICharacterCombatState::WriteJson, ICharacterCombatState::WriteSimpleJson);

void ICharacterCombatState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterCombatState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterCombatState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterCombatState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IGateEntity::TypeInfo = ZHMTypeInfo("IGateEntity", IGateEntity::WriteJson, IGateEntity::WriteSimpleJson);

void IGateEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGateEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IGateEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGateEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IDestructionEffectInterface::TypeInfo = ZHMTypeInfo("IDestructionEffectInterface", IDestructionEffectInterface::WriteJson, IDestructionEffectInterface::WriteSimpleJson);

void IDestructionEffectInterface::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDestructionEffectInterface*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IDestructionEffectInterface::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDestructionEffectInterface*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAnimPlayerSaveData::TypeInfo = ZHMTypeInfo("SAnimPlayerSaveData", SAnimPlayerSaveData::WriteJson, SAnimPlayerSaveData::WriteSimpleJson);

void SAnimPlayerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimPlayerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mTrajectoryQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTrajectoryQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTrajectoryTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTrajectoryTranslation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBoneTransformSaveData") << "," << JsonStr("$val") << ":";
		SBoneTransformSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAnimPlayerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimPlayerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mTrajectoryQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTrajectoryQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTrajectoryTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTrajectoryTranslation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		SBoneTransformSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SActorKeywordProxySaveData::TypeInfo = ZHMTypeInfo("SActorKeywordProxySaveData", SActorKeywordProxySaveData::WriteJson, SActorKeywordProxySaveData::WriteSimpleJson);

void SActorKeywordProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorKeywordProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorKeywordProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorKeywordProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo SActorKeywordProxiesSaveData::TypeInfo = ZHMTypeInfo("SActorKeywordProxiesSaveData", SActorKeywordProxiesSaveData::WriteJson, SActorKeywordProxiesSaveData::WriteSimpleJson);

void SActorKeywordProxiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorKeywordProxySaveData") << "," << JsonStr("$val") << ":";
		SActorKeywordProxySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorKeywordProxiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SActorKeywordProxySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZCheckLastPositionGroup::TypeInfo = ZHMTypeInfo("ZCheckLastPositionGroup", ZCheckLastPositionGroup::WriteJson, ZCheckLastPositionGroup::WriteSimpleJson);

void ZCheckLastPositionGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCheckLastPositionGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZCheckLastPositionGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCheckLastPositionGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SituationTarget::TypeInfo = ZHMTypeInfo("SCondition_SituationTarget", SCondition_SituationTarget::WriteJson, SCondition_SituationTarget::WriteSimpleJson);

void SCondition_SituationTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SituationTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SConditionalTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SConditionalTimerEntitySaveData", SConditionalTimerEntitySaveData::WriteJson, SConditionalTimerEntitySaveData::WriteSimpleJson);

void SConditionalTimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConditionalTimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SConditionalTimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConditionalTimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << s_Object->m_bValue;

	p_Stream << "}";
}

ZHMTypeInfo ICharacterCameraState::TypeInfo = ZHMTypeInfo("ICharacterCameraState", ICharacterCameraState::WriteJson, ICharacterCameraState::WriteSimpleJson);

void ICharacterCameraState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterCameraState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterCameraState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterCameraState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SExposedTypeInfo::TypeInfo = ZHMTypeInfo("SExposedTypeInfo", SExposedTypeInfo::WriteJson, SExposedTypeInfo::WriteSimpleJson);

void SExposedTypeInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedTypeInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STypeReference") << "," << JsonStr("$val") << ":";
	STypeReference::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SExposedTypeInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedTypeInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	STypeReference::WriteSimpleJson(&s_Object->target, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SAccidentObserversGroupSaveData::TypeInfo = ZHMTypeInfo("SAccidentObserversGroupSaveData", SAccidentObserversGroupSaveData::WriteJson, SAccidentObserversGroupSaveData::WriteSimpleJson);

void SAccidentObserversGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAccidentObserversGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aWaitingObservers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_accidentScaleContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAccidentScaleContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_accidentScaleContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAccidentScaleContext", static_cast<int>(s_Object->m_accidentScaleContext))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SAccidentObserversGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAccidentObserversGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aWaitingObservers[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_accidentScaleContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAccidentScaleContext", static_cast<int>(s_Object->m_accidentScaleContext)));

	p_Stream << "}";
}

ZHMTypeInfo ZTime::TypeInfo = ZHMTypeInfo("ZTime", ZTime::WriteJson, ZTime::WriteSimpleJson);

void ZTime::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZTime*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nValue;
	p_Stream << "}";

	p_Stream << "}";
}

void ZTime::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZTime*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nValue") << ":";
	p_Stream << s_Object->m_nValue;

	p_Stream << "}";
}

ZHMTypeInfo SGaitTransitionEntry::TypeInfo = ZHMTypeInfo("SGaitTransitionEntry", SGaitTransitionEntry::WriteJson, SGaitTransitionEntry::WriteSimpleJson);

void SGaitTransitionEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGaitTransitionEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_gait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGait") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_gait) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_gait))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_speed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESpeed") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_speed) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESpeed", static_cast<int>(s_Object->m_speed))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SGaitTransitionEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGaitTransitionEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_gait") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_gait)));
	p_Stream << ",";

	p_Stream << JsonStr("m_speed") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESpeed", static_cast<int>(s_Object->m_speed)));

	p_Stream << "}";
}

ZHMTypeInfo SMatrix43::TypeInfo = ZHMTypeInfo("SMatrix43", SMatrix43::WriteJson, SMatrix43::WriteSimpleJson);

void SMatrix43::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix43*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("XAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->XAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->YAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->ZAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->Trans, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix43::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix43*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("XAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->XAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->YAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->ZAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	SVector3::WriteSimpleJson(&s_Object->Trans, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasCombatFightOrder::TypeInfo = ZHMTypeInfo("SCondition_HasCombatFightOrder", SCondition_HasCombatFightOrder::WriteJson, SCondition_HasCombatFightOrder::WriteSimpleJson);

void SCondition_HasCombatFightOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasCombatFightOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_CombatSituation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasCombatFightOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasCombatFightOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatSituation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_CombatSituation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SAudioMemoryMonitorEntry::TypeInfo = ZHMTypeInfo("SAudioMemoryMonitorEntry", SAudioMemoryMonitorEntry::WriteJson, SAudioMemoryMonitorEntry::WriteSimpleJson);

void SAudioMemoryMonitorEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioMemoryMonitorEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("shortId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->shortId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("size") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->size;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->references.size(); ++i)
	{
		auto& s_Item = s_Object->references[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->references.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAudioMemoryMonitorEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioMemoryMonitorEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("shortId") << ":";
	p_Stream << s_Object->shortId;
	p_Stream << ",";

	p_Stream << JsonStr("size") << ":";
	p_Stream << s_Object->size;
	p_Stream << ",";

	p_Stream << JsonStr("references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->references.size(); ++i)
	{
		auto& s_Item = s_Object->references[i];
		ZResourceID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->references.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsCombatPositionActReady::TypeInfo = ZHMTypeInfo("SCondition_IsCombatPositionActReady", SCondition_IsCombatPositionActReady::WriteJson, SCondition_IsCombatPositionActReady::WriteSimpleJson);

void SCondition_IsCombatPositionActReady::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsCombatPositionActReady*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("combatPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->combatPosition, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsCombatPositionActReady::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsCombatPositionActReady*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("combatPosition") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->combatPosition, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IDramaFlowControl::TypeInfo = ZHMTypeInfo("IDramaFlowControl", IDramaFlowControl::WriteJson, IDramaFlowControl::WriteSimpleJson);

void IDramaFlowControl::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDramaFlowControl*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IDramaFlowControl::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDramaFlowControl*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZHttpUrl::TypeInfo = ZHMTypeInfo("ZHttpUrl", ZHttpUrl::WriteJson, ZHttpUrl::WriteSimpleJson);

void ZHttpUrl::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZHttpUrl*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZHttpUrl::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZHttpUrl*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IUIDataListener::TypeInfo = ZHMTypeInfo("IUIDataListener", IUIDataListener::WriteJson, IUIDataListener::WriteSimpleJson);

void IUIDataListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIDataListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IUIDataListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIDataListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxDistanceToKnownPosition::TypeInfo = ZHMTypeInfo("SCondition_MaxDistanceToKnownPosition", SCondition_MaxDistanceToKnownPosition::WriteJson, SCondition_MaxDistanceToKnownPosition::WriteSimpleJson);

void SCondition_MaxDistanceToKnownPosition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxDistanceToKnownPosition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("a") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fMaxDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fMaxDistance;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxDistanceToKnownPosition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxDistanceToKnownPosition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("a") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("fMaxDistance") << ":";
	p_Stream << s_Object->fMaxDistance;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_InfectedMayFollowPlayer::TypeInfo = ZHMTypeInfo("SCondition_InfectedMayFollowPlayer", SCondition_InfectedMayFollowPlayer::WriteJson, SCondition_InfectedMayFollowPlayer::WriteSimpleJson);

void SCondition_InfectedMayFollowPlayer::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_InfectedMayFollowPlayer*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_InfectedMayFollowPlayer::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_InfectedMayFollowPlayer*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SEvacuateSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SEvacuateSituationMemberSaveData", SEvacuateSituationMemberSaveData::WriteJson, SEvacuateSituationMemberSaveData::WriteSimpleJson);

void SEvacuateSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;

	p_Stream << "}";
}

ZHMTypeInfo SOnlineEvent::TypeInfo = ZHMTypeInfo("SOnlineEvent", SOnlineEvent::WriteJson, SOnlineEvent::WriteSimpleJson);

void SOnlineEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOnlineEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->data, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SOnlineEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOnlineEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("data") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->data, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SFleeOrderSaveData::TypeInfo = ZHMTypeInfo("SFleeOrderSaveData", SFleeOrderSaveData::WriteJson, SFleeOrderSaveData::WriteSimpleJson);

void SFleeOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFleeOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eHelpReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eHelpReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eHelpReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridNodeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridNodeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFleeForHelp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFleeForHelp;
	p_Stream << "}";

	p_Stream << "}";
}

void SFleeOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFleeOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eHelpReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eHelpReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridNodeIndex") << ":";
	p_Stream << s_Object->m_nGridNodeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFleeForHelp") << ":";
	p_Stream << s_Object->m_bFleeForHelp;

	p_Stream << "}";
}

ZHMTypeInfo SExternalEntityTemplatePinConnection::TypeInfo = ZHMTypeInfo("SExternalEntityTemplatePinConnection", SExternalEntityTemplatePinConnection::WriteJson, SExternalEntityTemplatePinConnection::WriteSimpleJson);

void SExternalEntityTemplatePinConnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExternalEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fromEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->fromEntity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->toEntity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->constantPinValue, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SExternalEntityTemplatePinConnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExternalEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fromEntity") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->fromEntity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("toEntity") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->toEntity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	ZVariant::WriteSimpleJson(&s_Object->constantPinValue, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo STemplateEntityBlueprint::TypeInfo = ZHMTypeInfo("STemplateEntityBlueprint", STemplateEntityBlueprint::WriteJson, STemplateEntityBlueprint::WriteSimpleJson);

void STemplateEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("subType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->subType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item = s_Object->subEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STemplateBlueprintSubEntity") << "," << JsonStr("$val") << ":";
		STemplateBlueprintSubEntity::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnections.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnections[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pinConnections.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("inputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->inputPinForwardings.size(); ++i)
	{
		auto& s_Item = s_Object->inputPinForwardings[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->inputPinForwardings.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("outputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->outputPinForwardings.size(); ++i)
	{
		auto& s_Item = s_Object->outputPinForwardings[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->outputPinForwardings.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("overrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->overrideDeletes.size(); ++i)
	{
		auto& s_Item = s_Object->overrideDeletes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
		SEntityTemplateReference::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->overrideDeletes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnectionOverrides[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExternalEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SExternalEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pinConnectionOverrides.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrideDeletes.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnectionOverrideDeletes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExternalEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SExternalEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pinConnectionOverrideDeletes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("subType") << ":";
	p_Stream << s_Object->subType;
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item = s_Object->subEntities[i];
		STemplateBlueprintSubEntity::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << s_Item;

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnections.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnections[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->pinConnections.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("inputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->inputPinForwardings.size(); ++i)
	{
		auto& s_Item = s_Object->inputPinForwardings[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->inputPinForwardings.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("outputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->outputPinForwardings.size(); ++i)
	{
		auto& s_Item = s_Object->outputPinForwardings[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->outputPinForwardings.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("overrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->overrideDeletes.size(); ++i)
	{
		auto& s_Item = s_Object->overrideDeletes[i];
		SEntityTemplateReference::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->overrideDeletes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnectionOverrides[i];
		SExternalEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->pinConnectionOverrides.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrideDeletes.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnectionOverrideDeletes[i];
		SExternalEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->pinConnectionOverrideDeletes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SDramaControllerSaveData::TypeInfo = ZHMTypeInfo("SDramaControllerSaveData", SDramaControllerSaveData::WriteJson, SDramaControllerSaveData::WriteSimpleJson);

void SDramaControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsStartCondValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsStartCondValid;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnableCondValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnableCondValid;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsStartCondValid") << ":";
	p_Stream << s_Object->m_bIsStartCondValid;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnableCondValid") << ":";
	p_Stream << s_Object->m_bIsEnableCondValid;

	p_Stream << "}";
}

ZHMTypeInfo SRenderVideoPlayerSaveData::TypeInfo = ZHMTypeInfo("SRenderVideoPlayerSaveData", SRenderVideoPlayerSaveData::WriteJson, SRenderVideoPlayerSaveData::WriteSimpleJson);

void SRenderVideoPlayerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRenderVideoPlayerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPlaying") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlaying;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLooping") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLooping;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUseAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstFrame") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirstFrame;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVideoError") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVideoError;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldBeStopped") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShouldBeStopped;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_LastVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_LastVisible, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_StartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_StartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RunTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_RunTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SRenderVideoPlayerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRenderVideoPlayerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPlaying") << ":";
	p_Stream << s_Object->m_bPlaying;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLooping") << ":";
	p_Stream << s_Object->m_bLooping;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseAlpha") << ":";
	p_Stream << s_Object->m_bUseAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstFrame") << ":";
	p_Stream << s_Object->m_bFirstFrame;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << s_Object->m_bRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVideoError") << ":";
	p_Stream << s_Object->m_bVideoError;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldBeStopped") << ":";
	p_Stream << s_Object->m_bShouldBeStopped;
	p_Stream << ",";

	p_Stream << JsonStr("m_LastVisible") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_LastVisible, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_StartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_StartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_RunTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_RunTime, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDebugBuild::TypeInfo = ZHMTypeInfo("SCondition_IsDebugBuild", SCondition_IsDebugBuild::WriteJson, SCondition_IsDebugBuild::WriteSimpleJson);

void SCondition_IsDebugBuild::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDebugBuild*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_IsDebugBuild::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDebugBuild*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SEntityPropertyDescriptor::TypeInfo = ZHMTypeInfo("SEntityPropertyDescriptor", SEntityPropertyDescriptor::WriteJson, SEntityPropertyDescriptor::WriteSimpleJson);

void SEntityPropertyDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPropertyDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->type, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsHidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("attributes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TMap<ZString,ZString>") << "," << JsonStr("$val") << ":";
	TMap<ZString,ZString>::WriteJson(&s_Object->attributes, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityPropertyDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPropertyDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->type, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << s_Object->bIsHidden;
	p_Stream << ",";

	p_Stream << JsonStr("attributes") << ":";
	TMap<ZString,ZString>::WriteSimpleJson(&s_Object->attributes, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasUnhandledGoal::TypeInfo = ZHMTypeInfo("SCondition_HasUnhandledGoal", SCondition_HasUnhandledGoal::WriteJson, SCondition_HasUnhandledGoal::WriteSimpleJson);

void SCondition_HasUnhandledGoal::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasUnhandledGoal*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIGoal") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasUnhandledGoal::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasUnhandledGoal*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo SActorDynamicTemplateHandlerSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateHandlerSaveData", SActorDynamicTemplateHandlerSaveData::WriteJson, SActorDynamicTemplateHandlerSaveData::WriteSimpleJson);

void SActorDynamicTemplateHandlerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateHandlerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSetpiece") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSetpiece;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDynamicTemplateHandlerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateHandlerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSetpiece") << ":";
	p_Stream << s_Object->m_rSetpiece;

	p_Stream << "}";
}

ZHMTypeInfo SVIPEvacuationNodesSaveData::TypeInfo = ZHMTypeInfo("SVIPEvacuationNodesSaveData", SVIPEvacuationNodesSaveData::WriteJson, SVIPEvacuationNodesSaveData::WriteSimpleJson);

void SVIPEvacuationNodesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVIPEvacuationNodesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVIPEvacuationNodeSaveData") << "," << JsonStr("$val") << ":";
		SVIPEvacuationNodeSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SVIPEvacuationNodesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVIPEvacuationNodesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SVIPEvacuationNodeSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZScopedRuntimePinConDesc::TypeInfo = ZHMTypeInfo("ZScopedRuntimePinConDesc", ZScopedRuntimePinConDesc::WriteJson, ZScopedRuntimePinConDesc::WriteSimpleJson);

void ZScopedRuntimePinConDesc::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZScopedRuntimePinConDesc*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aScopePath[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_PinConDesc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimePinConDesc") << "," << JsonStr("$val") << ":";
	ZRuntimePinConDesc::WriteJson(&s_Object->m_PinConDesc, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZScopedRuntimePinConDesc::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZScopedRuntimePinConDesc*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aScopePath[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_PinConDesc") << ":";
	ZRuntimePinConDesc::WriteSimpleJson(&s_Object->m_PinConDesc, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SSequenceTrackSaveData::TypeInfo = ZHMTypeInfo("SSequenceTrackSaveData", SSequenceTrackSaveData::WriteJson, SSequenceTrackSaveData::WriteSimpleJson);

void SSequenceTrackSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSequenceTrackSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomTrackData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomTrackData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSequenceTrackSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSequenceTrackSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomTrackData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomTrackData, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IValueIntSaveable::TypeInfo = ZHMTypeInfo("IValueIntSaveable", IValueIntSaveable::WriteJson, IValueIntSaveable::WriteSimpleJson);

void IValueIntSaveable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueIntSaveable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueIntSaveable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueIntSaveable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAimAssistObjectSaveData::TypeInfo = ZHMTypeInfo("SAimAssistObjectSaveData", SAimAssistObjectSaveData::WriteJson, SAimAssistObjectSaveData::WriteSimpleJson);

void SAimAssistObjectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAimAssistObjectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bHasBeenStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasBeenStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasAimAssistActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasAimAssistActivated;
	p_Stream << "}";

	p_Stream << "}";
}

void SAimAssistObjectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAimAssistObjectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bHasBeenStarted") << ":";
	p_Stream << s_Object->m_bHasBeenStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasAimAssistActivated") << ":";
	p_Stream << s_Object->m_bWasAimAssistActivated;

	p_Stream << "}";
}

ZHMTypeInfo IGlobalRumbleController::TypeInfo = ZHMTypeInfo("IGlobalRumbleController", IGlobalRumbleController::WriteJson, IGlobalRumbleController::WriteSimpleJson);

void IGlobalRumbleController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGlobalRumbleController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IGlobalRumbleController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGlobalRumbleController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsSuitcase::TypeInfo = ZHMTypeInfo("SCondition_IsSuitcase", SCondition_IsSuitcase::WriteJson, SCondition_IsSuitcase::WriteSimpleJson);

void SCondition_IsSuitcase::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSuitcase*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("items") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->items, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsSuitcase::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSuitcase*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("items") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->items, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasPendingOrder::TypeInfo = ZHMTypeInfo("SCondition_HasPendingOrder", SCondition_HasPendingOrder::WriteJson, SCondition_HasPendingOrder::WriteSimpleJson);

void SCondition_HasPendingOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasPendingOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eOrder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eOrder) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->eOrder))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasPendingOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasPendingOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("eOrder") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->eOrder)));

	p_Stream << "}";
}

ZHMTypeInfo SAgencyPickupInfo::TypeInfo = ZHMTypeInfo("SAgencyPickupInfo", SAgencyPickupInfo::WriteJson, SAgencyPickupInfo::WriteSimpleJson);

void SAgencyPickupInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAgencyPickupInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_AgencyPickupId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_AgencyPickupId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aItemIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemIds.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItemIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItemIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aModifierIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aModifierIds.size(); ++i)
	{
		auto& s_Item = s_Object->m_aModifierIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aModifierIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAgencyPickupInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAgencyPickupInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_AgencyPickupId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_AgencyPickupId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aItemIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemIds.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItemIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aItemIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aModifierIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aModifierIds.size(); ++i)
	{
		auto& s_Item = s_Object->m_aModifierIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aModifierIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IEntity::TypeInfo = ZHMTypeInfo("IEntity", IEntity::WriteJson, IEntity::WriteSimpleJson);

void IEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MinSharedEventExpired::TypeInfo = ZHMTypeInfo("SCondition_MinSharedEventExpired", SCondition_MinSharedEventExpired::WriteJson, SCondition_MinSharedEventExpired::WriteSimpleJson);

void SCondition_MinSharedEventExpired::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinSharedEventExpired*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("time") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->time;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MinSharedEventExpired::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinSharedEventExpired*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("time") << ":";
	p_Stream << s_Object->time;

	p_Stream << "}";
}

ZHMTypeInfo IDeferredParticlesEntity::TypeInfo = ZHMTypeInfo("IDeferredParticlesEntity", IDeferredParticlesEntity::WriteJson, IDeferredParticlesEntity::WriteSimpleJson);

void IDeferredParticlesEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDeferredParticlesEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IDeferredParticlesEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDeferredParticlesEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SExposedEntityTypeDescriptor::TypeInfo = ZHMTypeInfo("SExposedEntityTypeDescriptor", SExposedEntityTypeDescriptor::WriteJson, SExposedEntityTypeDescriptor::WriteSimpleJson);

void SExposedEntityTypeDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedEntityTypeDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("types") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->types.size(); ++i)
	{
		auto& s_Item = s_Object->types[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->types.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aSupportedTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aSupportedTypes.size(); ++i)
	{
		auto& s_Item = s_Object->aSupportedTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->aSupportedTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SExposedEntityTypeDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedEntityTypeDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("types") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->types.size(); ++i)
	{
		auto& s_Item = s_Object->types[i];
		ZResourceID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->types.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aSupportedTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aSupportedTypes.size(); ++i)
	{
		auto& s_Item = s_Object->aSupportedTypes[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->aSupportedTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasSameOutfit::TypeInfo = ZHMTypeInfo("SCondition_HasSameOutfit", SCondition_HasSameOutfit::WriteJson, SCondition_HasSameOutfit::WriteSimpleJson);

void SCondition_HasSameOutfit::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasSameOutfit*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("a0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a0, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a1, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasSameOutfit::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasSameOutfit*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("a0") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a0, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a1, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SMathMultipliesSaveData_float32::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_float32", SMathMultipliesSaveData_float32::WriteJson, SMathMultipliesSaveData_float32::WriteSimpleJson);

void SMathMultipliesSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_float32") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_float32::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_float32::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SuspiciousItemDropped::TypeInfo = ZHMTypeInfo("SCondition_SuspiciousItemDropped", SCondition_SuspiciousItemDropped::WriteJson, SCondition_SuspiciousItemDropped::WriteSimpleJson);

void SCondition_SuspiciousItemDropped::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuspiciousItemDropped*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->includeWeapons;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SuspiciousItemDropped::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuspiciousItemDropped*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << s_Object->includeWeapons;

	p_Stream << "}";
}

ZHMTypeInfo IHumanBody::TypeInfo = ZHMTypeInfo("IHumanBody", IHumanBody::WriteJson, IHumanBody::WriteSimpleJson);

void IHumanBody::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHumanBody*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHumanBody::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHumanBody*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZRecoverUnconsciousGroup::TypeInfo = ZHMTypeInfo("ZRecoverUnconsciousGroup", ZRecoverUnconsciousGroup::WriteJson, ZRecoverUnconsciousGroup::WriteSimpleJson);

void ZRecoverUnconsciousGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRecoverUnconsciousGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZRecoverUnconsciousGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRecoverUnconsciousGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SObserversGroupSaveData::TypeInfo = ZHMTypeInfo("SObserversGroupSaveData", SObserversGroupSaveData::WriteJson, SObserversGroupSaveData::WriteSimpleJson);

void SObserversGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SObserversGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aWaitingObservers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_observerDistanceMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_observerDistanceMax;
	p_Stream << "}";

	p_Stream << "}";
}

void SObserversGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SObserversGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aWaitingObservers[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_observerDistanceMax") << ":";
	p_Stream << s_Object->m_observerDistanceMax;

	p_Stream << "}";
}

ZHMTypeInfo IValueFloatListener::TypeInfo = ZHMTypeInfo("IValueFloatListener", IValueFloatListener::WriteJson, IValueFloatListener::WriteSimpleJson);

void IValueFloatListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueFloatListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueFloatListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueFloatListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SLockdownManagerAIZoneSaveData::TypeInfo = ZHMTypeInfo("SLockdownManagerAIZoneSaveData", SLockdownManagerAIZoneSaveData::WriteJson, SLockdownManagerAIZoneSaveData::WriteSimpleJson);

void SLockdownManagerAIZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLockdownManagerAIZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tExpiry") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiry, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiryHeroOutside") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiryHeroOutside, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rZone;
	p_Stream << "}";

	p_Stream << "}";
}

void SLockdownManagerAIZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLockdownManagerAIZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tExpiry") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiry, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiryHeroOutside") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiryHeroOutside, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rZone") << ":";
	p_Stream << s_Object->m_rZone;

	p_Stream << "}";
}

ZHMTypeInfo SCrowdServiceSaveData::TypeInfo = ZHMTypeInfo("SCrowdServiceSaveData", SCrowdServiceSaveData::WriteJson, SCrowdServiceSaveData::WriteSimpleJson);

void SCrowdServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aDeadBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDeadBodies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdBodySaveData") << "," << JsonStr("$val") << ":";
		SCrowdBodySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDeadBodies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptiblePool") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptiblePool.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPerceptiblePool[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aPerceptiblePool.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptibleActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptibleActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPerceptibleActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aPerceptibleActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aDeadBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDeadBodies[i];
		SCrowdBodySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aDeadBodies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptiblePool") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptiblePool.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPerceptiblePool[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aPerceptiblePool.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptibleActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptibleActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPerceptibleActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aPerceptibleActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SEvacuateSituationSaveData::TypeInfo = ZHMTypeInfo("SEvacuateSituationSaveData", SEvacuateSituationSaveData::WriteJson, SEvacuateSituationSaveData::WriteSimpleJson);

void SEvacuateSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSeriousSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastSeriousSituation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastThreat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastThreat, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tresspassGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_tresspassGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_evacuateGroups") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_evacuateGroups.size(); ++i)
	{
		auto& s_Item = s_Object->m_evacuateGroups[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_evacuateGroups.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_activeSafeRooms") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_activeSafeRooms.size(); ++i)
	{
		auto& s_Item = s_Object->m_activeSafeRooms[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_activeSafeRooms.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_vipsUnderFire") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_vipsUnderFire.size(); ++i)
	{
		auto& s_Item = s_Object->m_vipsUnderFire[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_vipsUnderFire.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEvacuateSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSeriousSituation") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastSeriousSituation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastThreat") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastThreat, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tresspassGroup") << ":";
	p_Stream << s_Object->m_tresspassGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_evacuateGroups") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_evacuateGroups.size(); ++i)
	{
		auto& s_Item = s_Object->m_evacuateGroups[i];
		p_Stream << s_Item;

		if (i < s_Object->m_evacuateGroups.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_activeSafeRooms") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_activeSafeRooms.size(); ++i)
	{
		auto& s_Item = s_Object->m_activeSafeRooms[i];
		p_Stream << s_Item;

		if (i < s_Object->m_activeSafeRooms.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_vipsUnderFire") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_vipsUnderFire.size(); ++i)
	{
		auto& s_Item = s_Object->m_vipsUnderFire[i];
		p_Stream << s_Item;

		if (i < s_Object->m_vipsUnderFire.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SProgressTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SProgressTimerEntitySaveData", SProgressTimerEntitySaveData::WriteJson, SProgressTimerEntitySaveData::WriteSimpleJson);

void SProgressTimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SProgressTimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SProgressTimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SProgressTimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << s_Object->m_bValue;

	p_Stream << "}";
}

ZHMTypeInfo IColliderController::TypeInfo = ZHMTypeInfo("IColliderController", IColliderController::WriteJson, IColliderController::WriteSimpleJson);

void IColliderController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IColliderController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IColliderController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IColliderController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAudioEmitterRTPCSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterRTPCSaveData", SAudioEmitterRTPCSaveData::WriteJson, SAudioEmitterRTPCSaveData::WriteSimpleJson);

void SAudioEmitterRTPCSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterRTPCSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nParamId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nParamId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterRTPCSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterRTPCSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nParamId") << ":";
	p_Stream << s_Object->m_nParamId;
	p_Stream << ",";

	p_Stream << JsonStr("m_fValue") << ":";
	p_Stream << s_Object->m_fValue;

	p_Stream << "}";
}

ZHMTypeInfo ZOnlineEventsClient::TypeInfo = ZHMTypeInfo("ZOnlineEventsClient", ZOnlineEventsClient::WriteJson, ZOnlineEventsClient::WriteSimpleJson);

void ZOnlineEventsClient::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZOnlineEventsClient*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZOnlineEventsClient::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZOnlineEventsClient*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZGenericOrder::TypeInfo = ZHMTypeInfo("ZGenericOrder", ZGenericOrder::WriteJson, ZGenericOrder::WriteSimpleJson);

void ZGenericOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGenericOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGenericOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGenericOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SLocalizedVideoData::TypeInfo = ZHMTypeInfo("SLocalizedVideoData", SLocalizedVideoData::WriteJson, SLocalizedVideoData::WriteSimpleJson);

void SLocalizedVideoData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLocalizedVideoData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("AudioLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->AudioLanguages.size(); ++i)
	{
		auto& s_Item = s_Object->AudioLanguages[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->AudioLanguages.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("VideoRidsPerAudioLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->VideoRidsPerAudioLanguage.size(); ++i)
	{
		auto& s_Item = s_Object->VideoRidsPerAudioLanguage[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
		ZRuntimeResourceID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->VideoRidsPerAudioLanguage.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleLanguages.size(); ++i)
	{
		auto& s_Item = s_Object->SubtitleLanguages[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->SubtitleLanguages.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleMarkupsPerLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleMarkupsPerLanguage.size(); ++i)
	{
		auto& s_Item = s_Object->SubtitleMarkupsPerLanguage[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->SubtitleMarkupsPerLanguage.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SLocalizedVideoData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLocalizedVideoData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("AudioLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->AudioLanguages.size(); ++i)
	{
		auto& s_Item = s_Object->AudioLanguages[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->AudioLanguages.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("VideoRidsPerAudioLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->VideoRidsPerAudioLanguage.size(); ++i)
	{
		auto& s_Item = s_Object->VideoRidsPerAudioLanguage[i];
		ZRuntimeResourceID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->VideoRidsPerAudioLanguage.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleLanguages.size(); ++i)
	{
		auto& s_Item = s_Object->SubtitleLanguages[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->SubtitleLanguages.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleMarkupsPerLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleMarkupsPerLanguage.size(); ++i)
	{
		auto& s_Item = s_Object->SubtitleMarkupsPerLanguage[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->SubtitleMarkupsPerLanguage.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IGenericMassImpulseReceiver::TypeInfo = ZHMTypeInfo("IGenericMassImpulseReceiver", IGenericMassImpulseReceiver::WriteJson, IGenericMassImpulseReceiver::WriteSimpleJson);

void IGenericMassImpulseReceiver::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGenericMassImpulseReceiver*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IGenericMassImpulseReceiver::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGenericMassImpulseReceiver*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SDoorSaveData::TypeInfo = ZHMTypeInfo("SDoorSaveData", SDoorSaveData::WriteJson, SDoorSaveData::WriteSimpleJson);

void SDoorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nDoorState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDoorState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnimPercent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAnimPercent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAnimPercent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetAnimPercent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tOpenTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tOpenTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDoorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nDoorState") << ":";
	p_Stream << s_Object->m_nDoorState;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnimPercent") << ":";
	p_Stream << s_Object->m_fAnimPercent;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAnimPercent") << ":";
	p_Stream << s_Object->m_fTargetAnimPercent;
	p_Stream << ",";

	p_Stream << JsonStr("m_tOpenTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tOpenTime, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IParticleEmitterSourcesProvider::TypeInfo = ZHMTypeInfo("IParticleEmitterSourcesProvider", IParticleEmitterSourcesProvider::WriteJson, IParticleEmitterSourcesProvider::WriteSimpleJson);

void IParticleEmitterSourcesProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleEmitterSourcesProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IParticleEmitterSourcesProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleEmitterSourcesProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SDetectedInPrivateGroupSaveData::TypeInfo = ZHMTypeInfo("SDetectedInPrivateGroupSaveData", SDetectedInPrivateGroupSaveData::WriteJson, SDetectedInPrivateGroupSaveData::WriteSimpleJson);

void SDetectedInPrivateGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDetectedInPrivateGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeWaiting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeWaiting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rLead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rLead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDisbanded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDisbanded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstWait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirstWait;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";

	p_Stream << "}";
}

void SDetectedInPrivateGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDetectedInPrivateGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeWaiting") << ":";
	p_Stream << s_Object->m_fTimeWaiting;
	p_Stream << ",";

	p_Stream << JsonStr("m_rLead") << ":";
	p_Stream << s_Object->m_rLead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDisbanded") << ":";
	p_Stream << s_Object->m_bDisbanded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstWait") << ":";
	p_Stream << s_Object->m_bFirstWait;
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;

	p_Stream << "}";
}

ZHMTypeInfo ISituation::TypeInfo = ZHMTypeInfo("ISituation", ISituation::WriteJson, ISituation::WriteSimpleJson);

void ISituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISituation*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISituation*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SGWaypoint::TypeInfo = ZHMTypeInfo("SGWaypoint", SGWaypoint::WriteJson, SGWaypoint::WriteSimpleJson);

void SGWaypoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGWaypoint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nNeighbor0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor0;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor1;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor2;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor3") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor3;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor4") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor4;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor5") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor5;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor6") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor6;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor7") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor7;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("vPos") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->vPos, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nVisionDataOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nVisionDataOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nLayerIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nLayerIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SGWaypoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGWaypoint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nNeighbor0") << ":";
	p_Stream << s_Object->nNeighbor0;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor1") << ":";
	p_Stream << s_Object->nNeighbor1;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor2") << ":";
	p_Stream << s_Object->nNeighbor2;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor3") << ":";
	p_Stream << s_Object->nNeighbor3;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor4") << ":";
	p_Stream << s_Object->nNeighbor4;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor5") << ":";
	p_Stream << s_Object->nNeighbor5;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor6") << ":";
	p_Stream << s_Object->nNeighbor6;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor7") << ":";
	p_Stream << s_Object->nNeighbor7;
	p_Stream << ",";

	p_Stream << JsonStr("vPos") << ":";
	float4::WriteSimpleJson(&s_Object->vPos, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nVisionDataOffset") << ":";
	p_Stream << s_Object->nVisionDataOffset;
	p_Stream << ",";

	p_Stream << JsonStr("nLayerIndex") << ":";
	p_Stream << s_Object->nLayerIndex;

	p_Stream << "}";
}

ZHMTypeInfo SItemSaveData::TypeInfo = ZHMTypeInfo("SItemSaveData", SItemSaveData::WriteJson, SItemSaveData::WriteSimpleJson);

void SItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnablePickup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnablePickup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bKinematic") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bKinematic;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSleeping") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSleeping;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPerceptible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPerceptible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rTransformParent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTransformParent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSpawner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSpawner;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rOwner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rOwner;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rHoldingContainer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHoldingContainer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreviousOwner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pPreviousOwner;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurnedOn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTurnedOn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEverOwnedByHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEverOwnedByHitman;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasPlacedAndAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasPlacedAndAttached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bObjectInPhysicsWorld") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bObjectInPhysicsWorld;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nQuantity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nQuantity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGlowType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ERenderGlowTypes") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGlowType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ERenderGlowTypes", static_cast<int>(s_Object->m_eGlowType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowItem") << ":";
	p_Stream << s_Object->m_bShowItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnablePickup") << ":";
	p_Stream << s_Object->m_bEnablePickup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bKinematic") << ":";
	p_Stream << s_Object->m_bKinematic;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSleeping") << ":";
	p_Stream << s_Object->m_bSleeping;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPerceptible") << ":";
	p_Stream << s_Object->m_bIsPerceptible;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rTransformParent") << ":";
	p_Stream << s_Object->m_rTransformParent;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSpawner") << ":";
	p_Stream << s_Object->m_rSpawner;
	p_Stream << ",";

	p_Stream << JsonStr("m_rOwner") << ":";
	p_Stream << s_Object->m_rOwner;
	p_Stream << ",";

	p_Stream << JsonStr("m_rHoldingContainer") << ":";
	p_Stream << s_Object->m_rHoldingContainer;
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreviousOwner") << ":";
	p_Stream << s_Object->m_pPreviousOwner;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurnedOn") << ":";
	p_Stream << s_Object->m_bTurnedOn;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEverOwnedByHitman") << ":";
	p_Stream << s_Object->m_bEverOwnedByHitman;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasPlacedAndAttached") << ":";
	p_Stream << s_Object->m_bWasPlacedAndAttached;
	p_Stream << ",";

	p_Stream << JsonStr("m_bObjectInPhysicsWorld") << ":";
	p_Stream << s_Object->m_bObjectInPhysicsWorld;
	p_Stream << ",";

	p_Stream << JsonStr("m_nQuantity") << ":";
	p_Stream << s_Object->m_nQuantity;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGlowType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ERenderGlowTypes", static_cast<int>(s_Object->m_eGlowType)));

	p_Stream << "}";
}

ZHMTypeInfo SGetIActorPositionSaveData::TypeInfo = ZHMTypeInfo("SGetIActorPositionSaveData", SGetIActorPositionSaveData::WriteJson, SGetIActorPositionSaveData::WriteSimpleJson);

void SGetIActorPositionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetIActorPositionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_StoredActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_StoredActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SGetIActorPositionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetIActorPositionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_StoredActor") << ":";
	p_Stream << s_Object->m_StoredActor;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_ActualInsideSlice::TypeInfo = ZHMTypeInfo("SCondition_ActualInsideSlice", SCondition_ActualInsideSlice::WriteJson, SCondition_ActualInsideSlice::WriteSimpleJson);

void SCondition_ActualInsideSlice::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_ActualInsideSlice*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("a0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a0, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a1, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fConeWidth") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fConeWidth;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_ActualInsideSlice::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_ActualInsideSlice*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("a0") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a0, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a1, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("fAngle") << ":";
	p_Stream << s_Object->fAngle;
	p_Stream << ",";

	p_Stream << JsonStr("fConeWidth") << ":";
	p_Stream << s_Object->fConeWidth;

	p_Stream << "}";
}

ZHMTypeInfo IBoneWeightManagerEntity::TypeInfo = ZHMTypeInfo("IBoneWeightManagerEntity", IBoneWeightManagerEntity::WriteJson, IBoneWeightManagerEntity::WriteSimpleJson);

void IBoneWeightManagerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneWeightManagerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneWeightManagerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneWeightManagerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SSavableEntitiesSaveData::TypeInfo = ZHMTypeInfo("SSavableEntitiesSaveData", SSavableEntitiesSaveData::WriteJson, SSavableEntitiesSaveData::WriteSimpleJson);

void SSavableEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSavableEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVariantStruct") << "," << JsonStr("$val") << ":";
		SVariantStruct::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSavableEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSavableEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityData[i];
		SVariantStruct::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEntityData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsSituationTarget::TypeInfo = ZHMTypeInfo("SCondition_IsSituationTarget", SCondition_IsSituationTarget::WriteJson, SCondition_IsSituationTarget::WriteSimpleJson);

void SCondition_IsSituationTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSituationTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsSituationTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSituationTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IPureWaterFunctionEntity::TypeInfo = ZHMTypeInfo("IPureWaterFunctionEntity", IPureWaterFunctionEntity::WriteJson, IPureWaterFunctionEntity::WriteSimpleJson);

void IPureWaterFunctionEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPureWaterFunctionEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPureWaterFunctionEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPureWaterFunctionEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo STrackerEntitySaveData::TypeInfo = ZHMTypeInfo("STrackerEntitySaveData", STrackerEntitySaveData::WriteJson, STrackerEntitySaveData::WriteSimpleJson);

void STrackerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTracker") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTracker;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialVisibility") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSpatialVisibility;
	p_Stream << "}";

	p_Stream << "}";
}

void STrackerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTracker") << ":";
	p_Stream << s_Object->m_rTracker;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialVisibility") << ":";
	p_Stream << s_Object->m_bSpatialVisibility;

	p_Stream << "}";
}

ZHMTypeInfo STrackerManagerSaveData::TypeInfo = ZHMTypeInfo("STrackerManagerSaveData", STrackerManagerSaveData::WriteJson, STrackerManagerSaveData::WriteSimpleJson);

void STrackerManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackerManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aTrackerData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackerData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTrackerData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STrackerEntitySaveData") << "," << JsonStr("$val") << ":";
		STrackerEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTrackerData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STrackerManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackerManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aTrackerData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackerData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTrackerData[i];
		STrackerEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aTrackerData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsHighestSeverityReasonToArrest::TypeInfo = ZHMTypeInfo("SCondition_IsHighestSeverityReasonToArrest", SCondition_IsHighestSeverityReasonToArrest::WriteJson, SCondition_IsHighestSeverityReasonToArrest::WriteSimpleJson);

void SCondition_IsHighestSeverityReasonToArrest::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsHighestSeverityReasonToArrest*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("targets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->targets, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("reason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->reason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->reason))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsHighestSeverityReasonToArrest::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsHighestSeverityReasonToArrest*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("targets") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->targets, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("reason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->reason)));

	p_Stream << "}";
}

ZHMTypeInfo IValueIntSet::TypeInfo = ZHMTypeInfo("IValueIntSet", IValueIntSet::WriteJson, IValueIntSet::WriteSimpleJson);

void IValueIntSet::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueIntSet*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueIntSet::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueIntSet*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SHandleDistractionSituationSaveData::TypeInfo = ZHMTypeInfo("SHandleDistractionSituationSaveData", SHandleDistractionSituationSaveData::WriteJson, SHandleDistractionSituationSaveData::WriteSimpleJson);

void SHandleDistractionSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHandleDistractionSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreliminaryLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pPreliminaryLeader;
	p_Stream << "}";

	p_Stream << "}";
}

void SHandleDistractionSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHandleDistractionSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreliminaryLeader") << ":";
	p_Stream << s_Object->m_pPreliminaryLeader;

	p_Stream << "}";
}

ZHMTypeInfo IJumpPointAction::TypeInfo = ZHMTypeInfo("IJumpPointAction", IJumpPointAction::WriteJson, IJumpPointAction::WriteSimpleJson);

void IJumpPointAction::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IJumpPointAction*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IJumpPointAction::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IJumpPointAction*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsOwner::TypeInfo = ZHMTypeInfo("SCondition_IsOwner", SCondition_IsOwner::WriteJson, SCondition_IsOwner::WriteSimpleJson);

void SCondition_IsOwner::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOwner*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("character") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->character, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsOwner::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOwner*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("character") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->character, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCautiousHuntSaveData::TypeInfo = ZHMTypeInfo("SCautiousHuntSaveData", SCautiousHuntSaveData::WriteJson, SCautiousHuntSaveData::WriteSimpleJson);

void SCautiousHuntSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousHuntSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnounceHuntCoolDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tAnnounceHuntCoolDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnouncedHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tAnnouncedHunt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tShareHuntTargetCoolDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tShareHuntTargetCoolDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnounceHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAnnounceHunt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnouncedHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAnnouncedHunt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayAnnouncementDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayAnnouncementDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHuntTargetKnownKiller") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHuntTargetKnownKiller;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSharedHuntTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSharedHuntTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetBlamed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetBlamed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRuleActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRuleActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousHuntSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousHuntSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnounceHuntCoolDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tAnnounceHuntCoolDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnouncedHunt") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tAnnouncedHunt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tShareHuntTargetCoolDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tShareHuntTargetCoolDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnounceHunt") << ":";
	p_Stream << s_Object->m_bAnnounceHunt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnouncedHunt") << ":";
	p_Stream << s_Object->m_bAnnouncedHunt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayAnnouncementDialog") << ":";
	p_Stream << s_Object->m_bPlayAnnouncementDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHuntTargetKnownKiller") << ":";
	p_Stream << s_Object->m_bHuntTargetKnownKiller;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSharedHuntTarget") << ":";
	p_Stream << s_Object->m_bSharedHuntTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetBlamed") << ":";
	p_Stream << s_Object->m_bTargetBlamed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRuleActive") << ":";
	p_Stream << s_Object->m_bRuleActive;

	p_Stream << "}";
}

ZHMTypeInfo IValueFloat::TypeInfo = ZHMTypeInfo("IValueFloat", IValueFloat::WriteJson, IValueFloat::WriteSimpleJson);

void IValueFloat::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueFloat*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueFloat::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueFloat*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SHelpingActorSaveData::TypeInfo = ZHMTypeInfo("SHelpingActorSaveData", SHelpingActorSaveData::WriteJson, SHelpingActorSaveData::WriteSimpleJson);

void SHelpingActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHelpingActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_HelpTargetKnowledgeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HelpTargetKnowledgeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SHelpingActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHelpingActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_HelpTargetKnowledgeIndex") << ":";
	p_Stream << s_Object->m_HelpTargetKnowledgeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo IEventChannel::TypeInfo = ZHMTypeInfo("IEventChannel", IEventChannel::WriteJson, IEventChannel::WriteSimpleJson);

void IEventChannel::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEventChannel*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEventChannel::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEventChannel*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SDecalSpawnSaveData::TypeInfo = ZHMTypeInfo("SDecalSpawnSaveData", SDecalSpawnSaveData::WriteJson, SDecalSpawnSaveData::WriteSimpleJson);

void SDecalSpawnSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDecalSpawnSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bWasSpawned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasSpawned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vNormal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vNormal, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vDirection, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vSize, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Color") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_Color, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vUVOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vUVOffset, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vTiling") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vTiling, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBlockingSpatialEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBlockingSpatialEntity;
	p_Stream << "}";

	p_Stream << "}";
}

void SDecalSpawnSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDecalSpawnSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bWasSpawned") << ":";
	p_Stream << s_Object->m_bWasSpawned;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vNormal") << ":";
	float4::WriteSimpleJson(&s_Object->m_vNormal, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vDirection") << ":";
	float4::WriteSimpleJson(&s_Object->m_vDirection, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vSize") << ":";
	float4::WriteSimpleJson(&s_Object->m_vSize, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Color") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_Color, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fAlpha") << ":";
	p_Stream << s_Object->m_fAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngle") << ":";
	p_Stream << s_Object->m_fAngle;
	p_Stream << ",";

	p_Stream << JsonStr("m_vUVOffset") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vUVOffset, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vTiling") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vTiling, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rBlockingSpatialEntity") << ":";
	p_Stream << s_Object->m_rBlockingSpatialEntity;

	p_Stream << "}";
}

ZHMTypeInfo SRunningCrowdAIEventSaveData::TypeInfo = ZHMTypeInfo("SRunningCrowdAIEventSaveData", SRunningCrowdAIEventSaveData::WriteJson, SRunningCrowdAIEventSaveData::WriteSimpleJson);

void SRunningCrowdAIEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRunningCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_ReactionEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_ReactionEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CrowdEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HitmanToBlame") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HitmanToBlame;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdCoreIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CrowdCoreIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeLeft") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_TimeLeft;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeToPulse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_TimeToPulse;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Position") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_Position, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsInvestigated;
	p_Stream << "}";

	p_Stream << "}";
}

void SRunningCrowdAIEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRunningCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_ReactionEntity") << ":";
	p_Stream << s_Object->m_ReactionEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdEntity") << ":";
	p_Stream << s_Object->m_CrowdEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_HitmanToBlame") << ":";
	p_Stream << s_Object->m_HitmanToBlame;
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdCoreIndex") << ":";
	p_Stream << s_Object->m_CrowdCoreIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeLeft") << ":";
	p_Stream << s_Object->m_TimeLeft;
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeToPulse") << ":";
	p_Stream << s_Object->m_TimeToPulse;
	p_Stream << ",";

	p_Stream << JsonStr("m_Position") << ":";
	float4::WriteSimpleJson(&s_Object->m_Position, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInvestigated") << ":";
	p_Stream << s_Object->m_IsInvestigated;

	p_Stream << "}";
}

ZHMTypeInfo IBodybagEntity::TypeInfo = ZHMTypeInfo("IBodybagEntity", IBodybagEntity::WriteJson, IBodybagEntity::WriteSimpleJson);

void IBodybagEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBodybagEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBodybagEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBodybagEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ICollisionManager::TypeInfo = ZHMTypeInfo("ICollisionManager", ICollisionManager::WriteJson, ICollisionManager::WriteSimpleJson);

void ICollisionManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICollisionManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICollisionManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICollisionManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ITransitionSource::TypeInfo = ZHMTypeInfo("ITransitionSource", ITransitionSource::WriteJson, ITransitionSource::WriteSimpleJson);

void ITransitionSource::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITransitionSource*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITransitionSource::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITransitionSource*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsSameDistractionTypeAsTheCurrentOne::TypeInfo = ZHMTypeInfo("SCondition_IsSameDistractionTypeAsTheCurrentOne", SCondition_IsSameDistractionTypeAsTheCurrentOne::WriteJson, SCondition_IsSameDistractionTypeAsTheCurrentOne::WriteSimpleJson);

void SCondition_IsSameDistractionTypeAsTheCurrentOne::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSameDistractionTypeAsTheCurrentOne*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("distraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->distraction, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsSameDistractionTypeAsTheCurrentOne::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSameDistractionTypeAsTheCurrentOne*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("distraction") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->distraction, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SInventoryControllerItemSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerItemSaveData", SInventoryControllerItemSaveData::WriteJson, SInventoryControllerItemSaveData::WriteSimpleJson);

void SInventoryControllerItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItemEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItemEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmo;
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryControllerItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItemEntity") << ":";
	p_Stream << s_Object->m_rItemEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmo") << ":";
	p_Stream << s_Object->m_nAmmo;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsOfActorType::TypeInfo = ZHMTypeInfo("SCondition_IsOfActorType", SCondition_IsOfActorType::WriteJson, SCondition_IsOfActorType::WriteSimpleJson);

void SCondition_IsOfActorType::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOfActorType*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsOfActorType::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOfActorType*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorType", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo SDoorsSaveData::TypeInfo = ZHMTypeInfo("SDoorsSaveData", SDoorsSaveData::WriteJson, SDoorsSaveData::WriteSimpleJson);

void SDoorsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDoorSaveData") << "," << JsonStr("$val") << ":";
		SDoorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDoorsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SDoorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SPrivateAreaSaveData::TypeInfo = ZHMTypeInfo("SPrivateAreaSaveData", SPrivateAreaSaveData::WriteJson, SPrivateAreaSaveData::WriteSimpleJson);

void SPrivateAreaSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPrivateAreaSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsInside") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsInside;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nHasEntered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nHasEntered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasExited") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasExited;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpotted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSpotted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanEnterPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vHitmanEnterPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanExitPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vHitmanExitPosition, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SPrivateAreaSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPrivateAreaSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsInside") << ":";
	p_Stream << s_Object->m_bIsInside;
	p_Stream << ",";

	p_Stream << JsonStr("m_nHasEntered") << ":";
	p_Stream << s_Object->m_nHasEntered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasExited") << ":";
	p_Stream << s_Object->m_bHasExited;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpotted") << ":";
	p_Stream << s_Object->m_bSpotted;
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanEnterPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vHitmanEnterPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanExitPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vHitmanExitPosition, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasConfiguredAct::TypeInfo = ZHMTypeInfo("SCondition_HasConfiguredAct", SCondition_HasConfiguredAct::WriteJson, SCondition_HasConfiguredAct::WriteSimpleJson);

void SCondition_HasConfiguredAct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasConfiguredAct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("act") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->act);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasConfiguredAct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasConfiguredAct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("act") << ":";
	p_Stream << JsonStr(s_Object->act);

	p_Stream << "}";
}

ZHMTypeInfo IRoleListener::TypeInfo = ZHMTypeInfo("IRoleListener", IRoleListener::WriteJson, IRoleListener::WriteSimpleJson);

void IRoleListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRoleListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRoleListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRoleListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SPFObstactleSaveData::TypeInfo = ZHMTypeInfo("SPFObstactleSaveData", SPFObstactleSaveData::WriteJson, SPFObstactleSaveData::WriteSimpleJson);

void SPFObstactleSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPFObstactleSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SPFObstactleSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPFObstactleSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

ZHMTypeInfo SPatrolGroupSaveData::TypeInfo = ZHMTypeInfo("SPatrolGroupSaveData", SPatrolGroupSaveData::WriteJson, SPatrolGroupSaveData::WriteSimpleJson);

void SPatrolGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPatrolGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nRouteID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRouteID;
	p_Stream << "}";

	p_Stream << "}";
}

void SPatrolGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPatrolGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nRouteID") << ":";
	p_Stream << s_Object->m_nRouteID;

	p_Stream << "}";
}

ZHMTypeInfo IPrimitivesListener::TypeInfo = ZHMTypeInfo("IPrimitivesListener", IPrimitivesListener::WriteJson, IPrimitivesListener::WriteSimpleJson);

void IPrimitivesListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPrimitivesListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPrimitivesListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPrimitivesListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZEntitlementManager::TypeInfo = ZHMTypeInfo("ZEntitlementManager", ZEntitlementManager::WriteJson, ZEntitlementManager::WriteSimpleJson);

void ZEntitlementManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntitlementManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEntitlementManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntitlementManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SIntelSaveData::TypeInfo = ZHMTypeInfo("SIntelSaveData", SIntelSaveData::WriteJson, SIntelSaveData::WriteSimpleJson);

void SIntelSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCurrentStage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentStage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandlerAudioPlayPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHandlerAudioPlayPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTracked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTracked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUnlocked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUnlocked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsLastTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsLastTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsHandlerAudioPlaying") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsHandlerAudioPlaying;
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCurrentStage") << ":";
	p_Stream << s_Object->m_rCurrentStage;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandlerAudioPlayPosition") << ":";
	p_Stream << s_Object->m_fHandlerAudioPlayPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTracked") << ":";
	p_Stream << s_Object->m_bTracked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUnlocked") << ":";
	p_Stream << s_Object->m_bUnlocked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsLastTriggered") << ":";
	p_Stream << s_Object->m_bIsLastTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsHandlerAudioPlaying") << ":";
	p_Stream << s_Object->m_bIsHandlerAudioPlaying;

	p_Stream << "}";
}

ZHMTypeInfo SActivities::TypeInfo = ZHMTypeInfo("SActivities", SActivities::WriteJson, SActivities::WriteSimpleJson);

void SActivities::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivities*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Activities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Activities.size(); ++i)
	{
		auto& s_Item = s_Object->Activities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivityDefinition") << "," << JsonStr("$val") << ":";
		SActivityDefinition::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->Activities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActivities::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivities*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Activities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Activities.size(); ++i)
	{
		auto& s_Item = s_Object->Activities[i];
		SActivityDefinition::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->Activities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IFirearm::TypeInfo = ZHMTypeInfo("IFirearm", IFirearm::WriteJson, IFirearm::WriteSimpleJson);

void IFirearm::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFirearm*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IFirearm::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFirearm*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IOnlineConfigurationListener::TypeInfo = ZHMTypeInfo("IOnlineConfigurationListener", IOnlineConfigurationListener::WriteJson, IOnlineConfigurationListener::WriteSimpleJson);

void IOnlineConfigurationListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IOnlineConfigurationListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IOnlineConfigurationListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IOnlineConfigurationListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZFaceOrder::TypeInfo = ZHMTypeInfo("ZFaceOrder", ZFaceOrder::WriteJson, ZFaceOrder::WriteSimpleJson);

void ZFaceOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZFaceOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZFaceOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZFaceOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorTagSaveData::TypeInfo = ZHMTypeInfo("SActorTagSaveData", SActorTagSaveData::WriteJson, SActorTagSaveData::WriteSimpleJson);

void SActorTagSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorTagSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSeen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSeen;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTagged") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTagged;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActorRef;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorTagSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorTagSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSeen") << ":";
	p_Stream << s_Object->m_bSeen;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTagged") << ":";
	p_Stream << s_Object->m_bTagged;
	p_Stream << ",";

	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << s_Object->m_rActorRef;

	p_Stream << "}";
}

ZHMTypeInfo SActorTagManagerSaveData::TypeInfo = ZHMTypeInfo("SActorTagManagerSaveData", SActorTagManagerSaveData::WriteJson, SActorTagManagerSaveData::WriteSimpleJson);

void SActorTagManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorTagManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bContractsCreationMode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bContractsCreationMode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTagCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTagCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxTagCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMaxTagCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTaggingEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTaggingEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActorTagData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorTagData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActorTagData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorTagSaveData") << "," << JsonStr("$val") << ":";
		SActorTagSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActorTagData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorTagManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorTagManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bContractsCreationMode") << ":";
	p_Stream << s_Object->m_bContractsCreationMode;
	p_Stream << ",";

	p_Stream << JsonStr("m_nTagCount") << ":";
	p_Stream << s_Object->m_nTagCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxTagCount") << ":";
	p_Stream << s_Object->m_nMaxTagCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTaggingEnabled") << ":";
	p_Stream << s_Object->m_bTaggingEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActorTagData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorTagData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActorTagData[i];
		SActorTagSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aActorTagData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SSCCuriousConfiguration::TypeInfo = ZHMTypeInfo("SSCCuriousConfiguration", SSCCuriousConfiguration::WriteJson, SSCCuriousConfiguration::WriteSimpleJson);

void SSCCuriousConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSCCuriousConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CanGuardsInvestigate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CanGuardsInvestigate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CanCiviliansInvestigate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CanCiviliansInvestigate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CanVIPsInvestigate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CanVIPsInvestigate;
	p_Stream << "}";

	p_Stream << "}";
}

void SSCCuriousConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSCCuriousConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CanGuardsInvestigate") << ":";
	p_Stream << s_Object->m_CanGuardsInvestigate;
	p_Stream << ",";

	p_Stream << JsonStr("m_CanCiviliansInvestigate") << ":";
	p_Stream << s_Object->m_CanCiviliansInvestigate;
	p_Stream << ",";

	p_Stream << JsonStr("m_CanVIPsInvestigate") << ":";
	p_Stream << s_Object->m_CanVIPsInvestigate;

	p_Stream << "}";
}

ZHMTypeInfo SActorDynamicTemplateManipulatorSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateManipulatorSaveData", SActorDynamicTemplateManipulatorSaveData::WriteJson, SActorDynamicTemplateManipulatorSaveData::WriteSimpleJson);

void SActorDynamicTemplateManipulatorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDynamicTemplateManipulatorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo IItemAmmo::TypeInfo = ZHMTypeInfo("IItemAmmo", IItemAmmo::WriteJson, IItemAmmo::WriteSimpleJson);

void IItemAmmo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemAmmo*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IItemAmmo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemAmmo*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IEntityGroup::TypeInfo = ZHMTypeInfo("IEntityGroup", IEntityGroup::WriteJson, IEntityGroup::WriteSimpleJson);

void IEntityGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEntityGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEntityGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEntityGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CanReactToDistractionType::TypeInfo = ZHMTypeInfo("SCondition_CanReactToDistractionType", SCondition_CanReactToDistractionType::WriteJson, SCondition_CanReactToDistractionType::WriteSimpleJson);

void SCondition_CanReactToDistractionType::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanReactToDistractionType*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("distractionType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->distractionType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->distractionType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CanReactToDistractionType::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanReactToDistractionType*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("distractionType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->distractionType)));

	p_Stream << "}";
}

ZHMTypeInfo SIntelDataArray_dummy::TypeInfo = ZHMTypeInfo("SIntelDataArray_dummy", SIntelDataArray_dummy::WriteJson, SIntelDataArray_dummy::WriteSimpleJson);

void SIntelDataArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDataArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SIntelData") << "," << JsonStr("$val") << ":";
		SIntelData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SIntelDataArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDataArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SIntelData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CanDistractionEscalateTo::TypeInfo = ZHMTypeInfo("SCondition_CanDistractionEscalateTo", SCondition_CanDistractionEscalateTo::WriteJson, SCondition_CanDistractionEscalateTo::WriteSimpleJson);

void SCondition_CanDistractionEscalateTo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanDistractionEscalateTo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("newDistraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->newDistraction) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->newDistraction))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CanDistractionEscalateTo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanDistractionEscalateTo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("newDistraction") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->newDistraction)));

	p_Stream << "}";
}

ZHMTypeInfo ISequenceValueSource::TypeInfo = ZHMTypeInfo("ISequenceValueSource", ISequenceValueSource::WriteJson, ISequenceValueSource::WriteSimpleJson);

void ISequenceValueSource::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceValueSource*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISequenceValueSource::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceValueSource*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IChildNetworkEntity::TypeInfo = ZHMTypeInfo("IChildNetworkEntity", IChildNetworkEntity::WriteJson, IChildNetworkEntity::WriteSimpleJson);

void IChildNetworkEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IChildNetworkEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IChildNetworkEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IChildNetworkEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZOnlineSaveManager::TypeInfo = ZHMTypeInfo("ZOnlineSaveManager", ZOnlineSaveManager::WriteJson, ZOnlineSaveManager::WriteSimpleJson);

void ZOnlineSaveManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZOnlineSaveManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZOnlineSaveManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZOnlineSaveManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SPhysicsListSaveData::TypeInfo = ZHMTypeInfo("SPhysicsListSaveData", SPhysicsListSaveData::WriteJson, SPhysicsListSaveData::WriteSimpleJson);

void SPhysicsListSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPhysicsListSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntityRefs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityRefs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityRefs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntityRefs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityDatas[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SPhysicsSaveData") << "," << JsonStr("$val") << ":";
		SPhysicsSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SPhysicsListSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPhysicsListSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntityRefs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityRefs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityRefs[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntityRefs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityDatas[i];
		SPhysicsSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsPreviousOwner::TypeInfo = ZHMTypeInfo("SCondition_IsPreviousOwner", SCondition_IsPreviousOwner::WriteJson, SCondition_IsPreviousOwner::WriteSimpleJson);

void SCondition_IsPreviousOwner::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsPreviousOwner*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("character") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->character, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsPreviousOwner::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsPreviousOwner*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("character") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->character, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SScreenplayRole2HeroSaveState::TypeInfo = ZHMTypeInfo("SScreenplayRole2HeroSaveState", SScreenplayRole2HeroSaveState::WriteJson, SScreenplayRole2HeroSaveState::WriteSimpleJson);

void SScreenplayRole2HeroSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SScreenplayRole2HeroSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";

	p_Stream << "}";
}

void SScreenplayRole2HeroSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SScreenplayRole2HeroSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;

	p_Stream << "}";
}

ZHMTypeInfo IUIAction::TypeInfo = ZHMTypeInfo("IUIAction", IUIAction::WriteJson, IUIAction::WriteSimpleJson);

void IUIAction::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIAction*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IUIAction::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIAction*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SHUDPromptDisplayInfoArray_Dummy::TypeInfo = ZHMTypeInfo("SHUDPromptDisplayInfoArray_Dummy", SHUDPromptDisplayInfoArray_Dummy::WriteJson, SHUDPromptDisplayInfoArray_Dummy::WriteSimpleJson);

void SHUDPromptDisplayInfoArray_Dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHUDPromptDisplayInfo") << "," << JsonStr("$val") << ":";
		SHUDPromptDisplayInfo::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SHUDPromptDisplayInfoArray_Dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SHUDPromptDisplayInfo::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCombatSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SCombatSituationMemberSaveData", SCombatSituationMemberSaveData::WriteJson, SCombatSituationMemberSaveData::WriteSimpleJson);

void SCombatSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceFieldValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceFieldValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_civilianJoinReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_civilianJoinReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_civilianJoinReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPreferredToFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPreferredToFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDialogPreventShooting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDialogPreventShooting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanFlee") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCanFlee;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCantFleeNoPath") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCantFleeNoPath;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportedToGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReportedToGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandAndShoot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandAndShoot;
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceFieldValue") << ":";
	p_Stream << s_Object->m_fDistanceFieldValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_civilianJoinReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_civilianJoinReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPreferredToFire") << ":";
	p_Stream << s_Object->m_bIsPreferredToFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDialogPreventShooting") << ":";
	p_Stream << s_Object->m_bDialogPreventShooting;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanFlee") << ":";
	p_Stream << s_Object->m_bCanFlee;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCantFleeNoPath") << ":";
	p_Stream << s_Object->m_bCantFleeNoPath;
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportedToGuard") << ":";
	p_Stream << s_Object->m_bReportedToGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandAndShoot") << ":";
	p_Stream << s_Object->m_bStandAndShoot;

	p_Stream << "}";
}

ZHMTypeInfo IParticleShaderParametersEntity::TypeInfo = ZHMTypeInfo("IParticleShaderParametersEntity", IParticleShaderParametersEntity::WriteJson, IParticleShaderParametersEntity::WriteSimpleJson);

void IParticleShaderParametersEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleShaderParametersEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IParticleShaderParametersEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IParticleShaderParametersEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SExitsActiveSaveData::TypeInfo = ZHMTypeInfo("SExitsActiveSaveData", SExitsActiveSaveData::WriteJson, SExitsActiveSaveData::WriteSimpleJson);

void SExitsActiveSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExitsActiveSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SExitsActiveSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExitsActiveSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsActive") << ":";
	p_Stream << s_Object->m_bIsActive;

	p_Stream << "}";
}

ZHMTypeInfo ICharacterArrestState::TypeInfo = ZHMTypeInfo("ICharacterArrestState", ICharacterArrestState::WriteJson, ICharacterArrestState::WriteSimpleJson);

void ICharacterArrestState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterArrestState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterArrestState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterArrestState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IPureWaterDisturbanceEntity::TypeInfo = ZHMTypeInfo("IPureWaterDisturbanceEntity", IPureWaterDisturbanceEntity::WriteJson, IPureWaterDisturbanceEntity::WriteSimpleJson);

void IPureWaterDisturbanceEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPureWaterDisturbanceEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPureWaterDisturbanceEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPureWaterDisturbanceEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ITransitionCondition::TypeInfo = ZHMTypeInfo("ITransitionCondition", ITransitionCondition::WriteJson, ITransitionCondition::WriteSimpleJson);

void ITransitionCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITransitionCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITransitionCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITransitionCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SEscortSituation2Actors::TypeInfo = ZHMTypeInfo("SEscortSituation2Actors", SEscortSituation2Actors::WriteJson, SEscortSituation2Actors::WriteSimpleJson);

void SEscortSituation2Actors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortSituation2Actors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituation2Actors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortSituation2Actors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo IAnimPlayerEntity::TypeInfo = ZHMTypeInfo("IAnimPlayerEntity", IAnimPlayerEntity::WriteJson, IAnimPlayerEntity::WriteSimpleJson);

void IAnimPlayerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAnimPlayerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAnimPlayerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAnimPlayerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpsSaveData_float32::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_float32", SMathLerpsSaveData_float32::WriteJson, SMathLerpsSaveData_float32::WriteSimpleJson);

void SMathLerpsSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_float32") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_float32::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_float32::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IValueEntity::TypeInfo = ZHMTypeInfo("IValueEntity", IValueEntity::WriteJson, IValueEntity::WriteSimpleJson);

void IValueEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_FindSuitcaseAssitanceForCivilian::TypeInfo = ZHMTypeInfo("SCondition_FindSuitcaseAssitanceForCivilian", SCondition_FindSuitcaseAssitanceForCivilian::WriteJson, SCondition_FindSuitcaseAssitanceForCivilian::WriteSimpleJson);

void SCondition_FindSuitcaseAssitanceForCivilian::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_FindSuitcaseAssitanceForCivilian*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_FindSuitcaseAssitanceForCivilian::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_FindSuitcaseAssitanceForCivilian*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAnimatedActorOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorOrderSaveData", SAnimatedActorOrderSaveData::WriteJson, SAnimatedActorOrderSaveData::WriteSimpleJson);

void SAnimatedActorOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eOrderType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorAnimationOrder") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eOrderType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorAnimationOrder", static_cast<int>(s_Object->m_eOrderType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_OrderData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eOrderType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorAnimationOrder", static_cast<int>(s_Object->m_eOrderType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_OrderData, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsVisiblyPerceptible::TypeInfo = ZHMTypeInfo("SCondition_IsVisiblyPerceptible", SCondition_IsVisiblyPerceptible::WriteJson, SCondition_IsVisiblyPerceptible::WriteSimpleJson);

void SCondition_IsVisiblyPerceptible::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsVisiblyPerceptible*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("items") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->items, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsVisiblyPerceptible::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsVisiblyPerceptible*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("items") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->items, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasOrder::TypeInfo = ZHMTypeInfo("SCondition_HasOrder", SCondition_HasOrder::WriteJson, SCondition_HasOrder::WriteSimpleJson);

void SCondition_HasOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eOrder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eOrder) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->eOrder))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("eOrder") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->eOrder)));

	p_Stream << "}";
}

ZHMTypeInfo IValueIntGet::TypeInfo = ZHMTypeInfo("IValueIntGet", IValueIntGet::WriteJson, IValueIntGet::WriteSimpleJson);

void IValueIntGet::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueIntGet*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueIntGet::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueIntGet*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SGameKeywordManagerSaveData::TypeInfo = ZHMTypeInfo("SGameKeywordManagerSaveData", SGameKeywordManagerSaveData::WriteJson, SGameKeywordManagerSaveData::WriteSimpleJson);

void SGameKeywordManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameKeywordManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aKeywordsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordsData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKeywordsData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SKeywordSaveData") << "," << JsonStr("$val") << ":";
		SKeywordSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aKeywordsData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aKeywordStringData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordStringData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKeywordStringData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aKeywordStringData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGameKeywordManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameKeywordManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aKeywordsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordsData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKeywordsData[i];
		SKeywordSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aKeywordsData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aKeywordStringData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordStringData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKeywordStringData[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->m_aKeywordStringData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SUIGridCellPosition::TypeInfo = ZHMTypeInfo("SUIGridCellPosition", SUIGridCellPosition::WriteJson, SUIGridCellPosition::WriteSimpleJson);

void SUIGridCellPosition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SUIGridCellPosition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nColumnIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nColumnIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nRowIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nRowIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nColumnSpan") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nColumnSpan;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nRowSpan") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nRowSpan;
	p_Stream << "}";

	p_Stream << "}";
}

void SUIGridCellPosition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SUIGridCellPosition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nColumnIndex") << ":";
	p_Stream << s_Object->nColumnIndex;
	p_Stream << ",";

	p_Stream << JsonStr("nRowIndex") << ":";
	p_Stream << s_Object->nRowIndex;
	p_Stream << ",";

	p_Stream << JsonStr("nColumnSpan") << ":";
	p_Stream << s_Object->nColumnSpan;
	p_Stream << ",";

	p_Stream << JsonStr("nRowSpan") << ":";
	p_Stream << s_Object->nRowSpan;

	p_Stream << "}";
}

ZHMTypeInfo SRegionSaveData::TypeInfo = ZHMTypeInfo("SRegionSaveData", SRegionSaveData::WriteJson, SRegionSaveData::WriteSimpleJson);

void SRegionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRegionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("CrowdRegionType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("CrowdRegionType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCenter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vCenter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDirection;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRadius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRadius;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLifetime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLifetime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAge;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_nGroupID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleActorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nObstacleActorIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SRegionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRegionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("CrowdRegionType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_vCenter") << ":";
	float4::WriteSimpleJson(&s_Object->m_vCenter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nDirection") << ":";
	p_Stream << s_Object->m_nDirection;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRadius") << ":";
	p_Stream << s_Object->m_nRadius;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAngle") << ":";
	p_Stream << s_Object->m_nAngle;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLifetime") << ":";
	p_Stream << s_Object->m_nLifetime;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAge") << ":";
	p_Stream << s_Object->m_nAge;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << static_cast<int>(s_Object->m_nGroupID);
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleActorIndex") << ":";
	p_Stream << s_Object->m_nObstacleActorIndex;

	p_Stream << "}";
}

ZHMTypeInfo SEscortOutOrderSaveData::TypeInfo = ZHMTypeInfo("SEscortOutOrderSaveData", SEscortOutOrderSaveData::WriteJson, SEscortOutOrderSaveData::WriteSimpleJson);

void SEscortOutOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortOutOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aExitPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aExitPoints.size(); ++i)
	{
		auto& s_Item = s_Object->m_aExitPoints[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
		float4::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aExitPoints.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEscortOutOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortOutOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aExitPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aExitPoints.size(); ++i)
	{
		auto& s_Item = s_Object->m_aExitPoints[i];
		float4::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aExitPoints.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SItemsSaveData::TypeInfo = ZHMTypeInfo("SItemsSaveData", SItemsSaveData::WriteJson, SItemsSaveData::WriteSimpleJson);

void SItemsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemSaveData") << "," << JsonStr("$val") << ":";
		SItemSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SItemsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SItemSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxDistance::TypeInfo = ZHMTypeInfo("SCondition_MaxDistance", SCondition_MaxDistance::WriteJson, SCondition_MaxDistance::WriteSimpleJson);

void SCondition_MaxDistance::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxDistance*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("a0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a0, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->a1, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->a2;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxDistance::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxDistance*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("a0") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a0, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("a1") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->a1, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("a2") << ":";
	p_Stream << s_Object->a2;

	p_Stream << "}";
}

ZHMTypeInfo SActionRadialArcDisplayInfo::TypeInfo = ZHMTypeInfo("SActionRadialArcDisplayInfo", SActionRadialArcDisplayInfo::WriteJson, SActionRadialArcDisplayInfo::WriteSimpleJson);

void SActionRadialArcDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActionRadialArcDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("hidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->hidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("locked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->locked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->active;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->icon;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";

	p_Stream << "}";
}

void SActionRadialArcDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActionRadialArcDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("hidden") << ":";
	p_Stream << s_Object->hidden;
	p_Stream << ",";

	p_Stream << JsonStr("locked") << ":";
	p_Stream << s_Object->locked;
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << s_Object->active;
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << s_Object->icon;
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);

	p_Stream << "}";
}

ZHMTypeInfo ZContractEvaluationContext::TypeInfo = ZHMTypeInfo("ZContractEvaluationContext", ZContractEvaluationContext::WriteJson, ZContractEvaluationContext::WriteSimpleJson);

void ZContractEvaluationContext::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZContractEvaluationContext*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZContractEvaluationContext::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZContractEvaluationContext*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SStoredSlotSaveData::TypeInfo = ZHMTypeInfo("SStoredSlotSaveData", SStoredSlotSaveData::WriteJson, SStoredSlotSaveData::WriteSimpleJson);

void SStoredSlotSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStoredSlotSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_iStoredInventorySlotIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iStoredInventorySlotIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iStoreReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_iStoreReason);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemsStored") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItemsStored;
	p_Stream << "}";

	p_Stream << "}";
}

void SStoredSlotSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStoredSlotSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_iStoredInventorySlotIndex") << ":";
	p_Stream << s_Object->m_iStoredInventorySlotIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_iStoreReason") << ":";
	p_Stream << static_cast<int>(s_Object->m_iStoreReason);
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemsStored") << ":";
	p_Stream << s_Object->m_bItemsStored;

	p_Stream << "}";
}

ZHMTypeInfo SInventoryControllerSlotSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerSlotSaveData", SInventoryControllerSlotSaveData::WriteJson, SInventoryControllerSlotSaveData::WriteSimpleJson);

void SInventoryControllerSlotSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerSlotSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryControllerItemSaveData") << "," << JsonStr("$val") << ":";
		SInventoryControllerItemSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStorageType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryStorageType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStorageType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryStorageType", static_cast<int>(s_Object->m_eStorageType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryControllerSlotSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerSlotSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		SInventoryControllerItemSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStorageType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryStorageType", static_cast<int>(s_Object->m_eStorageType)));

	p_Stream << "}";
}

ZHMTypeInfo SInventoryControllerSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerSaveData", SInventoryControllerSaveData::WriteJson, SInventoryControllerSaveData::WriteSimpleJson);

void SInventoryControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryControllerItemSaveData") << "," << JsonStr("$val") << ":";
		SInventoryControllerItemSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEquippedItemIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEquippedItemIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMostRecentItemIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMostRecentItemIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_StoredSlot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SStoredSlotSaveData") << "," << JsonStr("$val") << ":";
	SStoredSlotSaveData::WriteJson(&s_Object->m_StoredSlot, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSlots") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSlots.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSlots[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryControllerSlotSaveData") << "," << JsonStr("$val") << ":";
		SInventoryControllerSlotSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aSlots.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingPickupItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingPickupItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPendingPickupItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aPendingPickupItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountGun") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountGun;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRevolver") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountRevolver;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountSMG") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountSMG;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRifle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountRifle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountShotgun") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountShotgun;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountSniper") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountSniper;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountMG") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountMG;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRPG") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountRPG;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountFake") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountFake;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountLightPistol") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountLightPistol;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountDartTranquilizer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountDartTranquilizer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountAmmoShotgunBeanbag") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountAmmoShotgunBeanbag;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAmmoIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAmmoIds.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAmmoIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAmmoIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAmmoCounts") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAmmoCounts.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAmmoCounts[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aAmmoCounts.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SInventoryControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		SInventoryControllerItemSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEquippedItemIndex") << ":";
	p_Stream << s_Object->m_nEquippedItemIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nMostRecentItemIndex") << ":";
	p_Stream << s_Object->m_nMostRecentItemIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_StoredSlot") << ":";
	SStoredSlotSaveData::WriteSimpleJson(&s_Object->m_StoredSlot, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aSlots") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSlots.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSlots[i];
		SInventoryControllerSlotSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aSlots.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingPickupItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingPickupItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPendingPickupItems[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aPendingPickupItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountGun") << ":";
	p_Stream << s_Object->m_nAmmoCountGun;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRevolver") << ":";
	p_Stream << s_Object->m_nAmmoCountRevolver;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountSMG") << ":";
	p_Stream << s_Object->m_nAmmoCountSMG;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRifle") << ":";
	p_Stream << s_Object->m_nAmmoCountRifle;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountShotgun") << ":";
	p_Stream << s_Object->m_nAmmoCountShotgun;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountSniper") << ":";
	p_Stream << s_Object->m_nAmmoCountSniper;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountMG") << ":";
	p_Stream << s_Object->m_nAmmoCountMG;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRPG") << ":";
	p_Stream << s_Object->m_nAmmoCountRPG;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountFake") << ":";
	p_Stream << s_Object->m_nAmmoCountFake;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountLightPistol") << ":";
	p_Stream << s_Object->m_nAmmoCountLightPistol;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountDartTranquilizer") << ":";
	p_Stream << s_Object->m_nAmmoCountDartTranquilizer;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountAmmoShotgunBeanbag") << ":";
	p_Stream << s_Object->m_nAmmoCountAmmoShotgunBeanbag;
	p_Stream << ",";

	p_Stream << JsonStr("m_aAmmoIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAmmoIds.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAmmoIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aAmmoIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAmmoCounts") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAmmoCounts.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAmmoCounts[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aAmmoCounts.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SEscortSituationActors::TypeInfo = ZHMTypeInfo("SEscortSituationActors", SEscortSituationActors::WriteJson, SEscortSituationActors::WriteSimpleJson);

void SEscortSituationActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortSituationActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituationActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortSituationActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo SLockdownManagerSaveData::TypeInfo = ZHMTypeInfo("SLockdownManagerSaveData", SLockdownManagerSaveData::WriteJson, SLockdownManagerSaveData::WriteSimpleJson);

void SLockdownManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLockdownManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aAIZones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAIZones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAIZones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLockdownManagerAIZoneSaveData") << "," << JsonStr("$val") << ":";
		SLockdownManagerAIZoneSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAIZones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SLockdownManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLockdownManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aAIZones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAIZones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAIZones[i];
		SLockdownManagerAIZoneSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aAIZones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SAudioEmitterSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterSaveData", SAudioEmitterSaveData::WriteJson, SAudioEmitterSaveData::WriteSimpleJson);

void SAudioEmitterSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEmitter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEmitter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfEvents;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfRTPCs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfRTPCs;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfSwitches") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfSwitches;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEmitter") << ":";
	p_Stream << s_Object->m_rEmitter;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfEvents") << ":";
	p_Stream << s_Object->m_nNumberOfEvents;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfRTPCs") << ":";
	p_Stream << s_Object->m_nNumberOfRTPCs;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfSwitches") << ":";
	p_Stream << s_Object->m_nNumberOfSwitches;

	p_Stream << "}";
}

ZHMTypeInfo SAudioEmitterEventSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterEventSaveData", SAudioEmitterEventSaveData::WriteJson, SAudioEmitterEventSaveData::WriteSimpleJson);

void SAudioEmitterEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEventId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEventId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFlags;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rEventSender") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEventSender;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSeekPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSeekPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPlayState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_nPlayState);
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEventId") << ":";
	p_Stream << s_Object->m_nEventId;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFlags") << ":";
	p_Stream << s_Object->m_nFlags;
	p_Stream << ",";

	p_Stream << JsonStr("m_rEventSender") << ":";
	p_Stream << s_Object->m_rEventSender;
	p_Stream << ",";

	p_Stream << JsonStr("m_nSeekPosition") << ":";
	p_Stream << s_Object->m_nSeekPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPlayState") << ":";
	p_Stream << static_cast<int>(s_Object->m_nPlayState);

	p_Stream << "}";
}

ZHMTypeInfo SAudioSaveData::TypeInfo = ZHMTypeInfo("SAudioSaveData", SAudioSaveData::WriteJson, SAudioSaveData::WriteSimpleJson);

void SAudioSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEmitters") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitters.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitters[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitters.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterEventSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterEventSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitterEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterRTPCs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterRTPCs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterRTPCSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterRTPCSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitterRTPCs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterSwitches") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterSwitches.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterSwitches[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterSwitchSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterSwitchSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitterSwitches.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGlobalStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterStateSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterStateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGlobalStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalRTPCs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGlobalRTPCs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterRTPCSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterRTPCSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGlobalRTPCs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEventsEnabledAfterInit") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEventsEnabledAfterInit.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEventsEnabledAfterInit[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEventsEnabledAfterInit.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAudioSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEmitters") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitters.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitters[i];
		SAudioEmitterSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEmitters.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterEvents[i];
		SAudioEmitterEventSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEmitterEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterRTPCs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterRTPCs[i];
		SAudioEmitterRTPCSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEmitterRTPCs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterSwitches") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterSwitches.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterSwitches[i];
		SAudioEmitterSwitchSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEmitterSwitches.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGlobalStates[i];
		SAudioEmitterStateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGlobalStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalRTPCs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGlobalRTPCs[i];
		SAudioEmitterRTPCSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGlobalRTPCs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEventsEnabledAfterInit") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEventsEnabledAfterInit.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEventsEnabledAfterInit[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEventsEnabledAfterInit.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IAudioToggleEntity::TypeInfo = ZHMTypeInfo("IAudioToggleEntity", IAudioToggleEntity::WriteJson, IAudioToggleEntity::WriteSimpleJson);

void IAudioToggleEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAudioToggleEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAudioToggleEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAudioToggleEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SEvacuateTrespassGroupSaveData::TypeInfo = ZHMTypeInfo("SEvacuateTrespassGroupSaveData", SEvacuateTrespassGroupSaveData::WriteJson, SEvacuateTrespassGroupSaveData::WriteSimpleJson);

void SEvacuateTrespassGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateTrespassGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_safeRoomNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_leader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_leader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_assistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_assistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_escalate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_escalate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_completed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_completed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_standDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_standDown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_warningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_warningCount;
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateTrespassGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateTrespassGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomNode") << ":";
	p_Stream << s_Object->m_safeRoomNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_leader") << ":";
	p_Stream << s_Object->m_leader;
	p_Stream << ",";

	p_Stream << JsonStr("m_assistant") << ":";
	p_Stream << s_Object->m_assistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_escalate") << ":";
	p_Stream << s_Object->m_escalate;
	p_Stream << ",";

	p_Stream << JsonStr("m_completed") << ":";
	p_Stream << s_Object->m_completed;
	p_Stream << ",";

	p_Stream << JsonStr("m_standDown") << ":";
	p_Stream << s_Object->m_standDown;
	p_Stream << ",";

	p_Stream << JsonStr("m_warningCount") << ":";
	p_Stream << s_Object->m_warningCount;

	p_Stream << "}";
}

ZHMTypeInfo ZUIDataProvider::TypeInfo = ZHMTypeInfo("ZUIDataProvider", ZUIDataProvider::WriteJson, ZUIDataProvider::WriteSimpleJson);

void ZUIDataProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZUIDataProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZUIDataProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZUIDataProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SSentryZoneSaveData::TypeInfo = ZHMTypeInfo("SSentryZoneSaveData", SSentryZoneSaveData::WriteJson, SSentryZoneSaveData::WriteSimpleJson);

void SSentryZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tGreetingCooldown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tGreetingCooldown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLoiteringCooldown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLoiteringCooldown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowingWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bLeftThroughWarningZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bLeftThroughWarningZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bEnteredThroughEntranceZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bEnteredThroughEntranceZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInEntranceZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInEntranceZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInWarningZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInWarningZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInGreetingZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInGreetingZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInReFriskZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInReFriskZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInRequiredDisguise") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInRequiredDisguise;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskExemptDisguise") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInFriskExemptDisguise;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasRequiredItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasRequiredItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanShowActionPrompt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCanShowActionPrompt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInAnyZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetInAnyZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrisked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFrisked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemChecked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItemChecked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreeted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreeted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedInstruction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreetedInstruction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedLoitering") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreetedLoitering;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedUnexpected") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreetedUnexpected;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskWarningZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInFriskWarningZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesAllowedDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesAllowedDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesAllowedDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aDisguisesAllowedDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesFriskExemptDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesFriskExemptDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesFriskExemptDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aDisguisesFriskExemptDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesDontEscalateOnLineCrossingDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemsDroppedInZone") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ItemsDroppedInZone.size(); ++i)
	{
		auto& s_Item = s_Object->m_ItemsDroppedInZone[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_ItemsDroppedInZone.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSentryZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tGreetingCooldown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tGreetingCooldown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLoiteringCooldown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLoiteringCooldown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << s_Object->m_bShowingWarning;
	p_Stream << ",";

	p_Stream << JsonStr("bLeftThroughWarningZone") << ":";
	p_Stream << s_Object->bLeftThroughWarningZone;
	p_Stream << ",";

	p_Stream << JsonStr("bEnteredThroughEntranceZone") << ":";
	p_Stream << s_Object->bEnteredThroughEntranceZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInEntranceZone") << ":";
	p_Stream << s_Object->bInEntranceZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInWarningZone") << ":";
	p_Stream << s_Object->bInWarningZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInGreetingZone") << ":";
	p_Stream << s_Object->bInGreetingZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInReFriskZone") << ":";
	p_Stream << s_Object->bInReFriskZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInRequiredDisguise") << ":";
	p_Stream << s_Object->m_bInRequiredDisguise;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskExemptDisguise") << ":";
	p_Stream << s_Object->m_bInFriskExemptDisguise;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasRequiredItem") << ":";
	p_Stream << s_Object->m_bHasRequiredItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanShowActionPrompt") << ":";
	p_Stream << s_Object->m_bCanShowActionPrompt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInAnyZone") << ":";
	p_Stream << s_Object->m_bTargetInAnyZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationActive") << ":";
	p_Stream << s_Object->m_bSituationActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrisked") << ":";
	p_Stream << s_Object->m_bFrisked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemChecked") << ":";
	p_Stream << s_Object->m_bItemChecked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreeted") << ":";
	p_Stream << s_Object->m_bGreeted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedInstruction") << ":";
	p_Stream << s_Object->m_bGreetedInstruction;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedLoitering") << ":";
	p_Stream << s_Object->m_bGreetedLoitering;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedUnexpected") << ":";
	p_Stream << s_Object->m_bGreetedUnexpected;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskWarningZone") << ":";
	p_Stream << s_Object->m_bInFriskWarningZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesAllowedDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesAllowedDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesAllowedDisabled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aDisguisesAllowedDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesFriskExemptDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesFriskExemptDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesFriskExemptDisabled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aDisguisesFriskExemptDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesDontEscalateOnLineCrossingDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemsDroppedInZone") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ItemsDroppedInZone.size(); ++i)
	{
		auto& s_Item = s_Object->m_ItemsDroppedInZone[i];
		p_Stream << s_Item;

		if (i < s_Object->m_ItemsDroppedInZone.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZWorldMapMetaData::TypeInfo = ZHMTypeInfo("ZWorldMapMetaData", ZWorldMapMetaData::WriteJson, ZWorldMapMetaData::WriteSimpleJson);

void ZWorldMapMetaData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZWorldMapMetaData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZWorldMapMetaData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZWorldMapMetaData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsNewArrestEnabled::TypeInfo = ZHMTypeInfo("SCondition_IsNewArrestEnabled", SCondition_IsNewArrestEnabled::WriteJson, SCondition_IsNewArrestEnabled::WriteSimpleJson);

void SCondition_IsNewArrestEnabled::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsNewArrestEnabled*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_IsNewArrestEnabled::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsNewArrestEnabled*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IUIEventPins::TypeInfo = ZHMTypeInfo("IUIEventPins", IUIEventPins::WriteJson, IUIEventPins::WriteSimpleJson);

void IUIEventPins::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIEventPins*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void IUIEventPins::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIEventPins*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDifficultyEqual::TypeInfo = ZHMTypeInfo("SCondition_IsDifficultyEqual", SCondition_IsDifficultyEqual::WriteJson, SCondition_IsDifficultyEqual::WriteSimpleJson);

void SCondition_IsDifficultyEqual::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDifficultyEqual*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("difficultyLevel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->difficultyLevel;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsDifficultyEqual::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDifficultyEqual*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("difficultyLevel") << ":";
	p_Stream << s_Object->difficultyLevel;

	p_Stream << "}";
}

ZHMTypeInfo SActorItemActionSaveData::TypeInfo = ZHMTypeInfo("SActorItemActionSaveData", SActorItemActionSaveData::WriteJson, SActorItemActionSaveData::WriteSimpleJson);

void SActorItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

ZHMTypeInfo STriggerAlarmGroupSaveData::TypeInfo = ZHMTypeInfo("STriggerAlarmGroupSaveData", STriggerAlarmGroupSaveData::WriteJson, STriggerAlarmGroupSaveData::WriteSimpleJson);

void STriggerAlarmGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STriggerAlarmGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rAlarm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggeredAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTriggeredAlarm;
	p_Stream << "}";

	p_Stream << "}";
}

void STriggerAlarmGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STriggerAlarmGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rAlarm") << ":";
	p_Stream << s_Object->m_rAlarm;
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggeredAlarm") << ":";
	p_Stream << s_Object->m_bTriggeredAlarm;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasLongTermMemory::TypeInfo = ZHMTypeInfo("SCondition_HasLongTermMemory", SCondition_HasLongTermMemory::WriteJson, SCondition_HasLongTermMemory::WriteSimpleJson);

void SCondition_HasLongTermMemory::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasLongTermMemory*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Targets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_Targets, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasLongTermMemory::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasLongTermMemory*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Targets") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_Targets, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_Breakpoint::TypeInfo = ZHMTypeInfo("SCondition_Breakpoint", SCondition_Breakpoint::WriteJson, SCondition_Breakpoint::WriteSimpleJson);

void SCondition_Breakpoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_Breakpoint*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_Breakpoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_Breakpoint*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorAnimSetSaveData::TypeInfo = ZHMTypeInfo("SActorAnimSetSaveData", SActorAnimSetSaveData::WriteJson, SActorAnimSetSaveData::WriteSimpleJson);

void SActorAnimSetSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAnimSetSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eAnimSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAnimSetType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAnimSet) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_eAnimSet))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCustomAnimationSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCustomAnimationSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxTension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eVariationResourceMaxTension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eVariationResourceMaxTension))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAnimSetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAnimSetState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAnimSetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetState", static_cast<int>(s_Object->m_eAnimSetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePreCustomAnimSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAnimSetType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePreCustomAnimSet) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_ePreCustomAnimSet))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aLocoVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLocoVariationIndecies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLocoVariationIndecies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorAnimSetVariationIndexSaveData") << "," << JsonStr("$val") << ":";
		SActorAnimSetVariationIndexSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aLocoVariationIndecies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aReactVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aReactVariationIndecies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aReactVariationIndecies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorAnimSetVariationIndexSaveData") << "," << JsonStr("$val") << ":";
		SActorAnimSetVariationIndexSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aReactVariationIndecies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorAnimSetSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAnimSetSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eAnimSet") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_eAnimSet)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rCustomAnimationSet") << ":";
	p_Stream << s_Object->m_rCustomAnimationSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxTension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eVariationResourceMaxTension)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eAnimSetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetState", static_cast<int>(s_Object->m_eAnimSetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_ePreCustomAnimSet") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_ePreCustomAnimSet)));
	p_Stream << ",";

	p_Stream << JsonStr("m_aLocoVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLocoVariationIndecies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLocoVariationIndecies[i];
		SActorAnimSetVariationIndexSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aLocoVariationIndecies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aReactVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aReactVariationIndecies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aReactVariationIndecies[i];
		SActorAnimSetVariationIndexSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aReactVariationIndecies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SActorInventorySaveData::TypeInfo = ZHMTypeInfo("SActorInventorySaveData", SActorInventorySaveData::WriteJson, SActorInventorySaveData::WriteSimpleJson);

void SActorInventorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorInventorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorInventoryItemSaveData") << "," << JsonStr("$val") << ":";
		SActorInventoryItemSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorInventorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorInventorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		SActorInventoryItemSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SActorDynamicTemplateSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateSaveData", SActorDynamicTemplateSaveData::WriteJson, SActorDynamicTemplateSaveData::WriteSimpleJson);

void SActorDynamicTemplateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTensionLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmotionLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nTimeLimit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionRemoveLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTensionRemoveLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionRemoveLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionRemoveLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmotionRemoveLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionRemoveLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeRemoveLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nTimeRemoveLimit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_resourceID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_resourceID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInstance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInstance;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDynamicTemplateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeLimit") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nTimeLimit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionRemoveLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionRemoveLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionRemoveLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionRemoveLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeRemoveLimit") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nTimeRemoveLimit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_resourceID") << ":";
	p_Stream << s_Object->m_resourceID;
	p_Stream << ",";

	p_Stream << JsonStr("m_rInstance") << ":";
	p_Stream << s_Object->m_rInstance;

	p_Stream << "}";
}

ZHMTypeInfo SActorRagdollPoseSaveData::TypeInfo = ZHMTypeInfo("SActorRagdollPoseSaveData", SActorRagdollPoseSaveData::WriteJson, SActorRagdollPoseSaveData::WriteSimpleJson);

void SActorRagdollPoseSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorRagdollPoseSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vBodyVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vBodyVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorBoneSaveData") << "," << JsonStr("$val") << ":";
		SActorBoneSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorRagdollPoseSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorRagdollPoseSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vBodyVelocity") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vBodyVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		SActorBoneSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SActorSaveData::TypeInfo = ZHMTypeInfo("SActorSaveData", SActorSaveData::WriteJson, SActorSaveData::WriteSimpleJson);

void SActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vQuaternion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Inventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorInventorySaveData") << "," << JsonStr("$val") << ":";
	SActorInventorySaveData::WriteJson(&s_Object->m_Inventory, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_AnimSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorAnimSetSaveData") << "," << JsonStr("$val") << ":";
	SActorAnimSetSaveData::WriteJson(&s_Object->m_AnimSet, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ThrowHandler") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorThrowSaveData") << "," << JsonStr("$val") << ":";
	SActorThrowSaveData::WriteJson(&s_Object->m_ThrowHandler, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentBehaviorType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentBehaviorType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CurrentBehaviorState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CurrentBehaviorState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCurrentBehaviorEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCurrentBehaviorEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCurrentBehaviorEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aCurrentBehaviorEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBehaviorEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBehaviorEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBehaviorEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aBehaviorEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_KnowledgeData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SKnowledgeSaveData") << "," << JsonStr("$val") << ":";
	SKnowledgeSaveData::WriteJson(&s_Object->m_KnowledgeData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitRepositoryId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_OutfitRepositoryId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tSequenceEndTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tSequenceEndTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorState", static_cast<int>(s_Object->m_nState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodyContainerEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBodyContainerEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyContainerSlot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBodyContainerSlot;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCorpseBodybagEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCorpseBodybagEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDragBodybagEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDragBodybagEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_AccidentContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_AccidentContext;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorDamageControlData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorDamageControlSaveData") << "," << JsonStr("$val") << ":";
	SActorDamageControlSaveData::WriteJson(&s_Object->m_ActorDamageControlData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_AnimatedActorOrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_AnimatedActorOrderData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStepsFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStepsFraction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fZBeforeEnteringStairs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fZBeforeEnteringStairs;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fZError") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fZError;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicTemplates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicTemplates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDynamicTemplates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorDynamicTemplateSaveData") << "," << JsonStr("$val") << ":";
		SActorDynamicTemplateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDynamicTemplates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_sEndOrientation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_sEndOrientation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eOverrideSensorState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorAIState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eOverrideSensorState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorAIState", static_cast<int>(s_Object->m_eOverrideSensorState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathBehavior") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDeathBehavior) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathBehavior", static_cast<int>(s_Object->m_eDeathBehavior))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bumpsHistory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEventHistorySaveData") << "," << JsonStr("$val") << ":";
	SEventHistorySaveData::WriteJson(&s_Object->m_bumpsHistory, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RagdollPose") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorRagdollPoseSaveData") << "," << JsonStr("$val") << ":";
	SActorRagdollPoseSaveData::WriteJson(&s_Object->m_RagdollPose, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aLongTermMemorySaveData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLongTermMemorySaveData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLongTermMemorySaveData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLongTermMemorySaveData") << "," << JsonStr("$val") << ":";
		SLongTermMemorySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aLongTermMemorySaveData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_AgentData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_AgentData;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_KnockdownsWhileConscious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_KnockdownsWhileConscious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_SecondaryAIIconState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_SecondaryAIIconState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_SituationAvailabilityValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_SituationAvailabilityValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HadValidAgent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HadValidAgent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNude") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNude;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActiveEnforcer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActiveEnforcer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPotentialEnforcer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPotentialEnforcer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDynamicEnforcer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDynamicEnforcer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCrowdCharacter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsCrowdCharacter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsWoozy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsWoozy;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendingOrientation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBlendingOrientation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMakeMainWeaponUndroppable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMakeMainWeaponUndroppable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFinalizePendingSpawnGrenade") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFinalizePendingSpawnGrenade;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWeaponIsHidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegisteredForLT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRegisteredForLT;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bKeepOverrideSensorStateAfterBeingUnconscious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bKeepOverrideSensorStateAfterBeingUnconscious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponReady") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWeaponReady;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDynamicWeaponUnholstered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDynamicWeaponUnholstered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInteractionGlow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceInteractionGlow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOutfitRuined") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOutfitRuined;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_BehaviorSelectDisabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_BehaviorSelectDisabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternion") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vQuaternion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Inventory") << ":";
	SActorInventorySaveData::WriteSimpleJson(&s_Object->m_Inventory, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_AnimSet") << ":";
	SActorAnimSetSaveData::WriteSimpleJson(&s_Object->m_AnimSet, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ThrowHandler") << ":";
	SActorThrowSaveData::WriteSimpleJson(&s_Object->m_ThrowHandler, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentBehaviorType") << ":";
	p_Stream << s_Object->m_nCurrentBehaviorType;
	p_Stream << ",";

	p_Stream << JsonStr("m_CurrentBehaviorState") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CurrentBehaviorState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aCurrentBehaviorEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCurrentBehaviorEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCurrentBehaviorEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aCurrentBehaviorEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBehaviorEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBehaviorEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBehaviorEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aBehaviorEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_KnowledgeData") << ":";
	SKnowledgeSaveData::WriteSimpleJson(&s_Object->m_KnowledgeData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitRepositoryId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_OutfitRepositoryId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << ",";

	p_Stream << JsonStr("m_tSequenceEndTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tSequenceEndTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorState", static_cast<int>(s_Object->m_nState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodyContainerEntity") << ":";
	p_Stream << s_Object->m_rBodyContainerEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyContainerSlot") << ":";
	p_Stream << s_Object->m_nBodyContainerSlot;
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rCorpseBodybagEntity") << ":";
	p_Stream << s_Object->m_rCorpseBodybagEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rDragBodybagEntity") << ":";
	p_Stream << s_Object->m_rDragBodybagEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_AccidentContext") << ":";
	p_Stream << s_Object->m_AccidentContext;
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorDamageControlData") << ":";
	SActorDamageControlSaveData::WriteSimpleJson(&s_Object->m_ActorDamageControlData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_AnimatedActorOrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_AnimatedActorOrderData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fStepsFraction") << ":";
	p_Stream << s_Object->m_fStepsFraction;
	p_Stream << ",";

	p_Stream << JsonStr("m_fZBeforeEnteringStairs") << ":";
	p_Stream << s_Object->m_fZBeforeEnteringStairs;
	p_Stream << ",";

	p_Stream << JsonStr("m_fZError") << ":";
	p_Stream << s_Object->m_fZError;
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicTemplates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicTemplates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDynamicTemplates[i];
		SActorDynamicTemplateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aDynamicTemplates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_sEndOrientation") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_sEndOrientation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eOverrideSensorState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorAIState", static_cast<int>(s_Object->m_eOverrideSensorState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathBehavior") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathBehavior", static_cast<int>(s_Object->m_eDeathBehavior)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bumpsHistory") << ":";
	SEventHistorySaveData::WriteSimpleJson(&s_Object->m_bumpsHistory, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_RagdollPose") << ":";
	SActorRagdollPoseSaveData::WriteSimpleJson(&s_Object->m_RagdollPose, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aLongTermMemorySaveData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLongTermMemorySaveData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLongTermMemorySaveData[i];
		SLongTermMemorySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aLongTermMemorySaveData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_AgentData") << ":";
	p_Stream << s_Object->m_AgentData;
	p_Stream << ",";

	p_Stream << JsonStr("m_KnockdownsWhileConscious") << ":";
	p_Stream << s_Object->m_KnockdownsWhileConscious;
	p_Stream << ",";

	p_Stream << JsonStr("m_SecondaryAIIconState") << ":";
	p_Stream << s_Object->m_SecondaryAIIconState;
	p_Stream << ",";

	p_Stream << JsonStr("m_SituationAvailabilityValue") << ":";
	p_Stream << s_Object->m_SituationAvailabilityValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_HadValidAgent") << ":";
	p_Stream << s_Object->m_HadValidAgent;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNude") << ":";
	p_Stream << s_Object->m_bNude;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActiveEnforcer") << ":";
	p_Stream << s_Object->m_bActiveEnforcer;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPotentialEnforcer") << ":";
	p_Stream << s_Object->m_bIsPotentialEnforcer;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDynamicEnforcer") << ":";
	p_Stream << s_Object->m_bDynamicEnforcer;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCrowdCharacter") << ":";
	p_Stream << s_Object->m_bIsCrowdCharacter;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsWoozy") << ":";
	p_Stream << s_Object->m_bIsWoozy;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendingOrientation") << ":";
	p_Stream << s_Object->m_bBlendingOrientation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMakeMainWeaponUndroppable") << ":";
	p_Stream << s_Object->m_bMakeMainWeaponUndroppable;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFinalizePendingSpawnGrenade") << ":";
	p_Stream << s_Object->m_bFinalizePendingSpawnGrenade;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponIsHidden") << ":";
	p_Stream << s_Object->m_bWeaponIsHidden;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegisteredForLT") << ":";
	p_Stream << s_Object->m_bRegisteredForLT;
	p_Stream << ",";

	p_Stream << JsonStr("m_bKeepOverrideSensorStateAfterBeingUnconscious") << ":";
	p_Stream << s_Object->m_bKeepOverrideSensorStateAfterBeingUnconscious;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponReady") << ":";
	p_Stream << s_Object->m_bWeaponReady;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDynamicWeaponUnholstered") << ":";
	p_Stream << s_Object->m_bDynamicWeaponUnholstered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInteractionGlow") << ":";
	p_Stream << s_Object->m_bForceInteractionGlow;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOutfitRuined") << ":";
	p_Stream << s_Object->m_bIsOutfitRuined;
	p_Stream << ",";

	p_Stream << JsonStr("m_BehaviorSelectDisabled") << ":";
	p_Stream << s_Object->m_BehaviorSelectDisabled;

	p_Stream << "}";
}

ZHMTypeInfo IActorSpreadEvaluator::TypeInfo = ZHMTypeInfo("IActorSpreadEvaluator", IActorSpreadEvaluator::WriteJson, IActorSpreadEvaluator::WriteSimpleJson);

void IActorSpreadEvaluator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorSpreadEvaluator*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorSpreadEvaluator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorSpreadEvaluator*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SMatrix44::TypeInfo = ZHMTypeInfo("SMatrix44", SMatrix44::WriteJson, SMatrix44::WriteSimpleJson);

void SMatrix44::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix44*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m11") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m11;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m12") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m12;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m13") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m13;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m14") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m14;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m21") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m21;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m22") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m22;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m23") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m23;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m24") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m24;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m31") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m31;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m32") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m32;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m33") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m33;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m34") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m34;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m41") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m41;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m42") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m42;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m43") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m43;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m44") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m44;
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix44::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix44*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m11") << ":";
	p_Stream << s_Object->m11;
	p_Stream << ",";

	p_Stream << JsonStr("m12") << ":";
	p_Stream << s_Object->m12;
	p_Stream << ",";

	p_Stream << JsonStr("m13") << ":";
	p_Stream << s_Object->m13;
	p_Stream << ",";

	p_Stream << JsonStr("m14") << ":";
	p_Stream << s_Object->m14;
	p_Stream << ",";

	p_Stream << JsonStr("m21") << ":";
	p_Stream << s_Object->m21;
	p_Stream << ",";

	p_Stream << JsonStr("m22") << ":";
	p_Stream << s_Object->m22;
	p_Stream << ",";

	p_Stream << JsonStr("m23") << ":";
	p_Stream << s_Object->m23;
	p_Stream << ",";

	p_Stream << JsonStr("m24") << ":";
	p_Stream << s_Object->m24;
	p_Stream << ",";

	p_Stream << JsonStr("m31") << ":";
	p_Stream << s_Object->m31;
	p_Stream << ",";

	p_Stream << JsonStr("m32") << ":";
	p_Stream << s_Object->m32;
	p_Stream << ",";

	p_Stream << JsonStr("m33") << ":";
	p_Stream << s_Object->m33;
	p_Stream << ",";

	p_Stream << JsonStr("m34") << ":";
	p_Stream << s_Object->m34;
	p_Stream << ",";

	p_Stream << JsonStr("m41") << ":";
	p_Stream << s_Object->m41;
	p_Stream << ",";

	p_Stream << JsonStr("m42") << ":";
	p_Stream << s_Object->m42;
	p_Stream << ",";

	p_Stream << JsonStr("m43") << ":";
	p_Stream << s_Object->m43;
	p_Stream << ",";

	p_Stream << JsonStr("m44") << ":";
	p_Stream << s_Object->m44;

	p_Stream << "}";
}

ZHMTypeInfo SActorSpreadControllerCandidateSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadControllerCandidateSaveData", SActorSpreadControllerCandidateSaveData::WriteJson, SActorSpreadControllerCandidateSaveData::WriteSimpleJson);

void SActorSpreadControllerCandidateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadControllerCandidateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CandidateActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CandidateActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CandidateTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_CandidateTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValidCandidate;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadControllerCandidateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadControllerCandidateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CandidateActor") << ":";
	p_Stream << s_Object->m_CandidateActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_CandidateTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_CandidateTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidCandidate") << ":";
	p_Stream << s_Object->m_bValidCandidate;

	p_Stream << "}";
}

ZHMTypeInfo SActorSpreadControllerSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadControllerSaveData", SActorSpreadControllerSaveData::WriteJson, SActorSpreadControllerSaveData::WriteSimpleJson);

void SActorSpreadControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSpreadingActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aSpreadingActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDeadSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadSpreadingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDeadSpreadingActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aDeadSpreadingActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSpreadingActorsAddedTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActorsAddedTime.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSpreadingActorsAddedTime[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
		ZGameTime::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aSpreadingActorsAddedTime.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aNewCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aNewCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aNewCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aNewCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorSpreadControllerCandidateSaveData") << "," << JsonStr("$val") << ":";
		SActorSpreadControllerCandidateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpreadingActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpreadingActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentActorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentActorIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerCheckEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerCheckEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerSpreading") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerSpreading;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsValidCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerIsValidCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerIsCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_PlayerCandidateTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_PlayerCandidateTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSpreadingActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aSpreadingActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDeadSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadSpreadingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDeadSpreadingActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aDeadSpreadingActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSpreadingActorsAddedTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActorsAddedTime.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSpreadingActorsAddedTime[i];
		ZGameTime::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aSpreadingActorsAddedTime.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aNewCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aNewCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aNewCandidates[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aNewCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCandidates[i];
		SActorSpreadControllerCandidateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpreadingActor") << ":";
	p_Stream << s_Object->m_rCurrentSpreadingActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentActorIndex") << ":";
	p_Stream << s_Object->m_nCurrentActorIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerCheckEnabled") << ":";
	p_Stream << s_Object->m_bPlayerCheckEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerSpreading") << ":";
	p_Stream << s_Object->m_bPlayerSpreading;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsValidCandidate") << ":";
	p_Stream << s_Object->m_bPlayerIsValidCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsCandidate") << ":";
	p_Stream << s_Object->m_bPlayerIsCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_PlayerCandidateTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_PlayerCandidateTime, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SAnimatedActorMoveOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorMoveOrderSaveData", SAnimatedActorMoveOrderSaveData::WriteJson, SAnimatedActorMoveOrderSaveData::WriteSimpleJson);

void SAnimatedActorMoveOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorMoveOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPrecisePositioning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPrecisePositioning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPreciseOrientation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPreciseOrientation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreEndCollision") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIgnoreEndCollision;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForcedEnpointSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForcedEnpointSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStopMoveDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStopMoveDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vWaypoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vWaypoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vForcedEndpoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vForcedEndpoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vFacingDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vFacingDirection, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorMoveOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorMoveOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPrecisePositioning") << ":";
	p_Stream << s_Object->m_bPrecisePositioning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPreciseOrientation") << ":";
	p_Stream << s_Object->m_bPreciseOrientation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreEndCollision") << ":";
	p_Stream << s_Object->m_bIgnoreEndCollision;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForcedEnpointSet") << ":";
	p_Stream << s_Object->m_bForcedEnpointSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStopMoveDistance") << ":";
	p_Stream << s_Object->m_fStopMoveDistance;
	p_Stream << ",";

	p_Stream << JsonStr("m_vWaypoint") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vWaypoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vForcedEndpoint") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vForcedEndpoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vFacingDirection") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vFacingDirection, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsActorAlive::TypeInfo = ZHMTypeInfo("SCondition_IsActorAlive", SCondition_IsActorAlive::WriteJson, SCondition_IsActorAlive::WriteSimpleJson);

void SCondition_IsActorAlive::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorAlive*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Actors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_Actors, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsActorAlive::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorAlive*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Actors") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_Actors, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SClothBundleSpawnSaveData::TypeInfo = ZHMTypeInfo("SClothBundleSpawnSaveData", SClothBundleSpawnSaveData::WriteJson, SClothBundleSpawnSaveData::WriteSimpleJson);

void SClothBundleSpawnSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothBundleSpawnSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rClothbundle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rClothbundle;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothBundleSpawnSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothBundleSpawnSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rClothbundle") << ":";
	p_Stream << s_Object->m_rClothbundle;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_PerceptibleEntityEndAfterReact::TypeInfo = ZHMTypeInfo("SCondition_PerceptibleEntityEndAfterReact", SCondition_PerceptibleEntityEndAfterReact::WriteJson, SCondition_PerceptibleEntityEndAfterReact::WriteSimpleJson);

void SCondition_PerceptibleEntityEndAfterReact::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_PerceptibleEntityEndAfterReact*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_PerceptibleEntityEndAfterReact::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_PerceptibleEntityEndAfterReact*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SituationFromActors::TypeInfo = ZHMTypeInfo("SCondition_SituationFromActors", SCondition_SituationFromActors::WriteJson, SCondition_SituationFromActors::WriteSimpleJson);

void SCondition_SituationFromActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationFromActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("actors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actors, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SituationFromActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationFromActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("actors") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actors, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZPatrolGroup::TypeInfo = ZHMTypeInfo("ZPatrolGroup", ZPatrolGroup::WriteJson, ZPatrolGroup::WriteSimpleJson);

void ZPatrolGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPatrolGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPatrolGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPatrolGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IPrimitivesProvider::TypeInfo = ZHMTypeInfo("IPrimitivesProvider", IPrimitivesProvider::WriteJson, IPrimitivesProvider::WriteSimpleJson);

void IPrimitivesProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPrimitivesProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPrimitivesProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPrimitivesProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SPersistentEntitySaveData::TypeInfo = ZHMTypeInfo("SPersistentEntitySaveData", SPersistentEntitySaveData::WriteJson, SPersistentEntitySaveData::WriteSimpleJson);

void SPersistentEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPersistentEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nResourceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nResourceId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityIDs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityIDs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityIDs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntityIDs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityNames") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityNames.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityNames[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aEntityNames.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SPersistentEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPersistentEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nResourceId") << ":";
	p_Stream << s_Object->m_nResourceId;
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityIDs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityIDs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityIDs[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntityIDs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityNames") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityNames.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityNames[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->m_aEntityNames.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SGetHelpServiceSaveData::TypeInfo = ZHMTypeInfo("SGetHelpServiceSaveData", SGetHelpServiceSaveData::WriteJson, SGetHelpServiceSaveData::WriteSimpleJson);

void SGetHelpServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aHelpingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHelpingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aHelpingActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHelpingActorSaveData") << "," << JsonStr("$val") << ":";
		SHelpingActorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aHelpingActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGetHelpServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aHelpingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHelpingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aHelpingActors[i];
		SHelpingActorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aHelpingActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SExposedEntityDescriptor::TypeInfo = ZHMTypeInfo("SExposedEntityDescriptor", SExposedEntityDescriptor::WriteJson, SExposedEntityDescriptor::WriteSimpleJson);

void SExposedEntityDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedEntityDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsHidden;
	p_Stream << "}";

	p_Stream << "}";
}

void SExposedEntityDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedEntityDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << s_Object->bIsHidden;

	p_Stream << "}";
}

ZHMTypeInfo SLevelReferenceableEntitieSaveData::TypeInfo = ZHMTypeInfo("SLevelReferenceableEntitieSaveData", SLevelReferenceableEntitieSaveData::WriteJson, SLevelReferenceableEntitieSaveData::WriteSimpleJson);

void SLevelReferenceableEntitieSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLevelReferenceableEntitieSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sSceneResource") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sSceneResource);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAdditionalBrickResources") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAdditionalBrickResources.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAdditionalBrickResources[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aAdditionalBrickResources.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SLevelReferenceableEntitieSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLevelReferenceableEntitieSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sSceneResource") << ":";
	p_Stream << JsonStr(s_Object->m_sSceneResource);
	p_Stream << ",";

	p_Stream << JsonStr("m_aAdditionalBrickResources") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAdditionalBrickResources.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAdditionalBrickResources[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->m_aAdditionalBrickResources.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IBulletImpactListener::TypeInfo = ZHMTypeInfo("IBulletImpactListener", IBulletImpactListener::WriteJson, IBulletImpactListener::WriteSimpleJson);

void IBulletImpactListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBulletImpactListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBulletImpactListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBulletImpactListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ISequenceItem::TypeInfo = ZHMTypeInfo("ISequenceItem", ISequenceItem::WriteJson, ISequenceItem::WriteSimpleJson);

void ISequenceItem::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceItem*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISequenceItem::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceItem*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IContractObjective::TypeInfo = ZHMTypeInfo("IContractObjective", IContractObjective::WriteJson, IContractObjective::WriteSimpleJson);

void IContractObjective::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractObjective*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContractObjective::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractObjective*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SLeadEscortSituationActors::TypeInfo = ZHMTypeInfo("SLeadEscortSituationActors", SLeadEscortSituationActors::WriteJson, SLeadEscortSituationActors::WriteSimpleJson);

void SLeadEscortSituationActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLeadEscortSituationActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SLeadEscortSituationActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLeadEscortSituationActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo IEventConsumerCollection::TypeInfo = ZHMTypeInfo("IEventConsumerCollection", IEventConsumerCollection::WriteJson, IEventConsumerCollection::WriteSimpleJson);

void IEventConsumerCollection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEventConsumerCollection*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEventConsumerCollection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEventConsumerCollection*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SWaveformGeneratorSaveData::TypeInfo = ZHMTypeInfo("SWaveformGeneratorSaveData", SWaveformGeneratorSaveData::WriteJson, SWaveformGeneratorSaveData::WriteSimpleJson);

void SWaveformGeneratorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWaveformGeneratorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFrequency") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFrequency;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStartTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCount;
	p_Stream << "}";

	p_Stream << "}";
}

void SWaveformGeneratorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWaveformGeneratorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fTime") << ":";
	p_Stream << s_Object->m_fTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFrequency") << ":";
	p_Stream << s_Object->m_fFrequency;
	p_Stream << ",";

	p_Stream << JsonStr("m_fOffset") << ":";
	p_Stream << s_Object->m_fOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_fScale") << ":";
	p_Stream << s_Object->m_fScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartTime") << ":";
	p_Stream << s_Object->m_fStartTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCount") << ":";
	p_Stream << s_Object->m_nCount;

	p_Stream << "}";
}

ZHMTypeInfo SWaveformGeneratorManagerSaveData::TypeInfo = ZHMTypeInfo("SWaveformGeneratorManagerSaveData", SWaveformGeneratorManagerSaveData::WriteJson, SWaveformGeneratorManagerSaveData::WriteSimpleJson);

void SWaveformGeneratorManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWaveformGeneratorManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aGenerators") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGenerators.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGenerators[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aGenerators.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGeneratorData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGeneratorData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGeneratorData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SWaveformGeneratorSaveData") << "," << JsonStr("$val") << ":";
		SWaveformGeneratorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGeneratorData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SWaveformGeneratorManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWaveformGeneratorManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aGenerators") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGenerators.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGenerators[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aGenerators.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGeneratorData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGeneratorData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGeneratorData[i];
		SWaveformGeneratorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGeneratorData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpSaveData_SColorRGB::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SColorRGB", SMathLerpSaveData_SColorRGB::WriteJson, SMathLerpSaveData_SColorRGB::WriteSimpleJson);

void SMathLerpSaveData_SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

ZHMTypeInfo SMathLerpsSaveData_SColorRGB::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SColorRGB", SMathLerpsSaveData_SColorRGB::WriteJson, SMathLerpsSaveData_SColorRGB::WriteSimpleJson);

void SMathLerpsSaveData_SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SColorRGB") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SColorRGB::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SColorRGB::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SVideoDatabaseEntry::TypeInfo = ZHMTypeInfo("SVideoDatabaseEntry", SVideoDatabaseEntry::WriteJson, SVideoDatabaseEntry::WriteSimpleJson);

void SVideoDatabaseEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVideoDatabaseEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("VideoId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->VideoId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("RuntimeLocalizedVideoRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->RuntimeLocalizedVideoRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SVideoDatabaseEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVideoDatabaseEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("VideoId") << ":";
	p_Stream << JsonStr(s_Object->VideoId);
	p_Stream << ",";

	p_Stream << JsonStr("RuntimeLocalizedVideoRid") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->RuntimeLocalizedVideoRid, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SVideoDatabaseData::TypeInfo = ZHMTypeInfo("SVideoDatabaseData", SVideoDatabaseData::WriteJson, SVideoDatabaseData::WriteSimpleJson);

void SVideoDatabaseData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVideoDatabaseData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Videos") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Videos.size(); ++i)
	{
		auto& s_Item = s_Object->Videos[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVideoDatabaseEntry") << "," << JsonStr("$val") << ":";
		SVideoDatabaseEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->Videos.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SVideoDatabaseData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVideoDatabaseData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Videos") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Videos.size(); ++i)
	{
		auto& s_Item = s_Object->Videos[i];
		SVideoDatabaseEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->Videos.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SAvoidDangerousAreaGroupSaveData::TypeInfo = ZHMTypeInfo("SAvoidDangerousAreaGroupSaveData", SAvoidDangerousAreaGroupSaveData::WriteJson, SAvoidDangerousAreaGroupSaveData::WriteSimpleJson);

void SAvoidDangerousAreaGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAvoidDangerousAreaGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDangerousArea") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDangerousArea;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDestinationPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vDestinationPoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iGridId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iGridId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitUntilDangerEnds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWaitUntilDangerEnds;
	p_Stream << "}";

	p_Stream << "}";
}

void SAvoidDangerousAreaGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAvoidDangerousAreaGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rDangerousArea") << ":";
	p_Stream << s_Object->m_rDangerousArea;
	p_Stream << ",";

	p_Stream << JsonStr("m_vDestinationPoint") << ":";
	float4::WriteSimpleJson(&s_Object->m_vDestinationPoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_iGridId") << ":";
	p_Stream << s_Object->m_iGridId;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitUntilDangerEnds") << ":";
	p_Stream << s_Object->m_bWaitUntilDangerEnds;

	p_Stream << "}";
}

ZHMTypeInfo SStashPointSaveData::TypeInfo = ZHMTypeInfo("SStashPointSaveData", SStashPointSaveData::WriteJson, SStashPointSaveData::WriteSimpleJson);

void SStashPointSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStashPointSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_arItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_arItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_arItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_arItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_pSuitcase") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pSuitcase;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pMainItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pMainItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eContainedType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EStashpointContainedEntityType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eContainedType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EStashpointContainedEntityType", static_cast<int>(s_Object->m_eContainedType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MainItemID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_MainItemID, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SStashPointSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStashPointSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_arItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_arItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_arItems[i];
		p_Stream << s_Item;

		if (i < s_Object->m_arItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_pSuitcase") << ":";
	p_Stream << s_Object->m_pSuitcase;
	p_Stream << ",";

	p_Stream << JsonStr("m_pMainItem") << ":";
	p_Stream << s_Object->m_pMainItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_eContainedType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EStashpointContainedEntityType", static_cast<int>(s_Object->m_eContainedType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_MainItemID") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_MainItemID, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ISpeakEventListener::TypeInfo = ZHMTypeInfo("ISpeakEventListener", ISpeakEventListener::WriteJson, ISpeakEventListener::WriteSimpleJson);

void ISpeakEventListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISpeakEventListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISpeakEventListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISpeakEventListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SDisguiseZoneSaveData::TypeInfo = ZHMTypeInfo("SDisguiseZoneSaveData", SDisguiseZoneSaveData::WriteJson, SDisguiseZoneSaveData::WriteSimpleJson);

void SDisguiseZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDisguiseZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SDisguiseZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDisguiseZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

ZHMTypeInfo ICloset::TypeInfo = ZHMTypeInfo("ICloset", ICloset::WriteJson, ICloset::WriteSimpleJson);

void ICloset::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICloset*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICloset::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICloset*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IBoolCondition::TypeInfo = ZHMTypeInfo("IBoolCondition", IBoolCondition::WriteJson, IBoolCondition::WriteSimpleJson);

void IBoolCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoolCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoolCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoolCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_BeingPickedUpBy::TypeInfo = ZHMTypeInfo("SCondition_BeingPickedUpBy", SCondition_BeingPickedUpBy::WriteJson, SCondition_BeingPickedUpBy::WriteSimpleJson);

void SCondition_BeingPickedUpBy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_BeingPickedUpBy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_BeingPickedUpBy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_BeingPickedUpBy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_AreBehaviorsDisabled::TypeInfo = ZHMTypeInfo("SCondition_AreBehaviorsDisabled", SCondition_AreBehaviorsDisabled::WriteJson, SCondition_AreBehaviorsDisabled::WriteSimpleJson);

void SCondition_AreBehaviorsDisabled::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreBehaviorsDisabled*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_AreBehaviorsDisabled::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreBehaviorsDisabled*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo STimerEntitiesSaveData::TypeInfo = ZHMTypeInfo("STimerEntitiesSaveData", STimerEntitiesSaveData::WriteJson, STimerEntitiesSaveData::WriteSimpleJson);

void STimerEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntitySaveData") << "," << JsonStr("$val") << ":";
		STimerEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STimerEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		STimerEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SRandomTimerEntitiesSaveData::TypeInfo = ZHMTypeInfo("SRandomTimerEntitiesSaveData", SRandomTimerEntitiesSaveData::WriteJson, SRandomTimerEntitiesSaveData::WriteSimpleJson);

void SRandomTimerEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRandomTimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRandomTimerEntitySaveData") << "," << JsonStr("$val") << ":";
		SRandomTimerEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SRandomTimerEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRandomTimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SRandomTimerEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo STimerManagerSaveData::TypeInfo = ZHMTypeInfo("STimerManagerSaveData", STimerManagerSaveData::WriteJson, STimerManagerSaveData::WriteSimpleJson);

void STimerManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_TimersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntitiesSaveData") << "," << JsonStr("$val") << ":";
	STimerEntitiesSaveData::WriteJson(&s_Object->m_TimersData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RandomTimersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRandomTimerEntitiesSaveData") << "," << JsonStr("$val") << ":";
	SRandomTimerEntitiesSaveData::WriteJson(&s_Object->m_RandomTimersData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_GameTimersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGameTimersSaveData") << "," << JsonStr("$val") << ":";
	SGameTimersSaveData::WriteJson(&s_Object->m_GameTimersData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STimerManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_TimersData") << ":";
	STimerEntitiesSaveData::WriteSimpleJson(&s_Object->m_TimersData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_RandomTimersData") << ":";
	SRandomTimerEntitiesSaveData::WriteSimpleJson(&s_Object->m_RandomTimersData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_GameTimersData") << ":";
	SGameTimersSaveData::WriteSimpleJson(&s_Object->m_GameTimersData, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SExitSaveData::TypeInfo = ZHMTypeInfo("SExitSaveData", SExitSaveData::WriteJson, SExitSaveData::WriteSimpleJson);

void SExitSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExitSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SExitSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExitSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

ZHMTypeInfo ID6Constraint::TypeInfo = ZHMTypeInfo("ID6Constraint", ID6Constraint::WriteJson, ID6Constraint::WriteSimpleJson);

void ID6Constraint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ID6Constraint*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ID6Constraint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ID6Constraint*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IBoolConditionListener::TypeInfo = ZHMTypeInfo("IBoolConditionListener", IBoolConditionListener::WriteJson, IBoolConditionListener::WriteSimpleJson);

void IBoolConditionListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoolConditionListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoolConditionListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoolConditionListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SuspiciousWeaponPickedUp::TypeInfo = ZHMTypeInfo("SCondition_SuspiciousWeaponPickedUp", SCondition_SuspiciousWeaponPickedUp::WriteJson, SCondition_SuspiciousWeaponPickedUp::WriteSimpleJson);

void SCondition_SuspiciousWeaponPickedUp::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuspiciousWeaponPickedUp*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SuspiciousWeaponPickedUp::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SuspiciousWeaponPickedUp*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SEntityPinDescriptor::TypeInfo = ZHMTypeInfo("SEntityPinDescriptor", SEntityPinDescriptor::WriteJson, SEntityPinDescriptor::WriteSimpleJson);

void SEntityPinDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPinDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->type, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsPlaceholder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsPlaceholder;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsHidden;
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityPinDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPinDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->type, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << ",";

	p_Stream << JsonStr("bIsPlaceholder") << ":";
	p_Stream << s_Object->bIsPlaceholder;
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << s_Object->bIsHidden;

	p_Stream << "}";
}

ZHMTypeInfo IActorProxy::TypeInfo = ZHMTypeInfo("IActorProxy", IActorProxy::WriteJson, IActorProxy::WriteSimpleJson);

void IActorProxy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProxy*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorProxy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProxy*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_OnlyLegalWeaponsDropped::TypeInfo = ZHMTypeInfo("SCondition_OnlyLegalWeaponsDropped", SCondition_OnlyLegalWeaponsDropped::WriteJson, SCondition_OnlyLegalWeaponsDropped::WriteSimpleJson);

void SCondition_OnlyLegalWeaponsDropped::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_OnlyLegalWeaponsDropped*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_OnlyLegalWeaponsDropped::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_OnlyLegalWeaponsDropped*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IHM5WeaponInventory::TypeInfo = ZHMTypeInfo("IHM5WeaponInventory", IHM5WeaponInventory::WriteJson, IHM5WeaponInventory::WriteSimpleJson);

void IHM5WeaponInventory::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5WeaponInventory*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5WeaponInventory::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5WeaponInventory*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCppEntitySubsetInfo::TypeInfo = ZHMTypeInfo("SCppEntitySubsetInfo", SCppEntitySubsetInfo::WriteJson, SCppEntitySubsetInfo::WriteSimpleJson);

void SCppEntitySubsetInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCppEntitySubsetInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("name") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->name);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("flags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->flags;
	p_Stream << "}";

	p_Stream << "}";
}

void SCppEntitySubsetInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCppEntitySubsetInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("name") << ":";
	p_Stream << JsonStr(s_Object->name);
	p_Stream << ",";

	p_Stream << JsonStr("flags") << ":";
	p_Stream << s_Object->flags;

	p_Stream << "}";
}

ZHMTypeInfo ZAnimationBonePose::TypeInfo = ZHMTypeInfo("ZAnimationBonePose", ZAnimationBonePose::WriteJson, ZAnimationBonePose::WriteSimpleJson);

void ZAnimationBonePose::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAnimationBonePose*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZAnimationBonePose::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAnimationBonePose*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IHM5CCPostFilterManager::TypeInfo = ZHMTypeInfo("IHM5CCPostFilterManager", IHM5CCPostFilterManager::WriteJson, IHM5CCPostFilterManager::WriteSimpleJson);

void IHM5CCPostFilterManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5CCPostFilterManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5CCPostFilterManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5CCPostFilterManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ICharacterTransformState::TypeInfo = ZHMTypeInfo("ICharacterTransformState", ICharacterTransformState::WriteJson, ICharacterTransformState::WriteSimpleJson);

void ICharacterTransformState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterTransformState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterTransformState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterTransformState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_Owner::TypeInfo = ZHMTypeInfo("SCondition_Owner", SCondition_Owner::WriteJson, SCondition_Owner::WriteSimpleJson);

void SCondition_Owner::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_Owner*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_Owner::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_Owner*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_AreVisibleItemsLegal::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleItemsLegal", SCondition_AreVisibleItemsLegal::WriteJson, SCondition_AreVisibleItemsLegal::WriteSimpleJson);

void SCondition_AreVisibleItemsLegal::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleItemsLegal*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->includeWeapons;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_AreVisibleItemsLegal::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_AreVisibleItemsLegal*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << s_Object->includeWeapons;

	p_Stream << "}";
}

ZHMTypeInfo SCrowdAIEventSaveData::TypeInfo = ZHMTypeInfo("SCrowdAIEventSaveData", SCrowdAIEventSaveData::WriteJson, SCrowdAIEventSaveData::WriteSimpleJson);

void SCrowdAIEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_RunningEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_RunningEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_RunningEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRunningCrowdAIEventSaveData") << "," << JsonStr("$val") << ":";
		SRunningCrowdAIEventSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_RunningEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdAIEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_RunningEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_RunningEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_RunningEvents[i];
		SRunningCrowdAIEventSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_RunningEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsNotSuitcase::TypeInfo = ZHMTypeInfo("SCondition_IsNotSuitcase", SCondition_IsNotSuitcase::WriteJson, SCondition_IsNotSuitcase::WriteSimpleJson);

void SCondition_IsNotSuitcase::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsNotSuitcase*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("items") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->items, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsNotSuitcase::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsNotSuitcase*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("items") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->items, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IHighResCutsceneEntity::TypeInfo = ZHMTypeInfo("IHighResCutsceneEntity", IHighResCutsceneEntity::WriteJson, IHighResCutsceneEntity::WriteSimpleJson);

void IHighResCutsceneEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHighResCutsceneEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHighResCutsceneEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHighResCutsceneEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ISequenceTrackGroup::TypeInfo = ZHMTypeInfo("ISequenceTrackGroup", ISequenceTrackGroup::WriteJson, ISequenceTrackGroup::WriteSimpleJson);

void ISequenceTrackGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceTrackGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISequenceTrackGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceTrackGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SAttentionHUDUIElementArray_Dummy::TypeInfo = ZHMTypeInfo("SAttentionHUDUIElementArray_Dummy", SAttentionHUDUIElementArray_Dummy::WriteJson, SAttentionHUDUIElementArray_Dummy::WriteSimpleJson);

void SAttentionHUDUIElementArray_Dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAttentionHUDUIElementArray_Dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAttentionHUDUIElement") << "," << JsonStr("$val") << ":";
		SAttentionHUDUIElement::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAttentionHUDUIElementArray_Dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAttentionHUDUIElementArray_Dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SAttentionHUDUIElement::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ISceneEntity::TypeInfo = ZHMTypeInfo("ISceneEntity", ISceneEntity::WriteJson, ISceneEntity::WriteSimpleJson);

void ISceneEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISceneEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISceneEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISceneEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo STrespassingRuleEntitySaveData::TypeInfo = ZHMTypeInfo("STrespassingRuleEntitySaveData", STrespassingRuleEntitySaveData::WriteJson, STrespassingRuleEntitySaveData::WriteSimpleJson);

void STrespassingRuleEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrespassingRuleEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aAllowedProfessionsDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAllowedProfessionsDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAllowedProfessionsDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aAllowedProfessionsDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STrespassingRuleEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrespassingRuleEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aAllowedProfessionsDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAllowedProfessionsDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAllowedProfessionsDisabled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aAllowedProfessionsDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ISequenceTarget::TypeInfo = ZHMTypeInfo("ISequenceTarget", ISequenceTarget::WriteJson, ISequenceTarget::WriteSimpleJson);

void ISequenceTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISequenceTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SEntityTypeDescriptor::TypeInfo = ZHMTypeInfo("SEntityTypeDescriptor", SEntityTypeDescriptor::WriteJson, SEntityTypeDescriptor::WriteSimpleJson);

void SEntityTypeDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTypeDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("typeName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->typeName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("anyPlatformSpecificPropertiesRecursive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->anyPlatformSpecificPropertiesRecursive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("attributeOverrides") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TMultiMap<ZString,ZString>") << "," << JsonStr("$val") << ":";
	TMultiMap<ZString,ZString>::WriteJson(&s_Object->attributeOverrides, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exposedTypes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TMultiMap<ZString,SExposedTypeInfo>") << "," << JsonStr("$val") << ":";
	TMultiMap<ZString,SExposedTypeInfo>::WriteJson(&s_Object->exposedTypes, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("typeSourceTemplate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->typeSourceTemplate, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("runtimeType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->runtimeType, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("runtimeBlueprint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->runtimeBlueprint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("supportedTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->supportedTypes.size(); ++i)
	{
		auto& s_Item = s_Object->supportedTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->supportedTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("properties") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->properties.size(); ++i)
	{
		auto& s_Item = s_Object->properties[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityPropertyDescriptor") << "," << JsonStr("$val") << ":";
		SEntityPropertyDescriptor::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->properties.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("inputPins") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->inputPins.size(); ++i)
	{
		auto& s_Item = s_Object->inputPins[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityPinDescriptor") << "," << JsonStr("$val") << ":";
		SEntityPinDescriptor::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->inputPins.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("outputPins") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->outputPins.size(); ++i)
	{
		auto& s_Item = s_Object->outputPins[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityPinDescriptor") << "," << JsonStr("$val") << ":";
		SEntityPinDescriptor::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->outputPins.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntities.size(); ++i)
	{
		auto& s_Item = s_Object->exposedEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExposedEntityDescriptor") << "," << JsonStr("$val") << ":";
		SExposedEntityDescriptor::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->exposedEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("referencedEntityTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->referencedEntityTypes.size(); ++i)
	{
		auto& s_Item = s_Object->referencedEntityTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->referencedEntityTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntitiesTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntitiesTypes.size(); ++i)
	{
		auto& s_Item = s_Object->exposedEntitiesTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExposedEntityTypeDescriptor") << "," << JsonStr("$val") << ":";
		SExposedEntityTypeDescriptor::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->exposedEntitiesTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTypeDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTypeDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("typeName") << ":";
	p_Stream << JsonStr(s_Object->typeName);
	p_Stream << ",";

	p_Stream << JsonStr("anyPlatformSpecificPropertiesRecursive") << ":";
	p_Stream << s_Object->anyPlatformSpecificPropertiesRecursive;
	p_Stream << ",";

	p_Stream << JsonStr("attributeOverrides") << ":";
	TMultiMap<ZString,ZString>::WriteSimpleJson(&s_Object->attributeOverrides, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("exposedTypes") << ":";
	TMultiMap<ZString,SExposedTypeInfo>::WriteSimpleJson(&s_Object->exposedTypes, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("typeSourceTemplate") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->typeSourceTemplate, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("runtimeType") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->runtimeType, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("runtimeBlueprint") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->runtimeBlueprint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("supportedTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->supportedTypes.size(); ++i)
	{
		auto& s_Item = s_Object->supportedTypes[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->supportedTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("properties") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->properties.size(); ++i)
	{
		auto& s_Item = s_Object->properties[i];
		SEntityPropertyDescriptor::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->properties.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("inputPins") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->inputPins.size(); ++i)
	{
		auto& s_Item = s_Object->inputPins[i];
		SEntityPinDescriptor::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->inputPins.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("outputPins") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->outputPins.size(); ++i)
	{
		auto& s_Item = s_Object->outputPins[i];
		SEntityPinDescriptor::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->outputPins.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntities.size(); ++i)
	{
		auto& s_Item = s_Object->exposedEntities[i];
		SExposedEntityDescriptor::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->exposedEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("referencedEntityTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->referencedEntityTypes.size(); ++i)
	{
		auto& s_Item = s_Object->referencedEntityTypes[i];
		ZResourceID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->referencedEntityTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntitiesTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntitiesTypes.size(); ++i)
	{
		auto& s_Item = s_Object->exposedEntitiesTypes[i];
		SExposedEntityTypeDescriptor::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->exposedEntitiesTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_GetItemBeingThrownBy::TypeInfo = ZHMTypeInfo("SCondition_GetItemBeingThrownBy", SCondition_GetItemBeingThrownBy::WriteJson, SCondition_GetItemBeingThrownBy::WriteSimpleJson);

void SCondition_GetItemBeingThrownBy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_GetItemBeingThrownBy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("character") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->character, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_GetItemBeingThrownBy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_GetItemBeingThrownBy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("character") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->character, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ICharacterCollision::TypeInfo = ZHMTypeInfo("ICharacterCollision", ICharacterCollision::WriteJson, ICharacterCollision::WriteSimpleJson);

void ICharacterCollision::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterCollision*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterCollision::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterCollision*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IAnimlayerSubactionInterface::TypeInfo = ZHMTypeInfo("IAnimlayerSubactionInterface", IAnimlayerSubactionInterface::WriteJson, IAnimlayerSubactionInterface::WriteSimpleJson);

void IAnimlayerSubactionInterface::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAnimlayerSubactionInterface*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAnimlayerSubactionInterface::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAnimlayerSubactionInterface*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_ThrownBy::TypeInfo = ZHMTypeInfo("SCondition_ThrownBy", SCondition_ThrownBy::WriteJson, SCondition_ThrownBy::WriteSimpleJson);

void SCondition_ThrownBy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_ThrownBy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_ThrownBy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_ThrownBy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZCautiousBackupGroup::TypeInfo = ZHMTypeInfo("ZCautiousBackupGroup", ZCautiousBackupGroup::WriteJson, ZCautiousBackupGroup::WriteSimpleJson);

void ZCautiousBackupGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCautiousBackupGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZCautiousBackupGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCautiousBackupGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IKeywordCalculatorProxy::TypeInfo = ZHMTypeInfo("IKeywordCalculatorProxy", IKeywordCalculatorProxy::WriteJson, IKeywordCalculatorProxy::WriteSimpleJson);

void IKeywordCalculatorProxy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKeywordCalculatorProxy*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IKeywordCalculatorProxy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKeywordCalculatorProxy*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IValueVector2Set::TypeInfo = ZHMTypeInfo("IValueVector2Set", IValueVector2Set::WriteJson, IValueVector2Set::WriteSimpleJson);

void IValueVector2Set::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueVector2Set*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueVector2Set::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueVector2Set*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SPIPMessageManagerProxySaveData::TypeInfo = ZHMTypeInfo("SPIPMessageManagerProxySaveData", SPIPMessageManagerProxySaveData::WriteJson, SPIPMessageManagerProxySaveData::WriteSimpleJson);

void SPIPMessageManagerProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPIPMessageManagerProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SPIPMessageManagerProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPIPMessageManagerProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

ZHMTypeInfo BoneId::TypeInfo = ZHMTypeInfo("BoneId", BoneId::WriteJson, BoneId::WriteSimpleJson);

void BoneId::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<BoneId*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void BoneId::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<BoneId*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZCombatOrder::TypeInfo = ZHMTypeInfo("ZCombatOrder", ZCombatOrder::WriteJson, ZCombatOrder::WriteSimpleJson);

void ZCombatOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCombatOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZCombatOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCombatOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IValueVector3Set::TypeInfo = ZHMTypeInfo("IValueVector3Set", IValueVector3Set::WriteJson, IValueVector3Set::WriteSimpleJson);

void IValueVector3Set::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueVector3Set*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueVector3Set::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueVector3Set*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IRemoteControlEntity::TypeInfo = ZHMTypeInfo("IRemoteControlEntity", IRemoteControlEntity::WriteJson, IRemoteControlEntity::WriteSimpleJson);

void IRemoteControlEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRemoteControlEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRemoteControlEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRemoteControlEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IPlaneEntity::TypeInfo = ZHMTypeInfo("IPlaneEntity", IPlaneEntity::WriteJson, IPlaneEntity::WriteSimpleJson);

void IPlaneEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPlaneEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPlaneEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPlaneEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorAliveConditionSaveData::TypeInfo = ZHMTypeInfo("SActorAliveConditionSaveData", SActorAliveConditionSaveData::WriteJson, SActorAliveConditionSaveData::WriteSimpleJson);

void SActorAliveConditionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAliveConditionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAliveConditionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAliveConditionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo ILookAtTriggerEntity::TypeInfo = ZHMTypeInfo("ILookAtTriggerEntity", ILookAtTriggerEntity::WriteJson, ILookAtTriggerEntity::WriteSimpleJson);

void ILookAtTriggerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ILookAtTriggerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ILookAtTriggerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ILookAtTriggerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo STokenID::TypeInfo = ZHMTypeInfo("STokenID", STokenID::WriteJson, STokenID::WriteSimpleJson);

void STokenID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STokenID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_iValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValid;
	p_Stream << "}";

	p_Stream << "}";
}

void STokenID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STokenID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_iValue") << ":";
	p_Stream << s_Object->m_iValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValid") << ":";
	p_Stream << s_Object->m_bValid;

	p_Stream << "}";
}

ZHMTypeInfo ZAccidentObserversGroup::TypeInfo = ZHMTypeInfo("ZAccidentObserversGroup", ZAccidentObserversGroup::WriteJson, ZAccidentObserversGroup::WriteSimpleJson);

void ZAccidentObserversGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAccidentObserversGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZAccidentObserversGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAccidentObserversGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsActorRoleBodyguard::TypeInfo = ZHMTypeInfo("SCondition_IsActorRoleBodyguard", SCondition_IsActorRoleBodyguard::WriteJson, SCondition_IsActorRoleBodyguard::WriteSimpleJson);

void SCondition_IsActorRoleBodyguard::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorRoleBodyguard*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_IsActorRoleBodyguard::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorRoleBodyguard*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SConversationEntry::TypeInfo = ZHMTypeInfo("SConversationEntry", SConversationEntry::WriteJson, SConversationEntry::WriteSimpleJson);

void SConversationEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConversationEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_role") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EConversationRole") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_role) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EConversationRole", static_cast<int>(s_Object->m_role))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sound") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorSoundDefs") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_sound) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_sound))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SConversationEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConversationEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_role") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EConversationRole", static_cast<int>(s_Object->m_role)));
	p_Stream << ",";

	p_Stream << JsonStr("m_sound") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_sound)));

	p_Stream << "}";
}

ZHMTypeInfo IBoundedPlaneEntity::TypeInfo = ZHMTypeInfo("IBoundedPlaneEntity", IBoundedPlaneEntity::WriteJson, IBoundedPlaneEntity::WriteSimpleJson);

void IBoundedPlaneEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoundedPlaneEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoundedPlaneEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoundedPlaneEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZStateEarlyoutBase::TypeInfo = ZHMTypeInfo("ZStateEarlyoutBase", ZStateEarlyoutBase::WriteJson, ZStateEarlyoutBase::WriteSimpleJson);

void ZStateEarlyoutBase::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZStateEarlyoutBase*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZStateEarlyoutBase::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZStateEarlyoutBase*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IAnimResourceEntity::TypeInfo = ZHMTypeInfo("IAnimResourceEntity", IAnimResourceEntity::WriteJson, IAnimResourceEntity::WriteSimpleJson);

void IAnimResourceEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAnimResourceEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAnimResourceEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAnimResourceEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SContractConfigResourceEntry::TypeInfo = ZHMTypeInfo("SContractConfigResourceEntry", SContractConfigResourceEntry::WriteJson, SContractConfigResourceEntry::WriteSimpleJson);

void SContractConfigResourceEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContractConfigResourceEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ContractRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->ContractRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SContractConfigResourceEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContractConfigResourceEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Id") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << ",";

	p_Stream << JsonStr("ContractRid") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->ContractRid, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SItemSpawnerSaveData::TypeInfo = ZHMTypeInfo("SItemSpawnerSaveData", SItemSpawnerSaveData::WriteJson, SItemSpawnerSaveData::WriteSimpleJson);

void SItemSpawnerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemSpawnerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bItemUpdateTransformChange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItemUpdateTransformChange;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemSpawnerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemSpawnerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bItemUpdateTransformChange") << ":";
	p_Stream << s_Object->m_bItemUpdateTransformChange;

	p_Stream << "}";
}

ZHMTypeInfo IBaseCharacter::TypeInfo = ZHMTypeInfo("IBaseCharacter", IBaseCharacter::WriteJson, IBaseCharacter::WriteSimpleJson);

void IBaseCharacter::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBaseCharacter*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBaseCharacter::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBaseCharacter*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CausedBy::TypeInfo = ZHMTypeInfo("SCondition_CausedBy", SCondition_CausedBy::WriteJson, SCondition_CausedBy::WriteSimpleJson);

void SCondition_CausedBy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CausedBy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("causalnode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->causalnode, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CausedBy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CausedBy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("causalnode") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->causalnode, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ITriggerListener::TypeInfo = ZHMTypeInfo("ITriggerListener", ITriggerListener::WriteJson, ITriggerListener::WriteSimpleJson);

void ITriggerListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITriggerListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITriggerListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITriggerListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ILocationSurface::TypeInfo = ZHMTypeInfo("ILocationSurface", ILocationSurface::WriteJson, ILocationSurface::WriteSimpleJson);

void ILocationSurface::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ILocationSurface*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ILocationSurface::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ILocationSurface*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SItemLeftHandUIData::TypeInfo = ZHMTypeInfo("SItemLeftHandUIData", SItemLeftHandUIData::WriteJson, SItemLeftHandUIData::WriteSimpleJson);

void SItemLeftHandUIData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemLeftHandUIData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemLeftHandUIData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemLeftHandUIData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << s_Object->bIllegal;

	p_Stream << "}";
}

ZHMTypeInfo SBoneScalesList::TypeInfo = ZHMTypeInfo("SBoneScalesList", SBoneScalesList::WriteJson, SBoneScalesList::WriteSimpleJson);

void SBoneScalesList::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneScalesList*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBoneScales") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneScales.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneScales[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
		SVector3::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBoneScales.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SBoneScalesList::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneScalesList*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBoneScales") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneScales.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneScales[i];
		SVector3::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBoneScales.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZER64::TypeInfo = ZHMTypeInfo("ZER64", ZER64::WriteJson, ZER64::WriteSimpleJson);

void ZER64::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZER64*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);
	p_Stream << "}";

	p_Stream << "}";
}

void ZER64::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZER64*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);

	p_Stream << "}";
}

ZHMTypeInfo SFooStruct::TypeInfo = ZHMTypeInfo("SFooStruct", SFooStruct::WriteJson, SFooStruct::WriteSimpleJson);

void SFooStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFooStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eTest") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_eTest;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sOther") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sOther);
	p_Stream << "}";

	p_Stream << "}";
}

void SFooStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFooStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eTest") << ":";
	p_Stream << s_Object->m_eTest;
	p_Stream << ",";

	p_Stream << JsonStr("m_sOther") << ":";
	p_Stream << JsonStr(s_Object->m_sOther);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_PreviousOwner::TypeInfo = ZHMTypeInfo("SCondition_PreviousOwner", SCondition_PreviousOwner::WriteJson, SCondition_PreviousOwner::WriteSimpleJson);

void SCondition_PreviousOwner::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_PreviousOwner*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("item") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->item, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_PreviousOwner::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_PreviousOwner*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("item") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->item, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SChairSaveData::TypeInfo = ZHMTypeInfo("SChairSaveData", SChairSaveData::WriteJson, SChairSaveData::WriteSimpleJson);

void SChairSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChairSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAttached;
	p_Stream << "}";

	p_Stream << "}";
}

void SChairSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChairSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << s_Object->m_bAttached;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MinExpired::TypeInfo = ZHMTypeInfo("SCondition_MinExpired", SCondition_MinExpired::WriteJson, SCondition_MinExpired::WriteSimpleJson);

void SCondition_MinExpired::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinExpired*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("time") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->time;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MinExpired::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinExpired*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("time") << ":";
	p_Stream << s_Object->time;

	p_Stream << "}";
}

ZHMTypeInfo IFixedConstraint::TypeInfo = ZHMTypeInfo("IFixedConstraint", IFixedConstraint::WriteJson, IFixedConstraint::WriteSimpleJson);

void IFixedConstraint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFixedConstraint*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IFixedConstraint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFixedConstraint*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCombatMetricsSaveData::TypeInfo = ZHMTypeInfo("SCombatMetricsSaveData", SCombatMetricsSaveData::WriteJson, SCombatMetricsSaveData::WriteSimpleJson);

void SCombatMetricsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatMetricsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CombatProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DeadVIPsOrContractTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DeadVIPsOrContractTargets.size(); ++i)
	{
		auto& s_Item = s_Object->m_DeadVIPsOrContractTargets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_DeadVIPsOrContractTargets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_DiscoveredVIPOrContractTargetBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_DiscoveredVIPOrContractTargetBodies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCombatMetricsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatMetricsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatProgress") << ":";
	p_Stream << s_Object->m_CombatProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_DeadVIPsOrContractTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DeadVIPsOrContractTargets.size(); ++i)
	{
		auto& s_Item = s_Object->m_DeadVIPsOrContractTargets[i];
		p_Stream << s_Item;

		if (i < s_Object->m_DeadVIPsOrContractTargets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_DiscoveredVIPOrContractTargetBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_DiscoveredVIPOrContractTargetBodies[i];
		p_Stream << s_Item;

		if (i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SMovementDrainPipeSaveData::TypeInfo = ZHMTypeInfo("SMovementDrainPipeSaveData", SMovementDrainPipeSaveData::WriteJson, SMovementDrainPipeSaveData::WriteSimpleJson);

void SMovementDrainPipeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDrainPipeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rDrainPipe") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDrainPipe;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementDrainPipeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDrainPipeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rDrainPipe") << ":";
	p_Stream << s_Object->m_rDrainPipe;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MaxSharedEventExpired::TypeInfo = ZHMTypeInfo("SCondition_MaxSharedEventExpired", SCondition_MaxSharedEventExpired::WriteJson, SCondition_MaxSharedEventExpired::WriteSimpleJson);

void SCondition_MaxSharedEventExpired::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxSharedEventExpired*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("time") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->time;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MaxSharedEventExpired::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MaxSharedEventExpired*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("time") << ":";
	p_Stream << s_Object->time;

	p_Stream << "}";
}

ZHMTypeInfo SLightFlickerEntitySaveData::TypeInfo = ZHMTypeInfo("SLightFlickerEntitySaveData", SLightFlickerEntitySaveData::WriteJson, SLightFlickerEntitySaveData::WriteSimpleJson);

void SLightFlickerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLightFlickerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bLightOn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLightOn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFlickerOn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFlickerOn;
	p_Stream << "}";

	p_Stream << "}";
}

void SLightFlickerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLightFlickerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bLightOn") << ":";
	p_Stream << s_Object->m_bLightOn;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFlickerOn") << ":";
	p_Stream << s_Object->m_bFlickerOn;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDistracted::TypeInfo = ZHMTypeInfo("SCondition_IsDistracted", SCondition_IsDistracted::WriteJson, SCondition_IsDistracted::WriteSimpleJson);

void SCondition_IsDistracted::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistracted*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_IsDistracted::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistracted*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorStandInEntitiesSaveData::TypeInfo = ZHMTypeInfo("SActorStandInEntitiesSaveData", SActorStandInEntitiesSaveData::WriteJson, SActorStandInEntitiesSaveData::WriteSimpleJson);

void SActorStandInEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorStandInEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorStandInSaveData") << "," << JsonStr("$val") << ":";
		SActorStandInSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorStandInEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorStandInEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SActorStandInSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_Current::TypeInfo = ZHMTypeInfo("SCondition_Current", SCondition_Current::WriteJson, SCondition_Current::WriteSimpleJson);

void SCondition_Current::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_Current*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAndUnhandled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAndUnhandled;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_Current::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_Current*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->type)));
	p_Stream << ",";

	p_Stream << JsonStr("nAndUnhandled") << ":";
	p_Stream << s_Object->nAndUnhandled;

	p_Stream << "}";
}

ZHMTypeInfo ZBitArray::TypeInfo = ZHMTypeInfo("ZBitArray", ZBitArray::WriteJson, ZBitArray::WriteSimpleJson);

void ZBitArray::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZBitArray*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBytes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBytes.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBytes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aBytes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSize;
	p_Stream << "}";

	p_Stream << "}";
}

void ZBitArray::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZBitArray*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBytes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBytes.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBytes[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_aBytes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSize") << ":";
	p_Stream << s_Object->m_nSize;

	p_Stream << "}";
}

ZHMTypeInfo SReasoningGrid::TypeInfo = ZHMTypeInfo("SReasoningGrid", SReasoningGrid::WriteJson, SReasoningGrid::WriteSimpleJson);

void SReasoningGrid::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SReasoningGrid*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_WaypointList") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_WaypointList.size(); ++i)
	{
		auto& s_Item = s_Object->m_WaypointList[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGWaypoint") << "," << JsonStr("$val") << ":";
		SGWaypoint::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_WaypointList.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_LowVisibilityBits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBitArray") << "," << JsonStr("$val") << ":";
	ZBitArray::WriteJson(&s_Object->m_LowVisibilityBits, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HighVisibilityBits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBitArray") << "," << JsonStr("$val") << ":";
	ZBitArray::WriteJson(&s_Object->m_HighVisibilityBits, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Properties") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGProperties") << "," << JsonStr("$val") << ":";
	SGProperties::WriteJson(&s_Object->m_Properties, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNodeCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNodeCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pVisibilityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_pVisibilityData.size(); ++i)
	{
		auto& s_Item = s_Object->m_pVisibilityData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_pVisibilityData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_deadEndData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBitArray") << "," << JsonStr("$val") << ":";
	ZBitArray::WriteJson(&s_Object->m_deadEndData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SReasoningGrid::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SReasoningGrid*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_WaypointList") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_WaypointList.size(); ++i)
	{
		auto& s_Item = s_Object->m_WaypointList[i];
		SGWaypoint::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_WaypointList.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_LowVisibilityBits") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->m_LowVisibilityBits, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_HighVisibilityBits") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->m_HighVisibilityBits, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Properties") << ":";
	SGProperties::WriteSimpleJson(&s_Object->m_Properties, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nNodeCount") << ":";
	p_Stream << s_Object->m_nNodeCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_pVisibilityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_pVisibilityData.size(); ++i)
	{
		auto& s_Item = s_Object->m_pVisibilityData[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_pVisibilityData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_deadEndData") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->m_deadEndData, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SDynamicObjectKeyValuePair::TypeInfo = ZHMTypeInfo("SDynamicObjectKeyValuePair", SDynamicObjectKeyValuePair::WriteJson, SDynamicObjectKeyValuePair::WriteSimpleJson);

void SDynamicObjectKeyValuePair::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicObjectKeyValuePair*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sKey") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sKey);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicObjectKeyValuePair::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicObjectKeyValuePair*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sKey") << ":";
	p_Stream << JsonStr(s_Object->sKey);
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->value, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_OnlyLegalItemsPickedUp::TypeInfo = ZHMTypeInfo("SCondition_OnlyLegalItemsPickedUp", SCondition_OnlyLegalItemsPickedUp::WriteJson, SCondition_OnlyLegalItemsPickedUp::WriteSimpleJson);

void SCondition_OnlyLegalItemsPickedUp::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_OnlyLegalItemsPickedUp*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->includeWeapons;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_OnlyLegalItemsPickedUp::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_OnlyLegalItemsPickedUp*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("includeWeapons") << ":";
	p_Stream << s_Object->includeWeapons;

	p_Stream << "}";
}

ZHMTypeInfo IDistanceConstraint::TypeInfo = ZHMTypeInfo("IDistanceConstraint", IDistanceConstraint::WriteJson, IDistanceConstraint::WriteSimpleJson);

void IDistanceConstraint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDistanceConstraint*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IDistanceConstraint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDistanceConstraint*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorProxySaveData::TypeInfo = ZHMTypeInfo("SActorProxySaveData", SActorProxySaveData::WriteJson, SActorProxySaveData::WriteSimpleJson);

void SActorProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo SActorProxiesSaveData::TypeInfo = ZHMTypeInfo("SActorProxiesSaveData", SActorProxiesSaveData::WriteJson, SActorProxiesSaveData::WriteSimpleJson);

void SActorProxiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProxiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorProxySaveData") << "," << JsonStr("$val") << ":";
		SActorProxySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorProxiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProxiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SActorProxySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SItemKeywordProxiesSaveData::TypeInfo = ZHMTypeInfo("SItemKeywordProxiesSaveData", SItemKeywordProxiesSaveData::WriteJson, SItemKeywordProxiesSaveData::WriteSimpleJson);

void SItemKeywordProxiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemKeywordProxySaveData") << "," << JsonStr("$val") << ":";
		SItemKeywordProxySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SItemKeywordProxiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SItemKeywordProxySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo STrapsSaveData::TypeInfo = ZHMTypeInfo("STrapsSaveData", STrapsSaveData::WriteJson, STrapsSaveData::WriteSimpleJson);

void STrapsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrapsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItsATrapSaveData") << "," << JsonStr("$val") << ":";
		SItsATrapSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STrapsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrapsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SItsATrapSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasGoal::TypeInfo = ZHMTypeInfo("SCondition_HasGoal", SCondition_HasGoal::WriteJson, SCondition_HasGoal::WriteSimpleJson);

void SCondition_HasGoal::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasGoal*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIGoal") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasGoal::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasGoal*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo ZHM5SequenceSkipManager::TypeInfo = ZHMTypeInfo("ZHM5SequenceSkipManager", ZHM5SequenceSkipManager::WriteJson, ZHM5SequenceSkipManager::WriteSimpleJson);

void ZHM5SequenceSkipManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZHM5SequenceSkipManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZHM5SequenceSkipManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZHM5SequenceSkipManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SPersistentEntitySaveDataList::TypeInfo = ZHMTypeInfo("SPersistentEntitySaveDataList", SPersistentEntitySaveDataList::WriteJson, SPersistentEntitySaveDataList::WriteSimpleJson);

void SPersistentEntitySaveDataList::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPersistentEntitySaveDataList*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityDatas[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SPersistentEntitySaveData") << "," << JsonStr("$val") << ":";
		SPersistentEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationKeys.size(); ++i)
	{
		auto& s_Item = s_Object->m_mDynamicObjectIDGenerationKeys[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_mDynamicObjectIDGenerationKeys.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_mDynamicObjectIDGenerationValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_mDynamicObjectIDGenerationValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SPersistentEntitySaveDataList::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPersistentEntitySaveDataList*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityDatas[i];
		SPersistentEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationKeys.size(); ++i)
	{
		auto& s_Item = s_Object->m_mDynamicObjectIDGenerationKeys[i];
		p_Stream << s_Item;

		if (i < s_Object->m_mDynamicObjectIDGenerationKeys.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_mDynamicObjectIDGenerationValues[i];
		p_Stream << s_Item;

		if (i < s_Object->m_mDynamicObjectIDGenerationValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsActorConscious::TypeInfo = ZHMTypeInfo("SCondition_IsActorConscious", SCondition_IsActorConscious::WriteJson, SCondition_IsActorConscious::WriteSimpleJson);

void SCondition_IsActorConscious::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorConscious*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Actors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->m_Actors, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsActorConscious::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsActorConscious*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Actors") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->m_Actors, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SConversationPart::TypeInfo = ZHMTypeInfo("SConversationPart", SConversationPart::WriteJson, SConversationPart::WriteSimpleJson);

void SConversationPart::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConversationPart*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_chance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_chance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_entries.size(); ++i)
	{
		auto& s_Item = s_Object->m_entries[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SConversationEntry") << "," << JsonStr("$val") << ":";
		SConversationEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_entries.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SConversationPart::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConversationPart*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_chance") << ":";
	p_Stream << s_Object->m_chance;
	p_Stream << ",";

	p_Stream << JsonStr("m_entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_entries.size(); ++i)
	{
		auto& s_Item = s_Object->m_entries[i];
		SConversationEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_entries.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IDramaPriorityModifier::TypeInfo = ZHMTypeInfo("IDramaPriorityModifier", IDramaPriorityModifier::WriteJson, IDramaPriorityModifier::WriteSimpleJson);

void IDramaPriorityModifier::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDramaPriorityModifier*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IDramaPriorityModifier::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IDramaPriorityModifier*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SHitmanSaveData::TypeInfo = ZHMTypeInfo("SHitmanSaveData", SHitmanSaveData::WriteJson, SHitmanSaveData::WriteSimpleJson);

void SHitmanSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHitmanSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_OutfitID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_OutfitID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHealth") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHealth;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Inventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Inventory, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Camera") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Camera, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eMovementType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EBaseMovementType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eMovementType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EBaseMovementType", static_cast<int>(s_Object->m_eMovementType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MovementData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_MovementData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLethalAgilityElementUsed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLethalAgilityElementUsed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsChangingClothes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsChangingClothes;
	p_Stream << "}";

	p_Stream << "}";
}

void SHitmanSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHitmanSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_OutfitID") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_OutfitID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHealth") << ":";
	p_Stream << s_Object->m_fHealth;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Inventory") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Inventory, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Camera") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Camera, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eMovementType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EBaseMovementType", static_cast<int>(s_Object->m_eMovementType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_MovementData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_MovementData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bLethalAgilityElementUsed") << ":";
	p_Stream << s_Object->m_bLethalAgilityElementUsed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsChangingClothes") << ":";
	p_Stream << s_Object->m_bIsChangingClothes;

	p_Stream << "}";
}

ZHMTypeInfo SHeroEscortSituationActors::TypeInfo = ZHMTypeInfo("SHeroEscortSituationActors", SHeroEscortSituationActors::WriteJson, SHeroEscortSituationActors::WriteSimpleJson);

void SHeroEscortSituationActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroEscortSituationActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituationActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroEscortSituationActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo SCharacterSpeakEntitySaveData::TypeInfo = ZHMTypeInfo("SCharacterSpeakEntitySaveData", SCharacterSpeakEntitySaveData::WriteJson, SCharacterSpeakEntitySaveData::WriteSimpleJson);

void SCharacterSpeakEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCharacterSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSeekPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRandomSelectionSeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRandomSelectionSeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWereSubtitlesSeen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWereSubtitlesSeen;
	p_Stream << "}";

	p_Stream << "}";
}

void SCharacterSpeakEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCharacterSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << s_Object->m_fSeekPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRandomSelectionSeed") << ":";
	p_Stream << s_Object->m_nRandomSelectionSeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWereSubtitlesSeen") << ":";
	p_Stream << s_Object->m_bWereSubtitlesSeen;

	p_Stream << "}";
}

ZHMTypeInfo IFogBoxEntity::TypeInfo = ZHMTypeInfo("IFogBoxEntity", IFogBoxEntity::WriteJson, IFogBoxEntity::WriteSimpleJson);

void IFogBoxEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFogBoxEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IFogBoxEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFogBoxEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_ShouldDistractionDiscardNewOcurrences::TypeInfo = ZHMTypeInfo("SCondition_ShouldDistractionDiscardNewOcurrences", SCondition_ShouldDistractionDiscardNewOcurrences::WriteJson, SCondition_ShouldDistractionDiscardNewOcurrences::WriteSimpleJson);

void SCondition_ShouldDistractionDiscardNewOcurrences::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_ShouldDistractionDiscardNewOcurrences*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("distraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->distraction, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_ShouldDistractionDiscardNewOcurrences::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_ShouldDistractionDiscardNewOcurrences*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("distraction") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->distraction, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ISituationListener::TypeInfo = ZHMTypeInfo("ISituationListener", ISituationListener::WriteJson, ISituationListener::WriteSimpleJson);

void ISituationListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISituationListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISituationListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISituationListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_MinSituationAge::TypeInfo = ZHMTypeInfo("SCondition_MinSituationAge", SCondition_MinSituationAge::WriteJson, SCondition_MinSituationAge::WriteSimpleJson);

void SCondition_MinSituationAge::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinSituationAge*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fMinAge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fMinAge;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_MinSituationAge::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_MinSituationAge*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("fMinAge") << ":";
	p_Stream << s_Object->fMinAge;

	p_Stream << "}";
}

ZHMTypeInfo ZCautiousVIPGroup::TypeInfo = ZHMTypeInfo("ZCautiousVIPGroup", ZCautiousVIPGroup::WriteJson, ZCautiousVIPGroup::WriteSimpleJson);

void ZCautiousVIPGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCautiousVIPGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZCautiousVIPGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCautiousVIPGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IKinematicLinkedPhysicsEntity::TypeInfo = ZHMTypeInfo("IKinematicLinkedPhysicsEntity", IKinematicLinkedPhysicsEntity::WriteJson, IKinematicLinkedPhysicsEntity::WriteSimpleJson);

void IKinematicLinkedPhysicsEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKinematicLinkedPhysicsEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IKinematicLinkedPhysicsEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKinematicLinkedPhysicsEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZEntitySingletonManager::TypeInfo = ZHMTypeInfo("ZEntitySingletonManager", ZEntitySingletonManager::WriteJson, ZEntitySingletonManager::WriteSimpleJson);

void ZEntitySingletonManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntitySingletonManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEntitySingletonManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntitySingletonManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZGameLobbyManager::TypeInfo = ZHMTypeInfo("ZGameLobbyManager", ZGameLobbyManager::WriteJson, ZGameLobbyManager::WriteSimpleJson);

void ZGameLobbyManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGameLobbyManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGameLobbyManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGameLobbyManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ICharacterLocationState::TypeInfo = ZHMTypeInfo("ICharacterLocationState", ICharacterLocationState::WriteJson, ICharacterLocationState::WriteSimpleJson);

void ICharacterLocationState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterLocationState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterLocationState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterLocationState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IHingeConstraint::TypeInfo = ZHMTypeInfo("IHingeConstraint", IHingeConstraint::WriteJson, IHingeConstraint::WriteSimpleJson);

void IHingeConstraint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHingeConstraint*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHingeConstraint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHingeConstraint*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsSituationOlderThanSharedEvent::TypeInfo = ZHMTypeInfo("SCondition_IsSituationOlderThanSharedEvent", SCondition_IsSituationOlderThanSharedEvent::WriteJson, SCondition_IsSituationOlderThanSharedEvent::WriteSimpleJson);

void SCondition_IsSituationOlderThanSharedEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSituationOlderThanSharedEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eSharedEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eSharedEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->eSharedEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsSituationOlderThanSharedEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSituationOlderThanSharedEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("eSharedEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->eSharedEvent)));

	p_Stream << "}";
}

ZHMTypeInfo SHeroCameraStandInSaveState::TypeInfo = ZHMTypeInfo("SHeroCameraStandInSaveState", SHeroCameraStandInSaveState::WriteJson, SHeroCameraStandInSaveState::WriteSimpleJson);

void SHeroCameraStandInSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroCameraStandInSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroCameraStandInSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroCameraStandInSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;

	p_Stream << "}";
}

ZHMTypeInfo ICollisionShapeListener::TypeInfo = ZHMTypeInfo("ICollisionShapeListener", ICollisionShapeListener::WriteJson, ICollisionShapeListener::WriteSimpleJson);

void ICollisionShapeListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICollisionShapeListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICollisionShapeListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICollisionShapeListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IEditorUpdateSupplier::TypeInfo = ZHMTypeInfo("IEditorUpdateSupplier", IEditorUpdateSupplier::WriteJson, IEditorUpdateSupplier::WriteSimpleJson);

void IEditorUpdateSupplier::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEditorUpdateSupplier*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEditorUpdateSupplier::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEditorUpdateSupplier*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SPatrolOrderSaveData::TypeInfo = ZHMTypeInfo("SPatrolOrderSaveData", SPatrolOrderSaveData::WriteJson, SPatrolOrderSaveData::WriteSimpleJson);

void SPatrolOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPatrolOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SPatrolOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPatrolOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZSentryGroup::TypeInfo = ZHMTypeInfo("ZSentryGroup", ZSentryGroup::WriteJson, ZSentryGroup::WriteSimpleJson);

void ZSentryGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSentryGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSentryGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSentryGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IShatterSystem::TypeInfo = ZHMTypeInfo("IShatterSystem", IShatterSystem::WriteJson, IShatterSystem::WriteSimpleJson);

void IShatterSystem::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IShatterSystem*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IShatterSystem::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IShatterSystem*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_PerceptibleEntityEndAfterMoveTo::TypeInfo = ZHMTypeInfo("SCondition_PerceptibleEntityEndAfterMoveTo", SCondition_PerceptibleEntityEndAfterMoveTo::WriteJson, SCondition_PerceptibleEntityEndAfterMoveTo::WriteSimpleJson);

void SCondition_PerceptibleEntityEndAfterMoveTo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_PerceptibleEntityEndAfterMoveTo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_PerceptibleEntityEndAfterMoveTo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_PerceptibleEntityEndAfterMoveTo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SIntelListDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SIntelListDisplayInfoArray_dummy", SIntelListDisplayInfoArray_dummy::WriteJson, SIntelListDisplayInfoArray_dummy::WriteSimpleJson);

void SIntelListDisplayInfoArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelListDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SIntelListDisplayInfo") << "," << JsonStr("$val") << ":";
		SIntelListDisplayInfo::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SIntelListDisplayInfoArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelListDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SIntelListDisplayInfo::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo IKeywordHolderListener::TypeInfo = ZHMTypeInfo("IKeywordHolderListener", IKeywordHolderListener::WriteJson, IKeywordHolderListener::WriteSimpleJson);

void IKeywordHolderListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKeywordHolderListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IKeywordHolderListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IKeywordHolderListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IShootTargetEntity::TypeInfo = ZHMTypeInfo("IShootTargetEntity", IShootTargetEntity::WriteJson, IShootTargetEntity::WriteSimpleJson);

void IShootTargetEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IShootTargetEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IShootTargetEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IShootTargetEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SSentryGroupSaveData::TypeInfo = ZHMTypeInfo("SSentryGroupSaveData", SSentryGroupSaveData::WriteJson, SSentryGroupSaveData::WriteSimpleJson);

void SSentryGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSentryZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastEscalateOrder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastEscalateOrder, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eActionPrompt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESentryActionPrompt") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eActionPrompt) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESentryActionPrompt", static_cast<int>(s_Object->m_eActionPrompt))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequestedAction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRequestedAction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowingWarning;
	p_Stream << "}";

	p_Stream << "}";
}

void SSentryGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << s_Object->m_rSentryZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastEscalateOrder") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastEscalateOrder, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eActionPrompt") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESentryActionPrompt", static_cast<int>(s_Object->m_eActionPrompt)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequestedAction") << ":";
	p_Stream << s_Object->m_bRequestedAction;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << s_Object->m_bShowingWarning;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsAccidentBystandingGuardSearching::TypeInfo = ZHMTypeInfo("SCondition_IsAccidentBystandingGuardSearching", SCondition_IsAccidentBystandingGuardSearching::WriteJson, SCondition_IsAccidentBystandingGuardSearching::WriteSimpleJson);

void SCondition_IsAccidentBystandingGuardSearching::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAccidentBystandingGuardSearching*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsAccidentBystandingGuardSearching::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsAccidentBystandingGuardSearching*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo IBoxVolumeEntity::TypeInfo = ZHMTypeInfo("IBoxVolumeEntity", IBoxVolumeEntity::WriteJson, IBoxVolumeEntity::WriteSimpleJson);

void IBoxVolumeEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoxVolumeEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoxVolumeEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoxVolumeEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IRenderMaterialEntity::TypeInfo = ZHMTypeInfo("IRenderMaterialEntity", IRenderMaterialEntity::WriteJson, IRenderMaterialEntity::WriteSimpleJson);

void IRenderMaterialEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderMaterialEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderMaterialEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderMaterialEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IBoneAnimator::TypeInfo = ZHMTypeInfo("IBoneAnimator", IBoneAnimator::WriteJson, IBoneAnimator::WriteSimpleJson);

void IBoneAnimator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneAnimator*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneAnimator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneAnimator*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IWaypoint::TypeInfo = ZHMTypeInfo("IWaypoint", IWaypoint::WriteJson, IWaypoint::WriteSimpleJson);

void IWaypoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IWaypoint*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IWaypoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IWaypoint*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IGameSoundManager::TypeInfo = ZHMTypeInfo("IGameSoundManager", IGameSoundManager::WriteJson, IGameSoundManager::WriteSimpleJson);

void IGameSoundManager::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGameSoundManager*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IGameSoundManager::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGameSoundManager*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IActor::TypeInfo = ZHMTypeInfo("IActor", IActor::WriteJson, IActor::WriteSimpleJson);

void IActor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsSharedEventExpired::TypeInfo = ZHMTypeInfo("SCondition_IsSharedEventExpired", SCondition_IsSharedEventExpired::WriteJson, SCondition_IsSharedEventExpired::WriteSimpleJson);

void SCondition_IsSharedEventExpired::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSharedEventExpired*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsSharedEventExpired::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsSharedEventExpired*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo ZFriskSuspectGroup::TypeInfo = ZHMTypeInfo("ZFriskSuspectGroup", ZFriskSuspectGroup::WriteJson, ZFriskSuspectGroup::WriteSimpleJson);

void ZFriskSuspectGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZFriskSuspectGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZFriskSuspectGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZFriskSuspectGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZDetectedInPrivateGroup::TypeInfo = ZHMTypeInfo("ZDetectedInPrivateGroup", ZDetectedInPrivateGroup::WriteJson, ZDetectedInPrivateGroup::WriteSimpleJson);

void ZDetectedInPrivateGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDetectedInPrivateGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZDetectedInPrivateGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDetectedInPrivateGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActionRadialArcDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SActionRadialArcDisplayInfoArray_dummy", SActionRadialArcDisplayInfoArray_dummy::WriteJson, SActionRadialArcDisplayInfoArray_dummy::WriteSimpleJson);

void SActionRadialArcDisplayInfoArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActionRadialArcDisplayInfo") << "," << JsonStr("$val") << ":";
		SActionRadialArcDisplayInfo::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActionRadialArcDisplayInfoArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SActionRadialArcDisplayInfo::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ICharacterFriskingState::TypeInfo = ZHMTypeInfo("ICharacterFriskingState", ICharacterFriskingState::WriteJson, ICharacterFriskingState::WriteSimpleJson);

void ICharacterFriskingState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterFriskingState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ICharacterFriskingState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ICharacterFriskingState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDistanceFromKnownToActualGreaterThan::TypeInfo = ZHMTypeInfo("SCondition_IsDistanceFromKnownToActualGreaterThan", SCondition_IsDistanceFromKnownToActualGreaterThan::WriteJson, SCondition_IsDistanceFromKnownToActualGreaterThan::WriteSimpleJson);

void SCondition_IsDistanceFromKnownToActualGreaterThan::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistanceFromKnownToActualGreaterThan*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("knownEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->knownEntity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("distance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->distance;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsDistanceFromKnownToActualGreaterThan::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistanceFromKnownToActualGreaterThan*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("knownEntity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->knownEntity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("distance") << ":";
	p_Stream << s_Object->distance;

	p_Stream << "}";
}

ZHMTypeInfo SInventoryMovementConfig::TypeInfo = ZHMTypeInfo("SInventoryMovementConfig", SInventoryMovementConfig::WriteJson, SInventoryMovementConfig::WriteSimpleJson);

void SInventoryMovementConfig::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryMovementConfig*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eItemHandlingRightHand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigItemHandling") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eItemHandlingRightHand) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingRightHand))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemHandlingLeftHand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigItemHandling") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eItemHandlingLeftHand) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingLeftHand))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eFormerEquippedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigFormerEquippedItems") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eFormerEquippedItems) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigFormerEquippedItems", static_cast<int>(s_Object->m_eFormerEquippedItems))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eCustomRule") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigCustomRule") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eCustomRule) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigCustomRule", static_cast<int>(s_Object->m_eCustomRule))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropBackHolsteredItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropBackHolsteredItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSlowAnimation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSlowAnimation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInstantInventoryChange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceInstantInventoryChange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCancelIfInventoryInUse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCancelIfInventoryInUse;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSafeDrop") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSafeDrop;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vSafeDropPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vSafeDropPosition, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryMovementConfig::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryMovementConfig*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eItemHandlingRightHand") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingRightHand)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemHandlingLeftHand") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingLeftHand)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eFormerEquippedItems") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigFormerEquippedItems", static_cast<int>(s_Object->m_eFormerEquippedItems)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eCustomRule") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigCustomRule", static_cast<int>(s_Object->m_eCustomRule)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropBackHolsteredItem") << ":";
	p_Stream << s_Object->m_bDropBackHolsteredItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSlowAnimation") << ":";
	p_Stream << s_Object->m_bSlowAnimation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInstantInventoryChange") << ":";
	p_Stream << s_Object->m_bForceInstantInventoryChange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCancelIfInventoryInUse") << ":";
	p_Stream << s_Object->m_bCancelIfInventoryInUse;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSafeDrop") << ":";
	p_Stream << s_Object->m_bSafeDrop;
	p_Stream << ",";

	p_Stream << JsonStr("m_vSafeDropPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vSafeDropPosition, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZMoveToOrder::TypeInfo = ZHMTypeInfo("ZMoveToOrder", ZMoveToOrder::WriteJson, ZMoveToOrder::WriteSimpleJson);

void ZMoveToOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZMoveToOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZMoveToOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZMoveToOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IValueColorRGBSet::TypeInfo = ZHMTypeInfo("IValueColorRGBSet", IValueColorRGBSet::WriteJson, IValueColorRGBSet::WriteSimpleJson);

void IValueColorRGBSet::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueColorRGBSet*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueColorRGBSet::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueColorRGBSet*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZInteractionGuideData::TypeInfo = ZHMTypeInfo("ZInteractionGuideData", ZInteractionGuideData::WriteJson, ZInteractionGuideData::WriteSimpleJson);

void ZInteractionGuideData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInteractionGuideData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZInteractionGuideData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInteractionGuideData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo ZEscortOutOrder::TypeInfo = ZHMTypeInfo("ZEscortOutOrder", ZEscortOutOrder::WriteJson, ZEscortOutOrder::WriteSimpleJson);

void ZEscortOutOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEscortOutOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEscortOutOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEscortOutOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsDistractionNewerThanCurrentOne::TypeInfo = ZHMTypeInfo("SCondition_IsDistractionNewerThanCurrentOne", SCondition_IsDistractionNewerThanCurrentOne::WriteJson, SCondition_IsDistractionNewerThanCurrentOne::WriteSimpleJson);

void SCondition_IsDistractionNewerThanCurrentOne::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistractionNewerThanCurrentOne*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("distraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->distraction, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsDistractionNewerThanCurrentOne::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsDistractionNewerThanCurrentOne*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("distraction") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->distraction, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IllegalWeaponDropped::TypeInfo = ZHMTypeInfo("SCondition_IllegalWeaponDropped", SCondition_IllegalWeaponDropped::WriteJson, SCondition_IllegalWeaponDropped::WriteSimpleJson);

void SCondition_IllegalWeaponDropped::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IllegalWeaponDropped*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->actor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IllegalWeaponDropped::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IllegalWeaponDropped*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("actor") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->actor, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo ZEntityReference::TypeInfo = ZHMTypeInfo("ZEntityReference", ZEntityReference::WriteJson, ZEntityReference::WriteSimpleJson);

void ZEntityReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_EntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZEntityID") << "," << JsonStr("$val") << ":";
	ZEntityID::WriteJson(&s_Object->m_EntityID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);
	p_Stream << "}";

	p_Stream << "}";
}

void ZEntityReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_EntityID") << ":";
	ZEntityID::WriteSimpleJson(&s_Object->m_EntityID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);

	p_Stream << "}";
}

ZHMTypeInfo IBoneWeightEntity::TypeInfo = ZHMTypeInfo("IBoneWeightEntity", IBoneWeightEntity::WriteJson, IBoneWeightEntity::WriteSimpleJson);

void IBoneWeightEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneWeightEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneWeightEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneWeightEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SInventoryUICache::TypeInfo = ZHMTypeInfo("SInventoryUICache", SInventoryUICache::WriteJson, SInventoryUICache::WriteSimpleJson);

void SInventoryUICache::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUICache*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mainslots") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslots.size(); ++i)
	{
		auto& s_Item = s_Object->mainslots[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryUISlot") << "," << JsonStr("$val") << ":";
		SInventoryUISlot::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->mainslots.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("otherslots") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->otherslots.size(); ++i)
	{
		auto& s_Item = s_Object->otherslots[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryUISlot") << "," << JsonStr("$val") << ":";
		SInventoryUISlot::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->otherslots.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SInventoryUICache::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUICache*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mainslots") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslots.size(); ++i)
	{
		auto& s_Item = s_Object->mainslots[i];
		SInventoryUISlot::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->mainslots.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("otherslots") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->otherslots.size(); ++i)
	{
		auto& s_Item = s_Object->otherslots[i];
		SInventoryUISlot::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->otherslots.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_Trigger::TypeInfo = ZHMTypeInfo("SCondition_Trigger", SCondition_Trigger::WriteJson, SCondition_Trigger::WriteSimpleJson);

void SCondition_Trigger::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_Trigger*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("bTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bTriggered;
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_Trigger::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_Trigger*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("bTriggered") << ":";
	p_Stream << s_Object->bTriggered;

	p_Stream << "}";
}

ZHMTypeInfo SHudMissionTimerControllerData::TypeInfo = ZHMTypeInfo("SHudMissionTimerControllerData", SHudMissionTimerControllerData::WriteJson, SHudMissionTimerControllerData::WriteSimpleJson);

void SHudMissionTimerControllerData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHudMissionTimerControllerData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fScoreGameTimeStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_fScoreGameTimeStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasIntroCutFired") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasIntroCutFired;
	p_Stream << "}";

	p_Stream << "}";
}

void SHudMissionTimerControllerData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHudMissionTimerControllerData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fScoreGameTimeStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_fScoreGameTimeStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasIntroCutFired") << ":";
	p_Stream << s_Object->m_bWasIntroCutFired;

	p_Stream << "}";
}

ZHMTypeInfo IAccessoryItem::TypeInfo = ZHMTypeInfo("IAccessoryItem", IAccessoryItem::WriteJson, IAccessoryItem::WriteSimpleJson);

void IAccessoryItem::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAccessoryItem*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAccessoryItem::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAccessoryItem*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IItemBase::TypeInfo = ZHMTypeInfo("IItemBase", IItemBase::WriteJson, IItemBase::WriteSimpleJson);

void IItemBase::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemBase*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IItemBase::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IItemBase*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SHUDPIPControllerSaveData::TypeInfo = ZHMTypeInfo("SHUDPIPControllerSaveData", SHUDPIPControllerSaveData::WriteJson, SHUDPIPControllerSaveData::WriteSimpleJson);

void SHUDPIPControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPIPControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPiPEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPiPEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDPIPControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPIPControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPiPEnabled") << ":";
	p_Stream << s_Object->m_bPiPEnabled;

	p_Stream << "}";
}

ZHMTypeInfo ZScopedER64::TypeInfo = ZHMTypeInfo("ZScopedER64", ZScopedER64::WriteJson, ZScopedER64::WriteSimpleJson);

void ZScopedER64::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZScopedER64*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_er64") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZER64") << "," << JsonStr("$val") << ":";
	ZER64::WriteJson(&s_Object->m_er64, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aScopePath[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void ZScopedER64::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZScopedER64*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_er64") << ":";
	ZER64::WriteSimpleJson(&s_Object->m_er64, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aScopePath[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

ZHMTypeInfo ZApproachOrder::TypeInfo = ZHMTypeInfo("ZApproachOrder", ZApproachOrder::WriteJson, ZApproachOrder::WriteSimpleJson);

void ZApproachOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZApproachOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZApproachOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZApproachOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IRemapCurveEntity::TypeInfo = ZHMTypeInfo("IRemapCurveEntity", IRemapCurveEntity::WriteJson, IRemapCurveEntity::WriteSimpleJson);

void IRemapCurveEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRemapCurveEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRemapCurveEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRemapCurveEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IHM5ForceMovementCallBack::TypeInfo = ZHMTypeInfo("IHM5ForceMovementCallBack", IHM5ForceMovementCallBack::WriteJson, IHM5ForceMovementCallBack::WriteSimpleJson);

void IHM5ForceMovementCallBack::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5ForceMovementCallBack*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5ForceMovementCallBack::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5ForceMovementCallBack*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SSecuritySystemRecorderSaveData::TypeInfo = ZHMTypeInfo("SSecuritySystemRecorderSaveData", SSecuritySystemRecorderSaveData::WriteJson, SSecuritySystemRecorderSaveData::WriteSimpleJson);

void SSecuritySystemRecorderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSecuritySystemRecorderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bHasRecordings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasRecordings;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFunctional;
	p_Stream << "}";

	p_Stream << "}";
}

void SSecuritySystemRecorderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSecuritySystemRecorderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bHasRecordings") << ":";
	p_Stream << s_Object->m_bHasRecordings;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << s_Object->m_bIsFunctional;

	p_Stream << "}";
}

ZHMTypeInfo STrajectoryTrackSaveData::TypeInfo = ZHMTypeInfo("STrajectoryTrackSaveData", STrajectoryTrackSaveData::WriteJson, STrajectoryTrackSaveData::WriteSimpleJson);

void STrajectoryTrackSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrajectoryTrackSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vOriginalEntityTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_vOriginalEntityTransform, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vTargetStartTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_vTargetStartTransform, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STrajectoryTrackSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrajectoryTrackSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vOriginalEntityTransform") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_vOriginalEntityTransform, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vTargetStartTransform") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_vTargetStartTransform, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SAIVisionBlockerSaveData::TypeInfo = ZHMTypeInfo("SAIVisionBlockerSaveData", SAIVisionBlockerSaveData::WriteJson, SAIVisionBlockerSaveData::WriteSimpleJson);

void SAIVisionBlockerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIVisionBlockerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SAIVisionBlockerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIVisionBlockerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

ZHMTypeInfo IGIProbeEntity::TypeInfo = ZHMTypeInfo("IGIProbeEntity", IGIProbeEntity::WriteJson, IGIProbeEntity::WriteSimpleJson);

void IGIProbeEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGIProbeEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IGIProbeEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IGIProbeEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo IAIGameplayConcept::TypeInfo = ZHMTypeInfo("IAIGameplayConcept", IAIGameplayConcept::WriteJson, IAIGameplayConcept::WriteSimpleJson);

void IAIGameplayConcept::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAIGameplayConcept*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAIGameplayConcept::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAIGameplayConcept*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsOfActorRank::TypeInfo = ZHMTypeInfo("SCondition_IsOfActorRank", SCondition_IsOfActorRank::WriteJson, SCondition_IsOfActorRank::WriteSimpleJson);

void SCondition_IsOfActorRank::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOfActorRank*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rank") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorRank") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->rank) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorRank", static_cast<int>(s_Object->rank))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_IsOfActorRank::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsOfActorRank*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("rank") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorRank", static_cast<int>(s_Object->rank)));

	p_Stream << "}";
}

ZHMTypeInfo IMetricValue::TypeInfo = ZHMTypeInfo("IMetricValue", IMetricValue::WriteJson, IMetricValue::WriteSimpleJson);

void IMetricValue::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMetricValue*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMetricValue::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMetricValue*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SCondition_IsCombatDisabled::TypeInfo = ZHMTypeInfo("SCondition_IsCombatDisabled", SCondition_IsCombatDisabled::WriteJson, SCondition_IsCombatDisabled::WriteSimpleJson);

void SCondition_IsCombatDisabled::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsCombatDisabled*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCondition_IsCombatDisabled::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_IsCombatDisabled*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

ZHMTypeInfo SActorIKControllerSaveData::TypeInfo = ZHMTypeInfo("SActorIKControllerSaveData", SActorIKControllerSaveData::WriteJson, SActorIKControllerSaveData::WriteSimpleJson);

void SActorIKControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorIKControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fRightHandWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRightHandWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLeftHandWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRightHandTargetWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRightHandTargetWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandTargetWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLeftHandTargetWeight;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorIKControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorIKControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fRightHandWeight") << ":";
	p_Stream << s_Object->m_fRightHandWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandWeight") << ":";
	p_Stream << s_Object->m_fLeftHandWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRightHandTargetWeight") << ":";
	p_Stream << s_Object->m_fRightHandTargetWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandTargetWeight") << ":";
	p_Stream << s_Object->m_fLeftHandTargetWeight;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_HasCustomDistractionStndSoundDef::TypeInfo = ZHMTypeInfo("SCondition_HasCustomDistractionStndSoundDef", SCondition_HasCustomDistractionStndSoundDef::WriteJson, SCondition_HasCustomDistractionStndSoundDef::WriteSimpleJson);

void SCondition_HasCustomDistractionStndSoundDef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasCustomDistractionStndSoundDef*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->entity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_HasCustomDistractionStndSoundDef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_HasCustomDistractionStndSoundDef*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entity") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->entity, p_Stream);

	p_Stream << "}";
}

ZHMTypeInfo SCondition_SituationIsType::TypeInfo = ZHMTypeInfo("SCondition_SituationIsType", SCondition_SituationIsType::WriteJson, SCondition_SituationIsType::WriteSimpleJson);

void SCondition_SituationIsType::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationIsType*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->situation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_SituationIsType::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_SituationIsType*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("situation") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->situation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->type)));

	p_Stream << "}";
}

ZHMTypeInfo SHeroEscortSituation2Actors::TypeInfo = ZHMTypeInfo("SHeroEscortSituation2Actors", SHeroEscortSituation2Actors::WriteJson, SHeroEscortSituation2Actors::WriteSimpleJson);

void SHeroEscortSituation2Actors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroEscortSituation2Actors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituation2Actors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroEscortSituation2Actors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

ZHMTypeInfo SCondition_CanInvestigateDistraction::TypeInfo = ZHMTypeInfo("SCondition_CanInvestigateDistraction", SCondition_CanInvestigateDistraction::WriteJson, SCondition_CanInvestigateDistraction::WriteSimpleJson);

void SCondition_CanInvestigateDistraction::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanInvestigateDistraction*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCondition_CanInvestigateDistraction::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCondition_CanInvestigateDistraction*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("target") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->target, p_Stream);

	p_Stream << "}";
}

