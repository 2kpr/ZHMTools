/*
 * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing.
 *
 * If you wish to regenerate this file because of a game update use Statman:
 * https://github.com/OrfeasZ/Statman
 */
#include "ZHMGen.h"
#include "ZHMProperties.h"

ZHMTypeInfo SDestructibleRuntimeConnnection::TypeInfo = ZHMTypeInfo("SDestructibleRuntimeConnnection", SDestructibleRuntimeConnnection::ToJson);

nlohmann::json SDestructibleRuntimeConnnection::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDestructibleRuntimeConnnection*>(p_Object);

	s_Json["m_nPieceIndex"] = {{ "$type", "uint16" }, { "$val", s_Object->m_nPieceIndex }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aConnections)
		{
			s_JsonArray.push_back({{ "$type", "uint16" }, { "$val", s_Item }});
		}

		s_Json["m_aConnections"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IUIDataListener::TypeInfo = ZHMTypeInfo("IUIDataListener", IUIDataListener::ToJson);

nlohmann::json IUIDataListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IUIDataListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo float4::TypeInfo = ZHMTypeInfo("float4", float4::ToJson);

nlohmann::json float4::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<float4*>(p_Object);

	s_Json["x"] = {{ "$type", "float32" }, { "$val", s_Object->x }};

	s_Json["y"] = {{ "$type", "float32" }, { "$val", s_Object->y }};

	s_Json["z"] = {{ "$type", "float32" }, { "$val", s_Object->z }};

	s_Json["w"] = {{ "$type", "float32" }, { "$val", s_Object->w }};

	return s_Json;
}

ZHMTypeInfo SGWaypoint::TypeInfo = ZHMTypeInfo("SGWaypoint", SGWaypoint::ToJson);

nlohmann::json SGWaypoint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGWaypoint*>(p_Object);

	s_Json["nNeighbor0"] = {{ "$type", "uint16" }, { "$val", s_Object->nNeighbor0 }};

	s_Json["nNeighbor1"] = {{ "$type", "uint16" }, { "$val", s_Object->nNeighbor1 }};

	s_Json["nNeighbor2"] = {{ "$type", "uint16" }, { "$val", s_Object->nNeighbor2 }};

	s_Json["nNeighbor3"] = {{ "$type", "uint16" }, { "$val", s_Object->nNeighbor3 }};

	s_Json["nNeighbor4"] = {{ "$type", "uint16" }, { "$val", s_Object->nNeighbor4 }};

	s_Json["nNeighbor5"] = {{ "$type", "uint16" }, { "$val", s_Object->nNeighbor5 }};

	s_Json["nNeighbor6"] = {{ "$type", "uint16" }, { "$val", s_Object->nNeighbor6 }};

	s_Json["nNeighbor7"] = {{ "$type", "uint16" }, { "$val", s_Object->nNeighbor7 }};

	s_Json["vPos"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->vPos) }};

	s_Json["nVisionDataOffset"] = {{ "$type", "uint32" }, { "$val", s_Object->nVisionDataOffset }};

	s_Json["nLayerIndex"] = {{ "$type", "int16" }, { "$val", s_Object->nLayerIndex }};

	return s_Json;
}

ZHMTypeInfo ZBitArray::TypeInfo = ZHMTypeInfo("ZBitArray", ZBitArray::ToJson);

nlohmann::json ZBitArray::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZBitArray*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBytes)
		{
			s_JsonArray.push_back({{ "$type", "uint8" }, { "$val", s_Item }});
		}

		s_Json["m_aBytes"] = s_JsonArray;
	}

	s_Json["m_nSize"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nSize }};

	return s_Json;
}

ZHMTypeInfo SGProperties::TypeInfo = ZHMTypeInfo("SGProperties", SGProperties::ToJson);

nlohmann::json SGProperties::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGProperties*>(p_Object);

	s_Json["vMin"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->vMin) }};

	s_Json["vMax"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->vMax) }};

	s_Json["nGridWidth"] = {{ "$type", "int32" }, { "$val", s_Object->nGridWidth }};

	s_Json["fGridSpacing"] = {{ "$type", "float32" }, { "$val", s_Object->fGridSpacing }};

	s_Json["nVisibilityRange"] = {{ "$type", "int32" }, { "$val", s_Object->nVisibilityRange }};

	return s_Json;
}

ZHMTypeInfo SReasoningGrid::TypeInfo = ZHMTypeInfo("SReasoningGrid", SReasoningGrid::ToJson);

nlohmann::json SReasoningGrid::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SReasoningGrid*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_WaypointList)
		{
			s_JsonArray.push_back({{ "$type", "SGWaypoint" }, { "$val", SGWaypoint::ToJson(&s_Item) }});
		}

		s_Json["m_WaypointList"] = s_JsonArray;
	}

	s_Json["m_LowVisibilityBits"] = {{ "$type", "ZBitArray" }, { "$val", ZBitArray::ToJson(&s_Object->m_LowVisibilityBits) }};

	s_Json["m_HighVisibilityBits"] = {{ "$type", "ZBitArray" }, { "$val", ZBitArray::ToJson(&s_Object->m_HighVisibilityBits) }};

	s_Json["m_Properties"] = {{ "$type", "SGProperties" }, { "$val", SGProperties::ToJson(&s_Object->m_Properties) }};

	s_Json["m_nNodeCount"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nNodeCount }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_pVisibilityData)
		{
			s_JsonArray.push_back({{ "$type", "uint8" }, { "$val", s_Item }});
		}

		s_Json["m_pVisibilityData"] = s_JsonArray;
	}

	s_Json["m_deadEndData"] = {{ "$type", "ZBitArray" }, { "$val", ZBitArray::ToJson(&s_Object->m_deadEndData) }};

	return s_Json;
}

ZHMTypeInfo STargetInfoObjectiveCondition::TypeInfo = ZHMTypeInfo("STargetInfoObjectiveCondition", STargetInfoObjectiveCondition::ToJson);

nlohmann::json STargetInfoObjectiveCondition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STargetInfoObjectiveCondition*>(p_Object);

	s_Json["header"] = {{ "$type", "ZString" }, { "$val", s_Object->header.c_str() }};

	s_Json["title"] = {{ "$type", "ZString" }, { "$val", s_Object->title.c_str() }};

	s_Json["icon"] = {{ "$type", "ZString" }, { "$val", s_Object->icon.c_str() }};

	s_Json["type"] = {{ "$type", "ZString" }, { "$val", s_Object->type.c_str() }};

	s_Json["hardCondition"] = {{ "$type", "bool" }, { "$val", s_Object->hardCondition }};

	return s_Json;
}

ZHMTypeInfo STargetInfoDisplayData::TypeInfo = ZHMTypeInfo("STargetInfoDisplayData", STargetInfoDisplayData::ToJson);

nlohmann::json STargetInfoDisplayData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STargetInfoDisplayData*>(p_Object);

	s_Json["npcName"] = {{ "$type", "ZString" }, { "$val", s_Object->npcName.c_str() }};

	s_Json["disguiseName"] = {{ "$type", "ZString" }, { "$val", s_Object->disguiseName.c_str() }};

	s_Json["objectiveType"] = {{ "$type", "ZString" }, { "$val", s_Object->objectiveType.c_str() }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->objectiveConditions)
		{
			s_JsonArray.push_back({{ "$type", "STargetInfoObjectiveCondition" }, { "$val", STargetInfoObjectiveCondition::ToJson(&s_Item) }});
		}

		s_Json["objectiveConditions"] = s_JsonArray;
	}

	s_Json["fX"] = {{ "$type", "int32" }, { "$val", s_Object->fX }};

	s_Json["fY"] = {{ "$type", "int32" }, { "$val", s_Object->fY }};

	s_Json["fAlpha"] = {{ "$type", "float32" }, { "$val", s_Object->fAlpha }};

	s_Json["bIsTarget"] = {{ "$type", "bool" }, { "$val", s_Object->bIsTarget }};

	return s_Json;
}

ZHMTypeInfo SLoadRuntimeResourceResult::TypeInfo = ZHMTypeInfo("SLoadRuntimeResourceResult", SLoadRuntimeResourceResult::ToJson);

nlohmann::json SLoadRuntimeResourceResult::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLoadRuntimeResourceResult*>(p_Object);

	s_Json["sFilePath"] = {{ "$type", "ZString" }, { "$val", s_Object->sFilePath.c_str() }};

	return s_Json;
}

ZHMTypeInfo IComponentInterface::TypeInfo = ZHMTypeInfo("IComponentInterface", IComponentInterface::ToJson);

nlohmann::json IComponentInterface::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IComponentInterface*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IParticleEmitterSourcesProvider::TypeInfo = ZHMTypeInfo("IParticleEmitterSourcesProvider", IParticleEmitterSourcesProvider::ToJson);

nlohmann::json IParticleEmitterSourcesProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IParticleEmitterSourcesProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZGameTime::TypeInfo = ZHMTypeInfo("ZGameTime", ZGameTime::ToJson);

nlohmann::json ZGameTime::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGameTime*>(p_Object);

	s_Json["m_nTicks"] = {{ "$type", "int64" }, { "$val", s_Object->m_nTicks }};

	return s_Json;
}

ZHMTypeInfo SDoorSaveData::TypeInfo = ZHMTypeInfo("SDoorSaveData", SDoorSaveData::ToJson);

nlohmann::json SDoorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDoorSaveData*>(p_Object);

	s_Json["m_nDoorState"] = {{ "$type", "int32" }, { "$val", s_Object->m_nDoorState }};

	s_Json["m_fAnimPercent"] = {{ "$type", "float32" }, { "$val", s_Object->m_fAnimPercent }};

	s_Json["m_fTargetAnimPercent"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTargetAnimPercent }};

	s_Json["m_tOpenTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tOpenTime) }};

	return s_Json;
}

ZHMTypeInfo SVector3::TypeInfo = ZHMTypeInfo("SVector3", SVector3::ToJson);

nlohmann::json SVector3::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVector3*>(p_Object);

	s_Json["x"] = {{ "$type", "float32" }, { "$val", s_Object->x }};

	s_Json["y"] = {{ "$type", "float32" }, { "$val", s_Object->y }};

	s_Json["z"] = {{ "$type", "float32" }, { "$val", s_Object->z }};

	return s_Json;
}

ZHMTypeInfo SVector4::TypeInfo = ZHMTypeInfo("SVector4", SVector4::ToJson);

nlohmann::json SVector4::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVector4*>(p_Object);

	s_Json["x"] = {{ "$type", "float32" }, { "$val", s_Object->x }};

	s_Json["y"] = {{ "$type", "float32" }, { "$val", s_Object->y }};

	s_Json["z"] = {{ "$type", "float32" }, { "$val", s_Object->z }};

	s_Json["w"] = {{ "$type", "float32" }, { "$val", s_Object->w }};

	return s_Json;
}

ZHMTypeInfo SAnimatedActorActOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorActOrderSaveData", SAnimatedActorActOrderSaveData::ToJson);

nlohmann::json SAnimatedActorActOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAnimatedActorActOrderSaveData*>(p_Object);

	s_Json["m_bOverrideExistingAct"] = {{ "$type", "bool" }, { "$val", s_Object->m_bOverrideExistingAct }};

	s_Json["m_nForcedAnimationNode"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nForcedAnimationNode }};

	s_Json["m_rChildNetworkAct"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rChildNetworkAct }};

	s_Json["m_rListener"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rListener }};

	s_Json["m_vOriginPosition"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vOriginPosition) }};

	s_Json["m_vOriginQuaternion"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_vOriginQuaternion) }};

	return s_Json;
}

ZHMTypeInfo ICausalNode::TypeInfo = ZHMTypeInfo("ICausalNode", ICausalNode::ToJson);

nlohmann::json ICausalNode::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICausalNode*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SGUIViewPort::TypeInfo = ZHMTypeInfo("SGUIViewPort", SGUIViewPort::ToJson);

nlohmann::json SGUIViewPort::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGUIViewPort*>(p_Object);

	s_Json["x"] = {{ "$type", "uint32" }, { "$val", s_Object->x }};

	s_Json["y"] = {{ "$type", "uint32" }, { "$val", s_Object->y }};

	s_Json["h"] = {{ "$type", "uint32" }, { "$val", s_Object->h }};

	s_Json["w"] = {{ "$type", "uint32" }, { "$val", s_Object->w }};

	return s_Json;
}

ZHMTypeInfo ZGuid::TypeInfo = ZHMTypeInfo("ZGuid", ZGuid::ToJson);

nlohmann::json ZGuid::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGuid*>(p_Object);

	s_Json["_a"] = {{ "$type", "uint32" }, { "$val", s_Object->_a }};

	s_Json["_b"] = {{ "$type", "uint16" }, { "$val", s_Object->_b }};

	s_Json["_c"] = {{ "$type", "uint16" }, { "$val", s_Object->_c }};

	s_Json["_d"] = {{ "$type", "uint8" }, { "$val", s_Object->_d }};

	s_Json["_e"] = {{ "$type", "uint8" }, { "$val", s_Object->_e }};

	s_Json["_f"] = {{ "$type", "uint8" }, { "$val", s_Object->_f }};

	s_Json["_g"] = {{ "$type", "uint8" }, { "$val", s_Object->_g }};

	s_Json["_h"] = {{ "$type", "uint8" }, { "$val", s_Object->_h }};

	s_Json["_i"] = {{ "$type", "uint8" }, { "$val", s_Object->_i }};

	s_Json["_j"] = {{ "$type", "uint8" }, { "$val", s_Object->_j }};

	s_Json["_k"] = {{ "$type", "uint8" }, { "$val", s_Object->_k }};

	return s_Json;
}

ZHMTypeInfo ZRepositoryID::TypeInfo = ZHMTypeInfo("ZRepositoryID", ZRepositoryID::ToJson);

nlohmann::json ZRepositoryID::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZRepositoryID*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SGameStatsWeapon::TypeInfo = ZHMTypeInfo("SGameStatsWeapon", SGameStatsWeapon::ToJson);

nlohmann::json SGameStatsWeapon::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGameStatsWeapon*>(p_Object);

	s_Json["m_WeaponRepositoryID"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_WeaponRepositoryID) }};

	s_Json["m_eItemWeapon"] = {{ "$type", "eItemType" }, { "$val", static_cast<int>(s_Object->m_eItemWeapon) }};

	s_Json["m_eSpecialSituation"] = {{ "$type", "EWeaponSpecialSituation" }, { "$val", static_cast<int>(s_Object->m_eSpecialSituation) }};

	s_Json["m_eAmmoType"] = {{ "$type", "eAmmoType" }, { "$val", static_cast<int>(s_Object->m_eAmmoType) }};

	return s_Json;
}

ZHMTypeInfo SActorAccessoryItemActionSaveData::TypeInfo = ZHMTypeInfo("SActorAccessoryItemActionSaveData", SActorAccessoryItemActionSaveData::ToJson);

nlohmann::json SActorAccessoryItemActionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorAccessoryItemActionSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo SAttentionHUDUIElement::TypeInfo = ZHMTypeInfo("SAttentionHUDUIElement", SAttentionHUDUIElement::ToJson);

nlohmann::json SAttentionHUDUIElement::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAttentionHUDUIElement*>(p_Object);

	s_Json["fAngle"] = {{ "$type", "float32" }, { "$val", s_Object->fAngle }};

	s_Json["fAttention"] = {{ "$type", "float32" }, { "$val", s_Object->fAttention }};

	s_Json["fAlpha"] = {{ "$type", "float32" }, { "$val", s_Object->fAlpha }};

	s_Json["fRadius"] = {{ "$type", "float32" }, { "$val", s_Object->fRadius }};

	s_Json["nColor"] = {{ "$type", "int32" }, { "$val", s_Object->nColor }};

	return s_Json;
}

ZHMTypeInfo SAttentionHUDUIElementArray_Dummy::TypeInfo = ZHMTypeInfo("SAttentionHUDUIElementArray_Dummy", SAttentionHUDUIElementArray_Dummy::ToJson);

nlohmann::json SAttentionHUDUIElementArray_Dummy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAttentionHUDUIElementArray_Dummy*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->dummy)
		{
			s_JsonArray.push_back({{ "$type", "SAttentionHUDUIElement" }, { "$val", SAttentionHUDUIElement::ToJson(&s_Item) }});
		}

		s_Json["dummy"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SUIGridCellPosition::TypeInfo = ZHMTypeInfo("SUIGridCellPosition", SUIGridCellPosition::ToJson);

nlohmann::json SUIGridCellPosition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SUIGridCellPosition*>(p_Object);

	s_Json["nColumnIndex"] = {{ "$type", "int32" }, { "$val", s_Object->nColumnIndex }};

	s_Json["nRowIndex"] = {{ "$type", "int32" }, { "$val", s_Object->nRowIndex }};

	s_Json["nColumnSpan"] = {{ "$type", "int32" }, { "$val", s_Object->nColumnSpan }};

	s_Json["nRowSpan"] = {{ "$type", "int32" }, { "$val", s_Object->nRowSpan }};

	return s_Json;
}

ZHMTypeInfo ZSituationOrder::TypeInfo = ZHMTypeInfo("ZSituationOrder", ZSituationOrder::ToJson);

nlohmann::json ZSituationOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZSituationOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZCombatOrder::TypeInfo = ZHMTypeInfo("ZCombatOrder", ZCombatOrder::ToJson);

nlohmann::json ZCombatOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZCombatOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IUIMapSpaceProvider::TypeInfo = ZHMTypeInfo("IUIMapSpaceProvider", IUIMapSpaceProvider::ToJson);

nlohmann::json IUIMapSpaceProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IUIMapSpaceProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SEntityTemplateReference::TypeInfo = ZHMTypeInfo("SEntityTemplateReference", SEntityTemplateReference::ToJson);

nlohmann::json SEntityTemplateReference::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityTemplateReference*>(p_Object);

	s_Json["entityID"] = {{ "$type", "uint64" }, { "$val", s_Object->entityID }};

	s_Json["externalSceneIndex"] = {{ "$type", "int32" }, { "$val", s_Object->externalSceneIndex }};

	s_Json["entityIndex"] = {{ "$type", "int32" }, { "$val", s_Object->entityIndex }};

	s_Json["exposedEntity"] = {{ "$type", "ZString" }, { "$val", s_Object->exposedEntity.c_str() }};

	return s_Json;
}

ZHMTypeInfo SEntityTemplateProperty::TypeInfo = ZHMTypeInfo("SEntityTemplateProperty", SEntityTemplateProperty::ToJson);

nlohmann::json SEntityTemplateProperty::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityTemplateProperty*>(p_Object);

	{
		auto s_PropertyName = ZHMProperties::PropertyToString(s_Object->nPropertyID);

		if (s_PropertyName.size() == 0)
			s_Json["nPropertyID"] = {{ "$type", "uint32" }, { "$val", s_Object->nPropertyID }};
		else
			s_Json["nPropertyID"] = {{ "$type", "uint32" }, { "$val", s_Object->nPropertyID }, { "$prop", s_PropertyName }};
	}

	s_Json["value"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->value) }};

	return s_Json;
}

ZHMTypeInfo SEntityTemplatePlatformSpecificProperty::TypeInfo = ZHMTypeInfo("SEntityTemplatePlatformSpecificProperty", SEntityTemplatePlatformSpecificProperty::ToJson);

nlohmann::json SEntityTemplatePlatformSpecificProperty::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityTemplatePlatformSpecificProperty*>(p_Object);

	s_Json["propertyValue"] = {{ "$type", "SEntityTemplateProperty" }, { "$val", SEntityTemplateProperty::ToJson(&s_Object->propertyValue) }};

	s_Json["platform"] = {{ "$type", "EVirtualPlatformID" }, { "$val", static_cast<int>(s_Object->platform) }};

	s_Json["postInit"] = {{ "$type", "bool" }, { "$val", s_Object->postInit }};

	return s_Json;
}

ZHMTypeInfo STemplateFactorySubEntity::TypeInfo = ZHMTypeInfo("STemplateFactorySubEntity", STemplateFactorySubEntity::ToJson);

nlohmann::json STemplateFactorySubEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STemplateFactorySubEntity*>(p_Object);

	s_Json["logicalParent"] = {{ "$type", "SEntityTemplateReference" }, { "$val", SEntityTemplateReference::ToJson(&s_Object->logicalParent) }};

	s_Json["entityTypeResourceIndex"] = {{ "$type", "int32" }, { "$val", s_Object->entityTypeResourceIndex }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->propertyValues)
		{
			s_JsonArray.push_back({{ "$type", "SEntityTemplateProperty" }, { "$val", SEntityTemplateProperty::ToJson(&s_Item) }});
		}

		s_Json["propertyValues"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->postInitPropertyValues)
		{
			s_JsonArray.push_back({{ "$type", "SEntityTemplateProperty" }, { "$val", SEntityTemplateProperty::ToJson(&s_Item) }});
		}

		s_Json["postInitPropertyValues"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->platformSpecificPropertyValues)
		{
			s_JsonArray.push_back({{ "$type", "SEntityTemplatePlatformSpecificProperty" }, { "$val", SEntityTemplatePlatformSpecificProperty::ToJson(&s_Item) }});
		}

		s_Json["platformSpecificPropertyValues"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SRotateEntitySaveData::TypeInfo = ZHMTypeInfo("SRotateEntitySaveData", SRotateEntitySaveData::ToJson);

nlohmann::json SRotateEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRotateEntitySaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_fXAxisSpeed"] = {{ "$type", "float32" }, { "$val", s_Object->m_fXAxisSpeed }};

	s_Json["m_fYAxisSpeed"] = {{ "$type", "float32" }, { "$val", s_Object->m_fYAxisSpeed }};

	s_Json["m_fZAxisSpeed"] = {{ "$type", "float32" }, { "$val", s_Object->m_fZAxisSpeed }};

	return s_Json;
}

ZHMTypeInfo SBodyPartDamageMultipliers::TypeInfo = ZHMTypeInfo("SBodyPartDamageMultipliers", SBodyPartDamageMultipliers::ToJson);

nlohmann::json SBodyPartDamageMultipliers::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBodyPartDamageMultipliers*>(p_Object);

	s_Json["m_fHeadDamageMultiplier"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHeadDamageMultiplier }};

	s_Json["m_fFaceDamageMultiplier"] = {{ "$type", "float32" }, { "$val", s_Object->m_fFaceDamageMultiplier }};

	s_Json["m_fArmDamageMultiplier"] = {{ "$type", "float32" }, { "$val", s_Object->m_fArmDamageMultiplier }};

	s_Json["m_fLArmDamageScalar"] = {{ "$type", "float32" }, { "$val", s_Object->m_fLArmDamageScalar }};

	s_Json["m_fRArmDamageScalar"] = {{ "$type", "float32" }, { "$val", s_Object->m_fRArmDamageScalar }};

	s_Json["m_fHandDamageMultiplier"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHandDamageMultiplier }};

	s_Json["m_fLHandDamageScalar"] = {{ "$type", "float32" }, { "$val", s_Object->m_fLHandDamageScalar }};

	s_Json["m_fRHandDamageScalar"] = {{ "$type", "float32" }, { "$val", s_Object->m_fRHandDamageScalar }};

	s_Json["m_fLegDamageMultiplier"] = {{ "$type", "float32" }, { "$val", s_Object->m_fLegDamageMultiplier }};

	s_Json["m_fLLegDamageScalar"] = {{ "$type", "float32" }, { "$val", s_Object->m_fLLegDamageScalar }};

	s_Json["m_fRLegDamageScalar"] = {{ "$type", "float32" }, { "$val", s_Object->m_fRLegDamageScalar }};

	s_Json["m_fTorsoDamageMultiplier"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTorsoDamageMultiplier }};

	s_Json["m_bApplyLeftRightScalars"] = {{ "$type", "bool" }, { "$val", s_Object->m_bApplyLeftRightScalars }};

	return s_Json;
}

ZHMTypeInfo SHeroItemActionSaveData::TypeInfo = ZHMTypeInfo("SHeroItemActionSaveData", SHeroItemActionSaveData::ToJson);

nlohmann::json SHeroItemActionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHeroItemActionSaveData*>(p_Object);

	s_Json["m_rItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItem }};

	return s_Json;
}

ZHMTypeInfo SColorRGB::TypeInfo = ZHMTypeInfo("SColorRGB", SColorRGB::ToJson);

nlohmann::json SColorRGB::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SColorRGB*>(p_Object);

	s_Json["r"] = {{ "$type", "float32" }, { "$val", s_Object->r }};

	s_Json["g"] = {{ "$type", "float32" }, { "$val", s_Object->g }};

	s_Json["b"] = {{ "$type", "float32" }, { "$val", s_Object->b }};

	return s_Json;
}

ZHMTypeInfo SColorRGBSaveData::TypeInfo = ZHMTypeInfo("SColorRGBSaveData", SColorRGBSaveData::ToJson);

nlohmann::json SColorRGBSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SColorRGBSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SColorRGB" }, { "$val", SColorRGB::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SValueIntSaveData::TypeInfo = ZHMTypeInfo("SValueIntSaveData", SValueIntSaveData::ToJson);

nlohmann::json SValueIntSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SValueIntSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "int32" }, { "$val", s_Item }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SValueBoolsSaveData::TypeInfo = ZHMTypeInfo("SValueBoolsSaveData", SValueBoolsSaveData::ToJson);

nlohmann::json SValueBoolsSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SValueBoolsSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "bool" }, { "$val", s_Item }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SValueFloatSaveData::TypeInfo = ZHMTypeInfo("SValueFloatSaveData", SValueFloatSaveData::ToJson);

nlohmann::json SValueFloatSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SValueFloatSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "float32" }, { "$val", s_Item }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SStateControllerSaveDataStruct::TypeInfo = ZHMTypeInfo("SStateControllerSaveDataStruct", SStateControllerSaveDataStruct::ToJson);

nlohmann::json SStateControllerSaveDataStruct::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SStateControllerSaveDataStruct*>(p_Object);

	s_Json["m_nIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_nIndex }};

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	return s_Json;
}

ZHMTypeInfo SStateControllerSaveData::TypeInfo = ZHMTypeInfo("SStateControllerSaveData", SStateControllerSaveData::ToJson);

nlohmann::json SStateControllerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SStateControllerSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SStateControllerSaveDataStruct" }, { "$val", SStateControllerSaveDataStruct::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SValueSaveData::TypeInfo = ZHMTypeInfo("SValueSaveData", SValueSaveData::ToJson);

nlohmann::json SValueSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SValueSaveData*>(p_Object);

	s_Json["m_ValueBool"] = {{ "$type", "SValueBoolsSaveData" }, { "$val", SValueBoolsSaveData::ToJson(&s_Object->m_ValueBool) }};

	s_Json["m_ValueFloat"] = {{ "$type", "SValueFloatSaveData" }, { "$val", SValueFloatSaveData::ToJson(&s_Object->m_ValueFloat) }};

	s_Json["m_ValueInt"] = {{ "$type", "SValueIntSaveData" }, { "$val", SValueIntSaveData::ToJson(&s_Object->m_ValueInt) }};

	s_Json["m_StateController"] = {{ "$type", "SStateControllerSaveData" }, { "$val", SStateControllerSaveData::ToJson(&s_Object->m_StateController) }};

	s_Json["m_ValueColorRGB"] = {{ "$type", "SColorRGBSaveData" }, { "$val", SColorRGBSaveData::ToJson(&s_Object->m_ValueColorRGB) }};

	return s_Json;
}

ZHMTypeInfo ZBehaviorTreeVariable::TypeInfo = ZHMTypeInfo("ZBehaviorTreeVariable", ZBehaviorTreeVariable::ToJson);

nlohmann::json ZBehaviorTreeVariable::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZBehaviorTreeVariable*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SConditionBase::TypeInfo = ZHMTypeInfo("SConditionBase", SConditionBase::ToJson);

nlohmann::json SConditionBase::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SConditionBase*>(p_Object);

	s_Json["eConditionType"] = {{ "$type", "ECompiledConditionType" }, { "$val", static_cast<int>(s_Object->eConditionType) }};

	s_Json["nConditionModifiers"] = {{ "$type", "uint32" }, { "$val", s_Object->nConditionModifiers }};

	s_Json["assignTo"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->assignTo) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsActorRoleBodyguard::TypeInfo = ZHMTypeInfo("SCondition_IsActorRoleBodyguard", SCondition_IsActorRoleBodyguard::ToJson);

nlohmann::json SCondition_IsActorRoleBodyguard::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsActorRoleBodyguard*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZSituationGroup::TypeInfo = ZHMTypeInfo("ZSituationGroup", ZSituationGroup::ToJson);

nlohmann::json ZSituationGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZSituationGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZAccidentObserversGroup::TypeInfo = ZHMTypeInfo("ZAccidentObserversGroup", ZAccidentObserversGroup::ToJson);

nlohmann::json ZAccidentObserversGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZAccidentObserversGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZOnlineSaveManager::TypeInfo = ZHMTypeInfo("ZOnlineSaveManager", ZOnlineSaveManager::ToJson);

nlohmann::json ZOnlineSaveManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZOnlineSaveManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsAccidentVictimDisposable::TypeInfo = ZHMTypeInfo("SCondition_IsAccidentVictimDisposable", SCondition_IsAccidentVictimDisposable::ToJson);

nlohmann::json SCondition_IsAccidentVictimDisposable::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsAccidentVictimDisposable*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	return s_Json;
}

ZHMTypeInfo ICharacterSpeakController::TypeInfo = ZHMTypeInfo("ICharacterSpeakController", ICharacterSpeakController::ToJson);

nlohmann::json ICharacterSpeakController::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterSpeakController*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IHM5GameMonitor::TypeInfo = ZHMTypeInfo("IHM5GameMonitor", IHM5GameMonitor::ToJson);

nlohmann::json IHM5GameMonitor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5GameMonitor*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_TargetsNotInSituation::TypeInfo = ZHMTypeInfo("SCondition_TargetsNotInSituation", SCondition_TargetsNotInSituation::ToJson);

nlohmann::json SCondition_TargetsNotInSituation::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_TargetsNotInSituation*>(p_Object);

	s_Json["type"] = {{ "$type", "ESituationType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["targets"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->targets) }};

	return s_Json;
}

ZHMTypeInfo IKeywordCalculatorProxy::TypeInfo = ZHMTypeInfo("IKeywordCalculatorProxy", IKeywordCalculatorProxy::ToJson);

nlohmann::json IKeywordCalculatorProxy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IKeywordCalculatorProxy*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZRuntimeResourceID::TypeInfo = ZHMTypeInfo("ZRuntimeResourceID", ZRuntimeResourceID::ToJson);

nlohmann::json ZRuntimeResourceID::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZRuntimeResourceID*>(p_Object);

	s_Json["m_IDHigh"] = {{ "$type", "uint32" }, { "$val", s_Object->m_IDHigh }};

	s_Json["m_IDLow"] = {{ "$type", "uint32" }, { "$val", s_Object->m_IDLow }};

	return s_Json;
}

ZHMTypeInfo SVideoDatabaseEntry::TypeInfo = ZHMTypeInfo("SVideoDatabaseEntry", SVideoDatabaseEntry::ToJson);

nlohmann::json SVideoDatabaseEntry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVideoDatabaseEntry*>(p_Object);

	s_Json["VideoId"] = {{ "$type", "ZString" }, { "$val", s_Object->VideoId.c_str() }};

	s_Json["RuntimeLocalizedVideoRid"] = {{ "$type", "ZRuntimeResourceID" }, { "$val", ZRuntimeResourceID::ToJson(&s_Object->RuntimeLocalizedVideoRid) }};

	return s_Json;
}

ZHMTypeInfo SConversationEntry::TypeInfo = ZHMTypeInfo("SConversationEntry", SConversationEntry::ToJson);

nlohmann::json SConversationEntry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SConversationEntry*>(p_Object);

	s_Json["m_role"] = {{ "$type", "EConversationRole" }, { "$val", static_cast<int>(s_Object->m_role) }};

	s_Json["m_sound"] = {{ "$type", "EActorSoundDefs" }, { "$val", static_cast<int>(s_Object->m_sound) }};

	return s_Json;
}

ZHMTypeInfo SConversationPart::TypeInfo = ZHMTypeInfo("SConversationPart", SConversationPart::ToJson);

nlohmann::json SConversationPart::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SConversationPart*>(p_Object);

	s_Json["m_chance"] = {{ "$type", "float32" }, { "$val", s_Object->m_chance }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_entries)
		{
			s_JsonArray.push_back({{ "$type", "SConversationEntry" }, { "$val", SConversationEntry::ToJson(&s_Item) }});
		}

		s_Json["m_entries"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_IllegalWeaponPickedUp::TypeInfo = ZHMTypeInfo("SCondition_IllegalWeaponPickedUp", SCondition_IllegalWeaponPickedUp::ToJson);

nlohmann::json SCondition_IllegalWeaponPickedUp::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IllegalWeaponPickedUp*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo SSituationGroupSaveData::TypeInfo = ZHMTypeInfo("SSituationGroupSaveData", SSituationGroupSaveData::ToJson);

nlohmann::json SSituationGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSituationGroupSaveData*>(p_Object);

	s_Json["m_sClassTypeName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sClassTypeName.c_str() }};

	s_Json["m_nSituation"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nSituation }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aActors)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aActors"] = s_JsonArray;
	}

	s_Json["m_nGroupID"] = {{ "$type", "int32" }, { "$val", s_Object->m_nGroupID }};

	s_Json["m_CustomData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_CustomData) }};

	return s_Json;
}

ZHMTypeInfo SSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SSituationMemberSaveData", SSituationMemberSaveData::ToJson);

nlohmann::json SSituationMemberSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSituationMemberSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	s_Json["m_eJoinReason"] = {{ "$type", "ESituationJoinReason" }, { "$val", static_cast<int>(s_Object->m_eJoinReason) }};

	s_Json["m_bIsOrderValid"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsOrderValid }};

	s_Json["m_OrderData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_OrderData) }};

	s_Json["m_PendingOrderData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_PendingOrderData) }};

	s_Json["m_rDramaRole"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rDramaRole }};

	s_Json["m_CustomData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_CustomData) }};

	return s_Json;
}

ZHMTypeInfo SSituationSaveData::TypeInfo = ZHMTypeInfo("SSituationSaveData", SSituationSaveData::ToJson);

nlohmann::json SSituationSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSituationSaveData*>(p_Object);

	s_Json["m_rSituation"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSituation }};

	s_Json["m_eType"] = {{ "$type", "ESituationType" }, { "$val", static_cast<int>(s_Object->m_eType) }};

	s_Json["m_nTargetSharedEntity"] = {{ "$type", "int32" }, { "$val", s_Object->m_nTargetSharedEntity }};

	s_Json["m_Data"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_Data) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aMemberData)
		{
			s_JsonArray.push_back({{ "$type", "SSituationMemberSaveData" }, { "$val", SSituationMemberSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aMemberData"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aGroupData)
		{
			s_JsonArray.push_back({{ "$type", "SSituationGroupSaveData" }, { "$val", SSituationGroupSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aGroupData"] = s_JsonArray;
	}

	s_Json["m_nNextGroupID"] = {{ "$type", "int32" }, { "$val", s_Object->m_nNextGroupID }};

	s_Json["m_situationStartTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_situationStartTime) }};

	s_Json["m_bSituationEnded"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSituationEnded }};

	return s_Json;
}

ZHMTypeInfo SActorKeywordProxySaveData::TypeInfo = ZHMTypeInfo("SActorKeywordProxySaveData", SActorKeywordProxySaveData::ToJson);

nlohmann::json SActorKeywordProxySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorKeywordProxySaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo SActorKeywordProxiesSaveData::TypeInfo = ZHMTypeInfo("SActorKeywordProxiesSaveData", SActorKeywordProxiesSaveData::ToJson);

nlohmann::json SActorKeywordProxiesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorKeywordProxiesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SActorKeywordProxySaveData" }, { "$val", SActorKeywordProxySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZCheckLastPositionGroup::TypeInfo = ZHMTypeInfo("ZCheckLastPositionGroup", ZCheckLastPositionGroup::ToJson);

nlohmann::json ZCheckLastPositionGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZCheckLastPositionGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SDynamicEnforcerCandidateSaveData::TypeInfo = ZHMTypeInfo("SDynamicEnforcerCandidateSaveData", SDynamicEnforcerCandidateSaveData::ToJson);

nlohmann::json SDynamicEnforcerCandidateSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDynamicEnforcerCandidateSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	s_Json["m_vPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_eType"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->m_eType) }};

	s_Json["m_fRadius"] = {{ "$type", "float32" }, { "$val", s_Object->m_fRadius }};

	return s_Json;
}

ZHMTypeInfo SDynamicEnforcerServiceSaveData::TypeInfo = ZHMTypeInfo("SDynamicEnforcerServiceSaveData", SDynamicEnforcerServiceSaveData::ToJson);

nlohmann::json SDynamicEnforcerServiceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDynamicEnforcerServiceSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aCandidates)
		{
			s_JsonArray.push_back({{ "$type", "SDynamicEnforcerCandidateSaveData" }, { "$val", SDynamicEnforcerCandidateSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aCandidates"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActorStandInSaveData::TypeInfo = ZHMTypeInfo("SActorStandInSaveData", SActorStandInSaveData::ToJson);

nlohmann::json SActorStandInSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorStandInSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo IOrderedEntity::TypeInfo = ZHMTypeInfo("IOrderedEntity", IOrderedEntity::ToJson);

nlohmann::json IOrderedEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IOrderedEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SRandomTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SRandomTimerEntitySaveData", SRandomTimerEntitySaveData::ToJson);

nlohmann::json SRandomTimerEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRandomTimerEntitySaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_bRegistered"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRegistered }};

	s_Json["m_fMinTime"] = {{ "$type", "float32" }, { "$val", s_Object->m_fMinTime }};

	s_Json["m_fMaxTime"] = {{ "$type", "float32" }, { "$val", s_Object->m_fMaxTime }};

	s_Json["m_fProbability"] = {{ "$type", "float32" }, { "$val", s_Object->m_fProbability }};

	s_Json["m_nRemaining"] = {{ "$type", "int32" }, { "$val", s_Object->m_nRemaining }};

	return s_Json;
}

ZHMTypeInfo SRandomTimerEntitiesSaveData::TypeInfo = ZHMTypeInfo("SRandomTimerEntitiesSaveData", SRandomTimerEntitiesSaveData::ToJson);

nlohmann::json SRandomTimerEntitiesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRandomTimerEntitiesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SRandomTimerEntitySaveData" }, { "$val", SRandomTimerEntitySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_ActualInsideSlice::TypeInfo = ZHMTypeInfo("SCondition_ActualInsideSlice", SCondition_ActualInsideSlice::ToJson);

nlohmann::json SCondition_ActualInsideSlice::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_ActualInsideSlice*>(p_Object);

	s_Json["a0"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a0) }};

	s_Json["a1"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a1) }};

	s_Json["fAngle"] = {{ "$type", "float32" }, { "$val", s_Object->fAngle }};

	s_Json["fConeWidth"] = {{ "$type", "float32" }, { "$val", s_Object->fConeWidth }};

	return s_Json;
}

ZHMTypeInfo SGetIActorPositionSaveData::TypeInfo = ZHMTypeInfo("SGetIActorPositionSaveData", SGetIActorPositionSaveData::ToJson);

nlohmann::json SGetIActorPositionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGetIActorPositionSaveData*>(p_Object);

	s_Json["m_StoredActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_StoredActor }};

	return s_Json;
}

ZHMTypeInfo SFSMSaveData::TypeInfo = ZHMTypeInfo("SFSMSaveData", SFSMSaveData::ToJson);

nlohmann::json SFSMSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SFSMSaveData*>(p_Object);

	s_Json["m_eStateStatus"] = {{ "$type", "EFSMStateStatus" }, { "$val", static_cast<int>(s_Object->m_eStateStatus) }};

	s_Json["m_state"] = {{ "$type", "int32" }, { "$val", s_Object->m_state }};

	s_Json["m_prevState"] = {{ "$type", "int32" }, { "$val", s_Object->m_prevState }};

	s_Json["m_tCurrentStateEnterTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tCurrentStateEnterTime) }};

	return s_Json;
}

ZHMTypeInfo SSentryGroupSaveData::TypeInfo = ZHMTypeInfo("SSentryGroupSaveData", SSentryGroupSaveData::ToJson);

nlohmann::json SSentryGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSentryGroupSaveData*>(p_Object);

	s_Json["m_rTarget"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rTarget }};

	s_Json["m_pLeader"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pLeader }};

	s_Json["m_rSentryZone"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSentryZone }};

	s_Json["m_tLastEscalateOrder"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastEscalateOrder) }};

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_eActionPrompt"] = {{ "$type", "ESentryActionPrompt" }, { "$val", static_cast<int>(s_Object->m_eActionPrompt) }};

	s_Json["m_bRequestedAction"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRequestedAction }};

	s_Json["m_bShowingWarning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bShowingWarning }};

	return s_Json;
}

ZHMTypeInfo SHUDTimerControllerSaveData::TypeInfo = ZHMTypeInfo("SHUDTimerControllerSaveData", SHUDTimerControllerSaveData::ToJson);

nlohmann::json SHUDTimerControllerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHUDTimerControllerSaveData*>(p_Object);

	s_Json["m_pCurrentInstance"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pCurrentInstance }};

	return s_Json;
}

ZHMTypeInfo SVector2::TypeInfo = ZHMTypeInfo("SVector2", SVector2::ToJson);

nlohmann::json SVector2::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVector2*>(p_Object);

	s_Json["x"] = {{ "$type", "float32" }, { "$val", s_Object->x }};

	s_Json["y"] = {{ "$type", "float32" }, { "$val", s_Object->y }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsExpired::TypeInfo = ZHMTypeInfo("SCondition_IsExpired", SCondition_IsExpired::ToJson);

nlohmann::json SCondition_IsExpired::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsExpired*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["type"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["tTime"] = {{ "$type", "float32" }, { "$val", s_Object->tTime }};

	return s_Json;
}

ZHMTypeInfo SCrowdPoseBoneSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseBoneSaveData", SCrowdPoseBoneSaveData::ToJson);

nlohmann::json SCrowdPoseBoneSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdPoseBoneSaveData*>(p_Object);

	s_Json["mQuaterion"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mQuaterion) }};

	s_Json["mTranslation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mTranslation) }};

	return s_Json;
}

ZHMTypeInfo SCrowdPoseSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseSaveData", SCrowdPoseSaveData::ToJson);

nlohmann::json SCrowdPoseSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdPoseSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBones)
		{
			s_JsonArray.push_back({{ "$type", "SCrowdPoseBoneSaveData" }, { "$val", SCrowdPoseBoneSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aBones"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCrowdPoseCollectionSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseCollectionSaveData", SCrowdPoseCollectionSaveData::ToJson);

nlohmann::json SCrowdPoseCollectionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdPoseCollectionSaveData*>(p_Object);

	s_Json["m_id"] = {{ "$type", "uint64" }, { "$val", s_Object->m_id }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aPoses)
		{
			s_JsonArray.push_back({{ "$type", "SCrowdPoseSaveData" }, { "$val", SCrowdPoseSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aPoses"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCrowdDeadPoseRepositorySaveData::TypeInfo = ZHMTypeInfo("SCrowdDeadPoseRepositorySaveData", SCrowdDeadPoseRepositorySaveData::ToJson);

nlohmann::json SCrowdDeadPoseRepositorySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdDeadPoseRepositorySaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aPoseCollections)
		{
			s_JsonArray.push_back({{ "$type", "SCrowdPoseCollectionSaveData" }, { "$val", SCrowdPoseCollectionSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aPoseCollections"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SItemKeywordProxySaveData::TypeInfo = ZHMTypeInfo("SItemKeywordProxySaveData", SItemKeywordProxySaveData::ToJson);

nlohmann::json SItemKeywordProxySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemKeywordProxySaveData*>(p_Object);

	s_Json["m_rItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItem }};

	return s_Json;
}

ZHMTypeInfo SCondition_AreVisibleWeaponsIllegal::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleWeaponsIllegal", SCondition_AreVisibleWeaponsIllegal::ToJson);

nlohmann::json SCondition_AreVisibleWeaponsIllegal::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_AreVisibleWeaponsIllegal*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo ZRepositionOrder::TypeInfo = ZHMTypeInfo("ZRepositionOrder", ZRepositionOrder::ToJson);

nlohmann::json ZRepositionOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZRepositionOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SExternalEntityTemplatePinConnection::TypeInfo = ZHMTypeInfo("SExternalEntityTemplatePinConnection", SExternalEntityTemplatePinConnection::ToJson);

nlohmann::json SExternalEntityTemplatePinConnection::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SExternalEntityTemplatePinConnection*>(p_Object);

	s_Json["fromEntity"] = {{ "$type", "SEntityTemplateReference" }, { "$val", SEntityTemplateReference::ToJson(&s_Object->fromEntity) }};

	s_Json["toEntity"] = {{ "$type", "SEntityTemplateReference" }, { "$val", SEntityTemplateReference::ToJson(&s_Object->toEntity) }};

	s_Json["fromPinName"] = {{ "$type", "ZString" }, { "$val", s_Object->fromPinName.c_str() }};

	s_Json["toPinName"] = {{ "$type", "ZString" }, { "$val", s_Object->toPinName.c_str() }};

	s_Json["constantPinValue"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->constantPinValue) }};

	return s_Json;
}

ZHMTypeInfo SEntityTemplatePinConnection::TypeInfo = ZHMTypeInfo("SEntityTemplatePinConnection", SEntityTemplatePinConnection::ToJson);

nlohmann::json SEntityTemplatePinConnection::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityTemplatePinConnection*>(p_Object);

	s_Json["fromID"] = {{ "$type", "int32" }, { "$val", s_Object->fromID }};

	s_Json["toID"] = {{ "$type", "int32" }, { "$val", s_Object->toID }};

	s_Json["fromPinName"] = {{ "$type", "ZString" }, { "$val", s_Object->fromPinName.c_str() }};

	s_Json["toPinName"] = {{ "$type", "ZString" }, { "$val", s_Object->toPinName.c_str() }};

	s_Json["constantPinValue"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->constantPinValue) }};

	return s_Json;
}

ZHMTypeInfo SCrowdBodySaveData::TypeInfo = ZHMTypeInfo("SCrowdBodySaveData", SCrowdBodySaveData::ToJson);

nlohmann::json SCrowdBodySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdBodySaveData*>(p_Object);

	s_Json["m_pCorpseBodybagEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pCorpseBodybagEntity }};

	s_Json["m_rCrowdEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCrowdEntity }};

	s_Json["m_iActorIndex"] = {{ "$type", "uint16" }, { "$val", s_Object->m_iActorIndex }};

	s_Json["m_rPerceptibleEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rPerceptibleEntity }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aKnownBy)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aKnownBy"] = s_JsonArray;
	}

	s_Json["m_tStart"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tStart) }};

	s_Json["m_bManaged"] = {{ "$type", "bool" }, { "$val", s_Object->m_bManaged }};

	s_Json["m_rBagSharedKnowledge"] = {{ "$type", "int32" }, { "$val", s_Object->m_rBagSharedKnowledge }};

	return s_Json;
}

ZHMTypeInfo SCrowdServiceSaveData::TypeInfo = ZHMTypeInfo("SCrowdServiceSaveData", SCrowdServiceSaveData::ToJson);

nlohmann::json SCrowdServiceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdServiceSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aDeadBodies)
		{
			s_JsonArray.push_back({{ "$type", "SCrowdBodySaveData" }, { "$val", SCrowdBodySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aDeadBodies"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aPerceptiblePool)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aPerceptiblePool"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aPerceptibleActors)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aPerceptibleActors"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SBehaviorTreeEntityReference::TypeInfo = ZHMTypeInfo("SBehaviorTreeEntityReference", SBehaviorTreeEntityReference::ToJson);

nlohmann::json SBehaviorTreeEntityReference::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBehaviorTreeEntityReference*>(p_Object);

	s_Json["m_bList"] = {{ "$type", "bool" }, { "$val", s_Object->m_bList }};

	s_Json["m_sName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sName.c_str() }};

	return s_Json;
}

ZHMTypeInfo SBehaviorTreeInputPinCondition::TypeInfo = ZHMTypeInfo("SBehaviorTreeInputPinCondition", SBehaviorTreeInputPinCondition::ToJson);

nlohmann::json SBehaviorTreeInputPinCondition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	s_Json["m_sName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sName.c_str() }};

	return s_Json;
}

ZHMTypeInfo SBehaviorTreeInfo::TypeInfo = ZHMTypeInfo("SBehaviorTreeInfo", SBehaviorTreeInfo::ToJson);

nlohmann::json SBehaviorTreeInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBehaviorTreeInfo*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_references)
		{
			s_JsonArray.push_back({{ "$type", "SBehaviorTreeEntityReference" }, { "$val", SBehaviorTreeEntityReference::ToJson(&s_Item) }});
		}

		s_Json["m_references"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_inputPinConditions)
		{
			s_JsonArray.push_back({{ "$type", "SBehaviorTreeInputPinCondition" }, { "$val", SBehaviorTreeInputPinCondition::ToJson(&s_Item) }});
		}

		s_Json["m_inputPinConditions"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IActListener::TypeInfo = ZHMTypeInfo("IActListener", IActListener::ToJson);

nlohmann::json IActListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IActListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsEqual::TypeInfo = ZHMTypeInfo("SCondition_IsEqual", SCondition_IsEqual::ToJson);

nlohmann::json SCondition_IsEqual::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsEqual*>(p_Object);

	s_Json["a"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a) }};

	s_Json["b"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->b) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsSituationOlderThanSharedEvent::TypeInfo = ZHMTypeInfo("SCondition_IsSituationOlderThanSharedEvent", SCondition_IsSituationOlderThanSharedEvent::ToJson);

nlohmann::json SCondition_IsSituationOlderThanSharedEvent::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsSituationOlderThanSharedEvent*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["eSharedEvent"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->eSharedEvent) }};

	return s_Json;
}

ZHMTypeInfo SRenderVideoPlayerSaveData::TypeInfo = ZHMTypeInfo("SRenderVideoPlayerSaveData", SRenderVideoPlayerSaveData::ToJson);

nlohmann::json SRenderVideoPlayerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRenderVideoPlayerSaveData*>(p_Object);

	s_Json["m_bPlaying"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPlaying }};

	s_Json["m_bPaused"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPaused }};

	s_Json["m_bLooping"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLooping }};

	s_Json["m_bUseAlpha"] = {{ "$type", "bool" }, { "$val", s_Object->m_bUseAlpha }};

	s_Json["m_bFirstFrame"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFirstFrame }};

	s_Json["m_bRunning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRunning }};

	s_Json["m_bVideoError"] = {{ "$type", "bool" }, { "$val", s_Object->m_bVideoError }};

	s_Json["m_bShouldBeStopped"] = {{ "$type", "bool" }, { "$val", s_Object->m_bShouldBeStopped }};

	s_Json["m_LastVisible"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_LastVisible) }};

	s_Json["m_StartTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_StartTime) }};

	s_Json["m_RunTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_RunTime) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsDebugBuild::TypeInfo = ZHMTypeInfo("SCondition_IsDebugBuild", SCondition_IsDebugBuild::ToJson);

nlohmann::json SCondition_IsDebugBuild::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDebugBuild*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZResourceID::TypeInfo = ZHMTypeInfo("ZResourceID", ZResourceID::ToJson);

nlohmann::json ZResourceID::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZResourceID*>(p_Object);

	s_Json["m_uri"] = {{ "$type", "ZString" }, { "$val", s_Object->m_uri.c_str() }};

	return s_Json;
}

ZHMTypeInfo ZPatrolGroup::TypeInfo = ZHMTypeInfo("ZPatrolGroup", ZPatrolGroup::ToJson);

nlohmann::json ZPatrolGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZPatrolGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SMovementDrainPipeSaveData::TypeInfo = ZHMTypeInfo("SMovementDrainPipeSaveData", SMovementDrainPipeSaveData::ToJson);

nlohmann::json SMovementDrainPipeSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMovementDrainPipeSaveData*>(p_Object);

	s_Json["m_rDrainPipe"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rDrainPipe }};

	return s_Json;
}

ZHMTypeInfo SHeroEscortSituationActors::TypeInfo = ZHMTypeInfo("SHeroEscortSituationActors", SHeroEscortSituationActors::ToJson);

nlohmann::json SHeroEscortSituationActors::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHeroEscortSituationActors*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo IRoomEntity::TypeInfo = ZHMTypeInfo("IRoomEntity", IRoomEntity::ToJson);

nlohmann::json IRoomEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRoomEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_SituationHuntTarget::TypeInfo = ZHMTypeInfo("SCondition_SituationHuntTarget", SCondition_SituationHuntTarget::ToJson);

nlohmann::json SCondition_SituationHuntTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SituationHuntTarget*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	return s_Json;
}

ZHMTypeInfo SAIEventSaveData::TypeInfo = ZHMTypeInfo("SAIEventSaveData", SAIEventSaveData::ToJson);

nlohmann::json SAIEventSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAIEventSaveData*>(p_Object);

	s_Json["m_eType"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->m_eType) }};

	s_Json["m_bHandled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHandled }};

	s_Json["m_nStart"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_nStart) }};

	s_Json["m_nEnd"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_nEnd) }};

	return s_Json;
}

ZHMTypeInfo SItemSpawnerSaveData::TypeInfo = ZHMTypeInfo("SItemSpawnerSaveData", SItemSpawnerSaveData::ToJson);

nlohmann::json SItemSpawnerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemSpawnerSaveData*>(p_Object);

	s_Json["m_bItemUpdateTransformChange"] = {{ "$type", "bool" }, { "$val", s_Object->m_bItemUpdateTransformChange }};

	return s_Json;
}

ZHMTypeInfo SContractConfigResourceEntry::TypeInfo = ZHMTypeInfo("SContractConfigResourceEntry", SContractConfigResourceEntry::ToJson);

nlohmann::json SContractConfigResourceEntry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SContractConfigResourceEntry*>(p_Object);

	s_Json["Id"] = {{ "$type", "ZString" }, { "$val", s_Object->Id.c_str() }};

	s_Json["ContractRid"] = {{ "$type", "ZRuntimeResourceID" }, { "$val", ZRuntimeResourceID::ToJson(&s_Object->ContractRid) }};

	return s_Json;
}

ZHMTypeInfo SFontDefinition::TypeInfo = ZHMTypeInfo("SFontDefinition", SFontDefinition::ToJson);

nlohmann::json SFontDefinition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SFontDefinition*>(p_Object);

	s_Json["sFontId"] = {{ "$type", "ZString" }, { "$val", s_Object->sFontId.c_str() }};

	s_Json["sFontName"] = {{ "$type", "ZString" }, { "$val", s_Object->sFontName.c_str() }};

	s_Json["eFontFlags"] = {{ "$type", "EFontFlags" }, { "$val", static_cast<int>(s_Object->eFontFlags) }};

	s_Json["fScaleFactor"] = {{ "$type", "float32" }, { "$val", s_Object->fScaleFactor }};

	return s_Json;
}

ZHMTypeInfo SFontLibraryDefinition::TypeInfo = ZHMTypeInfo("SFontLibraryDefinition", SFontLibraryDefinition::ToJson);

nlohmann::json SFontLibraryDefinition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SFontLibraryDefinition*>(p_Object);

	s_Json["sFontLocaleID"] = {{ "$type", "ZString" }, { "$val", s_Object->sFontLocaleID.c_str() }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aFontDefinitions)
		{
			s_JsonArray.push_back({{ "$type", "SFontDefinition" }, { "$val", SFontDefinition::ToJson(&s_Item) }});
		}

		s_Json["m_aFontDefinitions"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_Owner::TypeInfo = ZHMTypeInfo("SCondition_Owner", SCondition_Owner::ToJson);

nlohmann::json SCondition_Owner::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_Owner*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	return s_Json;
}

ZHMTypeInfo SCondition_AreBehaviorsDisabled::TypeInfo = ZHMTypeInfo("SCondition_AreBehaviorsDisabled", SCondition_AreBehaviorsDisabled::ToJson);

nlohmann::json SCondition_AreBehaviorsDisabled::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_AreBehaviorsDisabled*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCompressedGridFloatField::TypeInfo = ZHMTypeInfo("SCompressedGridFloatField", SCompressedGridFloatField::ToJson);

nlohmann::json SCompressedGridFloatField::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCompressedGridFloatField*>(p_Object);

	s_Json["m_bIsSparse"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsSparse }};

	s_Json["m_nFieldSize"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nFieldSize }};

	s_Json["m_fInitialValue"] = {{ "$type", "float32" }, { "$val", s_Object->m_fInitialValue }};

	s_Json["m_nGridCRC"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nGridCRC }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aIndices)
		{
			s_JsonArray.push_back({{ "$type", "uint16" }, { "$val", s_Item }});
		}

		s_Json["m_aIndices"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aValues)
		{
			s_JsonArray.push_back({{ "$type", "uint8" }, { "$val", s_Item }});
		}

		s_Json["m_aValues"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SRecoverUnconsciousGroupSaveData::TypeInfo = ZHMTypeInfo("SRecoverUnconsciousGroupSaveData", SRecoverUnconsciousGroupSaveData::ToJson);

nlohmann::json SRecoverUnconsciousGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRecoverUnconsciousGroupSaveData*>(p_Object);

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_rVictim"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rVictim }};

	s_Json["m_rWaker"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rWaker }};

	s_Json["m_fTimer"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTimer }};

	s_Json["m_bEscalate"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEscalate }};

	s_Json["m_bWokenUpInTheGroup"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWokenUpInTheGroup }};

	s_Json["m_bFastWakeUp"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFastWakeUp }};

	return s_Json;
}

ZHMTypeInfo SEscortOutBehaviorSaveData::TypeInfo = ZHMTypeInfo("SEscortOutBehaviorSaveData", SEscortOutBehaviorSaveData::ToJson);

nlohmann::json SEscortOutBehaviorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEscortOutBehaviorSaveData*>(p_Object);

	s_Json["m_nSituation"] = {{ "$type", "int32" }, { "$val", s_Object->m_nSituation }};

	s_Json["m_bConversationHelperPaused"] = {{ "$type", "bool" }, { "$val", s_Object->m_bConversationHelperPaused }};

	s_Json["m_fsm"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsm) }};

	s_Json["m_vExitPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vExitPosition) }};

	s_Json["m_tWarningTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tWarningTime) }};

	s_Json["m_bHardWarning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHardWarning }};

	s_Json["m_nWarningCount"] = {{ "$type", "int32" }, { "$val", s_Object->m_nWarningCount }};

	s_Json["m_tEscortStateSilenceTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tEscortStateSilenceTime) }};

	s_Json["m_tWaitHitmanToComplyWarningTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tWaitHitmanToComplyWarningTime) }};

	s_Json["m_tWaitHitmanToComplyStateTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tWaitHitmanToComplyStateTime) }};

	s_Json["m_tLastLookBack"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastLookBack) }};

	s_Json["m_bReachedExitPosition"] = {{ "$type", "bool" }, { "$val", s_Object->m_bReachedExitPosition }};

	s_Json["m_bShowExitWarningEnded"] = {{ "$type", "bool" }, { "$val", s_Object->m_bShowExitWarningEnded }};

	s_Json["m_bJustShowExit"] = {{ "$type", "bool" }, { "$val", s_Object->m_bJustShowExit }};

	return s_Json;
}

ZHMTypeInfo INotificationCategoryDefinition::TypeInfo = ZHMTypeInfo("INotificationCategoryDefinition", INotificationCategoryDefinition::ToJson);

nlohmann::json INotificationCategoryDefinition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<INotificationCategoryDefinition*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SEntityTemplateEntitySubset::TypeInfo = ZHMTypeInfo("SEntityTemplateEntitySubset", SEntityTemplateEntitySubset::ToJson);

nlohmann::json SEntityTemplateEntitySubset::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityTemplateEntitySubset*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->entities)
		{
			s_JsonArray.push_back({{ "$type", "int32" }, { "$val", s_Item }});
		}

		s_Json["entities"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActorDamageControlSaveData::TypeInfo = ZHMTypeInfo("SActorDamageControlSaveData", SActorDamageControlSaveData::ToJson);

nlohmann::json SActorDamageControlSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorDamageControlSaveData*>(p_Object);

	s_Json["bExplosive"] = {{ "$type", "bool" }, { "$val", s_Object->bExplosive }};

	s_Json["bProjectile"] = {{ "$type", "bool" }, { "$val", s_Object->bProjectile }};

	s_Json["bHeadshot"] = {{ "$type", "bool" }, { "$val", s_Object->bHeadshot }};

	s_Json["bSniperShot"] = {{ "$type", "bool" }, { "$val", s_Object->bSniperShot }};

	s_Json["bThroughWall"] = {{ "$type", "bool" }, { "$val", s_Object->bThroughWall }};

	s_Json["bKillByAccident"] = {{ "$type", "bool" }, { "$val", s_Object->bKillByAccident }};

	s_Json["bWeaponSilenced"] = {{ "$type", "bool" }, { "$val", s_Object->bWeaponSilenced }};

	s_Json["bLongRange"] = {{ "$type", "bool" }, { "$val", s_Object->bLongRange }};

	s_Json["fTotalDamage"] = {{ "$type", "float32" }, { "$val", s_Object->fTotalDamage }};

	s_Json["fPacifyDamage"] = {{ "$type", "float32" }, { "$val", s_Object->fPacifyDamage }};

	s_Json["nImpactBodyPart"] = {{ "$type", "int32" }, { "$val", s_Object->nImpactBodyPart }};

	s_Json["maxDeathType"] = {{ "$type", "EDeathType" }, { "$val", static_cast<int>(s_Object->maxDeathType) }};

	s_Json["maxDeathContext"] = {{ "$type", "EDeathContext" }, { "$val", static_cast<int>(s_Object->maxDeathContext) }};

	s_Json["rAccidentSetup"] = {{ "$type", "uint32" }, { "$val", s_Object->rAccidentSetup }};

	s_Json["bFirearmPacifiesTarget"] = {{ "$type", "bool" }, { "$val", s_Object->bFirearmPacifiesTarget }};

	s_Json["bBulletCausesHitReaction"] = {{ "$type", "bool" }, { "$val", s_Object->bBulletCausesHitReaction }};

	s_Json["fHitsNumberTimeout"] = {{ "$type", "float32" }, { "$val", s_Object->fHitsNumberTimeout }};

	s_Json["fHealthPercentTimeout"] = {{ "$type", "float32" }, { "$val", s_Object->fHealthPercentTimeout }};

	s_Json["rCharacter"] = {{ "$type", "uint32" }, { "$val", s_Object->rCharacter }};

	s_Json["rSource"] = {{ "$type", "uint32" }, { "$val", s_Object->rSource }};

	s_Json["m_accuseUnconsciousOutfit"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_accuseUnconsciousOutfit) }};

	s_Json["m_bValidAccuseUnconsciousOutfit"] = {{ "$type", "bool" }, { "$val", s_Object->m_bValidAccuseUnconsciousOutfit }};

	s_Json["eDeathSpeak"] = {{ "$type", "EActorSoundDefs" }, { "$val", static_cast<int>(s_Object->eDeathSpeak) }};

	s_Json["bDefaultDeathSound"] = {{ "$type", "bool" }, { "$val", s_Object->bDefaultDeathSound }};

	s_Json["iEvents"] = {{ "$type", "int32" }, { "$val", s_Object->iEvents }};

	s_Json["fAgilityElementUncosciousTime"] = {{ "$type", "float32" }, { "$val", s_Object->fAgilityElementUncosciousTime }};

	return s_Json;
}

ZHMTypeInfo SMathLerpSaveData_float32::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_float32", SMathLerpSaveData_float32::ToJson);

nlohmann::json SMathLerpSaveData_float32::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpSaveData_float32*>(p_Object);

	s_Json["m_A"] = {{ "$type", "float32" }, { "$val", s_Object->m_A }};

	s_Json["m_B"] = {{ "$type", "float32" }, { "$val", s_Object->m_B }};

	s_Json["m_fT"] = {{ "$type", "float32" }, { "$val", s_Object->m_fT }};

	return s_Json;
}

ZHMTypeInfo SMathLerpsSaveData_float32::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_float32", SMathLerpsSaveData_float32::ToJson);

nlohmann::json SMathLerpsSaveData_float32::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpsSaveData_float32*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathLerpSaveData_float32" }, { "$val", SMathLerpSaveData_float32::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IAnimPlayerEntity::TypeInfo = ZHMTypeInfo("IAnimPlayerEntity", IAnimPlayerEntity::ToJson);

nlohmann::json IAnimPlayerEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IAnimPlayerEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZHttpUrl::TypeInfo = ZHMTypeInfo("ZHttpUrl", ZHttpUrl::ToJson);

nlohmann::json ZHttpUrl::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZHttpUrl*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SEntityTemplatePropertyOverride::TypeInfo = ZHMTypeInfo("SEntityTemplatePropertyOverride", SEntityTemplatePropertyOverride::ToJson);

nlohmann::json SEntityTemplatePropertyOverride::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityTemplatePropertyOverride*>(p_Object);

	s_Json["propertyOwner"] = {{ "$type", "SEntityTemplateReference" }, { "$val", SEntityTemplateReference::ToJson(&s_Object->propertyOwner) }};

	s_Json["propertyValue"] = {{ "$type", "SEntityTemplateProperty" }, { "$val", SEntityTemplateProperty::ToJson(&s_Object->propertyValue) }};

	return s_Json;
}

ZHMTypeInfo SGuardPointOrderSaveData::TypeInfo = ZHMTypeInfo("SGuardPointOrderSaveData", SGuardPointOrderSaveData::ToJson);

nlohmann::json SGuardPointOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGuardPointOrderSaveData*>(p_Object);

	s_Json["m_guardPoint"] = {{ "$type", "uint32" }, { "$val", s_Object->m_guardPoint }};

	s_Json["m_walkOnly"] = {{ "$type", "bool" }, { "$val", s_Object->m_walkOnly }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsAIModified::TypeInfo = ZHMTypeInfo("SCondition_IsAIModified", SCondition_IsAIModified::ToJson);

nlohmann::json SCondition_IsAIModified::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsAIModified*>(p_Object);

	s_Json["modifier"] = {{ "$type", "EAIModifiers" }, { "$val", static_cast<int>(s_Object->modifier) }};

	return s_Json;
}

ZHMTypeInfo SCombatSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SCombatSituationMemberSaveData", SCombatSituationMemberSaveData::ToJson);

nlohmann::json SCombatSituationMemberSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCombatSituationMemberSaveData*>(p_Object);

	s_Json["m_fDistanceToTarget"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDistanceToTarget }};

	s_Json["m_fDistanceFieldValue"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDistanceFieldValue }};

	s_Json["m_civilianJoinReason"] = {{ "$type", "EDisturbanceType" }, { "$val", static_cast<int>(s_Object->m_civilianJoinReason) }};

	s_Json["m_bIsPreferredToFire"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsPreferredToFire }};

	s_Json["m_bDialogPreventShooting"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDialogPreventShooting }};

	s_Json["m_bCanFlee"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCanFlee }};

	s_Json["m_bCantFleeNoPath"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCantFleeNoPath }};

	s_Json["m_bReportedToGuard"] = {{ "$type", "bool" }, { "$val", s_Object->m_bReportedToGuard }};

	s_Json["m_bStandAndShoot"] = {{ "$type", "bool" }, { "$val", s_Object->m_bStandAndShoot }};

	return s_Json;
}

ZHMTypeInfo SHUDPromptDisplayInfo::TypeInfo = ZHMTypeInfo("SHUDPromptDisplayInfo", SHUDPromptDisplayInfo::ToJson);

nlohmann::json SHUDPromptDisplayInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHUDPromptDisplayInfo*>(p_Object);

	s_Json["m_bActive"] = {{ "$type", "bool" }, { "$val", s_Object->m_bActive }};

	s_Json["m_eState"] = {{ "$type", "EActionPromptState" }, { "$val", static_cast<int>(s_Object->m_eState) }};

	s_Json["m_nIconId"] = {{ "$type", "int32" }, { "$val", s_Object->m_nIconId }};

	s_Json["m_eTypeId"] = {{ "$type", "int32" }, { "$val", s_Object->m_eTypeId }};

	s_Json["m_fProgress"] = {{ "$type", "float32" }, { "$val", s_Object->m_fProgress }};

	s_Json["m_fDistance"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDistance }};

	s_Json["m_bShowWarning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bShowWarning }};

	s_Json["m_bNoActionAvailable"] = {{ "$type", "bool" }, { "$val", s_Object->m_bNoActionAvailable }};

	s_Json["m_sLabel"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sLabel.c_str() }};

	s_Json["m_sDescription"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sDescription.c_str() }};

	s_Json["m_sGlyph"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sGlyph.c_str() }};

	s_Json["m_fOpacity"] = {{ "$type", "float32" }, { "$val", s_Object->m_fOpacity }};

	s_Json["m_bIllegalItem"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIllegalItem }};

	s_Json["m_bSuspiciousItem"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSuspiciousItem }};

	s_Json["m_bDropTempHolsterableItems"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDropTempHolsterableItems }};

	s_Json["m_nFontSize"] = {{ "$type", "int32" }, { "$val", s_Object->m_nFontSize }};

	return s_Json;
}

ZHMTypeInfo SHUDPromptDisplayInfoArray_Dummy::TypeInfo = ZHMTypeInfo("SHUDPromptDisplayInfoArray_Dummy", SHUDPromptDisplayInfoArray_Dummy::ToJson);

nlohmann::json SHUDPromptDisplayInfoArray_Dummy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->dummy)
		{
			s_JsonArray.push_back({{ "$type", "SHUDPromptDisplayInfo" }, { "$val", SHUDPromptDisplayInfo::ToJson(&s_Item) }});
		}

		s_Json["dummy"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ISequenceTrack::TypeInfo = ZHMTypeInfo("ISequenceTrack", ISequenceTrack::ToJson);

nlohmann::json ISequenceTrack::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISequenceTrack*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SMatrix::TypeInfo = ZHMTypeInfo("SMatrix", SMatrix::ToJson);

nlohmann::json SMatrix::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMatrix*>(p_Object);

	s_Json["XAxis"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->XAxis) }};

	s_Json["YAxis"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->YAxis) }};

	s_Json["ZAxis"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->ZAxis) }};

	s_Json["Trans"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->Trans) }};

	return s_Json;
}

ZHMTypeInfo SEventSaveData::TypeInfo = ZHMTypeInfo("SEventSaveData", SEventSaveData::ToJson);

nlohmann::json SEventSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEventSaveData*>(p_Object);

	s_Json["m_nType"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->m_nType) }};

	s_Json["m_nStart"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_nStart) }};

	s_Json["m_nEnd"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_nEnd) }};

	return s_Json;
}

ZHMTypeInfo SSharedKnowledgeSaveData::TypeInfo = ZHMTypeInfo("SSharedKnowledgeSaveData", SSharedKnowledgeSaveData::ToJson);

nlohmann::json SSharedKnowledgeSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSharedKnowledgeSaveData*>(p_Object);

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	s_Json["m_OutfitId"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_OutfitId) }};

	s_Json["m_ActualMatrix"] = {{ "$type", "SMatrix" }, { "$val", SMatrix::ToJson(&s_Object->m_ActualMatrix) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEvents)
		{
			s_JsonArray.push_back({{ "$type", "SEventSaveData" }, { "$val", SEventSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aEvents"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SHudMissionTimerControllerData::TypeInfo = ZHMTypeInfo("SHudMissionTimerControllerData", SHudMissionTimerControllerData::ToJson);

nlohmann::json SHudMissionTimerControllerData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHudMissionTimerControllerData*>(p_Object);

	s_Json["m_fScoreGameTimeStart"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_fScoreGameTimeStart) }};

	s_Json["m_bWasIntroCutFired"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWasIntroCutFired }};

	return s_Json;
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector4", SMathMultiplyDivideSaveData_SVector4::ToJson);

nlohmann::json SMathMultiplyDivideSaveData_SVector4::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Object);

	s_Json["m_fA"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_fA) }};

	s_Json["m_fB"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_fB) }};

	s_Json["m_bDivide"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDivide }};

	return s_Json;
}

ZHMTypeInfo SMathMultipliesSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector4", SMathMultipliesSaveData_SVector4::ToJson);

nlohmann::json SMathMultipliesSaveData_SVector4::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathMultipliesSaveData_SVector4*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathMultiplyDivideSaveData_SVector4" }, { "$val", SMathMultiplyDivideSaveData_SVector4::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo S25DProjectionSettingsCurveEntry::TypeInfo = ZHMTypeInfo("S25DProjectionSettingsCurveEntry", S25DProjectionSettingsCurveEntry::ToJson);

nlohmann::json S25DProjectionSettingsCurveEntry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<S25DProjectionSettingsCurveEntry*>(p_Object);

	s_Json["fDistance"] = {{ "$type", "float32" }, { "$val", s_Object->fDistance }};

	s_Json["fValue"] = {{ "$type", "float32" }, { "$val", s_Object->fValue }};

	return s_Json;
}

ZHMTypeInfo SPersistentEntitySaveData::TypeInfo = ZHMTypeInfo("SPersistentEntitySaveData", SPersistentEntitySaveData::ToJson);

nlohmann::json SPersistentEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPersistentEntitySaveData*>(p_Object);

	s_Json["m_nResourceId"] = {{ "$type", "uint64" }, { "$val", s_Object->m_nResourceId }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntityIDs)
		{
			s_JsonArray.push_back({{ "$type", "uint64" }, { "$val", s_Item }});
		}

		s_Json["m_aEntityIDs"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntityNames)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["m_aEntityNames"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SPersistentEntitySaveDataList::TypeInfo = ZHMTypeInfo("SPersistentEntitySaveDataList", SPersistentEntitySaveDataList::ToJson);

nlohmann::json SPersistentEntitySaveDataList::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPersistentEntitySaveDataList*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntityDatas)
		{
			s_JsonArray.push_back({{ "$type", "SPersistentEntitySaveData" }, { "$val", SPersistentEntitySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aEntityDatas"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_mDynamicObjectIDGenerationKeys)
		{
			s_JsonArray.push_back({{ "$type", "uint64" }, { "$val", s_Item }});
		}

		s_Json["m_mDynamicObjectIDGenerationKeys"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_mDynamicObjectIDGenerationValues)
		{
			s_JsonArray.push_back({{ "$type", "uint64" }, { "$val", s_Item }});
		}

		s_Json["m_mDynamicObjectIDGenerationValues"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SOptionValueSaveData::TypeInfo = ZHMTypeInfo("SOptionValueSaveData", SOptionValueSaveData::ToJson);

nlohmann::json SOptionValueSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SOptionValueSaveData*>(p_Object);

	s_Json["m_Value"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_Value) }};

	return s_Json;
}

ZHMTypeInfo SCautiousHuntSaveData::TypeInfo = ZHMTypeInfo("SCautiousHuntSaveData", SCautiousHuntSaveData::ToJson);

nlohmann::json SCautiousHuntSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCautiousHuntSaveData*>(p_Object);

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_tAnnounceHuntCoolDown"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tAnnounceHuntCoolDown) }};

	s_Json["m_tAnnouncedHunt"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tAnnouncedHunt) }};

	s_Json["m_tShareHuntTargetCoolDown"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tShareHuntTargetCoolDown) }};

	s_Json["m_bAnnounceHunt"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAnnounceHunt }};

	s_Json["m_bAnnouncedHunt"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAnnouncedHunt }};

	s_Json["m_bPlayAnnouncementDialog"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPlayAnnouncementDialog }};

	s_Json["m_bHuntTargetKnownKiller"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHuntTargetKnownKiller }};

	s_Json["m_bSharedHuntTarget"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSharedHuntTarget }};

	s_Json["m_bTargetBlamed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTargetBlamed }};

	s_Json["m_bRuleActive"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRuleActive }};

	return s_Json;
}

ZHMTypeInfo SInventoryControllerItemSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerItemSaveData", SInventoryControllerItemSaveData::ToJson);

nlohmann::json SInventoryControllerItemSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryControllerItemSaveData*>(p_Object);

	s_Json["m_rItemEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItemEntity }};

	s_Json["m_nAmmo"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmo }};

	return s_Json;
}

ZHMTypeInfo SInventoryControllerSlotSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerSlotSaveData", SInventoryControllerSlotSaveData::ToJson);

nlohmann::json SInventoryControllerSlotSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryControllerSlotSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aItems)
		{
			s_JsonArray.push_back({{ "$type", "SInventoryControllerItemSaveData" }, { "$val", SInventoryControllerItemSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aItems"] = s_JsonArray;
	}

	s_Json["m_eStorageType"] = {{ "$type", "EInventoryStorageType" }, { "$val", static_cast<int>(s_Object->m_eStorageType) }};

	return s_Json;
}

ZHMTypeInfo SLightSaveData::TypeInfo = ZHMTypeInfo("SLightSaveData", SLightSaveData::ToJson);

nlohmann::json SLightSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLightSaveData*>(p_Object);

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	s_Json["m_DiffuseColor"] = {{ "$type", "SColorRGB" }, { "$val", SColorRGB::ToJson(&s_Object->m_DiffuseColor) }};

	s_Json["m_fDiffusePower"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDiffusePower }};

	s_Json["m_fAspectXByY_Actual"] = {{ "$type", "float32" }, { "$val", s_Object->m_fAspectXByY_Actual }};

	s_Json["m_bVisible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bVisible }};

	return s_Json;
}

ZHMTypeInfo SCondition_FindSuitcaseAssitanceForSentry::TypeInfo = ZHMTypeInfo("SCondition_FindSuitcaseAssitanceForSentry", SCondition_FindSuitcaseAssitanceForSentry::ToJson);

nlohmann::json SCondition_FindSuitcaseAssitanceForSentry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_FindSuitcaseAssitanceForSentry*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsActorConscious::TypeInfo = ZHMTypeInfo("SCondition_IsActorConscious", SCondition_IsActorConscious::ToJson);

nlohmann::json SCondition_IsActorConscious::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsActorConscious*>(p_Object);

	s_Json["m_Actors"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_Actors) }};

	return s_Json;
}

ZHMTypeInfo SRunningCrowdAIEventSaveData::TypeInfo = ZHMTypeInfo("SRunningCrowdAIEventSaveData", SRunningCrowdAIEventSaveData::ToJson);

nlohmann::json SRunningCrowdAIEventSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRunningCrowdAIEventSaveData*>(p_Object);

	s_Json["m_ReactionEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_ReactionEntity }};

	s_Json["m_CrowdEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_CrowdEntity }};

	s_Json["m_HitmanToBlame"] = {{ "$type", "uint32" }, { "$val", s_Object->m_HitmanToBlame }};

	s_Json["m_CrowdCoreIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_CrowdCoreIndex }};

	s_Json["m_TimeLeft"] = {{ "$type", "float32" }, { "$val", s_Object->m_TimeLeft }};

	s_Json["m_TimeToPulse"] = {{ "$type", "float32" }, { "$val", s_Object->m_TimeToPulse }};

	s_Json["m_Position"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_Position) }};

	s_Json["m_IsInvestigated"] = {{ "$type", "bool" }, { "$val", s_Object->m_IsInvestigated }};

	return s_Json;
}

ZHMTypeInfo SCuriousEventSaveData::TypeInfo = ZHMTypeInfo("SCuriousEventSaveData", SCuriousEventSaveData::ToJson);

nlohmann::json SCuriousEventSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCuriousEventSaveData*>(p_Object);

	s_Json["m_tExpiresAt"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tExpiresAt) }};

	s_Json["m_nKnowledgeIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_nKnowledgeIndex }};

	return s_Json;
}

ZHMTypeInfo SPhysicsSaveData::TypeInfo = ZHMTypeInfo("SPhysicsSaveData", SPhysicsSaveData::ToJson);

nlohmann::json SPhysicsSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPhysicsSaveData*>(p_Object);

	s_Json["m_bIsInPhysicsWorld"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsInPhysicsWorld }};

	s_Json["m_bIsKinematicBody"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsKinematicBody }};

	s_Json["m_bIsVisible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsVisible }};

	return s_Json;
}

ZHMTypeInfo SPhysicsListSaveData::TypeInfo = ZHMTypeInfo("SPhysicsListSaveData", SPhysicsListSaveData::ToJson);

nlohmann::json SPhysicsListSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPhysicsListSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntityRefs)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntityRefs"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntityDatas)
		{
			s_JsonArray.push_back({{ "$type", "SPhysicsSaveData" }, { "$val", SPhysicsSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aEntityDatas"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_IsValidForSuitcaseAssistance::TypeInfo = ZHMTypeInfo("SCondition_IsValidForSuitcaseAssistance", SCondition_IsValidForSuitcaseAssistance::ToJson);

nlohmann::json SCondition_IsValidForSuitcaseAssistance::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsValidForSuitcaseAssistance*>(p_Object);

	s_Json["npc"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->npc) }};

	return s_Json;
}

ZHMTypeInfo IRenderMaterialOverrideAssociation::TypeInfo = ZHMTypeInfo("IRenderMaterialOverrideAssociation", IRenderMaterialOverrideAssociation::ToJson);

nlohmann::json IRenderMaterialOverrideAssociation::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRenderMaterialOverrideAssociation*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SVolumeTriggerListenerSaveData::TypeInfo = ZHMTypeInfo("SVolumeTriggerListenerSaveData", SVolumeTriggerListenerSaveData::ToJson);

nlohmann::json SVolumeTriggerListenerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVolumeTriggerListenerSaveData*>(p_Object);

	s_Json["m_bColliding"] = {{ "$type", "bool" }, { "$val", s_Object->m_bColliding }};

	s_Json["m_bInternalEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bInternalEnabled }};

	return s_Json;
}

ZHMTypeInfo SVolumeTriggersSaveData::TypeInfo = ZHMTypeInfo("SVolumeTriggersSaveData", SVolumeTriggersSaveData::ToJson);

nlohmann::json SVolumeTriggersSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVolumeTriggersSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SVolumeTriggerListenerSaveData" }, { "$val", SVolumeTriggerListenerSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo STriggerAlarmGroupSaveData::TypeInfo = ZHMTypeInfo("STriggerAlarmGroupSaveData", STriggerAlarmGroupSaveData::ToJson);

nlohmann::json STriggerAlarmGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STriggerAlarmGroupSaveData*>(p_Object);

	s_Json["m_rTarget"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rTarget }};

	s_Json["m_rAlarm"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rAlarm }};

	s_Json["m_pLeader"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pLeader }};

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_bTriggeredAlarm"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTriggeredAlarm }};

	return s_Json;
}

ZHMTypeInfo ZInteractionData::TypeInfo = ZHMTypeInfo("ZInteractionData", ZInteractionData::ToJson);

nlohmann::json ZInteractionData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZInteractionData*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IRemapCurveEntity::TypeInfo = ZHMTypeInfo("IRemapCurveEntity", IRemapCurveEntity::ToJson);

nlohmann::json IRemapCurveEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRemapCurveEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SMovementAgilitySaveData::TypeInfo = ZHMTypeInfo("SMovementAgilitySaveData", SMovementAgilitySaveData::ToJson);

nlohmann::json SMovementAgilitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMovementAgilitySaveData*>(p_Object);

	s_Json["m_rLedgeGuide"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rLedgeGuide }};

	s_Json["m_fFaceLeftRightTarget"] = {{ "$type", "float32" }, { "$val", s_Object->m_fFaceLeftRightTarget }};

	s_Json["m_ePrevAgilityState"] = {{ "$type", "EAgilityState" }, { "$val", static_cast<int>(s_Object->m_ePrevAgilityState) }};

	s_Json["m_eAgilityState"] = {{ "$type", "EAgilityState" }, { "$val", static_cast<int>(s_Object->m_eAgilityState) }};

	s_Json["m_nActiveAnimNode"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nActiveAnimNode }};

	s_Json["m_eCameraOffset"] = {{ "$type", "ECameraOffset_old" }, { "$val", static_cast<int>(s_Object->m_eCameraOffset) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsNotCurrentDistractionTarget::TypeInfo = ZHMTypeInfo("SCondition_IsNotCurrentDistractionTarget", SCondition_IsNotCurrentDistractionTarget::ToJson);

nlohmann::json SCondition_IsNotCurrentDistractionTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsNotCurrentDistractionTarget*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	return s_Json;
}

ZHMTypeInfo SKnownEntitySaveData::TypeInfo = ZHMTypeInfo("SKnownEntitySaveData", SKnownEntitySaveData::ToJson);

nlohmann::json SKnownEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SKnownEntitySaveData*>(p_Object);

	s_Json["m_nSharedIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_nSharedIndex }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEvents)
		{
			s_JsonArray.push_back({{ "$type", "SAIEventSaveData" }, { "$val", SAIEventSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aEvents"] = s_JsonArray;
	}

	s_Json["m_nBooleanEvents"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nBooleanEvents }};

	s_Json["m_nBooleanEventsHandled"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nBooleanEventsHandled }};

	s_Json["m_knownWorldMatrix"] = {{ "$type", "SMatrix" }, { "$val", SMatrix::ToJson(&s_Object->m_knownWorldMatrix) }};

	s_Json["m_tLastWorldMatrixUpdate"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastWorldMatrixUpdate) }};

	s_Json["m_nGoals"] = {{ "$type", "uint16" }, { "$val", s_Object->m_nGoals }};

	return s_Json;
}

ZHMTypeInfo SExactCompressedGridFloatField::TypeInfo = ZHMTypeInfo("SExactCompressedGridFloatField", SExactCompressedGridFloatField::ToJson);

nlohmann::json SExactCompressedGridFloatField::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SExactCompressedGridFloatField*>(p_Object);

	s_Json["m_fInitialValue"] = {{ "$type", "float32" }, { "$val", s_Object->m_fInitialValue }};

	s_Json["m_nFieldSize"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nFieldSize }};

	s_Json["m_nGridCRC"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nGridCRC }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aIndices)
		{
			s_JsonArray.push_back({{ "$type", "uint16" }, { "$val", s_Item }});
		}

		s_Json["m_aIndices"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aValues)
		{
			s_JsonArray.push_back({{ "$type", "float32" }, { "$val", s_Item }});
		}

		s_Json["m_aValues"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SIntelData::TypeInfo = ZHMTypeInfo("SIntelData", SIntelData::ToJson);

nlohmann::json SIntelData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SIntelData*>(p_Object);

	s_Json["m_sHeadline"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sHeadline.c_str() }};

	s_Json["m_sBodyHeadline"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sBodyHeadline.c_str() }};

	s_Json["m_sBodytext"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sBodytext.c_str() }};

	s_Json["m_sImage"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sImage.c_str() }};

	return s_Json;
}

ZHMTypeInfo IBoolConditionListener::TypeInfo = ZHMTypeInfo("IBoolConditionListener", IBoolConditionListener::ToJson);

nlohmann::json IBoolConditionListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoolConditionListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ICharacterCoreInventoryState::TypeInfo = ZHMTypeInfo("ICharacterCoreInventoryState", ICharacterCoreInventoryState::ToJson);

nlohmann::json ICharacterCoreInventoryState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterCoreInventoryState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SInvestigateWeaponGroupSaveData::TypeInfo = ZHMTypeInfo("SInvestigateWeaponGroupSaveData", SInvestigateWeaponGroupSaveData::ToJson);

nlohmann::json SInvestigateWeaponGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInvestigateWeaponGroupSaveData*>(p_Object);

	s_Json["m_rTarget"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rTarget }};

	s_Json["m_rReporter"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rReporter }};

	s_Json["m_rInvestigator"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rInvestigator }};

	s_Json["m_rGuard"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rGuard }};

	s_Json["m_ReporterIsVIPWithAmbientEscort"] = {{ "$type", "bool" }, { "$val", s_Object->m_ReporterIsVIPWithAmbientEscort }};

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_tLastGuardSearch"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastGuardSearch) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aUnconsciousGuards)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aUnconsciousGuards"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IGamePostfilterControllerEntity::TypeInfo = ZHMTypeInfo("IGamePostfilterControllerEntity", IGamePostfilterControllerEntity::ToJson);

nlohmann::json IGamePostfilterControllerEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IGamePostfilterControllerEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MaxAge::TypeInfo = ZHMTypeInfo("SCondition_MaxAge", SCondition_MaxAge::ToJson);

nlohmann::json SCondition_MaxAge::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxAge*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["age"] = {{ "$type", "float32" }, { "$val", s_Object->age }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsAccidentDeathContext::TypeInfo = ZHMTypeInfo("SCondition_IsAccidentDeathContext", SCondition_IsAccidentDeathContext::ToJson);

nlohmann::json SCondition_IsAccidentDeathContext::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsAccidentDeathContext*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["deathContextType"] = {{ "$type", "EAccidentDeathContext" }, { "$val", static_cast<int>(s_Object->deathContextType) }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasTensionOrHigher::TypeInfo = ZHMTypeInfo("SCondition_HasTensionOrHigher", SCondition_HasTensionOrHigher::ToJson);

nlohmann::json SCondition_HasTensionOrHigher::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasTensionOrHigher*>(p_Object);

	s_Json["tension"] = {{ "$type", "EGameTension" }, { "$val", static_cast<int>(s_Object->tension) }};

	return s_Json;
}

ZHMTypeInfo IEscortOutSituation::TypeInfo = ZHMTypeInfo("IEscortOutSituation", IEscortOutSituation::ToJson);

nlohmann::json IEscortOutSituation::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IEscortOutSituation*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SBlobsConfigResourceEntry::TypeInfo = ZHMTypeInfo("SBlobsConfigResourceEntry", SBlobsConfigResourceEntry::ToJson);

nlohmann::json SBlobsConfigResourceEntry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBlobsConfigResourceEntry*>(p_Object);

	s_Json["Id"] = {{ "$type", "ZString" }, { "$val", s_Object->Id.c_str() }};

	s_Json["BlobRid"] = {{ "$type", "ZRuntimeResourceID" }, { "$val", ZRuntimeResourceID::ToJson(&s_Object->BlobRid) }};

	return s_Json;
}

ZHMTypeInfo SMovementLocomotionSaveData::TypeInfo = ZHMTypeInfo("SMovementLocomotionSaveData", SMovementLocomotionSaveData::ToJson);

nlohmann::json SMovementLocomotionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMovementLocomotionSaveData*>(p_Object);

	s_Json["m_bIsSneaking"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsSneaking }};

	return s_Json;
}

ZHMTypeInfo SActorIKControllerSaveData::TypeInfo = ZHMTypeInfo("SActorIKControllerSaveData", SActorIKControllerSaveData::ToJson);

nlohmann::json SActorIKControllerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorIKControllerSaveData*>(p_Object);

	s_Json["m_fRightHandWeight"] = {{ "$type", "float32" }, { "$val", s_Object->m_fRightHandWeight }};

	s_Json["m_fLeftHandWeight"] = {{ "$type", "float32" }, { "$val", s_Object->m_fLeftHandWeight }};

	s_Json["m_fRightHandTargetWeight"] = {{ "$type", "float32" }, { "$val", s_Object->m_fRightHandTargetWeight }};

	s_Json["m_fLeftHandTargetWeight"] = {{ "$type", "float32" }, { "$val", s_Object->m_fLeftHandTargetWeight }};

	return s_Json;
}

ZHMTypeInfo SActorProviderDirectSaveData::TypeInfo = ZHMTypeInfo("SActorProviderDirectSaveData", SActorProviderDirectSaveData::ToJson);

nlohmann::json SActorProviderDirectSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorProviderDirectSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aActors)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aActors"] = s_JsonArray;
	}

	s_Json["m_bRunning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRunning }};

	return s_Json;
}

ZHMTypeInfo SActorAnimSetVariationIndexSaveData::TypeInfo = ZHMTypeInfo("SActorAnimSetVariationIndexSaveData", SActorAnimSetVariationIndexSaveData::ToJson);

nlohmann::json SActorAnimSetVariationIndexSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorAnimSetVariationIndexSaveData*>(p_Object);

	s_Json["m_rAnimationSetDefinition"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rAnimationSetDefinition }};

	s_Json["m_nIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_nIndex }};

	return s_Json;
}

ZHMTypeInfo SActorAnimSetSaveData::TypeInfo = ZHMTypeInfo("SActorAnimSetSaveData", SActorAnimSetSaveData::ToJson);

nlohmann::json SActorAnimSetSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorAnimSetSaveData*>(p_Object);

	s_Json["m_eAnimSet"] = {{ "$type", "EAnimSetType" }, { "$val", static_cast<int>(s_Object->m_eAnimSet) }};

	s_Json["m_rCustomAnimationSet"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCustomAnimationSet }};

	s_Json["m_eVariationResourceMaxTension"] = {{ "$type", "EGameTension" }, { "$val", static_cast<int>(s_Object->m_eVariationResourceMaxTension) }};

	s_Json["m_eVariationResourceMaxEmotionState"] = {{ "$type", "EActorEmotionState" }, { "$val", static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState) }};

	s_Json["m_eAnimSetEmotionState"] = {{ "$type", "EAnimSetState" }, { "$val", static_cast<int>(s_Object->m_eAnimSetEmotionState) }};

	s_Json["m_ePreCustomAnimSet"] = {{ "$type", "EAnimSetType" }, { "$val", static_cast<int>(s_Object->m_ePreCustomAnimSet) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aLocoVariationIndecies)
		{
			s_JsonArray.push_back({{ "$type", "SActorAnimSetVariationIndexSaveData" }, { "$val", SActorAnimSetVariationIndexSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aLocoVariationIndecies"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aReactVariationIndecies)
		{
			s_JsonArray.push_back({{ "$type", "SActorAnimSetVariationIndexSaveData" }, { "$val", SActorAnimSetVariationIndexSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aReactVariationIndecies"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActorThrowSaveData::TypeInfo = ZHMTypeInfo("SActorThrowSaveData", SActorThrowSaveData::ToJson);

nlohmann::json SActorThrowSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorThrowSaveData*>(p_Object);

	s_Json["m_rItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItem }};

	s_Json["m_vStartPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vStartPosition) }};

	s_Json["m_vEndPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vEndPosition) }};

	s_Json["m_vItemVelocity"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vItemVelocity) }};

	s_Json["m_fDistance"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDistance }};

	return s_Json;
}

ZHMTypeInfo SActorInventoryItemSaveData::TypeInfo = ZHMTypeInfo("SActorInventoryItemSaveData", SActorInventoryItemSaveData::ToJson);

nlohmann::json SActorInventoryItemSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorInventoryItemSaveData*>(p_Object);

	s_Json["m_rItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItem }};

	s_Json["m_eAttachLocation"] = {{ "$type", "EAttachLocation" }, { "$val", static_cast<int>(s_Object->m_eAttachLocation) }};

	s_Json["m_eMaxTension"] = {{ "$type", "EGameTension" }, { "$val", static_cast<int>(s_Object->m_eMaxTension) }};

	s_Json["m_bLeftHand"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLeftHand }};

	s_Json["m_bWeapon"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWeapon }};

	s_Json["m_bGrenade"] = {{ "$type", "bool" }, { "$val", s_Object->m_bGrenade }};

	return s_Json;
}

ZHMTypeInfo SActorInventorySaveData::TypeInfo = ZHMTypeInfo("SActorInventorySaveData", SActorInventorySaveData::ToJson);

nlohmann::json SActorInventorySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorInventorySaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aItems)
		{
			s_JsonArray.push_back({{ "$type", "SActorInventoryItemSaveData" }, { "$val", SActorInventoryItemSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aItems"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SLongTermMemorySaveData::TypeInfo = ZHMTypeInfo("SLongTermMemorySaveData", SLongTermMemorySaveData::ToJson);

nlohmann::json SLongTermMemorySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLongTermMemorySaveData*>(p_Object);

	s_Json["m_sOutfit"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_sOutfit) }};

	s_Json["m_Memory"] = {{ "$type", "uint8" }, { "$val", s_Object->m_Memory }};

	return s_Json;
}

ZHMTypeInfo SActorGoalSaveData::TypeInfo = ZHMTypeInfo("SActorGoalSaveData", SActorGoalSaveData::ToJson);

nlohmann::json SActorGoalSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorGoalSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "int32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aHandled)
		{
			s_JsonArray.push_back({{ "$type", "bool" }, { "$val", s_Item }});
		}

		s_Json["m_aHandled"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aIsCurrent)
		{
			s_JsonArray.push_back({{ "$type", "bool" }, { "$val", s_Item }});
		}

		s_Json["m_aIsCurrent"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_fExpiredTime)
		{
			s_JsonArray.push_back({{ "$type", "float32" }, { "$val", s_Item }});
		}

		s_Json["m_fExpiredTime"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SKnowledgeSaveData::TypeInfo = ZHMTypeInfo("SKnowledgeSaveData", SKnowledgeSaveData::ToJson);

nlohmann::json SKnowledgeSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SKnowledgeSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aKnownEntities)
		{
			s_JsonArray.push_back({{ "$type", "SKnownEntitySaveData" }, { "$val", SKnownEntitySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aKnownEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aGoalKeys)
		{
			s_JsonArray.push_back({{ "$type", "EAIGoal" }, { "$val", static_cast<int>(s_Item) }});
		}

		s_Json["m_aGoalKeys"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aGoals)
		{
			s_JsonArray.push_back({{ "$type", "SActorGoalSaveData" }, { "$val", SActorGoalSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aGoals"] = s_JsonArray;
	}

	s_Json["m_fHMAttention"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHMAttention }};

	s_Json["m_fHMAttentionLastUpdate"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHMAttentionLastUpdate }};

	s_Json["m_fHMDisguiseAttention"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHMDisguiseAttention }};

	s_Json["m_fHMTrespassingAttention"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHMTrespassingAttention }};

	s_Json["m_fHMLastTrespassingAttentionMax"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHMLastTrespassingAttentionMax }};

	s_Json["m_tLastTrespassingAttentionGain"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastTrespassingAttentionGain) }};

	s_Json["m_tLastAttentionEvaluate"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastAttentionEvaluate) }};

	s_Json["m_fHMWeaponAttention"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHMWeaponAttention }};

	s_Json["m_fHMWeaponAttentionChange"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHMWeaponAttentionChange }};

	s_Json["m_eGameTension"] = {{ "$type", "EGameTension" }, { "$val", static_cast<int>(s_Object->m_eGameTension) }};

	s_Json["m_tAmbientStartTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tAmbientStartTime) }};

	s_Json["m_tExpiredAIModifierSuppressSocialGreeting"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tExpiredAIModifierSuppressSocialGreeting) }};

	s_Json["m_behaviorModifiers"] = {{ "$type", "uint32" }, { "$val", s_Object->m_behaviorModifiers }};

	return s_Json;
}

ZHMTypeInfo SActorDynamicTemplateSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateSaveData", SActorDynamicTemplateSaveData::ToJson);

nlohmann::json SActorDynamicTemplateSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorDynamicTemplateSaveData*>(p_Object);

	s_Json["m_sName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sName.c_str() }};

	s_Json["m_eTensionLimit"] = {{ "$type", "EGameTension" }, { "$val", static_cast<int>(s_Object->m_eTensionLimit) }};

	s_Json["m_eEmotionLimit"] = {{ "$type", "EActorEmotionState" }, { "$val", static_cast<int>(s_Object->m_eEmotionLimit) }};

	s_Json["m_nTimeLimit"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_nTimeLimit) }};

	s_Json["m_eTensionRemoveLimit"] = {{ "$type", "EGameTension" }, { "$val", static_cast<int>(s_Object->m_eTensionRemoveLimit) }};

	s_Json["m_eEmotionRemoveLimit"] = {{ "$type", "EActorEmotionState" }, { "$val", static_cast<int>(s_Object->m_eEmotionRemoveLimit) }};

	s_Json["m_nTimeRemoveLimit"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_nTimeRemoveLimit) }};

	s_Json["m_resourceID"] = {{ "$type", "int64" }, { "$val", s_Object->m_resourceID }};

	s_Json["m_rInstance"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rInstance }};

	return s_Json;
}

ZHMTypeInfo SEventHistorySaveData::TypeInfo = ZHMTypeInfo("SEventHistorySaveData", SEventHistorySaveData::ToJson);

nlohmann::json SEventHistorySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEventHistorySaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aOccurences)
		{
			s_JsonArray.push_back({{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Item) }});
		}

		s_Json["m_aOccurences"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActorBoneSaveData::TypeInfo = ZHMTypeInfo("SActorBoneSaveData", SActorBoneSaveData::ToJson);

nlohmann::json SActorBoneSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorBoneSaveData*>(p_Object);

	s_Json["mQuaterion"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mQuaterion) }};

	s_Json["mTranslation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mTranslation) }};

	return s_Json;
}

ZHMTypeInfo SActorRagdollPoseSaveData::TypeInfo = ZHMTypeInfo("SActorRagdollPoseSaveData", SActorRagdollPoseSaveData::ToJson);

nlohmann::json SActorRagdollPoseSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorRagdollPoseSaveData*>(p_Object);

	s_Json["m_vBodyVelocity"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vBodyVelocity) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBones)
		{
			s_JsonArray.push_back({{ "$type", "SActorBoneSaveData" }, { "$val", SActorBoneSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aBones"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBoneIndices)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aBoneIndices"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActorSaveData::TypeInfo = ZHMTypeInfo("SActorSaveData", SActorSaveData::ToJson);

nlohmann::json SActorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorSaveData*>(p_Object);

	s_Json["m_vPosition"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_vQuaternion"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_vQuaternion) }};

	s_Json["m_Inventory"] = {{ "$type", "SActorInventorySaveData" }, { "$val", SActorInventorySaveData::ToJson(&s_Object->m_Inventory) }};

	s_Json["m_AnimSet"] = {{ "$type", "SActorAnimSetSaveData" }, { "$val", SActorAnimSetSaveData::ToJson(&s_Object->m_AnimSet) }};

	s_Json["m_ThrowHandler"] = {{ "$type", "SActorThrowSaveData" }, { "$val", SActorThrowSaveData::ToJson(&s_Object->m_ThrowHandler) }};

	s_Json["m_nCurrentBehaviorType"] = {{ "$type", "int32" }, { "$val", s_Object->m_nCurrentBehaviorType }};

	s_Json["m_CurrentBehaviorState"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_CurrentBehaviorState) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aCurrentBehaviorEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aCurrentBehaviorEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBehaviorEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aBehaviorEntities"] = s_JsonArray;
	}

	s_Json["m_KnowledgeData"] = {{ "$type", "SKnowledgeSaveData" }, { "$val", SKnowledgeSaveData::ToJson(&s_Object->m_KnowledgeData) }};

	s_Json["m_OutfitRepositoryId"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_OutfitRepositoryId) }};

	s_Json["m_nOutfitCharset"] = {{ "$type", "int32" }, { "$val", s_Object->m_nOutfitCharset }};

	s_Json["m_nOutfitVariation"] = {{ "$type", "int32" }, { "$val", s_Object->m_nOutfitVariation }};

	s_Json["m_tSequenceEndTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tSequenceEndTime) }};

	s_Json["m_nState"] = {{ "$type", "EActorState" }, { "$val", static_cast<int>(s_Object->m_nState) }};

	s_Json["m_rBodyContainerEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rBodyContainerEntity }};

	s_Json["m_nBodyContainerSlot"] = {{ "$type", "int32" }, { "$val", s_Object->m_nBodyContainerSlot }};

	s_Json["m_eEmotionState"] = {{ "$type", "EActorEmotionState" }, { "$val", static_cast<int>(s_Object->m_eEmotionState) }};

	s_Json["m_rCorpseBodybagEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCorpseBodybagEntity }};

	s_Json["m_rDragBodybagEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rDragBodybagEntity }};

	s_Json["m_AccidentContext"] = {{ "$type", "uint32" }, { "$val", s_Object->m_AccidentContext }};

	s_Json["m_ActorDamageControlData"] = {{ "$type", "SActorDamageControlSaveData" }, { "$val", SActorDamageControlSaveData::ToJson(&s_Object->m_ActorDamageControlData) }};

	s_Json["m_AnimatedActorOrderData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_AnimatedActorOrderData) }};

	s_Json["m_fStepsFraction"] = {{ "$type", "float32" }, { "$val", s_Object->m_fStepsFraction }};

	s_Json["m_fZBeforeEnteringStairs"] = {{ "$type", "float32" }, { "$val", s_Object->m_fZBeforeEnteringStairs }};

	s_Json["m_fZError"] = {{ "$type", "float32" }, { "$val", s_Object->m_fZError }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aDynamicTemplates)
		{
			s_JsonArray.push_back({{ "$type", "SActorDynamicTemplateSaveData" }, { "$val", SActorDynamicTemplateSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aDynamicTemplates"] = s_JsonArray;
	}

	s_Json["m_sEndOrientation"] = {{ "$type", "SMatrix" }, { "$val", SMatrix::ToJson(&s_Object->m_sEndOrientation) }};

	s_Json["m_eOverrideSensorState"] = {{ "$type", "EActorAIState" }, { "$val", static_cast<int>(s_Object->m_eOverrideSensorState) }};

	s_Json["m_eDeathBehavior"] = {{ "$type", "EDeathBehavior" }, { "$val", static_cast<int>(s_Object->m_eDeathBehavior) }};

	s_Json["m_bumpsHistory"] = {{ "$type", "SEventHistorySaveData" }, { "$val", SEventHistorySaveData::ToJson(&s_Object->m_bumpsHistory) }};

	s_Json["m_RagdollPose"] = {{ "$type", "SActorRagdollPoseSaveData" }, { "$val", SActorRagdollPoseSaveData::ToJson(&s_Object->m_RagdollPose) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aLongTermMemorySaveData)
		{
			s_JsonArray.push_back({{ "$type", "SLongTermMemorySaveData" }, { "$val", SLongTermMemorySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aLongTermMemorySaveData"] = s_JsonArray;
	}

	s_Json["m_AgentData"] = {{ "$type", "uint32" }, { "$val", s_Object->m_AgentData }};

	s_Json["m_KnockdownsWhileConscious"] = {{ "$type", "uint32" }, { "$val", s_Object->m_KnockdownsWhileConscious }};

	s_Json["m_SecondaryAIIconState"] = {{ "$type", "uint32" }, { "$val", s_Object->m_SecondaryAIIconState }};

	s_Json["m_SituationAvailabilityValue"] = {{ "$type", "int32" }, { "$val", s_Object->m_SituationAvailabilityValue }};

	s_Json["m_HadValidAgent"] = {{ "$type", "bool" }, { "$val", s_Object->m_HadValidAgent }};

	s_Json["m_bNude"] = {{ "$type", "bool" }, { "$val", s_Object->m_bNude }};

	s_Json["m_bActiveEnforcer"] = {{ "$type", "bool" }, { "$val", s_Object->m_bActiveEnforcer }};

	s_Json["m_bIsPotentialEnforcer"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsPotentialEnforcer }};

	s_Json["m_bDynamicEnforcer"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDynamicEnforcer }};

	s_Json["m_bIsCrowdCharacter"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsCrowdCharacter }};

	s_Json["m_bIsWoozy"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsWoozy }};

	s_Json["m_bBlendingOrientation"] = {{ "$type", "bool" }, { "$val", s_Object->m_bBlendingOrientation }};

	s_Json["m_bMakeMainWeaponUndroppable"] = {{ "$type", "bool" }, { "$val", s_Object->m_bMakeMainWeaponUndroppable }};

	s_Json["m_bFinalizePendingSpawnGrenade"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFinalizePendingSpawnGrenade }};

	s_Json["m_bWeaponIsHidden"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWeaponIsHidden }};

	s_Json["m_bRegisteredForLT"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRegisteredForLT }};

	s_Json["m_bKeepOverrideSensorStateAfterBeingUnconscious"] = {{ "$type", "bool" }, { "$val", s_Object->m_bKeepOverrideSensorStateAfterBeingUnconscious }};

	s_Json["m_bWeaponReady"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWeaponReady }};

	s_Json["m_bDynamicWeaponUnholstered"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDynamicWeaponUnholstered }};

	s_Json["m_bForceInteractionGlow"] = {{ "$type", "bool" }, { "$val", s_Object->m_bForceInteractionGlow }};

	s_Json["m_bIsOutfitRuined"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsOutfitRuined }};

	s_Json["m_BehaviorSelectDisabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_BehaviorSelectDisabled }};

	return s_Json;
}

ZHMTypeInfo SCombatMetricsSaveData::TypeInfo = ZHMTypeInfo("SCombatMetricsSaveData", SCombatMetricsSaveData::ToJson);

nlohmann::json SCombatMetricsSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCombatMetricsSaveData*>(p_Object);

	s_Json["m_CombatProgress"] = {{ "$type", "float32" }, { "$val", s_Object->m_CombatProgress }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_DeadVIPsOrContractTargets)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_DeadVIPsOrContractTargets"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_DiscoveredVIPOrContractTargetBodies)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_DiscoveredVIPOrContractTargetBodies"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActorProviderApproachSaveData::TypeInfo = ZHMTypeInfo("SActorProviderApproachSaveData", SActorProviderApproachSaveData::ToJson);

nlohmann::json SActorProviderApproachSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorProviderApproachSaveData*>(p_Object);

	s_Json["m_rCastActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCastActor }};

	return s_Json;
}

ZHMTypeInfo SRememberActorSaveData::TypeInfo = ZHMTypeInfo("SRememberActorSaveData", SRememberActorSaveData::ToJson);

nlohmann::json SRememberActorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRememberActorSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_Actors)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_Actors"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SGBufferSample::TypeInfo = ZHMTypeInfo("SGBufferSample", SGBufferSample::ToJson);

nlohmann::json SGBufferSample::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGBufferSample*>(p_Object);

	s_Json["normal"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->normal) }};

	s_Json["diffuse"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->diffuse) }};

	s_Json["specular"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->specular) }};

	s_Json["accumulatedLight"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->accumulatedLight) }};

	s_Json["glossiness"] = {{ "$type", "float32" }, { "$val", s_Object->glossiness }};

	s_Json["translucency"] = {{ "$type", "float32" }, { "$val", s_Object->translucency }};

	s_Json["ao"] = {{ "$type", "float32" }, { "$val", s_Object->ao }};

	s_Json["shadingModel"] = {{ "$type", "uint32" }, { "$val", s_Object->shadingModel }};

	return s_Json;
}

ZHMTypeInfo IItemBase::TypeInfo = ZHMTypeInfo("IItemBase", IItemBase::ToJson);

nlohmann::json IItemBase::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IItemBase*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ICollisionShapeProvider::TypeInfo = ZHMTypeInfo("ICollisionShapeProvider", ICollisionShapeProvider::ToJson);

nlohmann::json ICollisionShapeProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICollisionShapeProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IContractEvaluationContextListener::TypeInfo = ZHMTypeInfo("IContractEvaluationContextListener", IContractEvaluationContextListener::ToJson);

nlohmann::json IContractEvaluationContextListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IContractEvaluationContextListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_InSituation::TypeInfo = ZHMTypeInfo("SCondition_InSituation", SCondition_InSituation::ToJson);

nlohmann::json SCondition_InSituation::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_InSituation*>(p_Object);

	s_Json["type"] = {{ "$type", "ESituationType" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo SBoneTransformSaveData::TypeInfo = ZHMTypeInfo("SBoneTransformSaveData", SBoneTransformSaveData::ToJson);

nlohmann::json SBoneTransformSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBoneTransformSaveData*>(p_Object);

	s_Json["mQuaterion"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mQuaterion) }};

	s_Json["mTranslation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mTranslation) }};

	return s_Json;
}

ZHMTypeInfo SActorProxySaveData::TypeInfo = ZHMTypeInfo("SActorProxySaveData", SActorProxySaveData::ToJson);

nlohmann::json SActorProxySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorProxySaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo IMetricValue::TypeInfo = ZHMTypeInfo("IMetricValue", IMetricValue::ToJson);

nlohmann::json IMetricValue::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IMetricValue*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZEntityPath::TypeInfo = ZHMTypeInfo("ZEntityPath", ZEntityPath::ToJson);

nlohmann::json ZEntityPath::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZEntityPath*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IKeywordProvider::TypeInfo = ZHMTypeInfo("IKeywordProvider", IKeywordProvider::ToJson);

nlohmann::json IKeywordProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IKeywordProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IKeywordHolder::TypeInfo = ZHMTypeInfo("IKeywordHolder", IKeywordHolder::ToJson);

nlohmann::json IKeywordHolder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IKeywordHolder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IItem::TypeInfo = ZHMTypeInfo("IItem", IItem::ToJson);

nlohmann::json IItem::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IItem*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ILookAtTriggerEntity::TypeInfo = ZHMTypeInfo("ILookAtTriggerEntity", ILookAtTriggerEntity::ToJson);

nlohmann::json ILookAtTriggerEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ILookAtTriggerEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IBoneCollidable::TypeInfo = ZHMTypeInfo("IBoneCollidable", IBoneCollidable::ToJson);

nlohmann::json IBoneCollidable::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoneCollidable*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SLockdownManagerAIZoneSaveData::TypeInfo = ZHMTypeInfo("SLockdownManagerAIZoneSaveData", SLockdownManagerAIZoneSaveData::ToJson);

nlohmann::json SLockdownManagerAIZoneSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLockdownManagerAIZoneSaveData*>(p_Object);

	s_Json["m_tExpiry"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tExpiry) }};

	s_Json["m_tExpiryHeroOutside"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tExpiryHeroOutside) }};

	s_Json["m_rZone"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rZone }};

	return s_Json;
}

ZHMTypeInfo SStoredSlotSaveData::TypeInfo = ZHMTypeInfo("SStoredSlotSaveData", SStoredSlotSaveData::ToJson);

nlohmann::json SStoredSlotSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SStoredSlotSaveData*>(p_Object);

	s_Json["m_iStoredInventorySlotIndex"] = {{ "$type", "uint32" }, { "$val", s_Object->m_iStoredInventorySlotIndex }};

	s_Json["m_iStoreReason"] = {{ "$type", "uint8" }, { "$val", s_Object->m_iStoreReason }};

	s_Json["m_bItemsStored"] = {{ "$type", "bool" }, { "$val", s_Object->m_bItemsStored }};

	return s_Json;
}

ZHMTypeInfo SDrama2ActorSaveState::TypeInfo = ZHMTypeInfo("SDrama2ActorSaveState", SDrama2ActorSaveState::ToJson);

nlohmann::json SDrama2ActorSaveState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDrama2ActorSaveState*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	s_Json["m_rSequence"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSequence }};

	s_Json["m_rBehavior"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rBehavior }};

	s_Json["m_rCurrentSpeakEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCurrentSpeakEntity }};

	s_Json["m_rScreenplay"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rScreenplay }};

	s_Json["m_sMatchName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sMatchName.c_str() }};

	s_Json["m_tActorSpeakEnd"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tActorSpeakEnd) }};

	s_Json["m_bIsDone"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsDone }};

	s_Json["m_bIsPaused"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsPaused }};

	s_Json["m_bIsSpeaking"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsSpeaking }};

	s_Json["m_bOwnsCurrentBehavior"] = {{ "$type", "bool" }, { "$val", s_Object->m_bOwnsCurrentBehavior }};

	s_Json["m_bActive"] = {{ "$type", "bool" }, { "$val", s_Object->m_bActive }};

	s_Json["m_bRequired"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRequired }};

	return s_Json;
}

ZHMTypeInfo IAnimlayerSubactionInterface::TypeInfo = ZHMTypeInfo("IAnimlayerSubactionInterface", IAnimlayerSubactionInterface::ToJson);

nlohmann::json IAnimlayerSubactionInterface::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IAnimlayerSubactionInterface*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZEvacuateTrespassGroup::TypeInfo = ZHMTypeInfo("ZEvacuateTrespassGroup", ZEvacuateTrespassGroup::ToJson);

nlohmann::json ZEvacuateTrespassGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZEvacuateTrespassGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SInventoryUISlotSlim::TypeInfo = ZHMTypeInfo("SInventoryUISlotSlim", SInventoryUISlotSlim::ToJson);

nlohmann::json SInventoryUISlotSlim::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryUISlotSlim*>(p_Object);

	s_Json["icon"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->icon) }};

	s_Json["containedIcon"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->containedIcon) }};

	return s_Json;
}

ZHMTypeInfo IGIProbeEntity::TypeInfo = ZHMTypeInfo("IGIProbeEntity", IGIProbeEntity::ToJson);

nlohmann::json IGIProbeEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IGIProbeEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_CausedBy::TypeInfo = ZHMTypeInfo("SCondition_CausedBy", SCondition_CausedBy::ToJson);

nlohmann::json SCondition_CausedBy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CausedBy*>(p_Object);

	s_Json["causalnode"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->causalnode) }};

	return s_Json;
}

ZHMTypeInfo IBaseCharacter::TypeInfo = ZHMTypeInfo("IBaseCharacter", IBaseCharacter::ToJson);

nlohmann::json IBaseCharacter::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBaseCharacter*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IntRuntimeParamEqualsTo::TypeInfo = ZHMTypeInfo("SCondition_IntRuntimeParamEqualsTo", SCondition_IntRuntimeParamEqualsTo::ToJson);

nlohmann::json SCondition_IntRuntimeParamEqualsTo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IntRuntimeParamEqualsTo*>(p_Object);

	s_Json["sParamName"] = {{ "$type", "ZString" }, { "$val", s_Object->sParamName.c_str() }};

	s_Json["nValue"] = {{ "$type", "int32" }, { "$val", s_Object->nValue }};

	return s_Json;
}

ZHMTypeInfo SLeadEscortSituationActors::TypeInfo = ZHMTypeInfo("SLeadEscortSituationActors", SLeadEscortSituationActors::ToJson);

nlohmann::json SLeadEscortSituationActors::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLeadEscortSituationActors*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo ZCharacterStateBase::TypeInfo = ZHMTypeInfo("ZCharacterStateBase", ZCharacterStateBase::ToJson);

nlohmann::json ZCharacterStateBase::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZCharacterStateBase*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SIntelListDisplayInfo::TypeInfo = ZHMTypeInfo("SIntelListDisplayInfo", SIntelListDisplayInfo::ToJson);

nlohmann::json SIntelListDisplayInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SIntelListDisplayInfo*>(p_Object);

	s_Json["index"] = {{ "$type", "int32" }, { "$val", s_Object->index }};

	s_Json["active"] = {{ "$type", "bool" }, { "$val", s_Object->active }};

	s_Json["newInfo"] = {{ "$type", "bool" }, { "$val", s_Object->newInfo }};

	s_Json["label"] = {{ "$type", "ZString" }, { "$val", s_Object->label.c_str() }};

	return s_Json;
}

ZHMTypeInfo SExposedEntityDescriptor::TypeInfo = ZHMTypeInfo("SExposedEntityDescriptor", SExposedEntityDescriptor::ToJson);

nlohmann::json SExposedEntityDescriptor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SExposedEntityDescriptor*>(p_Object);

	s_Json["sName"] = {{ "$type", "ZString" }, { "$val", s_Object->sName.c_str() }};

	s_Json["sDisplayName"] = {{ "$type", "ZString" }, { "$val", s_Object->sDisplayName.c_str() }};

	s_Json["sHelpText"] = {{ "$type", "ZString" }, { "$val", s_Object->sHelpText.c_str() }};

	s_Json["bIsArray"] = {{ "$type", "bool" }, { "$val", s_Object->bIsArray }};

	s_Json["bIsHidden"] = {{ "$type", "bool" }, { "$val", s_Object->bIsHidden }};

	return s_Json;
}

ZHMTypeInfo ZAvoidDangerousAreaGroup::TypeInfo = ZHMTypeInfo("ZAvoidDangerousAreaGroup", ZAvoidDangerousAreaGroup::ToJson);

nlohmann::json ZAvoidDangerousAreaGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZAvoidDangerousAreaGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo STypeReference::TypeInfo = ZHMTypeInfo("STypeReference", STypeReference::ToJson);

nlohmann::json STypeReference::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STypeReference*>(p_Object);

	s_Json["sEntityID"] = {{ "$type", "ZString" }, { "$val", s_Object->sEntityID.c_str() }};

	s_Json["sTypeArgName"] = {{ "$type", "ZString" }, { "$val", s_Object->sTypeArgName.c_str() }};

	return s_Json;
}

ZHMTypeInfo SExposedTypeInfo::TypeInfo = ZHMTypeInfo("SExposedTypeInfo", SExposedTypeInfo::ToJson);

nlohmann::json SExposedTypeInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SExposedTypeInfo*>(p_Object);

	s_Json["sName"] = {{ "$type", "ZString" }, { "$val", s_Object->sName.c_str() }};

	s_Json["sDisplayName"] = {{ "$type", "ZString" }, { "$val", s_Object->sDisplayName.c_str() }};

	s_Json["sHelpText"] = {{ "$type", "ZString" }, { "$val", s_Object->sHelpText.c_str() }};

	s_Json["target"] = {{ "$type", "STypeReference" }, { "$val", STypeReference::ToJson(&s_Object->target) }};

	return s_Json;
}

ZHMTypeInfo SCondition_RemoveSituationsWithDesiredNumberOfCombatants::TypeInfo = ZHMTypeInfo("SCondition_RemoveSituationsWithDesiredNumberOfCombatants", SCondition_RemoveSituationsWithDesiredNumberOfCombatants::ToJson);

nlohmann::json SCondition_RemoveSituationsWithDesiredNumberOfCombatants::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_RemoveSituationsWithDesiredNumberOfCombatants*>(p_Object);

	s_Json["m_CombatSituations"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_CombatSituations) }};

	return s_Json;
}

ZHMTypeInfo SDisturbanceSaveData::TypeInfo = ZHMTypeInfo("SDisturbanceSaveData", SDisturbanceSaveData::ToJson);

nlohmann::json SDisturbanceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDisturbanceSaveData*>(p_Object);

	s_Json["m_object"] = {{ "$type", "int32" }, { "$val", s_Object->m_object }};

	s_Json["m_type"] = {{ "$type", "EDisturbanceType" }, { "$val", static_cast<int>(s_Object->m_type) }};

	s_Json["m_state"] = {{ "$type", "ECautiousDisturbanceState" }, { "$val", static_cast<int>(s_Object->m_state) }};

	s_Json["m_started"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_started) }};

	s_Json["m_pInvestigateGroup"] = {{ "$type", "int32" }, { "$val", s_Object->m_pInvestigateGroup }};

	s_Json["m_bLockOnHitmanPosition"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLockOnHitmanPosition }};

	return s_Json;
}

ZHMTypeInfo SEvacuateSituationSaveData::TypeInfo = ZHMTypeInfo("SEvacuateSituationSaveData", SEvacuateSituationSaveData::ToJson);

nlohmann::json SEvacuateSituationSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEvacuateSituationSaveData*>(p_Object);

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_tLastSeriousSituation"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastSeriousSituation) }};

	s_Json["m_tLastThreat"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastThreat) }};

	s_Json["m_tresspassGroup"] = {{ "$type", "int32" }, { "$val", s_Object->m_tresspassGroup }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_evacuateGroups)
		{
			s_JsonArray.push_back({{ "$type", "int32" }, { "$val", s_Item }});
		}

		s_Json["m_evacuateGroups"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_activeSafeRooms)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_activeSafeRooms"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_vipsUnderFire)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_vipsUnderFire"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_HasBystanderSomethingElseToInvestigate::TypeInfo = ZHMTypeInfo("SCondition_HasBystanderSomethingElseToInvestigate", SCondition_HasBystanderSomethingElseToInvestigate::ToJson);

nlohmann::json SCondition_HasBystanderSomethingElseToInvestigate::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasBystanderSomethingElseToInvestigate*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IRoleListener::TypeInfo = ZHMTypeInfo("IRoleListener", IRoleListener::ToJson);

nlohmann::json IRoleListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRoleListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SPFObstactleSaveData::TypeInfo = ZHMTypeInfo("SPFObstactleSaveData", SPFObstactleSaveData::ToJson);

nlohmann::json SPFObstactleSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPFObstactleSaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasConfiguredAct::TypeInfo = ZHMTypeInfo("SCondition_HasConfiguredAct", SCondition_HasConfiguredAct::ToJson);

nlohmann::json SCondition_HasConfiguredAct::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasConfiguredAct*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["act"] = {{ "$type", "ZString" }, { "$val", s_Object->act.c_str() }};

	return s_Json;
}

ZHMTypeInfo SDramaActorSaveState::TypeInfo = ZHMTypeInfo("SDramaActorSaveState", SDramaActorSaveState::ToJson);

nlohmann::json SDramaActorSaveState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDramaActorSaveState*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	s_Json["m_rSequence"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSequence }};

	s_Json["m_rBehavior"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rBehavior }};

	s_Json["m_rCurrentSpeakEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCurrentSpeakEntity }};

	s_Json["m_rScreenplay"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rScreenplay }};

	s_Json["m_sMatchName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sMatchName.c_str() }};

	s_Json["m_tActorSpeakEnd"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tActorSpeakEnd) }};

	s_Json["m_bIsDone"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsDone }};

	s_Json["m_bIsPaused"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsPaused }};

	s_Json["m_bIsSpeaking"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsSpeaking }};

	return s_Json;
}

ZHMTypeInfo STrackerEntitySaveData::TypeInfo = ZHMTypeInfo("STrackerEntitySaveData", STrackerEntitySaveData::ToJson);

nlohmann::json STrackerEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STrackerEntitySaveData*>(p_Object);

	s_Json["m_rTracker"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rTracker }};

	s_Json["m_bIsVisible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsVisible }};

	s_Json["m_bIsEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsEnabled }};

	s_Json["m_bSpatialVisibility"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSpatialVisibility }};

	return s_Json;
}

ZHMTypeInfo STrackerManagerSaveData::TypeInfo = ZHMTypeInfo("STrackerManagerSaveData", STrackerManagerSaveData::ToJson);

nlohmann::json STrackerManagerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STrackerManagerSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aTrackerData)
		{
			s_JsonArray.push_back({{ "$type", "STrackerEntitySaveData" }, { "$val", STrackerEntitySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aTrackerData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IGameSoundManager::TypeInfo = ZHMTypeInfo("IGameSoundManager", IGameSoundManager::ToJson);

nlohmann::json IGameSoundManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IGameSoundManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IParticleShaderParametersEntity::TypeInfo = ZHMTypeInfo("IParticleShaderParametersEntity", IParticleShaderParametersEntity::ToJson);

nlohmann::json IParticleShaderParametersEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IParticleShaderParametersEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SExitsActiveSaveData::TypeInfo = ZHMTypeInfo("SExitsActiveSaveData", SExitsActiveSaveData::ToJson);

nlohmann::json SExitsActiveSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SExitsActiveSaveData*>(p_Object);

	s_Json["m_bIsActive"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsActive }};

	return s_Json;
}

ZHMTypeInfo ZDetectedInPrivateGroup::TypeInfo = ZHMTypeInfo("ZDetectedInPrivateGroup", ZDetectedInPrivateGroup::ToJson);

nlohmann::json ZDetectedInPrivateGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZDetectedInPrivateGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsSameDistractionTypeAsTheCurrentOne::TypeInfo = ZHMTypeInfo("SCondition_IsSameDistractionTypeAsTheCurrentOne", SCondition_IsSameDistractionTypeAsTheCurrentOne::ToJson);

nlohmann::json SCondition_IsSameDistractionTypeAsTheCurrentOne::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsSameDistractionTypeAsTheCurrentOne*>(p_Object);

	s_Json["distraction"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->distraction) }};

	return s_Json;
}

ZHMTypeInfo ITransitionSource::TypeInfo = ZHMTypeInfo("ITransitionSource", ITransitionSource::ToJson);

nlohmann::json ITransitionSource::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ITransitionSource*>(p_Object);

	return s_Json;
}

ZHMTypeInfo S3rdPersonCameraSaveData::TypeInfo = ZHMTypeInfo("S3rdPersonCameraSaveData", S3rdPersonCameraSaveData::ToJson);

nlohmann::json S3rdPersonCameraSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<S3rdPersonCameraSaveData*>(p_Object);

	s_Json["m_fAngleYaw"] = {{ "$type", "float32" }, { "$val", s_Object->m_fAngleYaw }};

	s_Json["m_fAnglePitch"] = {{ "$type", "float32" }, { "$val", s_Object->m_fAnglePitch }};

	return s_Json;
}

ZHMTypeInfo SCollisionControllerAspectSaveData::TypeInfo = ZHMTypeInfo("SCollisionControllerAspectSaveData", SCollisionControllerAspectSaveData::ToJson);

nlohmann::json SCollisionControllerAspectSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCollisionControllerAspectSaveData*>(p_Object);

	s_Json["m_bCollideHitman"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCollideHitman }};

	s_Json["m_bCollideCamera"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCollideCamera }};

	return s_Json;
}

ZHMTypeInfo SCollisionControllerAspectsSaveData::TypeInfo = ZHMTypeInfo("SCollisionControllerAspectsSaveData", SCollisionControllerAspectsSaveData::ToJson);

nlohmann::json SCollisionControllerAspectsSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCollisionControllerAspectsSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SCollisionControllerAspectSaveData" }, { "$val", SCollisionControllerAspectSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SExtendedCppEntityProperty::TypeInfo = ZHMTypeInfo("SExtendedCppEntityProperty", SExtendedCppEntityProperty::ToJson);

nlohmann::json SExtendedCppEntityProperty::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SExtendedCppEntityProperty*>(p_Object);

	s_Json["propertyName"] = {{ "$type", "ZString" }, { "$val", s_Object->propertyName.c_str() }};

	s_Json["propertyType"] = {{ "$type", "EExtendedPropertyType" }, { "$val", static_cast<int>(s_Object->propertyType) }};

	s_Json["rtEditable"] = {{ "$type", "bool" }, { "$val", s_Object->rtEditable }};

	s_Json["extraData"] = {{ "$type", "uint64" }, { "$val", s_Object->extraData }};

	return s_Json;
}

ZHMTypeInfo ZRuntimePinConDesc::TypeInfo = ZHMTypeInfo("ZRuntimePinConDesc", ZRuntimePinConDesc::ToJson);

nlohmann::json ZRuntimePinConDesc::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZRuntimePinConDesc*>(p_Object);

	s_Json["m_nFromEntityID"] = {{ "$type", "uint64" }, { "$val", s_Object->m_nFromEntityID }};

	s_Json["m_nToEntityID"] = {{ "$type", "uint64" }, { "$val", s_Object->m_nToEntityID }};

	s_Json["m_nFromPinID"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nFromPinID }};

	s_Json["m_nToPinID"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nToPinID }};

	return s_Json;
}

ZHMTypeInfo ZScopedRuntimePinConDesc::TypeInfo = ZHMTypeInfo("ZScopedRuntimePinConDesc", ZScopedRuntimePinConDesc::ToJson);

nlohmann::json ZScopedRuntimePinConDesc::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZScopedRuntimePinConDesc*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aScopePath)
		{
			s_JsonArray.push_back({{ "$type", "uint64" }, { "$val", s_Item }});
		}

		s_Json["m_aScopePath"] = s_JsonArray;
	}

	s_Json["m_PinConDesc"] = {{ "$type", "ZRuntimePinConDesc" }, { "$val", ZRuntimePinConDesc::ToJson(&s_Object->m_PinConDesc) }};

	return s_Json;
}

ZHMTypeInfo IValueIntSaveable::TypeInfo = ZHMTypeInfo("IValueIntSaveable", IValueIntSaveable::ToJson);

nlohmann::json IValueIntSaveable::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueIntSaveable*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSequenceTrackSaveData::TypeInfo = ZHMTypeInfo("SSequenceTrackSaveData", SSequenceTrackSaveData::ToJson);

nlohmann::json SSequenceTrackSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSequenceTrackSaveData*>(p_Object);

	s_Json["m_rTrackEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rTrackEntity }};

	s_Json["m_CustomTrackData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_CustomTrackData) }};

	return s_Json;
}

ZHMTypeInfo ITimerEventListener::TypeInfo = ZHMTypeInfo("ITimerEventListener", ITimerEventListener::ToJson);

nlohmann::json ITimerEventListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ITimerEventListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSpatialSaveData::TypeInfo = ZHMTypeInfo("SSpatialSaveData", SSpatialSaveData::ToJson);

nlohmann::json SSpatialSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSpatialSaveData*>(p_Object);

	s_Json["m_bVisible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bVisible }};

	s_Json["m_vPosition"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_vQuaternionRotation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_vQuaternionRotation) }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasGoalOnTarget::TypeInfo = ZHMTypeInfo("SCondition_HasGoalOnTarget", SCondition_HasGoalOnTarget::ToJson);

nlohmann::json SCondition_HasGoalOnTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasGoalOnTarget*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["type"] = {{ "$type", "EAIGoal" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo IValueColorRGBSet::TypeInfo = ZHMTypeInfo("IValueColorRGBSet", IValueColorRGBSet::ToJson);

nlohmann::json IValueColorRGBSet::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueColorRGBSet*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZCautiousBackupGroup::TypeInfo = ZHMTypeInfo("ZCautiousBackupGroup", ZCautiousBackupGroup::ToJson);

nlohmann::json ZCautiousBackupGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZCautiousBackupGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SHeroStandInSaveState::TypeInfo = ZHMTypeInfo("SHeroStandInSaveState", SHeroStandInSaveState::ToJson);

nlohmann::json SHeroStandInSaveState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHeroStandInSaveState*>(p_Object);

	s_Json["m_rHero"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rHero }};

	s_Json["m_rCurrentSpeakEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCurrentSpeakEntity }};

	s_Json["m_bPaused"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPaused }};

	return s_Json;
}

ZHMTypeInfo IMorphemeEventConsumer::TypeInfo = ZHMTypeInfo("IMorphemeEventConsumer", IMorphemeEventConsumer::ToJson);

nlohmann::json IMorphemeEventConsumer::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IMorphemeEventConsumer*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsSharedOlder::TypeInfo = ZHMTypeInfo("SCondition_IsSharedOlder", SCondition_IsSharedOlder::ToJson);

nlohmann::json SCondition_IsSharedOlder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsSharedOlder*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["stype"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->stype) }};

	return s_Json;
}

ZHMTypeInfo IParticleHeirEntity::TypeInfo = ZHMTypeInfo("IParticleHeirEntity", IParticleHeirEntity::ToJson);

nlohmann::json IParticleHeirEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IParticleHeirEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_AreVisibleItemsLegal::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleItemsLegal", SCondition_AreVisibleItemsLegal::ToJson);

nlohmann::json SCondition_AreVisibleItemsLegal::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_AreVisibleItemsLegal*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["includeWeapons"] = {{ "$type", "int32" }, { "$val", s_Object->includeWeapons }};

	return s_Json;
}

ZHMTypeInfo SCondition_SuspiciousItemPickedUp::TypeInfo = ZHMTypeInfo("SCondition_SuspiciousItemPickedUp", SCondition_SuspiciousItemPickedUp::ToJson);

nlohmann::json SCondition_SuspiciousItemPickedUp::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SuspiciousItemPickedUp*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["includeWeapons"] = {{ "$type", "int32" }, { "$val", s_Object->includeWeapons }};

	return s_Json;
}

ZHMTypeInfo IRemoteControlEntity::TypeInfo = ZHMTypeInfo("IRemoteControlEntity", IRemoteControlEntity::ToJson);

nlohmann::json IRemoteControlEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRemoteControlEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SHeroEscortSituation2Actors::TypeInfo = ZHMTypeInfo("SHeroEscortSituation2Actors", SHeroEscortSituation2Actors::ToJson);

nlohmann::json SHeroEscortSituation2Actors::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHeroEscortSituation2Actors*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo SCollidingParticle::TypeInfo = ZHMTypeInfo("SCollidingParticle", SCollidingParticle::ToJson);

nlohmann::json SCollidingParticle::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCollidingParticle*>(p_Object);

	s_Json["m_vPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_vVelocity"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vVelocity) }};

	s_Json["m_vNewVelocity"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vNewVelocity) }};

	s_Json["m_nColor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nColor }};

	s_Json["m_fSize"] = {{ "$type", "float32" }, { "$val", s_Object->m_fSize }};

	return s_Json;
}

ZHMTypeInfo IActorPickerFilter::TypeInfo = ZHMTypeInfo("IActorPickerFilter", IActorPickerFilter::ToJson);

nlohmann::json IActorPickerFilter::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IActorPickerFilter*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsNotSuitcase::TypeInfo = ZHMTypeInfo("SCondition_IsNotSuitcase", SCondition_IsNotSuitcase::ToJson);

nlohmann::json SCondition_IsNotSuitcase::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsNotSuitcase*>(p_Object);

	s_Json["items"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->items) }};

	return s_Json;
}

ZHMTypeInfo IBoundedPlaneEntity::TypeInfo = ZHMTypeInfo("IBoundedPlaneEntity", IBoundedPlaneEntity::ToJson);

nlohmann::json IBoundedPlaneEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoundedPlaneEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SGameCamProfileEntitySaveData::TypeInfo = ZHMTypeInfo("SGameCamProfileEntitySaveData", SGameCamProfileEntitySaveData::ToJson);

nlohmann::json SGameCamProfileEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGameCamProfileEntitySaveData*>(p_Object);

	s_Json["m_bIsEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsEnabled }};

	s_Json["m_rHero"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rHero }};

	return s_Json;
}

ZHMTypeInfo SZHUDIgnoreVisibilitySaveData::TypeInfo = ZHMTypeInfo("SZHUDIgnoreVisibilitySaveData", SZHUDIgnoreVisibilitySaveData::ToJson);

nlohmann::json SZHUDIgnoreVisibilitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SZHUDIgnoreVisibilitySaveData*>(p_Object);

	s_Json["alpha"] = {{ "$type", "float32" }, { "$val", s_Object->alpha }};

	return s_Json;
}

ZHMTypeInfo SEntityTemplateExposedEntity::TypeInfo = ZHMTypeInfo("SEntityTemplateExposedEntity", SEntityTemplateExposedEntity::ToJson);

nlohmann::json SEntityTemplateExposedEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityTemplateExposedEntity*>(p_Object);

	s_Json["sName"] = {{ "$type", "ZString" }, { "$val", s_Object->sName.c_str() }};

	s_Json["bIsArray"] = {{ "$type", "bool" }, { "$val", s_Object->bIsArray }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aTargets)
		{
			s_JsonArray.push_back({{ "$type", "SEntityTemplateReference" }, { "$val", SEntityTemplateReference::ToJson(&s_Item) }});
		}

		s_Json["aTargets"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IItemContainer::TypeInfo = ZHMTypeInfo("IItemContainer", IItemContainer::ToJson);

nlohmann::json IItemContainer::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IItemContainer*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ICameraController::TypeInfo = ZHMTypeInfo("ICameraController", ICameraController::ToJson);

nlohmann::json ICameraController::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICameraController*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SContextActionSaveData::TypeInfo = ZHMTypeInfo("SContextActionSaveData", SContextActionSaveData::ToJson);

nlohmann::json SContextActionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SContextActionSaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_bTriggered"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTriggered }};

	s_Json["m_bShouldShow"] = {{ "$type", "bool" }, { "$val", s_Object->m_bShouldShow }};

	return s_Json;
}

ZHMTypeInfo ISequenceTrackGroup::TypeInfo = ZHMTypeInfo("ISequenceTrackGroup", ISequenceTrackGroup::ToJson);

nlohmann::json ISequenceTrackGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISequenceTrackGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IMorphemeCutSequenceAnimationEntity::TypeInfo = ZHMTypeInfo("IMorphemeCutSequenceAnimationEntity", IMorphemeCutSequenceAnimationEntity::ToJson);

nlohmann::json IMorphemeCutSequenceAnimationEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IMorphemeCutSequenceAnimationEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZChoiceManager::TypeInfo = ZHMTypeInfo("ZChoiceManager", ZChoiceManager::ToJson);

nlohmann::json ZChoiceManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZChoiceManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SDramaActorCollectionSaveData::TypeInfo = ZHMTypeInfo("SDramaActorCollectionSaveData", SDramaActorCollectionSaveData::ToJson);

nlohmann::json SDramaActorCollectionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDramaActorCollectionSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aStates)
		{
			s_JsonArray.push_back({{ "$type", "SDramaActorSaveState" }, { "$val", SDramaActorSaveState::ToJson(&s_Item) }});
		}

		s_Json["m_aStates"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SDramaSituationSaveData::TypeInfo = ZHMTypeInfo("SDramaSituationSaveData", SDramaSituationSaveData::ToJson);

nlohmann::json SDramaSituationSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDramaSituationSaveData*>(p_Object);

	s_Json["m_bSituationRunning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSituationRunning }};

	s_Json["m_bIsTerminated"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsTerminated }};

	s_Json["m_nPriorityModifier"] = {{ "$type", "float32" }, { "$val", s_Object->m_nPriorityModifier }};

	s_Json["m_nCurrentDrama"] = {{ "$type", "int32" }, { "$val", s_Object->m_nCurrentDrama }};

	s_Json["m_bProvidersStarted"] = {{ "$type", "bool" }, { "$val", s_Object->m_bProvidersStarted }};

	return s_Json;
}

ZHMTypeInfo SDramaSituationCollectionSaveData::TypeInfo = ZHMTypeInfo("SDramaSituationCollectionSaveData", SDramaSituationCollectionSaveData::ToJson);

nlohmann::json SDramaSituationCollectionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDramaSituationCollectionSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aStates)
		{
			s_JsonArray.push_back({{ "$type", "SDramaSituationSaveData" }, { "$val", SDramaSituationSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aStates"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_SuspiciousItemDropped::TypeInfo = ZHMTypeInfo("SCondition_SuspiciousItemDropped", SCondition_SuspiciousItemDropped::ToJson);

nlohmann::json SCondition_SuspiciousItemDropped::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SuspiciousItemDropped*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["includeWeapons"] = {{ "$type", "int32" }, { "$val", s_Object->includeWeapons }};

	return s_Json;
}

ZHMTypeInfo SDrama2SetupSaveData::TypeInfo = ZHMTypeInfo("SDrama2SetupSaveData", SDrama2SetupSaveData::ToJson);

nlohmann::json SDrama2SetupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDrama2SetupSaveData*>(p_Object);

	s_Json["m_bDoneTriggered"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDoneTriggered }};

	s_Json["m_eState"] = {{ "$type", "EScreenPlayState" }, { "$val", static_cast<int>(s_Object->m_eState) }};

	s_Json["m_rSituation"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSituation }};

	return s_Json;
}

ZHMTypeInfo SPostfilterParametersSaveData::TypeInfo = ZHMTypeInfo("SPostfilterParametersSaveData", SPostfilterParametersSaveData::ToJson);

nlohmann::json SPostfilterParametersSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPostfilterParametersSaveData*>(p_Object);

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	s_Json["m_bDepthOfFieldEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDepthOfFieldEnabled }};

	s_Json["m_fDepthOfFieldBlurriness"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDepthOfFieldBlurriness }};

	s_Json["m_bRadialBlurEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRadialBlurEnabled }};

	s_Json["m_fRadialBlurriness"] = {{ "$type", "float32" }, { "$val", s_Object->m_fRadialBlurriness }};

	s_Json["m_vRadialBlurCenter"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_vRadialBlurCenter) }};

	s_Json["m_fRadialBlurStart"] = {{ "$type", "float32" }, { "$val", s_Object->m_fRadialBlurStart }};

	s_Json["m_bSpatialBlurEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSpatialBlurEnabled }};

	s_Json["m_fSpatialBlurriness"] = {{ "$type", "float32" }, { "$val", s_Object->m_fSpatialBlurriness }};

	s_Json["m_vSpatialBlurCenter"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vSpatialBlurCenter) }};

	s_Json["m_fSpatialBlurStart"] = {{ "$type", "float32" }, { "$val", s_Object->m_fSpatialBlurStart }};

	s_Json["m_fSpatialBlurFade"] = {{ "$type", "float32" }, { "$val", s_Object->m_fSpatialBlurFade }};

	s_Json["m_bDistortionWobbleEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDistortionWobbleEnabled }};

	s_Json["m_fDistortionWobbleScale"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDistortionWobbleScale }};

	s_Json["m_vDistortionWobbleWaveLength"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_vDistortionWobbleWaveLength) }};

	s_Json["m_vDistortionWobbleSpeed"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_vDistortionWobbleSpeed) }};

	s_Json["m_bDistortionWobbleUseRealTime"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDistortionWobbleUseRealTime }};

	s_Json["m_bHDRActive"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHDRActive }};

	s_Json["m_bHDREnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHDREnabled }};

	s_Json["m_vHDRAdaptationSpeed"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_vHDRAdaptationSpeed) }};

	s_Json["m_vHDRAdaptationLuminanceMinMax"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_vHDRAdaptationLuminanceMinMax) }};

	s_Json["m_vHDRAdaptationMiddleGrayMinMax"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_vHDRAdaptationMiddleGrayMinMax) }};

	s_Json["m_fHDRWhitePoint"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHDRWhitePoint }};

	s_Json["m_fHDRBrightPassThreshold"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHDRBrightPassThreshold }};

	s_Json["m_fHDRBrightPassMaxPercentage"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHDRBrightPassMaxPercentage }};

	s_Json["m_HDRColorTint"] = {{ "$type", "SColorRGB" }, { "$val", SColorRGB::ToJson(&s_Object->m_HDRColorTint) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsDifficultyEqual::TypeInfo = ZHMTypeInfo("SCondition_IsDifficultyEqual", SCondition_IsDifficultyEqual::ToJson);

nlohmann::json SCondition_IsDifficultyEqual::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDifficultyEqual*>(p_Object);

	s_Json["difficultyLevel"] = {{ "$type", "int32" }, { "$val", s_Object->difficultyLevel }};

	return s_Json;
}

ZHMTypeInfo SMusicGridData::TypeInfo = ZHMTypeInfo("SMusicGridData", SMusicGridData::ToJson);

nlohmann::json SMusicGridData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMusicGridData*>(p_Object);

	s_Json["m_fGridDurationSec"] = {{ "$type", "float32" }, { "$val", s_Object->m_fGridDurationSec }};

	s_Json["m_fGridOffsetSec"] = {{ "$type", "float32" }, { "$val", s_Object->m_fGridOffsetSec }};

	return s_Json;
}

ZHMTypeInfo SItemWeaponSaveData::TypeInfo = ZHMTypeInfo("SItemWeaponSaveData", SItemWeaponSaveData::ToJson);

nlohmann::json SItemWeaponSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemWeaponSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_magazineBulletsByAmmoType)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_magazineBulletsByAmmoType"] = s_JsonArray;
	}

	s_Json["m_nExtraMagazineBullets"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nExtraMagazineBullets }};

	s_Json["m_ePendingDeathContext"] = {{ "$type", "EDeathContext" }, { "$val", static_cast<int>(s_Object->m_ePendingDeathContext) }};

	s_Json["m_eDeathContext"] = {{ "$type", "EDeathContext" }, { "$val", static_cast<int>(s_Object->m_eDeathContext) }};

	return s_Json;
}

ZHMTypeInfo SRenderMaterialSaveData::TypeInfo = ZHMTypeInfo("SRenderMaterialSaveData", SRenderMaterialSaveData::ToJson);

nlohmann::json SRenderMaterialSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRenderMaterialSaveData*>(p_Object);

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aDynamicParametersData)
		{
			s_JsonArray.push_back({{ "$type", "uint8" }, { "$val", s_Item }});
		}

		s_Json["m_aDynamicParametersData"] = s_JsonArray;
	}

	s_Json["m_bActive"] = {{ "$type", "bool" }, { "$val", s_Object->m_bActive }};

	return s_Json;
}

ZHMTypeInfo SChairSaveData::TypeInfo = ZHMTypeInfo("SChairSaveData", SChairSaveData::ToJson);

nlohmann::json SChairSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SChairSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	s_Json["m_bAttached"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAttached }};

	return s_Json;
}

ZHMTypeInfo ICharacterTransformState::TypeInfo = ZHMTypeInfo("ICharacterTransformState", ICharacterTransformState::ToJson);

nlohmann::json ICharacterTransformState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterTransformState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_OnlyLegalWeaponsDropped::TypeInfo = ZHMTypeInfo("SCondition_OnlyLegalWeaponsDropped", SCondition_OnlyLegalWeaponsDropped::ToJson);

nlohmann::json SCondition_OnlyLegalWeaponsDropped::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_OnlyLegalWeaponsDropped*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo SDecalSpawnSaveData::TypeInfo = ZHMTypeInfo("SDecalSpawnSaveData", SDecalSpawnSaveData::ToJson);

nlohmann::json SDecalSpawnSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDecalSpawnSaveData*>(p_Object);

	s_Json["m_bWasSpawned"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWasSpawned }};

	s_Json["m_vPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_vNormal"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vNormal) }};

	s_Json["m_vDirection"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vDirection) }};

	s_Json["m_vSize"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vSize) }};

	s_Json["m_Color"] = {{ "$type", "SColorRGB" }, { "$val", SColorRGB::ToJson(&s_Object->m_Color) }};

	s_Json["m_fAlpha"] = {{ "$type", "float32" }, { "$val", s_Object->m_fAlpha }};

	s_Json["m_fAngle"] = {{ "$type", "float32" }, { "$val", s_Object->m_fAngle }};

	s_Json["m_vUVOffset"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_vUVOffset) }};

	s_Json["m_vTiling"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_vTiling) }};

	s_Json["m_rBlockingSpatialEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rBlockingSpatialEntity }};

	return s_Json;
}

ZHMTypeInfo IEventChannel::TypeInfo = ZHMTypeInfo("IEventChannel", IEventChannel::ToJson);

nlohmann::json IEventChannel::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IEventChannel*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSpaceCollectionBehaviorConfiguration::TypeInfo = ZHMTypeInfo("SSpaceCollectionBehaviorConfiguration", SSpaceCollectionBehaviorConfiguration::ToJson);

nlohmann::json SSpaceCollectionBehaviorConfiguration::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSpaceCollectionBehaviorConfiguration*>(p_Object);

	s_Json["m_bInclusive"] = {{ "$type", "bool" }, { "$val", s_Object->m_bInclusive }};

	return s_Json;
}

ZHMTypeInfo SAIModifierServiceActorSaveData::TypeInfo = ZHMTypeInfo("SAIModifierServiceActorSaveData", SAIModifierServiceActorSaveData::ToJson);

nlohmann::json SAIModifierServiceActorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAIModifierServiceActorSaveData*>(p_Object);

	s_Json["m_rActorRef"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActorRef }};

	s_Json["m_bNeedsVolumeUpdate"] = {{ "$type", "bool" }, { "$val", s_Object->m_bNeedsVolumeUpdate }};

	s_Json["m_bNeedsKnowledgeUpdate"] = {{ "$type", "bool" }, { "$val", s_Object->m_bNeedsKnowledgeUpdate }};

	s_Json["m_uiModVolume"] = {{ "$type", "uint32" }, { "$val", s_Object->m_uiModVolume }};

	s_Json["m_uiModBehavior"] = {{ "$type", "uint32" }, { "$val", s_Object->m_uiModBehavior }};

	s_Json["m_uiModRole"] = {{ "$type", "uint32" }, { "$val", s_Object->m_uiModRole }};

	s_Json["m_uiModItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_uiModItem }};

	s_Json["m_uiModSituation"] = {{ "$type", "uint32" }, { "$val", s_Object->m_uiModSituation }};

	s_Json["m_uiModOutfit"] = {{ "$type", "uint32" }, { "$val", s_Object->m_uiModOutfit }};

	s_Json["m_uiModOverride"] = {{ "$type", "uint32" }, { "$val", s_Object->m_uiModOverride }};

	s_Json["m_uiModStatus"] = {{ "$type", "uint32" }, { "$val", s_Object->m_uiModStatus }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsRealCombatSituation::TypeInfo = ZHMTypeInfo("SCondition_IsRealCombatSituation", SCondition_IsRealCombatSituation::ToJson);

nlohmann::json SCondition_IsRealCombatSituation::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsRealCombatSituation*>(p_Object);

	s_Json["m_CombatSituations"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_CombatSituations) }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasLongTermMemory::TypeInfo = ZHMTypeInfo("SCondition_HasLongTermMemory", SCondition_HasLongTermMemory::ToJson);

nlohmann::json SCondition_HasLongTermMemory::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasLongTermMemory*>(p_Object);

	s_Json["m_Targets"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_Targets) }};

	return s_Json;
}

ZHMTypeInfo IDeferredParticlesEntity::TypeInfo = ZHMTypeInfo("IDeferredParticlesEntity", IDeferredParticlesEntity::ToJson);

nlohmann::json IDeferredParticlesEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IDeferredParticlesEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SEntityPath::TypeInfo = ZHMTypeInfo("SEntityPath", SEntityPath::ToJson);

nlohmann::json SEntityPath::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityPath*>(p_Object);

	s_Json["m_nOwnerID"] = {{ "$type", "uint64" }, { "$val", s_Object->m_nOwnerID }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntityPath)
		{
			s_JsonArray.push_back({{ "$type", "uint64" }, { "$val", s_Item }});
		}

		s_Json["m_aEntityPath"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SSniperCombatGroupSaveData::TypeInfo = ZHMTypeInfo("SSniperCombatGroupSaveData", SSniperCombatGroupSaveData::ToJson);

nlohmann::json SSniperCombatGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSniperCombatGroupSaveData*>(p_Object);

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_target"] = {{ "$type", "int32" }, { "$val", s_Object->m_target }};

	s_Json["m_bFailed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFailed }};

	s_Json["m_tEscapeTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tEscapeTime) }};

	s_Json["m_tLastTauntTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastTauntTime) }};

	return s_Json;
}

ZHMTypeInfo SItemSaveData::TypeInfo = ZHMTypeInfo("SItemSaveData", SItemSaveData::ToJson);

nlohmann::json SItemSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemSaveData*>(p_Object);

	s_Json["m_vPosition"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_vRotation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_vRotation) }};

	s_Json["m_bShowItem"] = {{ "$type", "bool" }, { "$val", s_Object->m_bShowItem }};

	s_Json["m_bEnablePickup"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnablePickup }};

	s_Json["m_bKinematic"] = {{ "$type", "bool" }, { "$val", s_Object->m_bKinematic }};

	s_Json["m_bSleeping"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSleeping }};

	s_Json["m_bIsPerceptible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsPerceptible }};

	s_Json["m_bDestroyed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDestroyed }};

	s_Json["m_vVelocity"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vVelocity) }};

	s_Json["m_rTransformParent"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rTransformParent }};

	s_Json["m_rSpawner"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSpawner }};

	s_Json["m_rOwner"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rOwner }};

	s_Json["m_rHoldingContainer"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rHoldingContainer }};

	s_Json["m_pPreviousOwner"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pPreviousOwner }};

	s_Json["m_bTurnedOn"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTurnedOn }};

	s_Json["m_bEverOwnedByHitman"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEverOwnedByHitman }};

	s_Json["m_bWasPlacedAndAttached"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWasPlacedAndAttached }};

	s_Json["m_bObjectInPhysicsWorld"] = {{ "$type", "bool" }, { "$val", s_Object->m_bObjectInPhysicsWorld }};

	s_Json["m_nQuantity"] = {{ "$type", "int32" }, { "$val", s_Object->m_nQuantity }};

	s_Json["m_eGlowType"] = {{ "$type", "ERenderGlowTypes" }, { "$val", static_cast<int>(s_Object->m_eGlowType) }};

	return s_Json;
}

ZHMTypeInfo SItemsSaveData::TypeInfo = ZHMTypeInfo("SItemsSaveData", SItemsSaveData::ToJson);

nlohmann::json SItemsSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemsSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SItemSaveData" }, { "$val", SItemSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SEscortOutOrderSaveData::TypeInfo = ZHMTypeInfo("SEscortOutOrderSaveData", SEscortOutOrderSaveData::ToJson);

nlohmann::json SEscortOutOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEscortOutOrderSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aExitPoints)
		{
			s_JsonArray.push_back({{ "$type", "float4" }, { "$val", float4::ToJson(&s_Item) }});
		}

		s_Json["m_aExitPoints"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IScreenplayListener::TypeInfo = ZHMTypeInfo("IScreenplayListener", IScreenplayListener::ToJson);

nlohmann::json IScreenplayListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IScreenplayListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZAMDEvent::TypeInfo = ZHMTypeInfo("ZAMDEvent", ZAMDEvent::ToJson);

nlohmann::json ZAMDEvent::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZAMDEvent*>(p_Object);

	s_Json["m_nEventID"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nEventID }};

	s_Json["m_fStartFraction"] = {{ "$type", "float32" }, { "$val", s_Object->m_fStartFraction }};

	s_Json["m_fDuration"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDuration }};

	s_Json["m_customData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_customData) }};

	return s_Json;
}

ZHMTypeInfo ZAMDEventTrack::TypeInfo = ZHMTypeInfo("ZAMDEventTrack", ZAMDEventTrack::ToJson);

nlohmann::json ZAMDEventTrack::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZAMDEventTrack*>(p_Object);

	s_Json["m_sName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sName.c_str() }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_events)
		{
			s_JsonArray.push_back({{ "$type", "ZAMDEvent" }, { "$val", ZAMDEvent::ToJson(&s_Item) }});
		}

		s_Json["m_events"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZAMDTake::TypeInfo = ZHMTypeInfo("ZAMDTake", ZAMDTake::ToJson);

nlohmann::json ZAMDTake::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZAMDTake*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_eventTracks)
		{
			s_JsonArray.push_back({{ "$type", "ZAMDEventTrack" }, { "$val", ZAMDEventTrack::ToJson(&s_Item) }});
		}

		s_Json["m_eventTracks"] = s_JsonArray;
	}

	s_Json["m_customData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_customData) }};

	s_Json["m_nSyncTrackIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_nSyncTrackIndex }};

	return s_Json;
}

ZHMTypeInfo SSniperScoringEvent::TypeInfo = ZHMTypeInfo("SSniperScoringEvent", SSniperScoringEvent::ToJson);

nlohmann::json SSniperScoringEvent::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSniperScoringEvent*>(p_Object);

	s_Json["m_iPoints"] = {{ "$type", "int32" }, { "$val", s_Object->m_iPoints }};

	s_Json["m_iPlayer"] = {{ "$type", "int32" }, { "$val", s_Object->m_iPlayer }};

	s_Json["m_sName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sName.c_str() }};

	s_Json["m_sText"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sText.c_str() }};

	s_Json["m_iType"] = {{ "$type", "int32" }, { "$val", s_Object->m_iType }};

	s_Json["m_iScoringMachine"] = {{ "$type", "uint8" }, { "$val", s_Object->m_iScoringMachine }};

	return s_Json;
}

ZHMTypeInfo SVariantStruct::TypeInfo = ZHMTypeInfo("SVariantStruct", SVariantStruct::ToJson);

nlohmann::json SVariantStruct::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVariantStruct*>(p_Object);

	s_Json["m_Data"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_Data) }};

	return s_Json;
}

ZHMTypeInfo SSavableEntitiesSaveData::TypeInfo = ZHMTypeInfo("SSavableEntitiesSaveData", SSavableEntitiesSaveData::ToJson);

nlohmann::json SSavableEntitiesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSavableEntitiesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntityData)
		{
			s_JsonArray.push_back({{ "$type", "SVariantStruct" }, { "$val", SVariantStruct::ToJson(&s_Item) }});
		}

		s_Json["m_aEntityData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IBoneWeightManagerEntity::TypeInfo = ZHMTypeInfo("IBoneWeightManagerEntity", IBoneWeightManagerEntity::ToJson);

nlohmann::json IBoneWeightManagerEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoneWeightManagerEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IUIMapExporter::TypeInfo = ZHMTypeInfo("IUIMapExporter", IUIMapExporter::ToJson);

nlohmann::json IUIMapExporter::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IUIMapExporter*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IFirearm::TypeInfo = ZHMTypeInfo("IFirearm", IFirearm::ToJson);

nlohmann::json IFirearm::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IFirearm*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsOwner::TypeInfo = ZHMTypeInfo("SCondition_IsOwner", SCondition_IsOwner::ToJson);

nlohmann::json SCondition_IsOwner::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsOwner*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	s_Json["character"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->character) }};

	return s_Json;
}

ZHMTypeInfo ZInvestigateWeaponGroup::TypeInfo = ZHMTypeInfo("ZInvestigateWeaponGroup", ZInvestigateWeaponGroup::ToJson);

nlohmann::json ZInvestigateWeaponGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZInvestigateWeaponGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IBallAndSocketConstraint::TypeInfo = ZHMTypeInfo("IBallAndSocketConstraint", IBallAndSocketConstraint::ToJson);

nlohmann::json IBallAndSocketConstraint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBallAndSocketConstraint*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IPrimitivesProvider::TypeInfo = ZHMTypeInfo("IPrimitivesProvider", IPrimitivesProvider::ToJson);

nlohmann::json IPrimitivesProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IPrimitivesProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SItsATrapSaveData::TypeInfo = ZHMTypeInfo("SItsATrapSaveData", SItsATrapSaveData::ToJson);

nlohmann::json SItsATrapSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItsATrapSaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_fTimer"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTimer }};

	return s_Json;
}

ZHMTypeInfo STrapsSaveData::TypeInfo = ZHMTypeInfo("STrapsSaveData", STrapsSaveData::ToJson);

nlohmann::json STrapsSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STrapsSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SItsATrapSaveData" }, { "$val", SItsATrapSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SEnvironmentConfigResourceEntry::TypeInfo = ZHMTypeInfo("SEnvironmentConfigResourceEntry", SEnvironmentConfigResourceEntry::ToJson);

nlohmann::json SEnvironmentConfigResourceEntry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEnvironmentConfigResourceEntry*>(p_Object);

	s_Json["Name"] = {{ "$type", "ZString" }, { "$val", s_Object->Name.c_str() }};

	s_Json["ContractsDatastoreRid"] = {{ "$type", "ZResourceID" }, { "$val", ZResourceID::ToJson(&s_Object->ContractsDatastoreRid) }};

	s_Json["UnlockablesDatastoreRid"] = {{ "$type", "ZResourceID" }, { "$val", ZResourceID::ToJson(&s_Object->UnlockablesDatastoreRid) }};

	s_Json["BlobsDatastoreRid"] = {{ "$type", "ZResourceID" }, { "$val", ZResourceID::ToJson(&s_Object->BlobsDatastoreRid) }};

	s_Json["ActivityDatastoreRid"] = {{ "$type", "ZResourceID" }, { "$val", ZResourceID::ToJson(&s_Object->ActivityDatastoreRid) }};

	return s_Json;
}

ZHMTypeInfo SEnvironmentConfigResource::TypeInfo = ZHMTypeInfo("SEnvironmentConfigResource", SEnvironmentConfigResource::ToJson);

nlohmann::json SEnvironmentConfigResource::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEnvironmentConfigResource*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->Environments)
		{
			s_JsonArray.push_back({{ "$type", "SEnvironmentConfigResourceEntry" }, { "$val", SEnvironmentConfigResourceEntry::ToJson(&s_Item) }});
		}

		s_Json["Environments"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_MaxDistance::TypeInfo = ZHMTypeInfo("SCondition_MaxDistance", SCondition_MaxDistance::ToJson);

nlohmann::json SCondition_MaxDistance::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxDistance*>(p_Object);

	s_Json["a0"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a0) }};

	s_Json["a1"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a1) }};

	s_Json["a2"] = {{ "$type", "float32" }, { "$val", s_Object->a2 }};

	return s_Json;
}

ZHMTypeInfo SActionRadialArcDisplayInfo::TypeInfo = ZHMTypeInfo("SActionRadialArcDisplayInfo", SActionRadialArcDisplayInfo::ToJson);

nlohmann::json SActionRadialArcDisplayInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActionRadialArcDisplayInfo*>(p_Object);

	s_Json["hidden"] = {{ "$type", "bool" }, { "$val", s_Object->hidden }};

	s_Json["locked"] = {{ "$type", "bool" }, { "$val", s_Object->locked }};

	s_Json["active"] = {{ "$type", "bool" }, { "$val", s_Object->active }};

	s_Json["illegal"] = {{ "$type", "bool" }, { "$val", s_Object->illegal }};

	s_Json["icon"] = {{ "$type", "int32" }, { "$val", s_Object->icon }};

	s_Json["label"] = {{ "$type", "ZString" }, { "$val", s_Object->label.c_str() }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasGoal::TypeInfo = ZHMTypeInfo("SCondition_HasGoal", SCondition_HasGoal::ToJson);

nlohmann::json SCondition_HasGoal::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasGoal*>(p_Object);

	s_Json["type"] = {{ "$type", "EAIGoal" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo SCondition_CanDistractionEscalateTo::TypeInfo = ZHMTypeInfo("SCondition_CanDistractionEscalateTo", SCondition_CanDistractionEscalateTo::ToJson);

nlohmann::json SCondition_CanDistractionEscalateTo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CanDistractionEscalateTo*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["newDistraction"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->newDistraction) }};

	return s_Json;
}

ZHMTypeInfo IGlobalRumbleController::TypeInfo = ZHMTypeInfo("IGlobalRumbleController", IGlobalRumbleController::ToJson);

nlohmann::json IGlobalRumbleController::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IGlobalRumbleController*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SVoidSignalEntitySaveData::TypeInfo = ZHMTypeInfo("SVoidSignalEntitySaveData", SVoidSignalEntitySaveData::ToJson);

nlohmann::json SVoidSignalEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVoidSignalEntitySaveData*>(p_Object);

	s_Json["m_bSignaling"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSignaling }};

	s_Json["m_fFiredAtTime"] = {{ "$type", "float32" }, { "$val", s_Object->m_fFiredAtTime }};

	return s_Json;
}

ZHMTypeInfo SIntelDataArray_dummy::TypeInfo = ZHMTypeInfo("SIntelDataArray_dummy", SIntelDataArray_dummy::ToJson);

nlohmann::json SIntelDataArray_dummy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SIntelDataArray_dummy*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->dummy)
		{
			s_JsonArray.push_back({{ "$type", "SIntelData" }, { "$val", SIntelData::ToJson(&s_Item) }});
		}

		s_Json["dummy"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_CanReactToDistractionType::TypeInfo = ZHMTypeInfo("SCondition_CanReactToDistractionType", SCondition_CanReactToDistractionType::ToJson);

nlohmann::json SCondition_CanReactToDistractionType::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CanReactToDistractionType*>(p_Object);

	s_Json["distractionType"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->distractionType) }};

	return s_Json;
}

ZHMTypeInfo IGameMode::TypeInfo = ZHMTypeInfo("IGameMode", IGameMode::ToJson);

nlohmann::json IGameMode::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IGameMode*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsSeasonTwoCombatEnabled::TypeInfo = ZHMTypeInfo("SCondition_IsSeasonTwoCombatEnabled", SCondition_IsSeasonTwoCombatEnabled::ToJson);

nlohmann::json SCondition_IsSeasonTwoCombatEnabled::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsSeasonTwoCombatEnabled*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsCurrentDistractionTarget::TypeInfo = ZHMTypeInfo("SCondition_IsCurrentDistractionTarget", SCondition_IsCurrentDistractionTarget::ToJson);

nlohmann::json SCondition_IsCurrentDistractionTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsCurrentDistractionTarget*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	return s_Json;
}

ZHMTypeInfo SIntelDisplayInfo::TypeInfo = ZHMTypeInfo("SIntelDisplayInfo", SIntelDisplayInfo::ToJson);

nlohmann::json SIntelDisplayInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SIntelDisplayInfo*>(p_Object);

	s_Json["index"] = {{ "$type", "int32" }, { "$val", s_Object->index }};

	s_Json["selected"] = {{ "$type", "bool" }, { "$val", s_Object->selected }};

	s_Json["active"] = {{ "$type", "bool" }, { "$val", s_Object->active }};

	s_Json["headline"] = {{ "$type", "ZString" }, { "$val", s_Object->headline.c_str() }};

	s_Json["bodyheadline"] = {{ "$type", "ZString" }, { "$val", s_Object->bodyheadline.c_str() }};

	s_Json["text"] = {{ "$type", "ZString" }, { "$val", s_Object->text.c_str() }};

	s_Json["img"] = {{ "$type", "ZString" }, { "$val", s_Object->img.c_str() }};

	return s_Json;
}

ZHMTypeInfo STargetInfoDisplayData_Dummy::TypeInfo = ZHMTypeInfo("STargetInfoDisplayData_Dummy", STargetInfoDisplayData_Dummy::ToJson);

nlohmann::json STargetInfoDisplayData_Dummy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STargetInfoDisplayData_Dummy*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->__dummy)
		{
			s_JsonArray.push_back({{ "$type", "STargetInfoDisplayData" }, { "$val", STargetInfoDisplayData::ToJson(&s_Item) }});
		}

		s_Json["__dummy"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SBehaviorTreeEvaluationLogEntry::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLogEntry", SBehaviorTreeEvaluationLogEntry::ToJson);

nlohmann::json SBehaviorTreeEvaluationLogEntry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

	s_Json["m_nBehaviorTreeIndex"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nBehaviorTreeIndex }};

	s_Json["m_nConditionOffset"] = {{ "$type", "uint64" }, { "$val", s_Object->m_nConditionOffset }};

	s_Json["m_bResult"] = {{ "$type", "bool" }, { "$val", s_Object->m_bResult }};

	return s_Json;
}

ZHMTypeInfo SBehaviorTreeEvaluationLog::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLog", SBehaviorTreeEvaluationLog::ToJson);

nlohmann::json SBehaviorTreeEvaluationLog::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_BehaviorTrees)
		{
			s_JsonArray.push_back({{ "$type", "ZResourceID" }, { "$val", ZResourceID::ToJson(&s_Item) }});
		}

		s_Json["m_BehaviorTrees"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_Entries)
		{
			s_JsonArray.push_back({{ "$type", "SBehaviorTreeEvaluationLogEntry" }, { "$val", SBehaviorTreeEvaluationLogEntry::ToJson(&s_Item) }});
		}

		s_Json["m_Entries"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SIntelListDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SIntelListDisplayInfoArray_dummy", SIntelListDisplayInfoArray_dummy::ToJson);

nlohmann::json SIntelListDisplayInfoArray_dummy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SIntelListDisplayInfoArray_dummy*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->dummy)
		{
			s_JsonArray.push_back({{ "$type", "SIntelListDisplayInfo" }, { "$val", SIntelListDisplayInfo::ToJson(&s_Item) }});
		}

		s_Json["dummy"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ISoundAmbienceElement::TypeInfo = ZHMTypeInfo("ISoundAmbienceElement", ISoundAmbienceElement::ToJson);

nlohmann::json ISoundAmbienceElement::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISoundAmbienceElement*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ISoundAmbienceGroup::TypeInfo = ZHMTypeInfo("ISoundAmbienceGroup", ISoundAmbienceGroup::ToJson);

nlohmann::json ISoundAmbienceGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISoundAmbienceGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SDrama2SituationSaveData::TypeInfo = ZHMTypeInfo("SDrama2SituationSaveData", SDrama2SituationSaveData::ToJson);

nlohmann::json SDrama2SituationSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDrama2SituationSaveData*>(p_Object);

	s_Json["m_nPriorityModifier"] = {{ "$type", "float32" }, { "$val", s_Object->m_nPriorityModifier }};

	s_Json["m_nCurrentDrama"] = {{ "$type", "int32" }, { "$val", s_Object->m_nCurrentDrama }};

	s_Json["m_nDoneTime"] = {{ "$type", "float32" }, { "$val", s_Object->m_nDoneTime }};

	s_Json["m_bIsOnCooldown"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsOnCooldown }};

	s_Json["m_bProvidersStarted"] = {{ "$type", "bool" }, { "$val", s_Object->m_bProvidersStarted }};

	s_Json["m_bSituationRunning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSituationRunning }};

	s_Json["m_bIsTerminated"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsTerminated }};

	return s_Json;
}

ZHMTypeInfo IPureWaterReflectable::TypeInfo = ZHMTypeInfo("IPureWaterReflectable", IPureWaterReflectable::ToJson);

nlohmann::json IPureWaterReflectable::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IPureWaterReflectable*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IPureWaterFunctionEntity::TypeInfo = ZHMTypeInfo("IPureWaterFunctionEntity", IPureWaterFunctionEntity::ToJson);

nlohmann::json IPureWaterFunctionEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IPureWaterFunctionEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IItemWeapon::TypeInfo = ZHMTypeInfo("IItemWeapon", IItemWeapon::ToJson);

nlohmann::json IItemWeapon::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IItemWeapon*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZApproachOrder::TypeInfo = ZHMTypeInfo("ZApproachOrder", ZApproachOrder::ToJson);

nlohmann::json ZApproachOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZApproachOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_HasUnhandledGoal::TypeInfo = ZHMTypeInfo("SCondition_HasUnhandledGoal", SCondition_HasUnhandledGoal::ToJson);

nlohmann::json SCondition_HasUnhandledGoal::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasUnhandledGoal*>(p_Object);

	s_Json["type"] = {{ "$type", "EAIGoal" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo ZRecoverUnconsciousGroup::TypeInfo = ZHMTypeInfo("ZRecoverUnconsciousGroup", ZRecoverUnconsciousGroup::ToJson);

nlohmann::json ZRecoverUnconsciousGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZRecoverUnconsciousGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SGetHelpOrderSaveData::TypeInfo = ZHMTypeInfo("SGetHelpOrderSaveData", SGetHelpOrderSaveData::ToJson);

nlohmann::json SGetHelpOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGetHelpOrderSaveData*>(p_Object);

	s_Json["m_helpType"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->m_helpType) }};

	s_Json["m_rInitialGuard"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rInitialGuard }};

	return s_Json;
}

ZHMTypeInfo SActorSoundDefs::TypeInfo = ZHMTypeInfo("SActorSoundDefs", SActorSoundDefs::ToJson);

nlohmann::json SActorSoundDefs::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorSoundDefs*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsDistractionTargetBeingHandled::TypeInfo = ZHMTypeInfo("SCondition_IsDistractionTargetBeingHandled", SCondition_IsDistractionTargetBeingHandled::ToJson);

nlohmann::json SCondition_IsDistractionTargetBeingHandled::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDistractionTargetBeingHandled*>(p_Object);

	s_Json["distractionTarget"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->distractionTarget) }};

	return s_Json;
}

ZHMTypeInfo IEntity::TypeInfo = ZHMTypeInfo("IEntity", IEntity::ToJson);

nlohmann::json IEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SActivity::TypeInfo = ZHMTypeInfo("SActivity", SActivity::ToJson);

nlohmann::json SActivity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActivity*>(p_Object);

	s_Json["id"] = {{ "$type", "ZGuid" }, { "$val", ZGuid::ToJson(&s_Object->id) }};

	s_Json["activityId"] = {{ "$type", "ZString" }, { "$val", s_Object->activityId.c_str() }};

	return s_Json;
}

ZHMTypeInfo SParticleEmitterSaveData::TypeInfo = ZHMTypeInfo("SParticleEmitterSaveData", SParticleEmitterSaveData::ToJson);

nlohmann::json SParticleEmitterSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SParticleEmitterSaveData*>(p_Object);

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	s_Json["m_bIsActivated"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsActivated }};

	s_Json["m_bIsVisible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsVisible }};

	s_Json["m_fEmissionTimeLeft"] = {{ "$type", "float32" }, { "$val", s_Object->m_fEmissionTimeLeft }};

	s_Json["m_fEmissionTimeFraction"] = {{ "$type", "float32" }, { "$val", s_Object->m_fEmissionTimeFraction }};

	s_Json["m_fEmissionCntLeft"] = {{ "$type", "float32" }, { "$val", s_Object->m_fEmissionCntLeft }};

	return s_Json;
}

ZHMTypeInfo IMorphemeCutSequenceAnimatable::TypeInfo = ZHMTypeInfo("IMorphemeCutSequenceAnimatable", IMorphemeCutSequenceAnimatable::ToJson);

nlohmann::json IMorphemeCutSequenceAnimatable::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IInputListener::TypeInfo = ZHMTypeInfo("IInputListener", IInputListener::ToJson);

nlohmann::json IInputListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IInputListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SHUDPIPControllerSaveData::TypeInfo = ZHMTypeInfo("SHUDPIPControllerSaveData", SHUDPIPControllerSaveData::ToJson);

nlohmann::json SHUDPIPControllerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHUDPIPControllerSaveData*>(p_Object);

	s_Json["m_bPiPEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPiPEnabled }};

	return s_Json;
}

ZHMTypeInfo SCombatZoneEntitySaveData::TypeInfo = ZHMTypeInfo("SCombatZoneEntitySaveData", SCombatZoneEntitySaveData::ToJson);

nlohmann::json SCombatZoneEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCombatZoneEntitySaveData*>(p_Object);

	s_Json["m_bIsInLockdown"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsInLockdown }};

	s_Json["m_bIsFalseAlarm"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsFalseAlarm }};

	s_Json["m_nState"] = {{ "$type", "ECombatZoneState" }, { "$val", static_cast<int>(s_Object->m_nState) }};

	s_Json["m_tLockdownTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLockdownTime) }};

	s_Json["m_tTriggerTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tTriggerTime) }};

	s_Json["m_tEngageTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tEngageTime) }};

	return s_Json;
}

ZHMTypeInfo ICharacterShowItemState::TypeInfo = ZHMTypeInfo("ICharacterShowItemState", ICharacterShowItemState::ToJson);

nlohmann::json ICharacterShowItemState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterShowItemState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCuriousEventServiceSaveData::TypeInfo = ZHMTypeInfo("SCuriousEventServiceSaveData", SCuriousEventServiceSaveData::ToJson);

nlohmann::json SCuriousEventServiceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCuriousEventServiceSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aCuriousEvents)
		{
			s_JsonArray.push_back({{ "$type", "SCuriousEventSaveData" }, { "$val", SCuriousEventSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aCuriousEvents"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZFaceOrder::TypeInfo = ZHMTypeInfo("ZFaceOrder", ZFaceOrder::ToJson);

nlohmann::json ZFaceOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZFaceOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo STimerEntityStateSaveData::TypeInfo = ZHMTypeInfo("STimerEntityStateSaveData", STimerEntityStateSaveData::ToJson);

nlohmann::json STimerEntityStateSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STimerEntityStateSaveData*>(p_Object);

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	s_Json["m_fNextEventTime"] = {{ "$type", "float32" }, { "$val", s_Object->m_fNextEventTime }};

	s_Json["m_bPending"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPending }};

	return s_Json;
}

ZHMTypeInfo SCondition_CanArrestReasonEscalateTo::TypeInfo = ZHMTypeInfo("SCondition_CanArrestReasonEscalateTo", SCondition_CanArrestReasonEscalateTo::ToJson);

nlohmann::json SCondition_CanArrestReasonEscalateTo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CanArrestReasonEscalateTo*>(p_Object);

	s_Json["targets"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->targets) }};

	s_Json["reason"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->reason) }};

	return s_Json;
}

ZHMTypeInfo ZChallengesManager::TypeInfo = ZHMTypeInfo("ZChallengesManager", ZChallengesManager::ToJson);

nlohmann::json ZChallengesManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZChallengesManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SWeaponStatusUIData::TypeInfo = ZHMTypeInfo("SWeaponStatusUIData", SWeaponStatusUIData::ToJson);

nlohmann::json SWeaponStatusUIData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SWeaponStatusUIData*>(p_Object);

	s_Json["icon"] = {{ "$type", "ZRuntimeResourceID" }, { "$val", ZRuntimeResourceID::ToJson(&s_Object->icon) }};

	s_Json["containedIcon"] = {{ "$type", "ZRuntimeResourceID" }, { "$val", ZRuntimeResourceID::ToJson(&s_Object->containedIcon) }};

	s_Json["sWeaponName"] = {{ "$type", "ZString" }, { "$val", s_Object->sWeaponName.c_str() }};

	s_Json["sContainedItemName"] = {{ "$type", "ZString" }, { "$val", s_Object->sContainedItemName.c_str() }};

	s_Json["nWeaponType"] = {{ "$type", "int32" }, { "$val", s_Object->nWeaponType }};

	s_Json["nItemHUDType"] = {{ "$type", "int32" }, { "$val", s_Object->nItemHUDType }};

	s_Json["nAmmoRemaining"] = {{ "$type", "int32" }, { "$val", s_Object->nAmmoRemaining }};

	s_Json["nAmmoTotal"] = {{ "$type", "int32" }, { "$val", s_Object->nAmmoTotal }};

	s_Json["nAmmoInClip"] = {{ "$type", "int32" }, { "$val", s_Object->nAmmoInClip }};

	s_Json["bSilenced"] = {{ "$type", "bool" }, { "$val", s_Object->bSilenced }};

	s_Json["bIsFirearm"] = {{ "$type", "bool" }, { "$val", s_Object->bIsFirearm }};

	s_Json["bHolstered"] = {{ "$type", "bool" }, { "$val", s_Object->bHolstered }};

	s_Json["bCannotBeHolstered"] = {{ "$type", "bool" }, { "$val", s_Object->bCannotBeHolstered }};

	s_Json["bHasItemToShow"] = {{ "$type", "bool" }, { "$val", s_Object->bHasItemToShow }};

	s_Json["bSuspicious"] = {{ "$type", "bool" }, { "$val", s_Object->bSuspicious }};

	s_Json["bIllegal"] = {{ "$type", "bool" }, { "$val", s_Object->bIllegal }};

	s_Json["bCanReload"] = {{ "$type", "bool" }, { "$val", s_Object->bCanReload }};

	s_Json["bIsReloading"] = {{ "$type", "bool" }, { "$val", s_Object->bIsReloading }};

	s_Json["fReloadDuration"] = {{ "$type", "float32" }, { "$val", s_Object->fReloadDuration }};

	s_Json["bInfiniteAmmo"] = {{ "$type", "bool" }, { "$val", s_Object->bInfiniteAmmo }};

	s_Json["bIsContainer"] = {{ "$type", "bool" }, { "$val", s_Object->bIsContainer }};

	s_Json["bContainsItem"] = {{ "$type", "bool" }, { "$val", s_Object->bContainsItem }};

	s_Json["nContainedItemHUDType"] = {{ "$type", "int32" }, { "$val", s_Object->nContainedItemHUDType }};

	s_Json["bContainedItemIllegal"] = {{ "$type", "bool" }, { "$val", s_Object->bContainedItemIllegal }};

	s_Json["bContainedItemSuspicious"] = {{ "$type", "bool" }, { "$val", s_Object->bContainedItemSuspicious }};

	s_Json["bContainedItemDetectedDuringFrisk"] = {{ "$type", "bool" }, { "$val", s_Object->bContainedItemDetectedDuringFrisk }};

	s_Json["fLastBulletFiredTime"] = {{ "$type", "float32" }, { "$val", s_Object->fLastBulletFiredTime }};

	s_Json["fTimeBetweenBullets"] = {{ "$type", "float32" }, { "$val", s_Object->fTimeBetweenBullets }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aPerks)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["aPerks"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aAmmoTypes)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["aAmmoTypes"] = s_JsonArray;
	}

	s_Json["nCurrentAmmoType"] = {{ "$type", "uint32" }, { "$val", s_Object->nCurrentAmmoType }};

	return s_Json;
}

ZHMTypeInfo IWaypoint::TypeInfo = ZHMTypeInfo("IWaypoint", IWaypoint::ToJson);

nlohmann::json IWaypoint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IWaypoint*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsHighestSeverityReasonToArrest::TypeInfo = ZHMTypeInfo("SCondition_IsHighestSeverityReasonToArrest", SCondition_IsHighestSeverityReasonToArrest::ToJson);

nlohmann::json SCondition_IsHighestSeverityReasonToArrest::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsHighestSeverityReasonToArrest*>(p_Object);

	s_Json["targets"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->targets) }};

	s_Json["reason"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->reason) }};

	return s_Json;
}

ZHMTypeInfo SCondition_CombatSituationsStandingDown::TypeInfo = ZHMTypeInfo("SCondition_CombatSituationsStandingDown", SCondition_CombatSituationsStandingDown::ToJson);

nlohmann::json SCondition_CombatSituationsStandingDown::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CombatSituationsStandingDown*>(p_Object);

	s_Json["m_CombatSituations"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_CombatSituations) }};

	return s_Json;
}

ZHMTypeInfo SItemOnBackUIData::TypeInfo = ZHMTypeInfo("SItemOnBackUIData", SItemOnBackUIData::ToJson);

nlohmann::json SItemOnBackUIData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemOnBackUIData*>(p_Object);

	s_Json["icon"] = {{ "$type", "ZRuntimeResourceID" }, { "$val", ZRuntimeResourceID::ToJson(&s_Object->icon) }};

	s_Json["nItemHUDType"] = {{ "$type", "int32" }, { "$val", s_Object->nItemHUDType }};

	s_Json["bHasItemToShow"] = {{ "$type", "bool" }, { "$val", s_Object->bHasItemToShow }};

	s_Json["bSuspicious"] = {{ "$type", "bool" }, { "$val", s_Object->bSuspicious }};

	s_Json["bIllegal"] = {{ "$type", "bool" }, { "$val", s_Object->bIllegal }};

	return s_Json;
}

ZHMTypeInfo ZAutoNullEntityRef::TypeInfo = ZHMTypeInfo("ZAutoNullEntityRef", ZAutoNullEntityRef::ToJson);

nlohmann::json ZAutoNullEntityRef::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZAutoNullEntityRef*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IKeywordHolderListener::TypeInfo = ZHMTypeInfo("IKeywordHolderListener", IKeywordHolderListener::ToJson);

nlohmann::json IKeywordHolderListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IKeywordHolderListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZWebSocketManager::TypeInfo = ZHMTypeInfo("ZWebSocketManager", ZWebSocketManager::ToJson);

nlohmann::json ZWebSocketManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZWebSocketManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector2", SMathMultiplyDivideSaveData_SVector2::ToJson);

nlohmann::json SMathMultiplyDivideSaveData_SVector2::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Object);

	s_Json["m_fA"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_fA) }};

	s_Json["m_fB"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_fB) }};

	s_Json["m_bDivide"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDivide }};

	return s_Json;
}

ZHMTypeInfo SMathMultipliesSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector2", SMathMultipliesSaveData_SVector2::ToJson);

nlohmann::json SMathMultipliesSaveData_SVector2::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathMultipliesSaveData_SVector2*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathMultiplyDivideSaveData_SVector2" }, { "$val", SMathMultiplyDivideSaveData_SVector2::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SMovementDragBodySaveData::TypeInfo = ZHMTypeInfo("SMovementDragBodySaveData", SMovementDragBodySaveData::ToJson);

nlohmann::json SMovementDragBodySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMovementDragBodySaveData*>(p_Object);

	s_Json["m_rDraggedActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rDraggedActor }};

	s_Json["m_nGrabBoneID"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nGrabBoneID }};

	return s_Json;
}

ZHMTypeInfo ZJumpToOrder::TypeInfo = ZHMTypeInfo("ZJumpToOrder", ZJumpToOrder::ToJson);

nlohmann::json ZJumpToOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZJumpToOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_HasPendingOrder::TypeInfo = ZHMTypeInfo("SCondition_HasPendingOrder", SCondition_HasPendingOrder::ToJson);

nlohmann::json SCondition_HasPendingOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasPendingOrder*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	s_Json["eOrder"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->eOrder) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsSuitcase::TypeInfo = ZHMTypeInfo("SCondition_IsSuitcase", SCondition_IsSuitcase::ToJson);

nlohmann::json SCondition_IsSuitcase::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsSuitcase*>(p_Object);

	s_Json["items"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->items) }};

	return s_Json;
}

ZHMTypeInfo SInventoryItem::TypeInfo = ZHMTypeInfo("SInventoryItem", SInventoryItem::ToJson);

nlohmann::json SInventoryItem::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryItem*>(p_Object);

	s_Json["sInstanceId"] = {{ "$type", "ZString" }, { "$val", s_Object->sInstanceId.c_str() }};

	s_Json["sUnlockableId"] = {{ "$type", "ZString" }, { "$val", s_Object->sUnlockableId.c_str() }};

	s_Json["repositoryId"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->repositoryId) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aRepositoryAssetIds)
		{
			s_JsonArray.push_back({{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Item) }});
		}

		s_Json["aRepositoryAssetIds"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aModifierIds)
		{
			s_JsonArray.push_back({{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Item) }});
		}

		s_Json["aModifierIds"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SContainerItemInfo::TypeInfo = ZHMTypeInfo("SContainerItemInfo", SContainerItemInfo::ToJson);

nlohmann::json SContainerItemInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SContainerItemInfo*>(p_Object);

	s_Json["m_sContainerInstanceId"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sContainerInstanceId.c_str() }};

	s_Json["m_concealedItem"] = {{ "$type", "SInventoryItem" }, { "$val", SInventoryItem::ToJson(&s_Object->m_concealedItem) }};

	return s_Json;
}

ZHMTypeInfo SInventoryInfo::TypeInfo = ZHMTypeInfo("SInventoryInfo", SInventoryInfo::ToJson);

nlohmann::json SInventoryInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryInfo*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aPockets)
		{
			s_JsonArray.push_back({{ "$type", "SInventoryItem" }, { "$val", SInventoryItem::ToJson(&s_Item) }});
		}

		s_Json["m_aPockets"] = s_JsonArray;
	}

	s_Json["m_CarriedItem"] = {{ "$type", "SInventoryItem" }, { "$val", SInventoryItem::ToJson(&s_Object->m_CarriedItem) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aContainerItems)
		{
			s_JsonArray.push_back({{ "$type", "SContainerItemInfo" }, { "$val", SContainerItemInfo::ToJson(&s_Item) }});
		}

		s_Json["m_aContainerItems"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SAgencyPickupInfo::TypeInfo = ZHMTypeInfo("SAgencyPickupInfo", SAgencyPickupInfo::ToJson);

nlohmann::json SAgencyPickupInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAgencyPickupInfo*>(p_Object);

	s_Json["m_AgencyPickupId"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_AgencyPickupId) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aItemIds)
		{
			s_JsonArray.push_back({{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Item) }});
		}

		s_Json["m_aItemIds"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aModifierIds)
		{
			s_JsonArray.push_back({{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Item) }});
		}

		s_Json["m_aModifierIds"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_MaxSharedEventExpired::TypeInfo = ZHMTypeInfo("SCondition_MaxSharedEventExpired", SCondition_MaxSharedEventExpired::ToJson);

nlohmann::json SCondition_MaxSharedEventExpired::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxSharedEventExpired*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["time"] = {{ "$type", "float32" }, { "$val", s_Object->time }};

	return s_Json;
}

ZHMTypeInfo SMovementDisguiseSafeZoneSaveData::TypeInfo = ZHMTypeInfo("SMovementDisguiseSafeZoneSaveData", SMovementDisguiseSafeZoneSaveData::ToJson);

nlohmann::json SMovementDisguiseSafeZoneSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMovementDisguiseSafeZoneSaveData*>(p_Object);

	s_Json["m_rSafeZone"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSafeZone }};

	s_Json["m_nSafeZoneAnimNode"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nSafeZoneAnimNode }};

	return s_Json;
}

ZHMTypeInfo IActorProxy::TypeInfo = ZHMTypeInfo("IActorProxy", IActorProxy::ToJson);

nlohmann::json IActorProxy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IActorProxy*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ISecuritySystemDevice::TypeInfo = ZHMTypeInfo("ISecuritySystemDevice", ISecuritySystemDevice::ToJson);

nlohmann::json ISecuritySystemDevice::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISecuritySystemDevice*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IllegalItemDropped::TypeInfo = ZHMTypeInfo("SCondition_IllegalItemDropped", SCondition_IllegalItemDropped::ToJson);

nlohmann::json SCondition_IllegalItemDropped::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IllegalItemDropped*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["includeWeapons"] = {{ "$type", "int32" }, { "$val", s_Object->includeWeapons }};

	return s_Json;
}

ZHMTypeInfo IFutureCameraState::TypeInfo = ZHMTypeInfo("IFutureCameraState", IFutureCameraState::ToJson);

nlohmann::json IFutureCameraState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IFutureCameraState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZCautiousVIPGroup::TypeInfo = ZHMTypeInfo("ZCautiousVIPGroup", ZCautiousVIPGroup::ToJson);

nlohmann::json ZCautiousVIPGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZCautiousVIPGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SContractObjectiveHudHintEntitySaveData::TypeInfo = ZHMTypeInfo("SContractObjectiveHudHintEntitySaveData", SContractObjectiveHudHintEntitySaveData::ToJson);

nlohmann::json SContractObjectiveHudHintEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SContractObjectiveHudHintEntitySaveData*>(p_Object);

	s_Json["m_bVisible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bVisible }};

	return s_Json;
}

ZHMTypeInfo SActOrderSaveData::TypeInfo = ZHMTypeInfo("SActOrderSaveData", SActOrderSaveData::ToJson);

nlohmann::json SActOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActOrderSaveData*>(p_Object);

	s_Json["m_sAct"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sAct.c_str() }};

	s_Json["m_fDuration"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDuration }};

	s_Json["m_rChildNetworkEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rChildNetworkEntity }};

	s_Json["m_faceTarget"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_faceTarget) }};

	s_Json["m_bBlendOutImmediatelyUponTimeout"] = {{ "$type", "bool" }, { "$val", s_Object->m_bBlendOutImmediatelyUponTimeout }};

	s_Json["m_bDropCarriedItems"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDropCarriedItems }};

	s_Json["m_bStopCurrentActFast"] = {{ "$type", "bool" }, { "$val", s_Object->m_bStopCurrentActFast }};

	return s_Json;
}

ZHMTypeInfo ISoundAmbienceController::TypeInfo = ZHMTypeInfo("ISoundAmbienceController", ISoundAmbienceController::ToJson);

nlohmann::json ISoundAmbienceController::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISoundAmbienceController*>(p_Object);

	return s_Json;
}

ZHMTypeInfo STimerEntityCommandSaveData::TypeInfo = ZHMTypeInfo("STimerEntityCommandSaveData", STimerEntityCommandSaveData::ToJson);

nlohmann::json STimerEntityCommandSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STimerEntityCommandSaveData*>(p_Object);

	s_Json["m_eType"] = {{ "$type", "ETimerEntityCommandType" }, { "$val", static_cast<int>(s_Object->m_eType) }};

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	s_Json["m_fInterval"] = {{ "$type", "float32" }, { "$val", s_Object->m_fInterval }};

	return s_Json;
}

ZHMTypeInfo SGameTimersSaveData::TypeInfo = ZHMTypeInfo("SGameTimersSaveData", SGameTimersSaveData::ToJson);

nlohmann::json SGameTimersSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGameTimersSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aTimerEntityCommands)
		{
			s_JsonArray.push_back({{ "$type", "STimerEntityCommandSaveData" }, { "$val", STimerEntityCommandSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aTimerEntityCommands"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aTimerEntityState)
		{
			s_JsonArray.push_back({{ "$type", "STimerEntityStateSaveData" }, { "$val", STimerEntityStateSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aTimerEntityState"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aPendingTimers)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aPendingTimers"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo STimerEntitySaveData::TypeInfo = ZHMTypeInfo("STimerEntitySaveData", STimerEntitySaveData::ToJson);

nlohmann::json STimerEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STimerEntitySaveData*>(p_Object);

	s_Json["m_nInterval"] = {{ "$type", "int32" }, { "$val", s_Object->m_nInterval }};

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_fTimeToNextEvent"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTimeToNextEvent }};

	return s_Json;
}

ZHMTypeInfo STimerEntitiesSaveData::TypeInfo = ZHMTypeInfo("STimerEntitiesSaveData", STimerEntitiesSaveData::ToJson);

nlohmann::json STimerEntitiesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STimerEntitiesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "STimerEntitySaveData" }, { "$val", STimerEntitySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo STimerManagerSaveData::TypeInfo = ZHMTypeInfo("STimerManagerSaveData", STimerManagerSaveData::ToJson);

nlohmann::json STimerManagerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STimerManagerSaveData*>(p_Object);

	s_Json["m_TimersData"] = {{ "$type", "STimerEntitiesSaveData" }, { "$val", STimerEntitiesSaveData::ToJson(&s_Object->m_TimersData) }};

	s_Json["m_RandomTimersData"] = {{ "$type", "SRandomTimerEntitiesSaveData" }, { "$val", SRandomTimerEntitiesSaveData::ToJson(&s_Object->m_RandomTimersData) }};

	s_Json["m_GameTimersData"] = {{ "$type", "SGameTimersSaveData" }, { "$val", SGameTimersSaveData::ToJson(&s_Object->m_GameTimersData) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsActorDeafBlind::TypeInfo = ZHMTypeInfo("SCondition_IsActorDeafBlind", SCondition_IsActorDeafBlind::ToJson);

nlohmann::json SCondition_IsActorDeafBlind::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsActorDeafBlind*>(p_Object);

	s_Json["m_Actors"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_Actors) }};

	return s_Json;
}

ZHMTypeInfo SFleeOrderSaveData::TypeInfo = ZHMTypeInfo("SFleeOrderSaveData", SFleeOrderSaveData::ToJson);

nlohmann::json SFleeOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SFleeOrderSaveData*>(p_Object);

	s_Json["m_eHelpReason"] = {{ "$type", "EDisturbanceType" }, { "$val", static_cast<int>(s_Object->m_eHelpReason) }};

	s_Json["m_nGridNodeIndex"] = {{ "$type", "uint16" }, { "$val", s_Object->m_nGridNodeIndex }};

	s_Json["m_bFleeForHelp"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFleeForHelp }};

	return s_Json;
}

ZHMTypeInfo SEvacuateSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SEvacuateSituationMemberSaveData", SEvacuateSituationMemberSaveData::ToJson);

nlohmann::json SEvacuateSituationMemberSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEvacuateSituationMemberSaveData*>(p_Object);

	s_Json["m_pGuardDutyPoint"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pGuardDutyPoint }};

	s_Json["m_nPatrolWaypointIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_nPatrolWaypointIndex }};

	s_Json["m_nPatrolWaypointSubIndex"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nPatrolWaypointSubIndex }};

	return s_Json;
}

ZHMTypeInfo ZDynamicObject::TypeInfo = ZHMTypeInfo("ZDynamicObject", ZDynamicObject::ToJson);

nlohmann::json ZDynamicObject::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZDynamicObject*>(p_Object);

	s_Json["m_value"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_value) }};

	return s_Json;
}

ZHMTypeInfo SOnlineEvent::TypeInfo = ZHMTypeInfo("SOnlineEvent", SOnlineEvent::ToJson);

nlohmann::json SOnlineEvent::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SOnlineEvent*>(p_Object);

	s_Json["sName"] = {{ "$type", "ZString" }, { "$val", s_Object->sName.c_str() }};

	s_Json["data"] = {{ "$type", "ZDynamicObject" }, { "$val", ZDynamicObject::ToJson(&s_Object->data) }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasCombatFightOrder::TypeInfo = ZHMTypeInfo("SCondition_HasCombatFightOrder", SCondition_HasCombatFightOrder::ToJson);

nlohmann::json SCondition_HasCombatFightOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasCombatFightOrder*>(p_Object);

	s_Json["m_CombatSituation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_CombatSituation) }};

	return s_Json;
}

ZHMTypeInfo SMatrix43::TypeInfo = ZHMTypeInfo("SMatrix43", SMatrix43::ToJson);

nlohmann::json SMatrix43::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMatrix43*>(p_Object);

	s_Json["XAxis"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->XAxis) }};

	s_Json["YAxis"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->YAxis) }};

	s_Json["ZAxis"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->ZAxis) }};

	s_Json["Trans"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->Trans) }};

	return s_Json;
}

ZHMTypeInfo ZSentryGroup::TypeInfo = ZHMTypeInfo("ZSentryGroup", ZSentryGroup::ToJson);

nlohmann::json ZSentryGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZSentryGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IHumanBody::TypeInfo = ZHMTypeInfo("IHumanBody", IHumanBody::ToJson);

nlohmann::json IHumanBody::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHumanBody*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAudioEmitterRTPCSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterRTPCSaveData", SAudioEmitterRTPCSaveData::ToJson);

nlohmann::json SAudioEmitterRTPCSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAudioEmitterRTPCSaveData*>(p_Object);

	s_Json["m_nParamId"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nParamId }};

	s_Json["m_fValue"] = {{ "$type", "float32" }, { "$val", s_Object->m_fValue }};

	return s_Json;
}

ZHMTypeInfo ZOnlineEventsClient::TypeInfo = ZHMTypeInfo("ZOnlineEventsClient", ZOnlineEventsClient::ToJson);

nlohmann::json ZOnlineEventsClient::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZOnlineEventsClient*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IColliderController::TypeInfo = ZHMTypeInfo("IColliderController", IColliderController::ToJson);

nlohmann::json IColliderController::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IColliderController*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IValueIntGet::TypeInfo = ZHMTypeInfo("IValueIntGet", IValueIntGet::ToJson);

nlohmann::json IValueIntGet::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueIntGet*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IActorPickerEffect::TypeInfo = ZHMTypeInfo("IActorPickerEffect", IActorPickerEffect::ToJson);

nlohmann::json IActorPickerEffect::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IActorPickerEffect*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IVariationResourceEntity::TypeInfo = ZHMTypeInfo("IVariationResourceEntity", IVariationResourceEntity::ToJson);

nlohmann::json IVariationResourceEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IVariationResourceEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SMapMarkerData::TypeInfo = ZHMTypeInfo("SMapMarkerData", SMapMarkerData::ToJson);

nlohmann::json SMapMarkerData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMapMarkerData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->pathPoints)
		{
			s_JsonArray.push_back({{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Item) }});
		}

		s_Json["pathPoints"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_IsOfActorRank::TypeInfo = ZHMTypeInfo("SCondition_IsOfActorRank", SCondition_IsOfActorRank::ToJson);

nlohmann::json SCondition_IsOfActorRank::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsOfActorRank*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["rank"] = {{ "$type", "EActorRank" }, { "$val", static_cast<int>(s_Object->rank) }};

	return s_Json;
}

ZHMTypeInfo SActivityExits::TypeInfo = ZHMTypeInfo("SActivityExits", SActivityExits::ToJson);

nlohmann::json SActivityExits::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActivityExits*>(p_Object);

	s_Json["activity"] = {{ "$type", "SActivity" }, { "$val", SActivity::ToJson(&s_Object->activity) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->exits)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["exits"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IActorSpreadTransitionOperator::TypeInfo = ZHMTypeInfo("IActorSpreadTransitionOperator", IActorSpreadTransitionOperator::ToJson);

nlohmann::json IActorSpreadTransitionOperator::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IActorSpreadTransitionOperator*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsConfiguredConditionTrue::TypeInfo = ZHMTypeInfo("SCondition_IsConfiguredConditionTrue", SCondition_IsConfiguredConditionTrue::ToJson);

nlohmann::json SCondition_IsConfiguredConditionTrue::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsConfiguredConditionTrue*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["condition"] = {{ "$type", "ZString" }, { "$val", s_Object->condition.c_str() }};

	return s_Json;
}

ZHMTypeInfo SValueBoolDelayedEntitySaveData::TypeInfo = ZHMTypeInfo("SValueBoolDelayedEntitySaveData", SValueBoolDelayedEntitySaveData::ToJson);

nlohmann::json SValueBoolDelayedEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SValueBoolDelayedEntitySaveData*>(p_Object);

	s_Json["m_bValue"] = {{ "$type", "bool" }, { "$val", s_Object->m_bValue }};

	s_Json["m_bWaitingValue"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWaitingValue }};

	s_Json["m_fTimeToNextEvent"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTimeToNextEvent }};

	return s_Json;
}

ZHMTypeInfo SLayerBehaviorConfiguration::TypeInfo = ZHMTypeInfo("SLayerBehaviorConfiguration", SLayerBehaviorConfiguration::ToJson);

nlohmann::json SLayerBehaviorConfiguration::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLayerBehaviorConfiguration*>(p_Object);

	s_Json["m_bTrigger"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTrigger }};

	s_Json["m_bCollector"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCollector }};

	return s_Json;
}

ZHMTypeInfo SSpatialMoverEntitySaveData::TypeInfo = ZHMTypeInfo("SSpatialMoverEntitySaveData", SSpatialMoverEntitySaveData::ToJson);

nlohmann::json SSpatialMoverEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSpatialMoverEntitySaveData*>(p_Object);

	s_Json["m_fSpeed"] = {{ "$type", "float32" }, { "$val", s_Object->m_fSpeed }};

	s_Json["m_vPosition"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_bBackwards"] = {{ "$type", "bool" }, { "$val", s_Object->m_bBackwards }};

	s_Json["m_bIsFrameUpdateRegistered"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsFrameUpdateRegistered }};

	return s_Json;
}

ZHMTypeInfo IBodybagEntity::TypeInfo = ZHMTypeInfo("IBodybagEntity", IBodybagEntity::ToJson);

nlohmann::json IBodybagEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBodybagEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SHeroCameraStandInSaveState::TypeInfo = ZHMTypeInfo("SHeroCameraStandInSaveState", SHeroCameraStandInSaveState::ToJson);

nlohmann::json SHeroCameraStandInSaveState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHeroCameraStandInSaveState*>(p_Object);

	s_Json["m_rHero"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rHero }};

	s_Json["m_bPaused"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPaused }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsActorAlive::TypeInfo = ZHMTypeInfo("SCondition_IsActorAlive", SCondition_IsActorAlive::ToJson);

nlohmann::json SCondition_IsActorAlive::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsActorAlive*>(p_Object);

	s_Json["m_Actors"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_Actors) }};

	return s_Json;
}

ZHMTypeInfo IPriorityNode::TypeInfo = ZHMTypeInfo("IPriorityNode", IPriorityNode::ToJson);

nlohmann::json IPriorityNode::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IPriorityNode*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IPhysicsAccessor::TypeInfo = ZHMTypeInfo("IPhysicsAccessor", IPhysicsAccessor::ToJson);

nlohmann::json IPhysicsAccessor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IPhysicsAccessor*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IFogBoxEntity::TypeInfo = ZHMTypeInfo("IFogBoxEntity", IFogBoxEntity::ToJson);

nlohmann::json IFogBoxEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IFogBoxEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ICollisionShapeListener::TypeInfo = ZHMTypeInfo("ICollisionShapeListener", ICollisionShapeListener::ToJson);

nlohmann::json ICollisionShapeListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICollisionShapeListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ILightEntity::TypeInfo = ZHMTypeInfo("ILightEntity", ILightEntity::ToJson);

nlohmann::json ILightEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ILightEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SMathLerpSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector4", SMathLerpSaveData_SVector4::ToJson);

nlohmann::json SMathLerpSaveData_SVector4::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpSaveData_SVector4*>(p_Object);

	s_Json["m_A"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_A) }};

	s_Json["m_B"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_B) }};

	s_Json["m_fT"] = {{ "$type", "float32" }, { "$val", s_Object->m_fT }};

	return s_Json;
}

ZHMTypeInfo SCondition_SituationIsType::TypeInfo = ZHMTypeInfo("SCondition_SituationIsType", SCondition_SituationIsType::ToJson);

nlohmann::json SCondition_SituationIsType::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SituationIsType*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	s_Json["type"] = {{ "$type", "ESituationType" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo SMathLerpSaveData_SColorRGB::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SColorRGB", SMathLerpSaveData_SColorRGB::ToJson);

nlohmann::json SMathLerpSaveData_SColorRGB::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpSaveData_SColorRGB*>(p_Object);

	s_Json["m_A"] = {{ "$type", "SColorRGB" }, { "$val", SColorRGB::ToJson(&s_Object->m_A) }};

	s_Json["m_B"] = {{ "$type", "SColorRGB" }, { "$val", SColorRGB::ToJson(&s_Object->m_B) }};

	s_Json["m_fT"] = {{ "$type", "float32" }, { "$val", s_Object->m_fT }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsInSniperIsland::TypeInfo = ZHMTypeInfo("SCondition_IsInSniperIsland", SCondition_IsInSniperIsland::ToJson);

nlohmann::json SCondition_IsInSniperIsland::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsInSniperIsland*>(p_Object);

	s_Json["a0"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a0) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsOfType::TypeInfo = ZHMTypeInfo("SCondition_IsOfType", SCondition_IsOfType::ToJson);

nlohmann::json SCondition_IsOfType::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsOfType*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EKnownEntityType" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo SWaveformGeneratorSaveData::TypeInfo = ZHMTypeInfo("SWaveformGeneratorSaveData", SWaveformGeneratorSaveData::ToJson);

nlohmann::json SWaveformGeneratorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SWaveformGeneratorSaveData*>(p_Object);

	s_Json["m_fTime"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTime }};

	s_Json["m_fFrequency"] = {{ "$type", "float32" }, { "$val", s_Object->m_fFrequency }};

	s_Json["m_fOffset"] = {{ "$type", "float32" }, { "$val", s_Object->m_fOffset }};

	s_Json["m_fScale"] = {{ "$type", "float32" }, { "$val", s_Object->m_fScale }};

	s_Json["m_fStartTime"] = {{ "$type", "float32" }, { "$val", s_Object->m_fStartTime }};

	s_Json["m_nCount"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nCount }};

	return s_Json;
}

ZHMTypeInfo SWaveformGeneratorManagerSaveData::TypeInfo = ZHMTypeInfo("SWaveformGeneratorManagerSaveData", SWaveformGeneratorManagerSaveData::ToJson);

nlohmann::json SWaveformGeneratorManagerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SWaveformGeneratorManagerSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aGenerators)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aGenerators"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aGeneratorData)
		{
			s_JsonArray.push_back({{ "$type", "SWaveformGeneratorSaveData" }, { "$val", SWaveformGeneratorSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aGeneratorData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_IsPreviousOwner::TypeInfo = ZHMTypeInfo("SCondition_IsPreviousOwner", SCondition_IsPreviousOwner::ToJson);

nlohmann::json SCondition_IsPreviousOwner::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsPreviousOwner*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	s_Json["character"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->character) }};

	return s_Json;
}

ZHMTypeInfo SScreenplayRole2HeroSaveState::TypeInfo = ZHMTypeInfo("SScreenplayRole2HeroSaveState", SScreenplayRole2HeroSaveState::ToJson);

nlohmann::json SScreenplayRole2HeroSaveState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SScreenplayRole2HeroSaveState*>(p_Object);

	s_Json["m_rCurrentSpeakEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCurrentSpeakEntity }};

	s_Json["m_bPaused"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPaused }};

	return s_Json;
}

ZHMTypeInfo SCondition_FindStashPointsForItem::TypeInfo = ZHMTypeInfo("SCondition_FindStashPointsForItem", SCondition_FindStashPointsForItem::ToJson);

nlohmann::json SCondition_FindStashPointsForItem::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_FindStashPointsForItem*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	return s_Json;
}

ZHMTypeInfo IPlaneEntity::TypeInfo = ZHMTypeInfo("IPlaneEntity", IPlaneEntity::ToJson);

nlohmann::json IPlaneEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IPlaneEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAIModifierServiceSaveData::TypeInfo = ZHMTypeInfo("SAIModifierServiceSaveData", SAIModifierServiceSaveData::ToJson);

nlohmann::json SAIModifierServiceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAIModifierServiceSaveData*>(p_Object);

	s_Json["m_bFullVolumeUpdate"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFullVolumeUpdate }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aActors)
		{
			s_JsonArray.push_back({{ "$type", "SAIModifierServiceActorSaveData" }, { "$val", SAIModifierServiceActorSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aActors"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActorSpreadTransitionOperatorMaterialActorSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadTransitionOperatorMaterialActorSaveData", SActorSpreadTransitionOperatorMaterialActorSaveData::ToJson);

nlohmann::json SActorSpreadTransitionOperatorMaterialActorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Object);

	s_Json["m_Actor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_Actor }};

	s_Json["m_fOpacity"] = {{ "$type", "float32" }, { "$val", s_Object->m_fOpacity }};

	return s_Json;
}

ZHMTypeInfo SActorSpreadTransitionOperatorMaterialSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadTransitionOperatorMaterialSaveData", SActorSpreadTransitionOperatorMaterialSaveData::ToJson);

nlohmann::json SActorSpreadTransitionOperatorMaterialSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aActorMaterialOverrides)
		{
			s_JsonArray.push_back({{ "$type", "SActorSpreadTransitionOperatorMaterialActorSaveData" }, { "$val", SActorSpreadTransitionOperatorMaterialActorSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aActorMaterialOverrides"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_MaxSharedEventAge::TypeInfo = ZHMTypeInfo("SCondition_MaxSharedEventAge", SCondition_MaxSharedEventAge::ToJson);

nlohmann::json SCondition_MaxSharedEventAge::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxSharedEventAge*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["age"] = {{ "$type", "float32" }, { "$val", s_Object->age }};

	return s_Json;
}

ZHMTypeInfo SHelpingActorSaveData::TypeInfo = ZHMTypeInfo("SHelpingActorSaveData", SHelpingActorSaveData::ToJson);

nlohmann::json SHelpingActorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHelpingActorSaveData*>(p_Object);

	s_Json["m_HelpTargetKnowledgeIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_HelpTargetKnowledgeIndex }};

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo SGetHelpServiceSaveData::TypeInfo = ZHMTypeInfo("SGetHelpServiceSaveData", SGetHelpServiceSaveData::ToJson);

nlohmann::json SGetHelpServiceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGetHelpServiceSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aHelpingActors)
		{
			s_JsonArray.push_back({{ "$type", "SHelpingActorSaveData" }, { "$val", SHelpingActorSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aHelpingActors"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IActorProvider::TypeInfo = ZHMTypeInfo("IActorProvider", IActorProvider::ToJson);

nlohmann::json IActorProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IActorProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IColorCorrectionCurvesEntity::TypeInfo = ZHMTypeInfo("IColorCorrectionCurvesEntity", IColorCorrectionCurvesEntity::ToJson);

nlohmann::json IColorCorrectionCurvesEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IColorCorrectionCurvesEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZGfxValueWrapper::TypeInfo = ZHMTypeInfo("ZGfxValueWrapper", ZGfxValueWrapper::ToJson);

nlohmann::json ZGfxValueWrapper::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGfxValueWrapper*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZSoundCollisionInfo::TypeInfo = ZHMTypeInfo("ZSoundCollisionInfo", ZSoundCollisionInfo::ToJson);

nlohmann::json ZSoundCollisionInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZSoundCollisionInfo*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_SuitcaseAssistanceRequesterRadio::TypeInfo = ZHMTypeInfo("SCondition_SuitcaseAssistanceRequesterRadio", SCondition_SuitcaseAssistanceRequesterRadio::ToJson);

nlohmann::json SCondition_SuitcaseAssistanceRequesterRadio::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SuitcaseAssistanceRequesterRadio*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IAISoundEventModifier::TypeInfo = ZHMTypeInfo("IAISoundEventModifier", IAISoundEventModifier::ToJson);

nlohmann::json IAISoundEventModifier::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IAISoundEventModifier*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZGridFloatField::TypeInfo = ZHMTypeInfo("ZGridFloatField", ZGridFloatField::ToJson);

nlohmann::json ZGridFloatField::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGridFloatField*>(p_Object);

	s_Json["m_fInitialValue"] = {{ "$type", "float32" }, { "$val", s_Object->m_fInitialValue }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_field)
		{
			s_JsonArray.push_back({{ "$type", "float32" }, { "$val", s_Item }});
		}

		s_Json["m_field"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZPatrolOrder::TypeInfo = ZHMTypeInfo("ZPatrolOrder", ZPatrolOrder::ToJson);

nlohmann::json ZPatrolOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZPatrolOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZActOrder::TypeInfo = ZHMTypeInfo("ZActOrder", ZActOrder::ToJson);

nlohmann::json ZActOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZActOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SMatrix33::TypeInfo = ZHMTypeInfo("SMatrix33", SMatrix33::ToJson);

nlohmann::json SMatrix33::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMatrix33*>(p_Object);

	s_Json["XAxis"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->XAxis) }};

	s_Json["YAxis"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->YAxis) }};

	s_Json["ZAxis"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->ZAxis) }};

	return s_Json;
}

ZHMTypeInfo IUIMovie::TypeInfo = ZHMTypeInfo("IUIMovie", IUIMovie::ToJson);

nlohmann::json IUIMovie::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IUIMovie*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_CanJoinSituation::TypeInfo = ZHMTypeInfo("SCondition_CanJoinSituation", SCondition_CanJoinSituation::ToJson);

nlohmann::json SCondition_CanJoinSituation::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CanJoinSituation*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	return s_Json;
}

ZHMTypeInfo IUIEventPins::TypeInfo = ZHMTypeInfo("IUIEventPins", IUIEventPins::ToJson);

nlohmann::json IUIEventPins::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IUIEventPins*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	return s_Json;
}

ZHMTypeInfo IPrimitivesListener::TypeInfo = ZHMTypeInfo("IPrimitivesListener", IPrimitivesListener::ToJson);

nlohmann::json IPrimitivesListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IPrimitivesListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SPatrolGroupSaveData::TypeInfo = ZHMTypeInfo("SPatrolGroupSaveData", SPatrolGroupSaveData::ToJson);

nlohmann::json SPatrolGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPatrolGroupSaveData*>(p_Object);

	s_Json["m_nRouteID"] = {{ "$type", "int32" }, { "$val", s_Object->m_nRouteID }};

	return s_Json;
}

ZHMTypeInfo IEngineMode::TypeInfo = ZHMTypeInfo("IEngineMode", IEngineMode::ToJson);

nlohmann::json IEngineMode::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IEngineMode*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_ActorsNotInSituation::TypeInfo = ZHMTypeInfo("SCondition_ActorsNotInSituation", SCondition_ActorsNotInSituation::ToJson);

nlohmann::json SCondition_ActorsNotInSituation::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_ActorsNotInSituation*>(p_Object);

	s_Json["type"] = {{ "$type", "ESituationType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["actors"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actors) }};

	return s_Json;
}

ZHMTypeInfo SCondition_PerceptibleEntityEndAfterMoveTo::TypeInfo = ZHMTypeInfo("SCondition_PerceptibleEntityEndAfterMoveTo", SCondition_PerceptibleEntityEndAfterMoveTo::ToJson);

nlohmann::json SCondition_PerceptibleEntityEndAfterMoveTo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_PerceptibleEntityEndAfterMoveTo*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	return s_Json;
}

ZHMTypeInfo SInventoryUISlot::TypeInfo = ZHMTypeInfo("SInventoryUISlot", SInventoryUISlot::ToJson);

nlohmann::json SInventoryUISlot::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryUISlot*>(p_Object);

	s_Json["label"] = {{ "$type", "ZString" }, { "$val", s_Object->label.c_str() }};

	s_Json["containedLabel"] = {{ "$type", "ZString" }, { "$val", s_Object->containedLabel.c_str() }};

	s_Json["description"] = {{ "$type", "ZString" }, { "$val", s_Object->description.c_str() }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->perks)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["perks"] = s_JsonArray;
	}

	s_Json["silencer"] = {{ "$type", "bool" }, { "$val", s_Object->silencer }};

	s_Json["count"] = {{ "$type", "int32" }, { "$val", s_Object->count }};

	s_Json["ammo"] = {{ "$type", "int32" }, { "$val", s_Object->ammo }};

	s_Json["id"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->id) }};

	s_Json["weaponCategory"] = {{ "$type", "ZString" }, { "$val", s_Object->weaponCategory.c_str() }};

	s_Json["nAmmoRemaining"] = {{ "$type", "int32" }, { "$val", s_Object->nAmmoRemaining }};

	s_Json["nAmmoTotal"] = {{ "$type", "int32" }, { "$val", s_Object->nAmmoTotal }};

	s_Json["nAmmoInClip"] = {{ "$type", "int32" }, { "$val", s_Object->nAmmoInClip }};

	s_Json["nWeaponType"] = {{ "$type", "int32" }, { "$val", s_Object->nWeaponType }};

	s_Json["nItemHUDType"] = {{ "$type", "int32" }, { "$val", s_Object->nItemHUDType }};

	s_Json["itemCategory"] = {{ "$type", "ZString" }, { "$val", s_Object->itemCategory.c_str() }};

	s_Json["itemCategoryLKey"] = {{ "$type", "ZString" }, { "$val", s_Object->itemCategoryLKey.c_str() }};

	s_Json["inventoryCategoryIcon"] = {{ "$type", "ZString" }, { "$val", s_Object->inventoryCategoryIcon.c_str() }};

	s_Json["isDroppable"] = {{ "$type", "bool" }, { "$val", s_Object->isDroppable }};

	s_Json["isContainer"] = {{ "$type", "bool" }, { "$val", s_Object->isContainer }};

	s_Json["containsItem"] = {{ "$type", "bool" }, { "$val", s_Object->containsItem }};

	s_Json["nContainedItemHUDType"] = {{ "$type", "int32" }, { "$val", s_Object->nContainedItemHUDType }};

	s_Json["bContainedItemIllegal"] = {{ "$type", "bool" }, { "$val", s_Object->bContainedItemIllegal }};

	s_Json["bContainedItemSuspicious"] = {{ "$type", "bool" }, { "$val", s_Object->bContainedItemSuspicious }};

	s_Json["bContainedItemDetectedDuringFrisk"] = {{ "$type", "bool" }, { "$val", s_Object->bContainedItemDetectedDuringFrisk }};

	s_Json["detectedDuringFrisk"] = {{ "$type", "bool" }, { "$val", s_Object->detectedDuringFrisk }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->actionAndKillTypes)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["actionAndKillTypes"] = s_JsonArray;
	}

	s_Json["suspicious"] = {{ "$type", "bool" }, { "$val", s_Object->suspicious }};

	s_Json["illegal"] = {{ "$type", "bool" }, { "$val", s_Object->illegal }};

	s_Json["canReload"] = {{ "$type", "bool" }, { "$val", s_Object->canReload }};

	s_Json["sPoisonType"] = {{ "$type", "ZString" }, { "$val", s_Object->sPoisonType.c_str() }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsSharedEventExpired::TypeInfo = ZHMTypeInfo("SCondition_IsSharedEventExpired", SCondition_IsSharedEventExpired::ToJson);

nlohmann::json SCondition_IsSharedEventExpired::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsSharedEventExpired*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo ITriggerVolume::TypeInfo = ZHMTypeInfo("ITriggerVolume", ITriggerVolume::ToJson);

nlohmann::json ITriggerVolume::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ITriggerVolume*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZHM5SequenceSkipManager::TypeInfo = ZHMTypeInfo("ZHM5SequenceSkipManager", ZHM5SequenceSkipManager::ToJson);

nlohmann::json ZHM5SequenceSkipManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZHM5SequenceSkipManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IValueColorRGBGet::TypeInfo = ZHMTypeInfo("IValueColorRGBGet", IValueColorRGBGet::ToJson);

nlohmann::json IValueColorRGBGet::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueColorRGBGet*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IHM5HMStateSoundController::TypeInfo = ZHMTypeInfo("IHM5HMStateSoundController", IHM5HMStateSoundController::ToJson);

nlohmann::json IHM5HMStateSoundController::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5HMStateSoundController*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SGeomScaleSaveData::TypeInfo = ZHMTypeInfo("SGeomScaleSaveData", SGeomScaleSaveData::ToJson);

nlohmann::json SGeomScaleSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGeomScaleSaveData*>(p_Object);

	s_Json["m_vPrimitiveScale"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_vPrimitiveScale) }};

	return s_Json;
}

ZHMTypeInfo IRenderCompositorEntity::TypeInfo = ZHMTypeInfo("IRenderCompositorEntity", IRenderCompositorEntity::ToJson);

nlohmann::json IRenderCompositorEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRenderCompositorEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_ShouldDistractionDiscardNewOcurrences::TypeInfo = ZHMTypeInfo("SCondition_ShouldDistractionDiscardNewOcurrences", SCondition_ShouldDistractionDiscardNewOcurrences::ToJson);

nlohmann::json SCondition_ShouldDistractionDiscardNewOcurrences::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_ShouldDistractionDiscardNewOcurrences*>(p_Object);

	s_Json["distraction"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->distraction) }};

	return s_Json;
}

ZHMTypeInfo ZComponentCreator::TypeInfo = ZHMTypeInfo("ZComponentCreator", ZComponentCreator::ToJson);

nlohmann::json ZComponentCreator::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZComponentCreator*>(p_Object);

	s_Json["m_sComponentName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sComponentName.c_str() }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aArgs)
		{
			s_JsonArray.push_back({{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Item) }});
		}

		s_Json["m_aArgs"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_IsActorRoleVIP::TypeInfo = ZHMTypeInfo("SCondition_IsActorRoleVIP", SCondition_IsActorRoleVIP::ToJson);

nlohmann::json SCondition_IsActorRoleVIP::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsActorRoleVIP*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsVisiblyPerceptible::TypeInfo = ZHMTypeInfo("SCondition_IsVisiblyPerceptible", SCondition_IsVisiblyPerceptible::ToJson);

nlohmann::json SCondition_IsVisiblyPerceptible::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsVisiblyPerceptible*>(p_Object);

	s_Json["items"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->items) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsItemIllegalOnHitman::TypeInfo = ZHMTypeInfo("SCondition_IsItemIllegalOnHitman", SCondition_IsItemIllegalOnHitman::ToJson);

nlohmann::json SCondition_IsItemIllegalOnHitman::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsItemIllegalOnHitman*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo ZGetHelpGroup::TypeInfo = ZHMTypeInfo("ZGetHelpGroup", ZGetHelpGroup::ToJson);

nlohmann::json ZGetHelpGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGetHelpGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_PreviousOwner::TypeInfo = ZHMTypeInfo("SCondition_PreviousOwner", SCondition_PreviousOwner::ToJson);

nlohmann::json SCondition_PreviousOwner::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_PreviousOwner*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	return s_Json;
}

ZHMTypeInfo SActorTagSaveData::TypeInfo = ZHMTypeInfo("SActorTagSaveData", SActorTagSaveData::ToJson);

nlohmann::json SActorTagSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorTagSaveData*>(p_Object);

	s_Json["m_bSeen"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSeen }};

	s_Json["m_bTagged"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTagged }};

	s_Json["m_rActorRef"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActorRef }};

	return s_Json;
}

ZHMTypeInfo SEvacuateTrespassGroupSaveData::TypeInfo = ZHMTypeInfo("SEvacuateTrespassGroupSaveData", SEvacuateTrespassGroupSaveData::ToJson);

nlohmann::json SEvacuateTrespassGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEvacuateTrespassGroupSaveData*>(p_Object);

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_target"] = {{ "$type", "int32" }, { "$val", s_Object->m_target }};

	s_Json["m_safeRoomNode"] = {{ "$type", "uint32" }, { "$val", s_Object->m_safeRoomNode }};

	s_Json["m_leader"] = {{ "$type", "uint32" }, { "$val", s_Object->m_leader }};

	s_Json["m_assistant"] = {{ "$type", "uint32" }, { "$val", s_Object->m_assistant }};

	s_Json["m_escalate"] = {{ "$type", "bool" }, { "$val", s_Object->m_escalate }};

	s_Json["m_completed"] = {{ "$type", "bool" }, { "$val", s_Object->m_completed }};

	s_Json["m_standDown"] = {{ "$type", "bool" }, { "$val", s_Object->m_standDown }};

	s_Json["m_warningCount"] = {{ "$type", "int32" }, { "$val", s_Object->m_warningCount }};

	return s_Json;
}

ZHMTypeInfo SColorRGBA::TypeInfo = ZHMTypeInfo("SColorRGBA", SColorRGBA::ToJson);

nlohmann::json SColorRGBA::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SColorRGBA*>(p_Object);

	s_Json["r"] = {{ "$type", "float32" }, { "$val", s_Object->r }};

	s_Json["g"] = {{ "$type", "float32" }, { "$val", s_Object->g }};

	s_Json["b"] = {{ "$type", "float32" }, { "$val", s_Object->b }};

	s_Json["a"] = {{ "$type", "float32" }, { "$val", s_Object->a }};

	return s_Json;
}

ZHMTypeInfo SMathLerpSaveData_SColorRGBA::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SColorRGBA", SMathLerpSaveData_SColorRGBA::ToJson);

nlohmann::json SMathLerpSaveData_SColorRGBA::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpSaveData_SColorRGBA*>(p_Object);

	s_Json["m_A"] = {{ "$type", "SColorRGBA" }, { "$val", SColorRGBA::ToJson(&s_Object->m_A) }};

	s_Json["m_B"] = {{ "$type", "SColorRGBA" }, { "$val", SColorRGBA::ToJson(&s_Object->m_B) }};

	s_Json["m_fT"] = {{ "$type", "float32" }, { "$val", s_Object->m_fT }};

	return s_Json;
}

ZHMTypeInfo SMathLerpsSaveData_SColorRGBA::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SColorRGBA", SMathLerpsSaveData_SColorRGBA::ToJson);

nlohmann::json SMathLerpsSaveData_SColorRGBA::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGBA*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathLerpSaveData_SColorRGBA" }, { "$val", SMathLerpSaveData_SColorRGBA::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ISoundGateController::TypeInfo = ZHMTypeInfo("ISoundGateController", ISoundGateController::ToJson);

nlohmann::json ISoundGateController::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISoundGateController*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IHM5Door::TypeInfo = ZHMTypeInfo("IHM5Door", IHM5Door::ToJson);

nlohmann::json IHM5Door::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5Door*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_AreVisibleWeaponsLegal::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleWeaponsLegal", SCondition_AreVisibleWeaponsLegal::ToJson);

nlohmann::json SCondition_AreVisibleWeaponsLegal::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_AreVisibleWeaponsLegal*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo SCondition_ThrownBy::TypeInfo = ZHMTypeInfo("SCondition_ThrownBy", SCondition_ThrownBy::ToJson);

nlohmann::json SCondition_ThrownBy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_ThrownBy*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	return s_Json;
}

ZHMTypeInfo SSoundAmbienceSaveData::TypeInfo = ZHMTypeInfo("SSoundAmbienceSaveData", SSoundAmbienceSaveData::ToJson);

nlohmann::json SSoundAmbienceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSoundAmbienceSaveData*>(p_Object);

	s_Json["m_rCurrentAmbience"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCurrentAmbience }};

	s_Json["m_rCurrentGate"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCurrentGate }};

	s_Json["m_fTransitionAmount"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTransitionAmount }};

	s_Json["m_bEnteredFromSide0"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnteredFromSide0 }};

	s_Json["m_bInTransition"] = {{ "$type", "bool" }, { "$val", s_Object->m_bInTransition }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsNewArrestEnabled::TypeInfo = ZHMTypeInfo("SCondition_IsNewArrestEnabled", SCondition_IsNewArrestEnabled::ToJson);

nlohmann::json SCondition_IsNewArrestEnabled::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsNewArrestEnabled*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SStashPointSaveData::TypeInfo = ZHMTypeInfo("SStashPointSaveData", SStashPointSaveData::ToJson);

nlohmann::json SStashPointSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SStashPointSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_arItems)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_arItems"] = s_JsonArray;
	}

	s_Json["m_pSuitcase"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pSuitcase }};

	s_Json["m_pMainItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pMainItem }};

	s_Json["m_eContainedType"] = {{ "$type", "EStashpointContainedEntityType" }, { "$val", static_cast<int>(s_Object->m_eContainedType) }};

	s_Json["m_MainItemID"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_MainItemID) }};

	return s_Json;
}

ZHMTypeInfo ISpeakEventListener::TypeInfo = ZHMTypeInfo("ISpeakEventListener", ISpeakEventListener::ToJson);

nlohmann::json ISpeakEventListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISpeakEventListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SShotListenerSaveData::TypeInfo = ZHMTypeInfo("SShotListenerSaveData", SShotListenerSaveData::ToJson);

nlohmann::json SShotListenerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SShotListenerSaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_bNPCShotProcessed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bNPCShotProcessed }};

	return s_Json;
}

ZHMTypeInfo SGuardBodySituationMemberSaveData::TypeInfo = ZHMTypeInfo("SGuardBodySituationMemberSaveData", SGuardBodySituationMemberSaveData::ToJson);

nlohmann::json SGuardBodySituationMemberSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGuardBodySituationMemberSaveData*>(p_Object);

	s_Json["m_bSearchingForMorgue"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSearchingForMorgue }};

	s_Json["m_IsExitingSuccessfulBehavior"] = {{ "$type", "bool" }, { "$val", s_Object->m_IsExitingSuccessfulBehavior }};

	s_Json["m_rDeadBody"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rDeadBody }};

	s_Json["m_rBodybag"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rBodybag }};

	return s_Json;
}

ZHMTypeInfo IAmmoProperties::TypeInfo = ZHMTypeInfo("IAmmoProperties", IAmmoProperties::ToJson);

nlohmann::json IAmmoProperties::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IAmmoProperties*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IMenuController::TypeInfo = ZHMTypeInfo("IMenuController", IMenuController::ToJson);

nlohmann::json IMenuController::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IMenuController*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAudioEmitterSwitchSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterSwitchSaveData", SAudioEmitterSwitchSaveData::ToJson);

nlohmann::json SAudioEmitterSwitchSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAudioEmitterSwitchSaveData*>(p_Object);

	s_Json["m_nGroupId"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nGroupId }};

	s_Json["m_nStateId"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nStateId }};

	return s_Json;
}

ZHMTypeInfo SMathDistanceSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector2", SMathDistanceSaveData_SVector2::ToJson);

nlohmann::json SMathDistanceSaveData_SVector2::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathDistanceSaveData_SVector2*>(p_Object);

	s_Json["m_fA"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_fA) }};

	s_Json["m_fB"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_fB) }};

	return s_Json;
}

ZHMTypeInfo ISavableEntity::TypeInfo = ZHMTypeInfo("ISavableEntity", ISavableEntity::ToJson);

nlohmann::json ISavableEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISavableEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MaxSituationAge::TypeInfo = ZHMTypeInfo("SCondition_MaxSituationAge", SCondition_MaxSituationAge::ToJson);

nlohmann::json SCondition_MaxSituationAge::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxSituationAge*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	s_Json["fMaxAge"] = {{ "$type", "float32" }, { "$val", s_Object->fMaxAge }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsLegal::TypeInfo = ZHMTypeInfo("SCondition_IsLegal", SCondition_IsLegal::ToJson);

nlohmann::json SCondition_IsLegal::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsLegal*>(p_Object);

	s_Json["legalType"] = {{ "$type", "EAILegalType" }, { "$val", static_cast<int>(s_Object->legalType) }};

	return s_Json;
}

ZHMTypeInfo SCondition_SuspiciousWeaponDropped::TypeInfo = ZHMTypeInfo("SCondition_SuspiciousWeaponDropped", SCondition_SuspiciousWeaponDropped::ToJson);

nlohmann::json SCondition_SuspiciousWeaponDropped::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SuspiciousWeaponDropped*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo SCCEffectSet::TypeInfo = ZHMTypeInfo("SCCEffectSet", SCCEffectSet::ToJson);

nlohmann::json SCCEffectSet::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCCEffectSet*>(p_Object);

	s_Json["m_eDecalEffect"] = {{ "$type", "ECCDecalEffect" }, { "$val", static_cast<int>(s_Object->m_eDecalEffect) }};

	s_Json["m_eEmitterEffect"] = {{ "$type", "ECCEmitterEffect" }, { "$val", static_cast<int>(s_Object->m_eEmitterEffect) }};

	return s_Json;
}

ZHMTypeInfo SCondition_MinSharedEventExpired::TypeInfo = ZHMTypeInfo("SCondition_MinSharedEventExpired", SCondition_MinSharedEventExpired::ToJson);

nlohmann::json SCondition_MinSharedEventExpired::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MinSharedEventExpired*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["time"] = {{ "$type", "float32" }, { "$val", s_Object->time }};

	return s_Json;
}

ZHMTypeInfo IHighResCutsceneEntity::TypeInfo = ZHMTypeInfo("IHighResCutsceneEntity", IHighResCutsceneEntity::ToJson);

nlohmann::json IHighResCutsceneEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHighResCutsceneEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IRenderPostfilterControllerEntity::TypeInfo = ZHMTypeInfo("IRenderPostfilterControllerEntity", IRenderPostfilterControllerEntity::ToJson);

nlohmann::json IRenderPostfilterControllerEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRenderPostfilterControllerEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAccessoryItemSaveData::TypeInfo = ZHMTypeInfo("SAccessoryItemSaveData", SAccessoryItemSaveData::ToJson);

nlohmann::json SAccessoryItemSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAccessoryItemSaveData*>(p_Object);

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	s_Json["m_nBoneId"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nBoneId }};

	s_Json["m_bAttached"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAttached }};

	s_Json["m_bVisible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bVisible }};

	return s_Json;
}

ZHMTypeInfo SInventoryUICache::TypeInfo = ZHMTypeInfo("SInventoryUICache", SInventoryUICache::ToJson);

nlohmann::json SInventoryUICache::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryUICache*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->mainslots)
		{
			s_JsonArray.push_back({{ "$type", "SInventoryUISlot" }, { "$val", SInventoryUISlot::ToJson(&s_Item) }});
		}

		s_Json["mainslots"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->otherslots)
		{
			s_JsonArray.push_back({{ "$type", "SInventoryUISlot" }, { "$val", SInventoryUISlot::ToJson(&s_Item) }});
		}

		s_Json["otherslots"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZFriskSuspectGroup::TypeInfo = ZHMTypeInfo("ZFriskSuspectGroup", ZFriskSuspectGroup::ToJson);

nlohmann::json ZFriskSuspectGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZFriskSuspectGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IDramaListener::TypeInfo = ZHMTypeInfo("IDramaListener", IDramaListener::ToJson);

nlohmann::json IDramaListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IDramaListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IMorphemeEntity::TypeInfo = ZHMTypeInfo("IMorphemeEntity", IMorphemeEntity::ToJson);

nlohmann::json IMorphemeEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IMorphemeEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SGuardBodySituationSaveData::TypeInfo = ZHMTypeInfo("SGuardBodySituationSaveData", SGuardBodySituationSaveData::ToJson);

nlohmann::json SGuardBodySituationSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGuardBodySituationSaveData*>(p_Object);

	s_Json["m_bBystanderFieldsFailed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bBystanderFieldsFailed }};

	s_Json["m_bLastGetHelpGroupFailed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLastGetHelpGroupFailed }};

	s_Json["m_bSomeoneCanSeeBody"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSomeoneCanSeeBody }};

	s_Json["m_bSomeoneHandledBodybag"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSomeoneHandledBodybag }};

	s_Json["m_pGetHelpGroup"] = {{ "$type", "int32" }, { "$val", s_Object->m_pGetHelpGroup }};

	return s_Json;
}

ZHMTypeInfo STargetTrackingSaveData::TypeInfo = ZHMTypeInfo("STargetTrackingSaveData", STargetTrackingSaveData::ToJson);

nlohmann::json STargetTrackingSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STargetTrackingSaveData*>(p_Object);

	s_Json["m_sharedTarget"] = {{ "$type", "int32" }, { "$val", s_Object->m_sharedTarget }};

	s_Json["m_position"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_position) }};

	s_Json["m_time"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_time) }};

	return s_Json;
}

ZHMTypeInfo STargetTrackingServiceSaveData::TypeInfo = ZHMTypeInfo("STargetTrackingServiceSaveData", STargetTrackingServiceSaveData::ToJson);

nlohmann::json STargetTrackingServiceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STargetTrackingServiceSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aTrackedTargets)
		{
			s_JsonArray.push_back({{ "$type", "STargetTrackingSaveData" }, { "$val", STargetTrackingSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aTrackedTargets"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_MaxDistanceToKnownPosition::TypeInfo = ZHMTypeInfo("SCondition_MaxDistanceToKnownPosition", SCondition_MaxDistanceToKnownPosition::ToJson);

nlohmann::json SCondition_MaxDistanceToKnownPosition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxDistanceToKnownPosition*>(p_Object);

	s_Json["a"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a) }};

	s_Json["fMaxDistance"] = {{ "$type", "float32" }, { "$val", s_Object->fMaxDistance }};

	return s_Json;
}

ZHMTypeInfo ZGuidString::TypeInfo = ZHMTypeInfo("ZGuidString", ZGuidString::ToJson);

nlohmann::json ZGuidString::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGuidString*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SRemoteControlReceiverSaveData::TypeInfo = ZHMTypeInfo("SRemoteControlReceiverSaveData", SRemoteControlReceiverSaveData::ToJson);

nlohmann::json SRemoteControlReceiverSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRemoteControlReceiverSaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_bReceiverActivated"] = {{ "$type", "bool" }, { "$val", s_Object->m_bReceiverActivated }};

	s_Json["m_bDestroyed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDestroyed }};

	return s_Json;
}

ZHMTypeInfo SMathLerpSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector2", SMathLerpSaveData_SVector2::ToJson);

nlohmann::json SMathLerpSaveData_SVector2::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpSaveData_SVector2*>(p_Object);

	s_Json["m_A"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_A) }};

	s_Json["m_B"] = {{ "$type", "SVector2" }, { "$val", SVector2::ToJson(&s_Object->m_B) }};

	s_Json["m_fT"] = {{ "$type", "float32" }, { "$val", s_Object->m_fT }};

	return s_Json;
}

ZHMTypeInfo SMathLerpsSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector2", SMathLerpsSaveData_SVector2::ToJson);

nlohmann::json SMathLerpsSaveData_SVector2::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpsSaveData_SVector2*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathLerpSaveData_SVector2" }, { "$val", SMathLerpSaveData_SVector2::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SLevelReferenceableEntitieSaveData::TypeInfo = ZHMTypeInfo("SLevelReferenceableEntitieSaveData", SLevelReferenceableEntitieSaveData::ToJson);

nlohmann::json SLevelReferenceableEntitieSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLevelReferenceableEntitieSaveData*>(p_Object);

	s_Json["m_sSceneResource"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sSceneResource.c_str() }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aAdditionalBrickResources)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["m_aAdditionalBrickResources"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZCautiousInvestigateGroup::TypeInfo = ZHMTypeInfo("ZCautiousInvestigateGroup", ZCautiousInvestigateGroup::ToJson);

nlohmann::json ZCautiousInvestigateGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZCautiousInvestigateGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IHM5AttentionDevice::TypeInfo = ZHMTypeInfo("IHM5AttentionDevice", IHM5AttentionDevice::ToJson);

nlohmann::json IHM5AttentionDevice::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5AttentionDevice*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSaveGameMetaData::TypeInfo = ZHMTypeInfo("SSaveGameMetaData", SSaveGameMetaData::ToJson);

nlohmann::json SSaveGameMetaData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSaveGameMetaData*>(p_Object);

	s_Json["nSlot"] = {{ "$type", "uint8" }, { "$val", s_Object->nSlot }};

	s_Json["eSaveType"] = {{ "$type", "ESaveType" }, { "$val", static_cast<int>(s_Object->eSaveType) }};

	s_Json["eDifficultyLevel"] = {{ "$type", "int32" }, { "$val", s_Object->eDifficultyLevel }};

	s_Json["sContractId"] = {{ "$type", "ZString" }, { "$val", s_Object->sContractId.c_str() }};

	s_Json["sContractTitle"] = {{ "$type", "ZString" }, { "$val", s_Object->sContractTitle.c_str() }};

	s_Json["sContractType"] = {{ "$type", "ZString" }, { "$val", s_Object->sContractType.c_str() }};

	s_Json["sLocationId"] = {{ "$type", "ZString" }, { "$val", s_Object->sLocationId.c_str() }};

	s_Json["sContractSessionId"] = {{ "$type", "ZString" }, { "$val", s_Object->sContractSessionId.c_str() }};

	s_Json["sLastEventToken"] = {{ "$type", "ZString" }, { "$val", s_Object->sLastEventToken.c_str() }};

	s_Json["bIsOnline"] = {{ "$type", "bool" }, { "$val", s_Object->bIsOnline }};

	s_Json["bIsVR"] = {{ "$type", "bool" }, { "$val", s_Object->bIsVR }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aScreenShot)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["aScreenShot"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aRequirements)
		{
			s_JsonArray.push_back({{ "$type", "ERequirementId" }, { "$val", static_cast<int>(s_Item) }});
		}

		s_Json["aRequirements"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SSaveGameHeader::TypeInfo = ZHMTypeInfo("SSaveGameHeader", SSaveGameHeader::ToJson);

nlohmann::json SSaveGameHeader::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSaveGameHeader*>(p_Object);

	s_Json["nFourCC"] = {{ "$type", "uint32" }, { "$val", s_Object->nFourCC }};

	s_Json["nVersion"] = {{ "$type", "uint32" }, { "$val", s_Object->nVersion }};

	s_Json["nCrc32"] = {{ "$type", "uint32" }, { "$val", s_Object->nCrc32 }};

	s_Json["nSize"] = {{ "$type", "uint32" }, { "$val", s_Object->nSize }};

	s_Json["nTimeStamp"] = {{ "$type", "int64" }, { "$val", s_Object->nTimeStamp }};

	s_Json["MetaData"] = {{ "$type", "SSaveGameMetaData" }, { "$val", SSaveGameMetaData::ToJson(&s_Object->MetaData) }};

	return s_Json;
}

ZHMTypeInfo SAnimatedActorReactOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorReactOrderSaveData", SAnimatedActorReactOrderSaveData::ToJson);

nlohmann::json SAnimatedActorReactOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAnimatedActorReactOrderSaveData*>(p_Object);

	s_Json["m_vFaceTarget"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vFaceTarget) }};

	s_Json["m_vLookAtTarget"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vLookAtTarget) }};

	s_Json["m_rChildNetworkEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rChildNetworkEntity }};

	s_Json["m_targetEmotionState"] = {{ "$type", "EActorEmotionState" }, { "$val", static_cast<int>(s_Object->m_targetEmotionState) }};

	s_Json["m_bDeadbody"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDeadbody }};

	s_Json["m_bExplosion"] = {{ "$type", "bool" }, { "$val", s_Object->m_bExplosion }};

	s_Json["m_bTrespassing"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTrespassing }};

	s_Json["m_bDropCarriedItems"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDropCarriedItems }};

	s_Json["m_bFaceTargetSet"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFaceTargetSet }};

	s_Json["m_bLookAtTargetSet"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLookAtTargetSet }};

	s_Json["m_sAct"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sAct.c_str() }};

	return s_Json;
}

ZHMTypeInfo SItemKeywordProxiesSaveData::TypeInfo = ZHMTypeInfo("SItemKeywordProxiesSaveData", SItemKeywordProxiesSaveData::ToJson);

nlohmann::json SItemKeywordProxiesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemKeywordProxiesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SItemKeywordProxySaveData" }, { "$val", SItemKeywordProxySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SDeadBodyInfoSaveData::TypeInfo = ZHMTypeInfo("SDeadBodyInfoSaveData", SDeadBodyInfoSaveData::ToJson);

nlohmann::json SDeadBodyInfoSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDeadBodyInfoSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	s_Json["m_rGuard"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rGuard }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_knownByActors)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_knownByActors"] = s_JsonArray;
	}

	s_Json["m_tKnownSince"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tKnownSince) }};

	s_Json["m_tInvestigatedSince"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tInvestigatedSince) }};

	s_Json["m_bGuarded"] = {{ "$type", "bool" }, { "$val", s_Object->m_bGuarded }};

	s_Json["m_bBodyInvestigated"] = {{ "$type", "bool" }, { "$val", s_Object->m_bBodyInvestigated }};

	s_Json["m_bHidden"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHidden }};

	s_Json["m_bDeadByAccident"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDeadByAccident }};

	s_Json["m_bDeadByUnnoticed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDeadByUnnoticed }};

	s_Json["m_bHitmanSuspectedInCurrentOutfit"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHitmanSuspectedInCurrentOutfit }};

	s_Json["m_bDeadByExplosion"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDeadByExplosion }};

	s_Json["m_IsFoundOutsideNavmeshAndIgnored"] = {{ "$type", "bool" }, { "$val", s_Object->m_IsFoundOutsideNavmeshAndIgnored }};

	return s_Json;
}

ZHMTypeInfo SDeadBodySensorSaveData::TypeInfo = ZHMTypeInfo("SDeadBodySensorSaveData", SDeadBodySensorSaveData::ToJson);

nlohmann::json SDeadBodySensorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDeadBodySensorSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBodies)
		{
			s_JsonArray.push_back({{ "$type", "SDeadBodyInfoSaveData" }, { "$val", SDeadBodyInfoSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aBodies"] = s_JsonArray;
	}

	s_Json["m_nBodyIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_nBodyIndex }};

	return s_Json;
}

ZHMTypeInfo IActorSpreadEvaluator::TypeInfo = ZHMTypeInfo("IActorSpreadEvaluator", IActorSpreadEvaluator::ToJson);

nlohmann::json IActorSpreadEvaluator::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IActorSpreadEvaluator*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SMatrix44::TypeInfo = ZHMTypeInfo("SMatrix44", SMatrix44::ToJson);

nlohmann::json SMatrix44::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMatrix44*>(p_Object);

	s_Json["m11"] = {{ "$type", "float32" }, { "$val", s_Object->m11 }};

	s_Json["m12"] = {{ "$type", "float32" }, { "$val", s_Object->m12 }};

	s_Json["m13"] = {{ "$type", "float32" }, { "$val", s_Object->m13 }};

	s_Json["m14"] = {{ "$type", "float32" }, { "$val", s_Object->m14 }};

	s_Json["m21"] = {{ "$type", "float32" }, { "$val", s_Object->m21 }};

	s_Json["m22"] = {{ "$type", "float32" }, { "$val", s_Object->m22 }};

	s_Json["m23"] = {{ "$type", "float32" }, { "$val", s_Object->m23 }};

	s_Json["m24"] = {{ "$type", "float32" }, { "$val", s_Object->m24 }};

	s_Json["m31"] = {{ "$type", "float32" }, { "$val", s_Object->m31 }};

	s_Json["m32"] = {{ "$type", "float32" }, { "$val", s_Object->m32 }};

	s_Json["m33"] = {{ "$type", "float32" }, { "$val", s_Object->m33 }};

	s_Json["m34"] = {{ "$type", "float32" }, { "$val", s_Object->m34 }};

	s_Json["m41"] = {{ "$type", "float32" }, { "$val", s_Object->m41 }};

	s_Json["m42"] = {{ "$type", "float32" }, { "$val", s_Object->m42 }};

	s_Json["m43"] = {{ "$type", "float32" }, { "$val", s_Object->m43 }};

	s_Json["m44"] = {{ "$type", "float32" }, { "$val", s_Object->m44 }};

	return s_Json;
}

ZHMTypeInfo SDestructibleInteractionHandlerData::TypeInfo = ZHMTypeInfo("SDestructibleInteractionHandlerData", SDestructibleInteractionHandlerData::ToJson);

nlohmann::json SDestructibleInteractionHandlerData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDestructibleInteractionHandlerData*>(p_Object);

	s_Json["m_fSettleTime"] = {{ "$type", "float32" }, { "$val", s_Object->m_fSettleTime }};

	return s_Json;
}

ZHMTypeInfo SItemActionSaveData::TypeInfo = ZHMTypeInfo("SItemActionSaveData", SItemActionSaveData::ToJson);

nlohmann::json SItemActionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemActionSaveData*>(p_Object);

	s_Json["m_rItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItem }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsAccidentScaleContext::TypeInfo = ZHMTypeInfo("SCondition_IsAccidentScaleContext", SCondition_IsAccidentScaleContext::ToJson);

nlohmann::json SCondition_IsAccidentScaleContext::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsAccidentScaleContext*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["scaleContextType"] = {{ "$type", "EAccidentScaleContext" }, { "$val", static_cast<int>(s_Object->scaleContextType) }};

	return s_Json;
}

ZHMTypeInfo ZDialogEventItemTypedIndex::TypeInfo = ZHMTypeInfo("ZDialogEventItemTypedIndex", ZDialogEventItemTypedIndex::ToJson);

nlohmann::json ZDialogEventItemTypedIndex::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZDialogEventItemTypedIndex*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IHingeConstraint::TypeInfo = ZHMTypeInfo("IHingeConstraint", IHingeConstraint::ToJson);

nlohmann::json IHingeConstraint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHingeConstraint*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IOnlineConfigurationListener::TypeInfo = ZHMTypeInfo("IOnlineConfigurationListener", IOnlineConfigurationListener::ToJson);

nlohmann::json IOnlineConfigurationListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IOnlineConfigurationListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SLampCoreSaveState::TypeInfo = ZHMTypeInfo("SLampCoreSaveState", SLampCoreSaveState::ToJson);

nlohmann::json SLampCoreSaveState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLampCoreSaveState*>(p_Object);

	s_Json["m_fDiffusePower"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDiffusePower }};

	s_Json["m_bSwitchState"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSwitchState }};

	return s_Json;
}

ZHMTypeInfo SLampCoreSaveData::TypeInfo = ZHMTypeInfo("SLampCoreSaveData", SLampCoreSaveData::ToJson);

nlohmann::json SLampCoreSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLampCoreSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SLampCoreSaveState" }, { "$val", SLampCoreSaveState::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SUIBreadcrumbDataSaveData::TypeInfo = ZHMTypeInfo("SUIBreadcrumbDataSaveData", SUIBreadcrumbDataSaveData::ToJson);

nlohmann::json SUIBreadcrumbDataSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SUIBreadcrumbDataSaveData*>(p_Object);

	s_Json["m_fProgress"] = {{ "$type", "float32" }, { "$val", s_Object->m_fProgress }};

	s_Json["m_nState"] = {{ "$type", "int32" }, { "$val", s_Object->m_nState }};

	return s_Json;
}

ZHMTypeInfo SAIVisionBlockerSaveData::TypeInfo = ZHMTypeInfo("SAIVisionBlockerSaveData", SAIVisionBlockerSaveData::ToJson);

nlohmann::json SAIVisionBlockerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAIVisionBlockerSaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	return s_Json;
}

ZHMTypeInfo SCondition_Current::TypeInfo = ZHMTypeInfo("SCondition_Current", SCondition_Current::ToJson);

nlohmann::json SCondition_Current::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_Current*>(p_Object);

	s_Json["type"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["nAndUnhandled"] = {{ "$type", "int32" }, { "$val", s_Object->nAndUnhandled }};

	return s_Json;
}

ZHMTypeInfo SBoneAttachSaveData::TypeInfo = ZHMTypeInfo("SBoneAttachSaveData", SBoneAttachSaveData::ToJson);

nlohmann::json SBoneAttachSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBoneAttachSaveData*>(p_Object);

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	s_Json["m_bIsAttached"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsAttached }};

	return s_Json;
}

ZHMTypeInfo SCondition_InfectedMayFollowPlayer::TypeInfo = ZHMTypeInfo("SCondition_InfectedMayFollowPlayer", SCondition_InfectedMayFollowPlayer::ToJson);

nlohmann::json SCondition_InfectedMayFollowPlayer::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_InfectedMayFollowPlayer*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	return s_Json;
}

ZHMTypeInfo IValueFloatListener::TypeInfo = ZHMTypeInfo("IValueFloatListener", IValueFloatListener::ToJson);

nlohmann::json IValueFloatListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueFloatListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SObserversGroupSaveData::TypeInfo = ZHMTypeInfo("SObserversGroupSaveData", SObserversGroupSaveData::ToJson);

nlohmann::json SObserversGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SObserversGroupSaveData*>(p_Object);

	s_Json["m_target"] = {{ "$type", "uint32" }, { "$val", s_Object->m_target }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aWaitingObservers)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aWaitingObservers"] = s_JsonArray;
	}

	s_Json["m_observerDistanceMax"] = {{ "$type", "float32" }, { "$val", s_Object->m_observerDistanceMax }};

	return s_Json;
}

ZHMTypeInfo ICharacterCombatState::TypeInfo = ZHMTypeInfo("ICharacterCombatState", ICharacterCombatState::ToJson);

nlohmann::json ICharacterCombatState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterCombatState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SMathMultiplyDivideSaveData_float32::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_float32", SMathMultiplyDivideSaveData_float32::ToJson);

nlohmann::json SMathMultiplyDivideSaveData_float32::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathMultiplyDivideSaveData_float32*>(p_Object);

	s_Json["m_fA"] = {{ "$type", "float32" }, { "$val", s_Object->m_fA }};

	s_Json["m_fB"] = {{ "$type", "float32" }, { "$val", s_Object->m_fB }};

	s_Json["m_bDivide"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDivide }};

	return s_Json;
}

ZHMTypeInfo IGateEntity::TypeInfo = ZHMTypeInfo("IGateEntity", IGateEntity::ToJson);

nlohmann::json IGateEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IGateEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IDestructionEffectInterface::TypeInfo = ZHMTypeInfo("IDestructionEffectInterface", IDestructionEffectInterface::ToJson);

nlohmann::json IDestructionEffectInterface::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IDestructionEffectInterface*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ITriggerListener::TypeInfo = ZHMTypeInfo("ITriggerListener", ITriggerListener::ToJson);

nlohmann::json ITriggerListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ITriggerListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZAgitatedBystanderOrder::TypeInfo = ZHMTypeInfo("ZAgitatedBystanderOrder", ZAgitatedBystanderOrder::ToJson);

nlohmann::json ZAgitatedBystanderOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZAgitatedBystanderOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSavableData::TypeInfo = ZHMTypeInfo("SSavableData", SSavableData::ToJson);

nlohmann::json SSavableData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSavableData*>(p_Object);

	s_Json["m_EntitiesData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_EntitiesData) }};

	s_Json["m_Data"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_Data) }};

	s_Json["m_nId"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nId }};

	return s_Json;
}

ZHMTypeInfo SCondition_CurrentSetpieceVisualDistractions::TypeInfo = ZHMTypeInfo("SCondition_CurrentSetpieceVisualDistractions", SCondition_CurrentSetpieceVisualDistractions::ToJson);

nlohmann::json SCondition_CurrentSetpieceVisualDistractions::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CurrentSetpieceVisualDistractions*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsItemSuspiciousOnHitman::TypeInfo = ZHMTypeInfo("SCondition_IsItemSuspiciousOnHitman", SCondition_IsItemSuspiciousOnHitman::ToJson);

nlohmann::json SCondition_IsItemSuspiciousOnHitman::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsItemSuspiciousOnHitman*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo IContextPropertyEntity::TypeInfo = ZHMTypeInfo("IContextPropertyEntity", IContextPropertyEntity::ToJson);

nlohmann::json IContextPropertyEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IContextPropertyEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IParticleColliderEntity::TypeInfo = ZHMTypeInfo("IParticleColliderEntity", IParticleColliderEntity::ToJson);

nlohmann::json IParticleColliderEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IParticleColliderEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IMiddleGrayCurveEntity::TypeInfo = ZHMTypeInfo("IMiddleGrayCurveEntity", IMiddleGrayCurveEntity::ToJson);

nlohmann::json IMiddleGrayCurveEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IMiddleGrayCurveEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZTriggerAlarmGroup::TypeInfo = ZHMTypeInfo("ZTriggerAlarmGroup", ZTriggerAlarmGroup::ToJson);

nlohmann::json ZTriggerAlarmGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZTriggerAlarmGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAudioEmitterSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterSaveData", SAudioEmitterSaveData::ToJson);

nlohmann::json SAudioEmitterSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAudioEmitterSaveData*>(p_Object);

	s_Json["m_rEmitter"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEmitter }};

	s_Json["m_nNumberOfEvents"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nNumberOfEvents }};

	s_Json["m_nNumberOfRTPCs"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nNumberOfRTPCs }};

	s_Json["m_nNumberOfSwitches"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nNumberOfSwitches }};

	return s_Json;
}

ZHMTypeInfo SAudioEmitterEventSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterEventSaveData", SAudioEmitterEventSaveData::ToJson);

nlohmann::json SAudioEmitterEventSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAudioEmitterEventSaveData*>(p_Object);

	s_Json["m_nEventId"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nEventId }};

	s_Json["m_bPaused"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPaused }};

	s_Json["m_nFlags"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nFlags }};

	s_Json["m_rEventSender"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEventSender }};

	s_Json["m_nSeekPosition"] = {{ "$type", "int32" }, { "$val", s_Object->m_nSeekPosition }};

	s_Json["m_nPlayState"] = {{ "$type", "uint8" }, { "$val", s_Object->m_nPlayState }};

	return s_Json;
}

ZHMTypeInfo SAudioEmitterStateSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterStateSaveData", SAudioEmitterStateSaveData::ToJson);

nlohmann::json SAudioEmitterStateSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAudioEmitterStateSaveData*>(p_Object);

	s_Json["m_nGroupId"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nGroupId }};

	s_Json["m_nStateId"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nStateId }};

	return s_Json;
}

ZHMTypeInfo SAudioSaveData::TypeInfo = ZHMTypeInfo("SAudioSaveData", SAudioSaveData::ToJson);

nlohmann::json SAudioSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAudioSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEmitters)
		{
			s_JsonArray.push_back({{ "$type", "SAudioEmitterSaveData" }, { "$val", SAudioEmitterSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aEmitters"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEmitterEvents)
		{
			s_JsonArray.push_back({{ "$type", "SAudioEmitterEventSaveData" }, { "$val", SAudioEmitterEventSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aEmitterEvents"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEmitterRTPCs)
		{
			s_JsonArray.push_back({{ "$type", "SAudioEmitterRTPCSaveData" }, { "$val", SAudioEmitterRTPCSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aEmitterRTPCs"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEmitterSwitches)
		{
			s_JsonArray.push_back({{ "$type", "SAudioEmitterSwitchSaveData" }, { "$val", SAudioEmitterSwitchSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aEmitterSwitches"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aGlobalStates)
		{
			s_JsonArray.push_back({{ "$type", "SAudioEmitterStateSaveData" }, { "$val", SAudioEmitterStateSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aGlobalStates"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aGlobalRTPCs)
		{
			s_JsonArray.push_back({{ "$type", "SAudioEmitterRTPCSaveData" }, { "$val", SAudioEmitterRTPCSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aGlobalRTPCs"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEventsEnabledAfterInit)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEventsEnabledAfterInit"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_HasSameOutfit::TypeInfo = ZHMTypeInfo("SCondition_HasSameOutfit", SCondition_HasSameOutfit::ToJson);

nlohmann::json SCondition_HasSameOutfit::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasSameOutfit*>(p_Object);

	s_Json["a0"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a0) }};

	s_Json["a1"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a1) }};

	return s_Json;
}

ZHMTypeInfo SMathMultipliesSaveData_float32::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_float32", SMathMultipliesSaveData_float32::ToJson);

nlohmann::json SMathMultipliesSaveData_float32::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathMultipliesSaveData_float32*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathMultiplyDivideSaveData_float32" }, { "$val", SMathMultiplyDivideSaveData_float32::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IFixedConstraint::TypeInfo = ZHMTypeInfo("IFixedConstraint", IFixedConstraint::ToJson);

nlohmann::json IFixedConstraint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IFixedConstraint*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSerializedValue::TypeInfo = ZHMTypeInfo("SSerializedValue", SSerializedValue::ToJson);

nlohmann::json SSerializedValue::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSerializedValue*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZManhuntGroup::TypeInfo = ZHMTypeInfo("ZManhuntGroup", ZManhuntGroup::ToJson);

nlohmann::json ZManhuntGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZManhuntGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsDifficultyLessOrEqual::TypeInfo = ZHMTypeInfo("SCondition_IsDifficultyLessOrEqual", SCondition_IsDifficultyLessOrEqual::ToJson);

nlohmann::json SCondition_IsDifficultyLessOrEqual::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDifficultyLessOrEqual*>(p_Object);

	s_Json["difficultyLevel"] = {{ "$type", "int32" }, { "$val", s_Object->difficultyLevel }};

	return s_Json;
}

ZHMTypeInfo IBoxReflectionEntity::TypeInfo = ZHMTypeInfo("IBoxReflectionEntity", IBoxReflectionEntity::ToJson);

nlohmann::json IBoxReflectionEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoxReflectionEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IPureWaterDisturbanceEntity::TypeInfo = ZHMTypeInfo("IPureWaterDisturbanceEntity", IPureWaterDisturbanceEntity::ToJson);

nlohmann::json IPureWaterDisturbanceEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IPureWaterDisturbanceEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsNull::TypeInfo = ZHMTypeInfo("SCondition_IsNull", SCondition_IsNull::ToJson);

nlohmann::json SCondition_IsNull::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsNull*>(p_Object);

	s_Json["ref"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->ref) }};

	return s_Json;
}

ZHMTypeInfo SCondition_OnlyLegalItemsDropped::TypeInfo = ZHMTypeInfo("SCondition_OnlyLegalItemsDropped", SCondition_OnlyLegalItemsDropped::ToJson);

nlohmann::json SCondition_OnlyLegalItemsDropped::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_OnlyLegalItemsDropped*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["includeWeapons"] = {{ "$type", "int32" }, { "$val", s_Object->includeWeapons }};

	return s_Json;
}

ZHMTypeInfo IAudioToggleEntity::TypeInfo = ZHMTypeInfo("IAudioToggleEntity", IAudioToggleEntity::ToJson);

nlohmann::json IAudioToggleEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IAudioToggleEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_OnlyLegalItemsPickedUp::TypeInfo = ZHMTypeInfo("SCondition_OnlyLegalItemsPickedUp", SCondition_OnlyLegalItemsPickedUp::ToJson);

nlohmann::json SCondition_OnlyLegalItemsPickedUp::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_OnlyLegalItemsPickedUp*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["includeWeapons"] = {{ "$type", "int32" }, { "$val", s_Object->includeWeapons }};

	return s_Json;
}

ZHMTypeInfo IDistanceConstraint::TypeInfo = ZHMTypeInfo("IDistanceConstraint", IDistanceConstraint::ToJson);

nlohmann::json IDistanceConstraint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IDistanceConstraint*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SDrama2ActorCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2ActorCollectionSaveData", SDrama2ActorCollectionSaveData::ToJson);

nlohmann::json SDrama2ActorCollectionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDrama2ActorCollectionSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aStates)
		{
			s_JsonArray.push_back({{ "$type", "SDrama2ActorSaveState" }, { "$val", SDrama2ActorSaveState::ToJson(&s_Item) }});
		}

		s_Json["m_aStates"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SDrama2SituationCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2SituationCollectionSaveData", SDrama2SituationCollectionSaveData::ToJson);

nlohmann::json SDrama2SituationCollectionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDrama2SituationCollectionSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aStates)
		{
			s_JsonArray.push_back({{ "$type", "SDrama2SituationSaveData" }, { "$val", SDrama2SituationSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aStates"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SDrama2SetupCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2SetupCollectionSaveData", SDrama2SetupCollectionSaveData::ToJson);

nlohmann::json SDrama2SetupCollectionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDrama2SetupCollectionSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aStates)
		{
			s_JsonArray.push_back({{ "$type", "SDrama2SetupSaveData" }, { "$val", SDrama2SetupSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aStates"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SInventoryUI::TypeInfo = ZHMTypeInfo("SInventoryUI", SInventoryUI::ToJson);

nlohmann::json SInventoryUI::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryUI*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->mainslotsSlim)
		{
			s_JsonArray.push_back({{ "$type", "SInventoryUISlotSlim" }, { "$val", SInventoryUISlotSlim::ToJson(&s_Item) }});
		}

		s_Json["mainslotsSlim"] = s_JsonArray;
	}

	s_Json["otherslotsCount"] = {{ "$type", "int32" }, { "$val", s_Object->otherslotsCount }};

	s_Json["selectedIndex"] = {{ "$type", "int32" }, { "$val", s_Object->selectedIndex }};

	s_Json["isActionInventory"] = {{ "$type", "bool" }, { "$val", s_Object->isActionInventory }};

	return s_Json;
}

ZHMTypeInfo SActorBoneAttachSaveData::TypeInfo = ZHMTypeInfo("SActorBoneAttachSaveData", SActorBoneAttachSaveData::ToJson);

nlohmann::json SActorBoneAttachSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorBoneAttachSaveData*>(p_Object);

	s_Json["m_rAttachmentTarget"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rAttachmentTarget }};

	s_Json["m_bIsAttached"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsAttached }};

	return s_Json;
}

ZHMTypeInfo SActorBoneAttachmentsSaveData::TypeInfo = ZHMTypeInfo("SActorBoneAttachmentsSaveData", SActorBoneAttachmentsSaveData::ToJson);

nlohmann::json SActorBoneAttachmentsSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorBoneAttachmentsSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SActorBoneAttachSaveData" }, { "$val", SActorBoneAttachSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IEditorUpdateSupplier::TypeInfo = ZHMTypeInfo("IEditorUpdateSupplier", IEditorUpdateSupplier::ToJson);

nlohmann::json IEditorUpdateSupplier::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IEditorUpdateSupplier*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_SituationFromActors::TypeInfo = ZHMTypeInfo("SCondition_SituationFromActors", SCondition_SituationFromActors::ToJson);

nlohmann::json SCondition_SituationFromActors::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SituationFromActors*>(p_Object);

	s_Json["type"] = {{ "$type", "ESituationType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["actors"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actors) }};

	return s_Json;
}

ZHMTypeInfo IBoolCondition::TypeInfo = ZHMTypeInfo("IBoolCondition", IBoolCondition::ToJson);

nlohmann::json IBoolCondition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoolCondition*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IRenderMaterialEntity::TypeInfo = ZHMTypeInfo("IRenderMaterialEntity", IRenderMaterialEntity::ToJson);

nlohmann::json IRenderMaterialEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRenderMaterialEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SItemInstanceSaveData::TypeInfo = ZHMTypeInfo("SItemInstanceSaveData", SItemInstanceSaveData::ToJson);

nlohmann::json SItemInstanceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemInstanceSaveData*>(p_Object);

	s_Json["m_repositoryId"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_repositoryId) }};

	s_Json["m_nEntityID"] = {{ "$type", "uint64" }, { "$val", s_Object->m_nEntityID }};

	s_Json["m_sOnlineInstanceId"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sOnlineInstanceId.c_str() }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aItemModifierIds)
		{
			s_JsonArray.push_back({{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Item) }});
		}

		s_Json["m_aItemModifierIds"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCppEntitySubsetInfo::TypeInfo = ZHMTypeInfo("SCppEntitySubsetInfo", SCppEntitySubsetInfo::ToJson);

nlohmann::json SCppEntitySubsetInfo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCppEntitySubsetInfo*>(p_Object);

	s_Json["name"] = {{ "$type", "ZString" }, { "$val", s_Object->name.c_str() }};

	s_Json["flags"] = {{ "$type", "uint32" }, { "$val", s_Object->flags }};

	return s_Json;
}

ZHMTypeInfo IHM5WeaponInventory::TypeInfo = ZHMTypeInfo("IHM5WeaponInventory", IHM5WeaponInventory::ToJson);

nlohmann::json IHM5WeaponInventory::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5WeaponInventory*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZAnimationBonePose::TypeInfo = ZHMTypeInfo("ZAnimationBonePose", ZAnimationBonePose::ToJson);

nlohmann::json ZAnimationBonePose::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZAnimationBonePose*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_HasCustomDistractionAckSoundDef::TypeInfo = ZHMTypeInfo("SCondition_HasCustomDistractionAckSoundDef", SCondition_HasCustomDistractionAckSoundDef::ToJson);

nlohmann::json SCondition_HasCustomDistractionAckSoundDef::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasCustomDistractionAckSoundDef*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	return s_Json;
}

ZHMTypeInfo SKeywordSaveData::TypeInfo = ZHMTypeInfo("SKeywordSaveData", SKeywordSaveData::ToJson);

nlohmann::json SKeywordSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SKeywordSaveData*>(p_Object);

	s_Json["m_HolderSaveableId"] = {{ "$type", "uint32" }, { "$val", s_Object->m_HolderSaveableId }};

	s_Json["m_KeywordID"] = {{ "$type", "int32" }, { "$val", s_Object->m_KeywordID }};

	return s_Json;
}

ZHMTypeInfo IHM5ActionDevice::TypeInfo = ZHMTypeInfo("IHM5ActionDevice", IHM5ActionDevice::ToJson);

nlohmann::json IHM5ActionDevice::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5ActionDevice*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_GetItemDroppedBy::TypeInfo = ZHMTypeInfo("SCondition_GetItemDroppedBy", SCondition_GetItemDroppedBy::ToJson);

nlohmann::json SCondition_GetItemDroppedBy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_GetItemDroppedBy*>(p_Object);

	s_Json["character"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->character) }};

	return s_Json;
}

ZHMTypeInfo SExposedEntityTypeDescriptor::TypeInfo = ZHMTypeInfo("SExposedEntityTypeDescriptor", SExposedEntityTypeDescriptor::ToJson);

nlohmann::json SExposedEntityTypeDescriptor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SExposedEntityTypeDescriptor*>(p_Object);

	s_Json["sName"] = {{ "$type", "ZString" }, { "$val", s_Object->sName.c_str() }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->types)
		{
			s_JsonArray.push_back({{ "$type", "ZResourceID" }, { "$val", ZResourceID::ToJson(&s_Item) }});
		}

		s_Json["types"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aSupportedTypes)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["aSupportedTypes"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SComboDeviceBinding::TypeInfo = ZHMTypeInfo("SComboDeviceBinding", SComboDeviceBinding::ToJson);

nlohmann::json SComboDeviceBinding::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SComboDeviceBinding*>(p_Object);

	s_Json["type"] = {{ "$type", "uint32" }, { "$val", s_Object->type }};

	s_Json["button"] = {{ "$type", "uint32" }, { "$val", s_Object->button }};

	return s_Json;
}

ZHMTypeInfo ZFleeOrder::TypeInfo = ZHMTypeInfo("ZFleeOrder", ZFleeOrder::ToJson);

nlohmann::json ZFleeOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZFleeOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MinDistance::TypeInfo = ZHMTypeInfo("SCondition_MinDistance", SCondition_MinDistance::ToJson);

nlohmann::json SCondition_MinDistance::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MinDistance*>(p_Object);

	s_Json["a0"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a0) }};

	s_Json["a1"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a1) }};

	s_Json["a2"] = {{ "$type", "float32" }, { "$val", s_Object->a2 }};

	return s_Json;
}

ZHMTypeInfo SPIPMessageManagerProxySaveData::TypeInfo = ZHMTypeInfo("SPIPMessageManagerProxySaveData", SPIPMessageManagerProxySaveData::ToJson);

nlohmann::json SPIPMessageManagerProxySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPIPMessageManagerProxySaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	return s_Json;
}

ZHMTypeInfo SHintEntrySaveData::TypeInfo = ZHMTypeInfo("SHintEntrySaveData", SHintEntrySaveData::ToJson);

nlohmann::json SHintEntrySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHintEntrySaveData*>(p_Object);

	s_Json["m_bIsValid"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsValid }};

	s_Json["m_hint"] = {{ "$type", "uint32" }, { "$val", s_Object->m_hint }};

	s_Json["m_context"] = {{ "$type", "uint32" }, { "$val", s_Object->m_context }};

	return s_Json;
}

ZHMTypeInfo IEventConsumerCollection::TypeInfo = ZHMTypeInfo("IEventConsumerCollection", IEventConsumerCollection::ToJson);

nlohmann::json IEventConsumerCollection::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IEventConsumerCollection*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MaxActualDistance2D::TypeInfo = ZHMTypeInfo("SCondition_MaxActualDistance2D", SCondition_MaxActualDistance2D::ToJson);

nlohmann::json SCondition_MaxActualDistance2D::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxActualDistance2D*>(p_Object);

	s_Json["m_From"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_From) }};

	s_Json["m_To"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_To) }};

	s_Json["m_Distance"] = {{ "$type", "float32" }, { "$val", s_Object->m_Distance }};

	return s_Json;
}

ZHMTypeInfo IItemOwner::TypeInfo = ZHMTypeInfo("IItemOwner", IItemOwner::ToJson);

nlohmann::json IItemOwner::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IItemOwner*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCharacterSpeakEntitySaveData::TypeInfo = ZHMTypeInfo("SCharacterSpeakEntitySaveData", SCharacterSpeakEntitySaveData::ToJson);

nlohmann::json SCharacterSpeakEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCharacterSpeakEntitySaveData*>(p_Object);

	s_Json["m_fSeekPosition"] = {{ "$type", "float32" }, { "$val", s_Object->m_fSeekPosition }};

	s_Json["m_nRandomSelectionSeed"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nRandomSelectionSeed }};

	s_Json["m_bWereSubtitlesSeen"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWereSubtitlesSeen }};

	return s_Json;
}

ZHMTypeInfo ZWorldMapMetaData::TypeInfo = ZHMTypeInfo("ZWorldMapMetaData", ZWorldMapMetaData::ToJson);

nlohmann::json ZWorldMapMetaData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZWorldMapMetaData*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsItemLegalOnHitman::TypeInfo = ZHMTypeInfo("SCondition_IsItemLegalOnHitman", SCondition_IsItemLegalOnHitman::ToJson);

nlohmann::json SCondition_IsItemLegalOnHitman::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsItemLegalOnHitman*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo ICharacterLocationState::TypeInfo = ZHMTypeInfo("ICharacterLocationState", ICharacterLocationState::ToJson);

nlohmann::json ICharacterLocationState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterLocationState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ISequenceAudioPlayer::TypeInfo = ZHMTypeInfo("ISequenceAudioPlayer", ISequenceAudioPlayer::ToJson);

nlohmann::json ISequenceAudioPlayer::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISequenceAudioPlayer*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_SuitcaseAssistanceRequesterFaceToFace::TypeInfo = ZHMTypeInfo("SCondition_SuitcaseAssistanceRequesterFaceToFace", SCondition_SuitcaseAssistanceRequesterFaceToFace::ToJson);

nlohmann::json SCondition_SuitcaseAssistanceRequesterFaceToFace::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SuitcaseAssistanceRequesterFaceToFace*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_RemoveCombatSituationsStandingDown::TypeInfo = ZHMTypeInfo("SCondition_RemoveCombatSituationsStandingDown", SCondition_RemoveCombatSituationsStandingDown::ToJson);

nlohmann::json SCondition_RemoveCombatSituationsStandingDown::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_RemoveCombatSituationsStandingDown*>(p_Object);

	s_Json["m_CombatSituations"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_CombatSituations) }};

	return s_Json;
}

ZHMTypeInfo SMathDistanceSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector4", SMathDistanceSaveData_SVector4::ToJson);

nlohmann::json SMathDistanceSaveData_SVector4::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathDistanceSaveData_SVector4*>(p_Object);

	s_Json["m_fA"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_fA) }};

	s_Json["m_fB"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_fB) }};

	return s_Json;
}

ZHMTypeInfo SCondition_SituationFromTarget::TypeInfo = ZHMTypeInfo("SCondition_SituationFromTarget", SCondition_SituationFromTarget::ToJson);

nlohmann::json SCondition_SituationFromTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SituationFromTarget*>(p_Object);

	s_Json["type"] = {{ "$type", "ESituationType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["targets"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->targets) }};

	return s_Json;
}

ZHMTypeInfo ILocationSurface::TypeInfo = ZHMTypeInfo("ILocationSurface", ILocationSurface::ToJson);

nlohmann::json ILocationSurface::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ILocationSurface*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SActorSpreadControllerCandidateSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadControllerCandidateSaveData", SActorSpreadControllerCandidateSaveData::ToJson);

nlohmann::json SActorSpreadControllerCandidateSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorSpreadControllerCandidateSaveData*>(p_Object);

	s_Json["m_CandidateActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_CandidateActor }};

	s_Json["m_CandidateTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_CandidateTime) }};

	s_Json["m_bValidCandidate"] = {{ "$type", "bool" }, { "$val", s_Object->m_bValidCandidate }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsAccidentBystandingGuardSearching::TypeInfo = ZHMTypeInfo("SCondition_IsAccidentBystandingGuardSearching", SCondition_IsAccidentBystandingGuardSearching::ToJson);

nlohmann::json SCondition_IsAccidentBystandingGuardSearching::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsAccidentBystandingGuardSearching*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	return s_Json;
}

ZHMTypeInfo SCondition_AreVisibleItemsSuspicious::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleItemsSuspicious", SCondition_AreVisibleItemsSuspicious::ToJson);

nlohmann::json SCondition_AreVisibleItemsSuspicious::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_AreVisibleItemsSuspicious*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["includeWeapons"] = {{ "$type", "int32" }, { "$val", s_Object->includeWeapons }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsHighestPriorityTypeToInvestigateFor::TypeInfo = ZHMTypeInfo("SCondition_IsHighestPriorityTypeToInvestigateFor", SCondition_IsHighestPriorityTypeToInvestigateFor::ToJson);

nlohmann::json SCondition_IsHighestPriorityTypeToInvestigateFor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsHighestPriorityTypeToInvestigateFor*>(p_Object);

	s_Json["otherNPC"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->otherNPC) }};

	s_Json["distractionType"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->distractionType) }};

	return s_Json;
}

ZHMTypeInfo ZMapTrackerListProvider::TypeInfo = ZHMTypeInfo("ZMapTrackerListProvider", ZMapTrackerListProvider::ToJson);

nlohmann::json ZMapTrackerListProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZMapTrackerListProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAgitatedBystanderOrderSaveData::TypeInfo = ZHMTypeInfo("SAgitatedBystanderOrderSaveData", SAgitatedBystanderOrderSaveData::ToJson);

nlohmann::json SAgitatedBystanderOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAgitatedBystanderOrderSaveData*>(p_Object);

	s_Json["m_rBystanderPoint"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rBystanderPoint }};

	s_Json["m_vCover"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vCover) }};

	s_Json["m_vCoverDir"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vCoverDir) }};

	return s_Json;
}

ZHMTypeInfo IValueVector2Get::TypeInfo = ZHMTypeInfo("IValueVector2Get", IValueVector2Get::ToJson);

nlohmann::json IValueVector2Get::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueVector2Get*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IEnableConditionListener::TypeInfo = ZHMTypeInfo("IEnableConditionListener", IEnableConditionListener::ToJson);

nlohmann::json IEnableConditionListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IEnableConditionListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZAttentionToPersonGroup::TypeInfo = ZHMTypeInfo("ZAttentionToPersonGroup", ZAttentionToPersonGroup::ToJson);

nlohmann::json ZAttentionToPersonGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZAttentionToPersonGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IWorldMapMarker::TypeInfo = ZHMTypeInfo("IWorldMapMarker", IWorldMapMarker::ToJson);

nlohmann::json IWorldMapMarker::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IWorldMapMarker*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IDynamicPhysics::TypeInfo = ZHMTypeInfo("IDynamicPhysics", IDynamicPhysics::ToJson);

nlohmann::json IDynamicPhysics::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IDynamicPhysics*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IShatterSystem::TypeInfo = ZHMTypeInfo("IShatterSystem", IShatterSystem::ToJson);

nlohmann::json IShatterSystem::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IShatterSystem*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_AreVisibleWeaponsSuspicious::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleWeaponsSuspicious", SCondition_AreVisibleWeaponsSuspicious::ToJson);

nlohmann::json SCondition_AreVisibleWeaponsSuspicious::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_AreVisibleWeaponsSuspicious*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasConfiguredSpeak::TypeInfo = ZHMTypeInfo("SCondition_HasConfiguredSpeak", SCondition_HasConfiguredSpeak::ToJson);

nlohmann::json SCondition_HasConfiguredSpeak::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasConfiguredSpeak*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["speak"] = {{ "$type", "ZString" }, { "$val", s_Object->speak.c_str() }};

	return s_Json;
}

ZHMTypeInfo SCondition_IllegalWeaponDropped::TypeInfo = ZHMTypeInfo("SCondition_IllegalWeaponDropped", SCondition_IllegalWeaponDropped::ToJson);

nlohmann::json SCondition_IllegalWeaponDropped::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IllegalWeaponDropped*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo SAccidentObserversGroupSaveData::TypeInfo = ZHMTypeInfo("SAccidentObserversGroupSaveData", SAccidentObserversGroupSaveData::ToJson);

nlohmann::json SAccidentObserversGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAccidentObserversGroupSaveData*>(p_Object);

	s_Json["m_target"] = {{ "$type", "uint32" }, { "$val", s_Object->m_target }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aWaitingObservers)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aWaitingObservers"] = s_JsonArray;
	}

	s_Json["m_accidentScaleContext"] = {{ "$type", "EAccidentScaleContext" }, { "$val", static_cast<int>(s_Object->m_accidentScaleContext) }};

	return s_Json;
}

ZHMTypeInfo ZTime::TypeInfo = ZHMTypeInfo("ZTime", ZTime::ToJson);

nlohmann::json ZTime::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZTime*>(p_Object);

	s_Json["m_nValue"] = {{ "$type", "uint64" }, { "$val", s_Object->m_nValue }};

	return s_Json;
}

ZHMTypeInfo SGaitTransitionEntry::TypeInfo = ZHMTypeInfo("SGaitTransitionEntry", SGaitTransitionEntry::ToJson);

nlohmann::json SGaitTransitionEntry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGaitTransitionEntry*>(p_Object);

	s_Json["m_gait"] = {{ "$type", "EGait" }, { "$val", static_cast<int>(s_Object->m_gait) }};

	s_Json["m_speed"] = {{ "$type", "ESpeed" }, { "$val", static_cast<int>(s_Object->m_speed) }};

	return s_Json;
}

ZHMTypeInfo SActorDynamicTemplateManipulatorSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateManipulatorSaveData", SActorDynamicTemplateManipulatorSaveData::ToJson);

nlohmann::json SActorDynamicTemplateManipulatorSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo SActorStandInEntitiesSaveData::TypeInfo = ZHMTypeInfo("SActorStandInEntitiesSaveData", SActorStandInEntitiesSaveData::ToJson);

nlohmann::json SActorStandInEntitiesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorStandInEntitiesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SActorStandInSaveData" }, { "$val", SActorStandInSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActorManagerReferencableData::TypeInfo = ZHMTypeInfo("SActorManagerReferencableData", SActorManagerReferencableData::ToJson);

nlohmann::json SActorManagerReferencableData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorManagerReferencableData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aSituationTypes)
		{
			s_JsonArray.push_back({{ "$type", "ESituationType" }, { "$val", static_cast<int>(s_Item) }});
		}

		s_Json["m_aSituationTypes"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SClothVertex::TypeInfo = ZHMTypeInfo("SClothVertex", SClothVertex::ToJson);

nlohmann::json SClothVertex::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SClothVertex*>(p_Object);

	s_Json["m_nColumn"] = {{ "$type", "uint16" }, { "$val", s_Object->m_nColumn }};

	s_Json["m_nRow"] = {{ "$type", "uint16" }, { "$val", s_Object->m_nRow }};

	return s_Json;
}

ZHMTypeInfo ZDialogConditionTarget::TypeInfo = ZHMTypeInfo("ZDialogConditionTarget", ZDialogConditionTarget::ToJson);

nlohmann::json ZDialogConditionTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZDialogConditionTarget*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SVIPEvacuationNodeSaveData::TypeInfo = ZHMTypeInfo("SVIPEvacuationNodeSaveData", SVIPEvacuationNodeSaveData::ToJson);

nlohmann::json SVIPEvacuationNodeSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVIPEvacuationNodeSaveData*>(p_Object);

	s_Json["m_fPenaltyMultiplier"] = {{ "$type", "float32" }, { "$val", s_Object->m_fPenaltyMultiplier }};

	s_Json["m_fPenaltyDuration"] = {{ "$type", "float32" }, { "$val", s_Object->m_fPenaltyDuration }};

	s_Json["m_tPenalty"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tPenalty) }};

	s_Json["m_bIsEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsEnabled }};

	s_Json["m_compromisedOnEnter"] = {{ "$type", "bool" }, { "$val", s_Object->m_compromisedOnEnter }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsDistractionInterruptableByNewOcurrences::TypeInfo = ZHMTypeInfo("SCondition_IsDistractionInterruptableByNewOcurrences", SCondition_IsDistractionInterruptableByNewOcurrences::ToJson);

nlohmann::json SCondition_IsDistractionInterruptableByNewOcurrences::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDistractionInterruptableByNewOcurrences*>(p_Object);

	s_Json["distraction"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->distraction) }};

	return s_Json;
}

ZHMTypeInfo SInventoryControllerSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerSaveData", SInventoryControllerSaveData::ToJson);

nlohmann::json SInventoryControllerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryControllerSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aItems)
		{
			s_JsonArray.push_back({{ "$type", "SInventoryControllerItemSaveData" }, { "$val", SInventoryControllerItemSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aItems"] = s_JsonArray;
	}

	s_Json["m_nEquippedItemIndex"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nEquippedItemIndex }};

	s_Json["m_nMostRecentItemIndex"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nMostRecentItemIndex }};

	s_Json["m_StoredSlot"] = {{ "$type", "SStoredSlotSaveData" }, { "$val", SStoredSlotSaveData::ToJson(&s_Object->m_StoredSlot) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aSlots)
		{
			s_JsonArray.push_back({{ "$type", "SInventoryControllerSlotSaveData" }, { "$val", SInventoryControllerSlotSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aSlots"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aPendingPickupItems)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aPendingPickupItems"] = s_JsonArray;
	}

	s_Json["m_nAmmoCountGun"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountGun }};

	s_Json["m_nAmmoCountRevolver"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountRevolver }};

	s_Json["m_nAmmoCountSMG"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountSMG }};

	s_Json["m_nAmmoCountRifle"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountRifle }};

	s_Json["m_nAmmoCountShotgun"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountShotgun }};

	s_Json["m_nAmmoCountSniper"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountSniper }};

	s_Json["m_nAmmoCountMG"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountMG }};

	s_Json["m_nAmmoCountRPG"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountRPG }};

	s_Json["m_nAmmoCountFake"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountFake }};

	s_Json["m_nAmmoCountLightPistol"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountLightPistol }};

	s_Json["m_nAmmoCountDartTranquilizer"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountDartTranquilizer }};

	s_Json["m_nAmmoCountAmmoShotgunBeanbag"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAmmoCountAmmoShotgunBeanbag }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aAmmoIds)
		{
			s_JsonArray.push_back({{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Item) }});
		}

		s_Json["m_aAmmoIds"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aAmmoCounts)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aAmmoCounts"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCrowdAIEventSaveData::TypeInfo = ZHMTypeInfo("SCrowdAIEventSaveData", SCrowdAIEventSaveData::ToJson);

nlohmann::json SCrowdAIEventSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdAIEventSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_RunningEvents)
		{
			s_JsonArray.push_back({{ "$type", "SRunningCrowdAIEventSaveData" }, { "$val", SRunningCrowdAIEventSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_RunningEvents"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SVisibilitySaveData::TypeInfo = ZHMTypeInfo("SVisibilitySaveData", SVisibilitySaveData::ToJson);

nlohmann::json SVisibilitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVisibilitySaveData*>(p_Object);

	s_Json["m_bIsVisible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsVisible }};

	return s_Json;
}

ZHMTypeInfo ZGetHelpOrder::TypeInfo = ZHMTypeInfo("ZGetHelpOrder", ZGetHelpOrder::ToJson);

nlohmann::json ZGetHelpOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGetHelpOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZCrowdGridPoint::TypeInfo = ZHMTypeInfo("ZCrowdGridPoint", ZCrowdGridPoint::ToJson);

nlohmann::json ZCrowdGridPoint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZCrowdGridPoint*>(p_Object);

	s_Json["m_nHeightOffset"] = {{ "$type", "int16" }, { "$val", s_Object->m_nHeightOffset }};

	s_Json["m_nOnNavGrid"] = {{ "$type", "uint8" }, { "$val", s_Object->m_nOnNavGrid }};

	return s_Json;
}

ZHMTypeInfo ZInvestigateDisguiseGroup::TypeInfo = ZHMTypeInfo("ZInvestigateDisguiseGroup", ZInvestigateDisguiseGroup::ToJson);

nlohmann::json ZInvestigateDisguiseGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZInvestigateDisguiseGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MaxExpired::TypeInfo = ZHMTypeInfo("SCondition_MaxExpired", SCondition_MaxExpired::ToJson);

nlohmann::json SCondition_MaxExpired::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxExpired*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["time"] = {{ "$type", "float32" }, { "$val", s_Object->time }};

	return s_Json;
}

ZHMTypeInfo SChallengeSaveData::TypeInfo = ZHMTypeInfo("SChallengeSaveData", SChallengeSaveData::ToJson);

nlohmann::json SChallengeSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SChallengeSaveData*>(p_Object);

	s_Json["m_sId"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sId.c_str() }};

	s_Json["m_State"] = {{ "$type", "ZDynamicObject" }, { "$val", ZDynamicObject::ToJson(&s_Object->m_State) }};

	return s_Json;
}

ZHMTypeInfo ICollisionManager::TypeInfo = ZHMTypeInfo("ICollisionManager", ICollisionManager::ToJson);

nlohmann::json ICollisionManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICollisionManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_CurrentSetpieceSoundDistractions::TypeInfo = ZHMTypeInfo("SCondition_CurrentSetpieceSoundDistractions", SCondition_CurrentSetpieceSoundDistractions::ToJson);

nlohmann::json SCondition_CurrentSetpieceSoundDistractions::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CurrentSetpieceSoundDistractions*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	return s_Json;
}

ZHMTypeInfo IConditionalTextLine::TypeInfo = ZHMTypeInfo("IConditionalTextLine", IConditionalTextLine::ToJson);

nlohmann::json IConditionalTextLine::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IConditionalTextLine*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZEvacuateVIPGroup::TypeInfo = ZHMTypeInfo("ZEvacuateVIPGroup", ZEvacuateVIPGroup::ToJson);

nlohmann::json ZEvacuateVIPGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZEvacuateVIPGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SBoneScalesList::TypeInfo = ZHMTypeInfo("SBoneScalesList", SBoneScalesList::ToJson);

nlohmann::json SBoneScalesList::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBoneScalesList*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBoneScales)
		{
			s_JsonArray.push_back({{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Item) }});
		}

		s_Json["m_aBoneScales"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SFooStruct::TypeInfo = ZHMTypeInfo("SFooStruct", SFooStruct::ToJson);

nlohmann::json SFooStruct::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SFooStruct*>(p_Object);

	s_Json["m_eTest"] = {{ "$type", "uint32" }, { "$val", s_Object->m_eTest }};

	s_Json["m_sOther"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sOther.c_str() }};

	return s_Json;
}

ZHMTypeInfo ZEntityRef::TypeInfo = ZHMTypeInfo("ZEntityRef", ZEntityRef::ToJson);

nlohmann::json ZEntityRef::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZEntityRef*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IStaticPhysics::TypeInfo = ZHMTypeInfo("IStaticPhysics", IStaticPhysics::ToJson);

nlohmann::json IStaticPhysics::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IStaticPhysics*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IScreenplayRole::TypeInfo = ZHMTypeInfo("IScreenplayRole", IScreenplayRole::ToJson);

nlohmann::json IScreenplayRole::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IScreenplayRole*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_Trigger::TypeInfo = ZHMTypeInfo("SCondition_Trigger", SCondition_Trigger::ToJson);

nlohmann::json SCondition_Trigger::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_Trigger*>(p_Object);

	s_Json["bTriggered"] = {{ "$type", "bool" }, { "$val", s_Object->bTriggered }};

	return s_Json;
}

ZHMTypeInfo SCheckLastPositionGroupSaveData::TypeInfo = ZHMTypeInfo("SCheckLastPositionGroupSaveData", SCheckLastPositionGroupSaveData::ToJson);

nlohmann::json SCheckLastPositionGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCheckLastPositionGroupSaveData*>(p_Object);

	s_Json["m_pLeader"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pLeader }};

	s_Json["m_pAssistant"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pAssistant }};

	s_Json["m_nLeaderTargetNodeIndex"] = {{ "$type", "uint16" }, { "$val", s_Object->m_nLeaderTargetNodeIndex }};

	s_Json["m_bLeaderOrderAssigned"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLeaderOrderAssigned }};

	s_Json["m_bAssistantOrderAssigned"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAssistantOrderAssigned }};

	s_Json["m_bSearchCompleted"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSearchCompleted }};

	return s_Json;
}

ZHMTypeInfo SSaveGameData::TypeInfo = ZHMTypeInfo("SSaveGameData", SSaveGameData::ToJson);

nlohmann::json SSaveGameData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSaveGameData*>(p_Object);

	s_Json["m_nVersion"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nVersion }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aSavableObjectsData)
		{
			s_JsonArray.push_back({{ "$type", "SSavableData" }, { "$val", SSavableData::ToJson(&s_Item) }});
		}

		s_Json["m_aSavableObjectsData"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntityPaths)
		{
			s_JsonArray.push_back({{ "$type", "SEntityPath" }, { "$val", SEntityPath::ToJson(&s_Item) }});
		}

		s_Json["m_aEntityPaths"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZContractEventsManager::TypeInfo = ZHMTypeInfo("ZContractEventsManager", ZContractEventsManager::ToJson);

nlohmann::json ZContractEventsManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZContractEventsManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SIntelDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SIntelDisplayInfoArray_dummy", SIntelDisplayInfoArray_dummy::ToJson);

nlohmann::json SIntelDisplayInfoArray_dummy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SIntelDisplayInfoArray_dummy*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->dummy)
		{
			s_JsonArray.push_back({{ "$type", "SIntelDisplayInfo" }, { "$val", SIntelDisplayInfo::ToJson(&s_Item) }});
		}

		s_Json["dummy"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SDestructiblePieceSaveData::TypeInfo = ZHMTypeInfo("SDestructiblePieceSaveData", SDestructiblePieceSaveData::ToJson);

nlohmann::json SDestructiblePieceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDestructiblePieceSaveData*>(p_Object);

	s_Json["m_mTransform"] = {{ "$type", "SMatrix" }, { "$val", SMatrix::ToJson(&s_Object->m_mTransform) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aIndices)
		{
			s_JsonArray.push_back({{ "$type", "uint16" }, { "$val", s_Item }});
		}

		s_Json["m_aIndices"] = s_JsonArray;
	}

	s_Json["m_fMass"] = {{ "$type", "float32" }, { "$val", s_Object->m_fMass }};

	s_Json["m_ePhysicsType"] = {{ "$type", "EPhysicsObjectType" }, { "$val", static_cast<int>(s_Object->m_ePhysicsType) }};

	s_Json["m_bIsAwake"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsAwake }};

	s_Json["m_fLinearVelocity"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_fLinearVelocity) }};

	s_Json["m_fAngularVelocity"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_fAngularVelocity) }};

	return s_Json;
}

ZHMTypeInfo SDestructibleRuntimeDamage::TypeInfo = ZHMTypeInfo("SDestructibleRuntimeDamage", SDestructibleRuntimeDamage::ToJson);

nlohmann::json SDestructibleRuntimeDamage::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDestructibleRuntimeDamage*>(p_Object);

	s_Json["m_nPieceIndex"] = {{ "$type", "uint16" }, { "$val", s_Object->m_nPieceIndex }};

	s_Json["m_fDamage"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDamage }};

	return s_Json;
}

ZHMTypeInfo SDestructibleObjectSaveData::TypeInfo = ZHMTypeInfo("SDestructibleObjectSaveData", SDestructibleObjectSaveData::ToJson);

nlohmann::json SDestructibleObjectSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDestructibleObjectSaveData*>(p_Object);

	s_Json["m_interactionData"] = {{ "$type", "SDestructibleInteractionHandlerData" }, { "$val", SDestructibleInteractionHandlerData::ToJson(&s_Object->m_interactionData) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aDestructiblePieces)
		{
			s_JsonArray.push_back({{ "$type", "SDestructiblePieceSaveData" }, { "$val", SDestructiblePieceSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aDestructiblePieces"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aConnectionData)
		{
			s_JsonArray.push_back({{ "$type", "SDestructibleRuntimeConnnection" }, { "$val", SDestructibleRuntimeConnnection::ToJson(&s_Item) }});
		}

		s_Json["m_aConnectionData"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aDamageData)
		{
			s_JsonArray.push_back({{ "$type", "SDestructibleRuntimeDamage" }, { "$val", SDestructibleRuntimeDamage::ToJson(&s_Item) }});
		}

		s_Json["m_aDamageData"] = s_JsonArray;
	}

	s_Json["m_nNumAnchors"] = {{ "$type", "uint16" }, { "$val", s_Object->m_nNumAnchors }};

	s_Json["m_eRuntimeMemoryAllocationState"] = {{ "$type", "ERuntimeMemoryAllocationState" }, { "$val", static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState) }};

	s_Json["m_eSystemPhysicsType"] = {{ "$type", "EPhysicsObjectType" }, { "$val", static_cast<int>(s_Object->m_eSystemPhysicsType) }};

	s_Json["m_bHasSystemBeenDetached"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHasSystemBeenDetached }};

	s_Json["m_bHasSystemBeenFractured"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHasSystemBeenFractured }};

	s_Json["m_bPhysicsEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPhysicsEnabled }};

	s_Json["m_bDestructionEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDestructionEnabled }};

	return s_Json;
}

ZHMTypeInfo ICrowdAIActor::TypeInfo = ZHMTypeInfo("ICrowdAIActor", ICrowdAIActor::ToJson);

nlohmann::json ICrowdAIActor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICrowdAIActor*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsHighestPriorityTypeToReact::TypeInfo = ZHMTypeInfo("SCondition_IsHighestPriorityTypeToReact", SCondition_IsHighestPriorityTypeToReact::ToJson);

nlohmann::json SCondition_IsHighestPriorityTypeToReact::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsHighestPriorityTypeToReact*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["distractionType"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->distractionType) }};

	return s_Json;
}

ZHMTypeInfo SHM5CrippleBoxSaveData::TypeInfo = ZHMTypeInfo("SHM5CrippleBoxSaveData", SHM5CrippleBoxSaveData::ToJson);

nlohmann::json SHM5CrippleBoxSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHM5CrippleBoxSaveData*>(p_Object);

	s_Json["m_bInSequence"] = {{ "$type", "bool" }, { "$val", s_Object->m_bInSequence }};

	s_Json["m_bAllowBaseMovements"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAllowBaseMovements }};

	s_Json["m_bSequenceAllowCamera"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSequenceAllowCamera }};

	s_Json["m_bLedges"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLedges }};

	s_Json["m_bCover"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCover }};

	s_Json["m_bTakeClothes"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTakeClothes }};

	s_Json["m_bLadder"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLadder }};

	s_Json["m_bPullVictimFromWindow"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPullVictimFromWindow }};

	s_Json["m_bFiberWireKill"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFiberWireKill }};

	s_Json["m_bClimbWindow"] = {{ "$type", "bool" }, { "$val", s_Object->m_bClimbWindow }};

	s_Json["m_bThrowBodyOverRail"] = {{ "$type", "bool" }, { "$val", s_Object->m_bThrowBodyOverRail }};

	s_Json["m_bDumpBody"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDumpBody }};

	s_Json["m_bOperateCPDoor"] = {{ "$type", "bool" }, { "$val", s_Object->m_bOperateCPDoor }};

	s_Json["m_bHideInCloset"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHideInCloset }};

	s_Json["m_bCloseCombat"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCloseCombat }};

	s_Json["m_bGrabVictim"] = {{ "$type", "bool" }, { "$val", s_Object->m_bGrabVictim }};

	s_Json["m_bPushVictimThroughWindowAndRail"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPushVictimThroughWindowAndRail }};

	s_Json["m_bKickVictimOverLedge"] = {{ "$type", "bool" }, { "$val", s_Object->m_bKickVictimOverLedge }};

	s_Json["m_bPickupItem"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPickupItem }};

	s_Json["m_bDropItem"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDropItem }};

	s_Json["m_bDragBody"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDragBody }};

	s_Json["m_bThrowItem"] = {{ "$type", "bool" }, { "$val", s_Object->m_bThrowItem }};

	s_Json["m_bPlaceItem"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPlaceItem }};

	s_Json["m_bUseDeathAnimation"] = {{ "$type", "bool" }, { "$val", s_Object->m_bUseDeathAnimation }};

	s_Json["m_bLimitedAmmo"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLimitedAmmo }};

	s_Json["m_bRun"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRun }};

	s_Json["m_bTurn"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTurn }};

	s_Json["m_bSneak"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSneak }};

	s_Json["m_bNoSnapSneak"] = {{ "$type", "bool" }, { "$val", s_Object->m_bNoSnapSneak }};

	s_Json["m_bStandUp"] = {{ "$type", "bool" }, { "$val", s_Object->m_bStandUp }};

	s_Json["m_bFastWalk"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFastWalk }};

	s_Json["m_bMovementAllowed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bMovementAllowed }};

	s_Json["m_bIdleAnimationsAllowed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIdleAnimationsAllowed }};

	s_Json["m_bItems"] = {{ "$type", "bool" }, { "$val", s_Object->m_bItems }};

	s_Json["m_bCanHolsterItems"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCanHolsterItems }};

	s_Json["m_bCoverTakedown"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCoverTakedown }};

	s_Json["m_bCoverScale"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCoverScale }};

	s_Json["m_bCoverToCover"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCoverToCover }};

	s_Json["m_bCloseCombatSnapNeck"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCloseCombatSnapNeck }};

	s_Json["m_bCloseCombatChoke"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCloseCombatChoke }};

	s_Json["m_bCloseCombatPistolFinish"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCloseCombatPistolFinish }};

	s_Json["m_bCloseCombatProps"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCloseCombatProps }};

	s_Json["m_bCloseCombatStandart"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCloseCombatStandart }};

	s_Json["m_bCloseCombatFakeSwing"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCloseCombatFakeSwing }};

	s_Json["m_bGameCameraAutoAlign"] = {{ "$type", "bool" }, { "$val", s_Object->m_bGameCameraAutoAlign }};

	s_Json["m_bCameraSide"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCameraSide }};

	s_Json["m_bInstinct"] = {{ "$type", "bool" }, { "$val", s_Object->m_bInstinct }};

	s_Json["m_bBlindFire"] = {{ "$type", "bool" }, { "$val", s_Object->m_bBlindFire }};

	s_Json["m_bAim"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAim }};

	s_Json["m_bHairTrigger"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHairTrigger }};

	s_Json["m_bFire"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFire }};

	s_Json["m_bOpenLogbook"] = {{ "$type", "bool" }, { "$val", s_Object->m_bOpenLogbook }};

	s_Json["m_bOpenPauseMenu"] = {{ "$type", "bool" }, { "$val", s_Object->m_bOpenPauseMenu }};

	s_Json["m_bActivatedByPinSignal"] = {{ "$type", "bool" }, { "$val", s_Object->m_bActivatedByPinSignal }};

	return s_Json;
}

ZHMTypeInfo IParticleControllerEntity::TypeInfo = ZHMTypeInfo("IParticleControllerEntity", IParticleControllerEntity::ToJson);

nlohmann::json IParticleControllerEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IParticleControllerEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ITransitionCondition::TypeInfo = ZHMTypeInfo("ITransitionCondition", ITransitionCondition::ToJson);

nlohmann::json ITransitionCondition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ITransitionCondition*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ICharacterInventoryState::TypeInfo = ZHMTypeInfo("ICharacterInventoryState", ICharacterInventoryState::ToJson);

nlohmann::json ICharacterInventoryState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterInventoryState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SActorDynamicTemplateHandlerSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateHandlerSaveData", SActorDynamicTemplateHandlerSaveData::ToJson);

nlohmann::json SActorDynamicTemplateHandlerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorDynamicTemplateHandlerSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	s_Json["m_rItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItem }};

	s_Json["m_rSetpiece"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSetpiece }};

	return s_Json;
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector3", SMathMultiplyDivideSaveData_SVector3::ToJson);

nlohmann::json SMathMultiplyDivideSaveData_SVector3::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Object);

	s_Json["m_fA"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_fA) }};

	s_Json["m_fB"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_fB) }};

	s_Json["m_bDivide"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDivide }};

	return s_Json;
}

ZHMTypeInfo IValueVector2Set::TypeInfo = ZHMTypeInfo("IValueVector2Set", IValueVector2Set::ToJson);

nlohmann::json IValueVector2Set::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueVector2Set*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MaxActorsWithGoal::TypeInfo = ZHMTypeInfo("SCondition_MaxActorsWithGoal", SCondition_MaxActorsWithGoal::ToJson);

nlohmann::json SCondition_MaxActorsWithGoal::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxActorsWithGoal*>(p_Object);

	s_Json["type"] = {{ "$type", "EAIGoal" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["maxActors"] = {{ "$type", "int32" }, { "$val", s_Object->maxActors }};

	return s_Json;
}

ZHMTypeInfo IItemAmmo::TypeInfo = ZHMTypeInfo("IItemAmmo", IItemAmmo::ToJson);

nlohmann::json IItemAmmo::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IItemAmmo*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SShotListenersSaveData::TypeInfo = ZHMTypeInfo("SShotListenersSaveData", SShotListenersSaveData::ToJson);

nlohmann::json SShotListenersSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SShotListenersSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SShotListenerSaveData" }, { "$val", SShotListenerSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZSentryOrder::TypeInfo = ZHMTypeInfo("ZSentryOrder", ZSentryOrder::ToJson);

nlohmann::json ZSentryOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZSentryOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MinSharedEventAge::TypeInfo = ZHMTypeInfo("SCondition_MinSharedEventAge", SCondition_MinSharedEventAge::ToJson);

nlohmann::json SCondition_MinSharedEventAge::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MinSharedEventAge*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["age"] = {{ "$type", "float32" }, { "$val", s_Object->age }};

	return s_Json;
}

ZHMTypeInfo ICrowdCoreProvider::TypeInfo = ZHMTypeInfo("ICrowdCoreProvider", ICrowdCoreProvider::ToJson);

nlohmann::json ICrowdCoreProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICrowdCoreProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SDoorSoundDefs::TypeInfo = ZHMTypeInfo("SDoorSoundDefs", SDoorSoundDefs::ToJson);

nlohmann::json SDoorSoundDefs::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDoorSoundDefs*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SGateSaveData::TypeInfo = ZHMTypeInfo("SGateSaveData", SGateSaveData::ToJson);

nlohmann::json SGateSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGateSaveData*>(p_Object);

	s_Json["m_rEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEntity }};

	s_Json["m_bIsOpen"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsOpen }};

	s_Json["m_fOpenFraction"] = {{ "$type", "float32" }, { "$val", s_Object->m_fOpenFraction }};

	return s_Json;
}

ZHMTypeInfo SCondition_SuspiciousWeaponPickedUp::TypeInfo = ZHMTypeInfo("SCondition_SuspiciousWeaponPickedUp", SCondition_SuspiciousWeaponPickedUp::ToJson);

nlohmann::json SCondition_SuspiciousWeaponPickedUp::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SuspiciousWeaponPickedUp*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo SGameKeywordManagerSaveData::TypeInfo = ZHMTypeInfo("SGameKeywordManagerSaveData", SGameKeywordManagerSaveData::ToJson);

nlohmann::json SGameKeywordManagerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGameKeywordManagerSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aKeywordsData)
		{
			s_JsonArray.push_back({{ "$type", "SKeywordSaveData" }, { "$val", SKeywordSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aKeywordsData"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aKeywordStringData)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["m_aKeywordStringData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SEvacuateVIPGroupSaveData::TypeInfo = ZHMTypeInfo("SEvacuateVIPGroupSaveData", SEvacuateVIPGroupSaveData::ToJson);

nlohmann::json SEvacuateVIPGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEvacuateVIPGroupSaveData*>(p_Object);

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_rVIP"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rVIP }};

	s_Json["m_rVIPActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rVIPActor }};

	s_Json["m_rEvacuationNode"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rEvacuationNode }};

	s_Json["m_rSafeRoomNode"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSafeRoomNode }};

	s_Json["m_rCompromisedEvacNode"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCompromisedEvacNode }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_assignedBodyguards)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_assignedBodyguards"] = s_JsonArray;
	}

	s_Json["m_tEvacuationStart"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tEvacuationStart) }};

	s_Json["m_tCornered"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tCornered) }};

	s_Json["m_tTacticalPoint"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tTacticalPoint) }};

	s_Json["m_tSafeRoom"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tSafeRoom) }};

	s_Json["m_tSafeRoomStandDown"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tSafeRoomStandDown) }};

	s_Json["m_bInitialFlee"] = {{ "$type", "bool" }, { "$val", s_Object->m_bInitialFlee }};

	s_Json["m_safeRoomVIPSentActingStarted"] = {{ "$type", "bool" }, { "$val", s_Object->m_safeRoomVIPSentActingStarted }};

	s_Json["m_isSetupPhaseComplete"] = {{ "$type", "bool" }, { "$val", s_Object->m_isSetupPhaseComplete }};

	return s_Json;
}

ZHMTypeInfo IBulletImpactListener::TypeInfo = ZHMTypeInfo("IBulletImpactListener", IBulletImpactListener::ToJson);

nlohmann::json IBulletImpactListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBulletImpactListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ISequenceItem::TypeInfo = ZHMTypeInfo("ISequenceItem", ISequenceItem::ToJson);

nlohmann::json ISequenceItem::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISequenceItem*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IValueFloat::TypeInfo = ZHMTypeInfo("IValueFloat", IValueFloat::ToJson);

nlohmann::json IValueFloat::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueFloat*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SDisguiseZoneSaveData::TypeInfo = ZHMTypeInfo("SDisguiseZoneSaveData", SDisguiseZoneSaveData::ToJson);

nlohmann::json SDisguiseZoneSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDisguiseZoneSaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	return s_Json;
}

ZHMTypeInfo ICharacterIllegalInteractionsState::TypeInfo = ZHMTypeInfo("ICharacterIllegalInteractionsState", ICharacterIllegalInteractionsState::ToJson);

nlohmann::json ICharacterIllegalInteractionsState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterIllegalInteractionsState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SPerceptibleCrowdBodySaveData::TypeInfo = ZHMTypeInfo("SPerceptibleCrowdBodySaveData", SPerceptibleCrowdBodySaveData::ToJson);

nlohmann::json SPerceptibleCrowdBodySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPerceptibleCrowdBodySaveData*>(p_Object);

	s_Json["m_rCombatZone"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCombatZone }};

	s_Json["m_rSharedKnowledge"] = {{ "$type", "int32" }, { "$val", s_Object->m_rSharedKnowledge }};

	return s_Json;
}

ZHMTypeInfo SSentryOrderSaveData::TypeInfo = ZHMTypeInfo("SSentryOrderSaveData", SSentryOrderSaveData::ToJson);

nlohmann::json SSentryOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSentryOrderSaveData*>(p_Object);

	s_Json["m_rSentryZone"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rSentryZone }};

	return s_Json;
}

ZHMTypeInfo SCondition_AreVisibleItemsIllegal::TypeInfo = ZHMTypeInfo("SCondition_AreVisibleItemsIllegal", SCondition_AreVisibleItemsIllegal::ToJson);

nlohmann::json SCondition_AreVisibleItemsIllegal::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_AreVisibleItemsIllegal*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["includeWeapons"] = {{ "$type", "int32" }, { "$val", s_Object->includeWeapons }};

	return s_Json;
}

ZHMTypeInfo SMathLerpsSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector4", SMathLerpsSaveData_SVector4::ToJson);

nlohmann::json SMathLerpsSaveData_SVector4::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpsSaveData_SVector4*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathLerpSaveData_SVector4" }, { "$val", SMathLerpSaveData_SVector4::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SAnimatedActorMoveOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorMoveOrderSaveData", SAnimatedActorMoveOrderSaveData::ToJson);

nlohmann::json SAnimatedActorMoveOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAnimatedActorMoveOrderSaveData*>(p_Object);

	s_Json["m_bPrecisePositioning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPrecisePositioning }};

	s_Json["m_bPreciseOrientation"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPreciseOrientation }};

	s_Json["m_bIgnoreEndCollision"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIgnoreEndCollision }};

	s_Json["m_bForcedEnpointSet"] = {{ "$type", "bool" }, { "$val", s_Object->m_bForcedEnpointSet }};

	s_Json["m_fStopMoveDistance"] = {{ "$type", "float32" }, { "$val", s_Object->m_fStopMoveDistance }};

	s_Json["m_vWaypoint"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vWaypoint) }};

	s_Json["m_vForcedEndpoint"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vForcedEndpoint) }};

	s_Json["m_vFacingDirection"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vFacingDirection) }};

	return s_Json;
}

ZHMTypeInfo SAimAssistObjectSaveData::TypeInfo = ZHMTypeInfo("SAimAssistObjectSaveData", SAimAssistObjectSaveData::ToJson);

nlohmann::json SAimAssistObjectSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAimAssistObjectSaveData*>(p_Object);

	s_Json["m_bHasBeenStarted"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHasBeenStarted }};

	s_Json["m_bWasAimAssistActivated"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWasAimAssistActivated }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsDistanceFromKnownToActualGreaterThan::TypeInfo = ZHMTypeInfo("SCondition_IsDistanceFromKnownToActualGreaterThan", SCondition_IsDistanceFromKnownToActualGreaterThan::ToJson);

nlohmann::json SCondition_IsDistanceFromKnownToActualGreaterThan::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDistanceFromKnownToActualGreaterThan*>(p_Object);

	s_Json["knownEntity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->knownEntity) }};

	s_Json["distance"] = {{ "$type", "float32" }, { "$val", s_Object->distance }};

	return s_Json;
}

ZHMTypeInfo IArticulatedPhysicsAccessor::TypeInfo = ZHMTypeInfo("IArticulatedPhysicsAccessor", IArticulatedPhysicsAccessor::ToJson);

nlohmann::json IArticulatedPhysicsAccessor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IArticulatedPhysicsAccessor*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MinActualDistance::TypeInfo = ZHMTypeInfo("SCondition_MinActualDistance", SCondition_MinActualDistance::ToJson);

nlohmann::json SCondition_MinActualDistance::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MinActualDistance*>(p_Object);

	s_Json["a0"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a0) }};

	s_Json["a1"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a1) }};

	s_Json["a2"] = {{ "$type", "float32" }, { "$val", s_Object->a2 }};

	return s_Json;
}

ZHMTypeInfo ZGameLobbyManager::TypeInfo = ZHMTypeInfo("ZGameLobbyManager", ZGameLobbyManager::ToJson);

nlohmann::json ZGameLobbyManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGameLobbyManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_HasTension::TypeInfo = ZHMTypeInfo("SCondition_HasTension", SCondition_HasTension::ToJson);

nlohmann::json SCondition_HasTension::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasTension*>(p_Object);

	s_Json["tension"] = {{ "$type", "EGameTension" }, { "$val", static_cast<int>(s_Object->tension) }};

	return s_Json;
}

ZHMTypeInfo IBoneAttachEntity::TypeInfo = ZHMTypeInfo("IBoneAttachEntity", IBoneAttachEntity::ToJson);

nlohmann::json IBoneAttachEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoneAttachEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_GetItemBeingThrownBy::TypeInfo = ZHMTypeInfo("SCondition_GetItemBeingThrownBy", SCondition_GetItemBeingThrownBy::ToJson);

nlohmann::json SCondition_GetItemBeingThrownBy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_GetItemBeingThrownBy*>(p_Object);

	s_Json["character"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->character) }};

	return s_Json;
}

ZHMTypeInfo ZEntitySingletonManager::TypeInfo = ZHMTypeInfo("ZEntitySingletonManager", ZEntitySingletonManager::ToJson);

nlohmann::json ZEntitySingletonManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZEntitySingletonManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCrowdFlowChannel::TypeInfo = ZHMTypeInfo("SCrowdFlowChannel", SCrowdFlowChannel::ToJson);

nlohmann::json SCrowdFlowChannel::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdFlowChannel*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aFlowVectorIndex)
		{
			s_JsonArray.push_back({{ "$type", "uint8" }, { "$val", s_Item }});
		}

		s_Json["m_aFlowVectorIndex"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aFlowCost)
		{
			s_JsonArray.push_back({{ "$type", "uint16" }, { "$val", s_Item }});
		}

		s_Json["m_aFlowCost"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IJumpPointAction::TypeInfo = ZHMTypeInfo("IJumpPointAction", IJumpPointAction::ToJson);

nlohmann::json IJumpPointAction::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IJumpPointAction*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IUIControlEntity::TypeInfo = ZHMTypeInfo("IUIControlEntity", IUIControlEntity::ToJson);

nlohmann::json IUIControlEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IUIControlEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SInventoryMovementConfig::TypeInfo = ZHMTypeInfo("SInventoryMovementConfig", SInventoryMovementConfig::ToJson);

nlohmann::json SInventoryMovementConfig::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SInventoryMovementConfig*>(p_Object);

	s_Json["m_eItemHandlingRightHand"] = {{ "$type", "EInventoryConfigItemHandling" }, { "$val", static_cast<int>(s_Object->m_eItemHandlingRightHand) }};

	s_Json["m_eItemHandlingLeftHand"] = {{ "$type", "EInventoryConfigItemHandling" }, { "$val", static_cast<int>(s_Object->m_eItemHandlingLeftHand) }};

	s_Json["m_eFormerEquippedItems"] = {{ "$type", "EInventoryConfigFormerEquippedItems" }, { "$val", static_cast<int>(s_Object->m_eFormerEquippedItems) }};

	s_Json["m_eCustomRule"] = {{ "$type", "EInventoryConfigCustomRule" }, { "$val", static_cast<int>(s_Object->m_eCustomRule) }};

	s_Json["m_bDropBackHolsteredItem"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDropBackHolsteredItem }};

	s_Json["m_bSlowAnimation"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSlowAnimation }};

	s_Json["m_bForceInstantInventoryChange"] = {{ "$type", "bool" }, { "$val", s_Object->m_bForceInstantInventoryChange }};

	s_Json["m_bCancelIfInventoryInUse"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCancelIfInventoryInUse }};

	s_Json["m_bSafeDrop"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSafeDrop }};

	s_Json["m_vSafeDropPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vSafeDropPosition) }};

	return s_Json;
}

ZHMTypeInfo SMathMultipliesSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector3", SMathMultipliesSaveData_SVector3::ToJson);

nlohmann::json SMathMultipliesSaveData_SVector3::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathMultipliesSaveData_SVector3*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathMultiplyDivideSaveData_SVector3" }, { "$val", SMathMultiplyDivideSaveData_SVector3::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_IsActorInSituation::TypeInfo = ZHMTypeInfo("SCondition_IsActorInSituation", SCondition_IsActorInSituation::ToJson);

nlohmann::json SCondition_IsActorInSituation::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsActorInSituation*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	return s_Json;
}

ZHMTypeInfo IAnimResourceEntity::TypeInfo = ZHMTypeInfo("IAnimResourceEntity", IAnimResourceEntity::ToJson);

nlohmann::json IAnimResourceEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IAnimResourceEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SActionRadialArcDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SActionRadialArcDisplayInfoArray_dummy", SActionRadialArcDisplayInfoArray_dummy::ToJson);

nlohmann::json SActionRadialArcDisplayInfoArray_dummy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->dummy)
		{
			s_JsonArray.push_back({{ "$type", "SActionRadialArcDisplayInfo" }, { "$val", SActionRadialArcDisplayInfo::ToJson(&s_Item) }});
		}

		s_Json["dummy"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ICharacterCameraState::TypeInfo = ZHMTypeInfo("ICharacterCameraState", ICharacterCameraState::ToJson);

nlohmann::json ICharacterCameraState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterCameraState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SConditionalTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SConditionalTimerEntitySaveData", SConditionalTimerEntitySaveData::ToJson);

nlohmann::json SConditionalTimerEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SConditionalTimerEntitySaveData*>(p_Object);

	s_Json["m_nInterval"] = {{ "$type", "int32" }, { "$val", s_Object->m_nInterval }};

	s_Json["m_nRemaining"] = {{ "$type", "int32" }, { "$val", s_Object->m_nRemaining }};

	s_Json["m_bActive"] = {{ "$type", "bool" }, { "$val", s_Object->m_bActive }};

	s_Json["m_bValue"] = {{ "$type", "bool" }, { "$val", s_Object->m_bValue }};

	return s_Json;
}

ZHMTypeInfo SIntelSaveData::TypeInfo = ZHMTypeInfo("SIntelSaveData", SIntelSaveData::ToJson);

nlohmann::json SIntelSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SIntelSaveData*>(p_Object);

	s_Json["m_rCurrentStage"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCurrentStage }};

	s_Json["m_fHandlerAudioPlayPosition"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHandlerAudioPlayPosition }};

	s_Json["m_bTracked"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTracked }};

	s_Json["m_bUnlocked"] = {{ "$type", "bool" }, { "$val", s_Object->m_bUnlocked }};

	s_Json["m_bRegistered"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRegistered }};

	s_Json["m_bIsLastTriggered"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsLastTriggered }};

	s_Json["m_bIsHandlerAudioPlaying"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsHandlerAudioPlaying }};

	return s_Json;
}

ZHMTypeInfo ZEntitlementManager::TypeInfo = ZHMTypeInfo("ZEntitlementManager", ZEntitlementManager::ToJson);

nlohmann::json ZEntitlementManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZEntitlementManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SActivityObjective::TypeInfo = ZHMTypeInfo("SActivityObjective", SActivityObjective::ToJson);

nlohmann::json SActivityObjective::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActivityObjective*>(p_Object);

	s_Json["activity"] = {{ "$type", "SActivity" }, { "$val", SActivity::ToJson(&s_Object->activity) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->opportunities)
		{
			s_JsonArray.push_back({{ "$type", "SActivity" }, { "$val", SActivity::ToJson(&s_Item) }});
		}

		s_Json["opportunities"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActivityDefinition::TypeInfo = ZHMTypeInfo("SActivityDefinition", SActivityDefinition::ToJson);

nlohmann::json SActivityDefinition::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActivityDefinition*>(p_Object);

	s_Json["activity"] = {{ "$type", "SActivity" }, { "$val", SActivity::ToJson(&s_Object->activity) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->objectives)
		{
			s_JsonArray.push_back({{ "$type", "SActivityObjective" }, { "$val", SActivityObjective::ToJson(&s_Item) }});
		}

		s_Json["objectives"] = s_JsonArray;
	}

	s_Json["exits"] = {{ "$type", "SActivityExits" }, { "$val", SActivityExits::ToJson(&s_Object->exits) }};

	return s_Json;
}

ZHMTypeInfo SActivities::TypeInfo = ZHMTypeInfo("SActivities", SActivities::ToJson);

nlohmann::json SActivities::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActivities*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->Activities)
		{
			s_JsonArray.push_back({{ "$type", "SActivityDefinition" }, { "$val", SActivityDefinition::ToJson(&s_Item) }});
		}

		s_Json["Activities"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ISceneEntity::TypeInfo = ZHMTypeInfo("ISceneEntity", ISceneEntity::ToJson);

nlohmann::json ISceneEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISceneEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo STrespassingRuleEntitySaveData::TypeInfo = ZHMTypeInfo("STrespassingRuleEntitySaveData", STrespassingRuleEntitySaveData::ToJson);

nlohmann::json STrespassingRuleEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STrespassingRuleEntitySaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aAllowedProfessionsDisabled)
		{
			s_JsonArray.push_back({{ "$type", "bool" }, { "$val", s_Item }});
		}

		s_Json["m_aAllowedProfessionsDisabled"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_OnlyLegalWeaponsPickedUp::TypeInfo = ZHMTypeInfo("SCondition_OnlyLegalWeaponsPickedUp", SCondition_OnlyLegalWeaponsPickedUp::ToJson);

nlohmann::json SCondition_OnlyLegalWeaponsPickedUp::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_OnlyLegalWeaponsPickedUp*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	return s_Json;
}

ZHMTypeInfo IContractObjective::TypeInfo = ZHMTypeInfo("IContractObjective", IContractObjective::ToJson);

nlohmann::json IContractObjective::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IContractObjective*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IGenericMassImpulseReceiver::TypeInfo = ZHMTypeInfo("IGenericMassImpulseReceiver", IGenericMassImpulseReceiver::ToJson);

nlohmann::json IGenericMassImpulseReceiver::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IGenericMassImpulseReceiver*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IParticleRenderEntity::TypeInfo = ZHMTypeInfo("IParticleRenderEntity", IParticleRenderEntity::ToJson);

nlohmann::json IParticleRenderEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IParticleRenderEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SEntityPinDescriptor::TypeInfo = ZHMTypeInfo("SEntityPinDescriptor", SEntityPinDescriptor::ToJson);

nlohmann::json SEntityPinDescriptor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityPinDescriptor*>(p_Object);

	s_Json["sName"] = {{ "$type", "ZString" }, { "$val", s_Object->sName.c_str() }};

	s_Json["sDisplayName"] = {{ "$type", "ZString" }, { "$val", s_Object->sDisplayName.c_str() }};

	s_Json["type"] = {{ "$type", "ZResourceID" }, { "$val", ZResourceID::ToJson(&s_Object->type) }};

	s_Json["sHelpText"] = {{ "$type", "ZString" }, { "$val", s_Object->sHelpText.c_str() }};

	s_Json["bIsPlaceholder"] = {{ "$type", "bool" }, { "$val", s_Object->bIsPlaceholder }};

	s_Json["bIsHidden"] = {{ "$type", "bool" }, { "$val", s_Object->bIsHidden }};

	return s_Json;
}

ZHMTypeInfo ITriggerPhysics::TypeInfo = ZHMTypeInfo("ITriggerPhysics", ITriggerPhysics::ToJson);

nlohmann::json ITriggerPhysics::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ITriggerPhysics*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IUIAction::TypeInfo = ZHMTypeInfo("IUIAction", IUIAction::ToJson);

nlohmann::json IUIAction::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IUIAction*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsOrderInvalid::TypeInfo = ZHMTypeInfo("SCondition_IsOrderInvalid", SCondition_IsOrderInvalid::ToJson);

nlohmann::json SCondition_IsOrderInvalid::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsOrderInvalid*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	return s_Json;
}

ZHMTypeInfo ZFormationMoveOrder::TypeInfo = ZHMTypeInfo("ZFormationMoveOrder", ZFormationMoveOrder::ToJson);

nlohmann::json ZFormationMoveOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZFormationMoveOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IControllableCharacter::TypeInfo = ZHMTypeInfo("IControllableCharacter", IControllableCharacter::ToJson);

nlohmann::json IControllableCharacter::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IControllableCharacter*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IParticleModifierEntity::TypeInfo = ZHMTypeInfo("IParticleModifierEntity", IParticleModifierEntity::ToJson);

nlohmann::json IParticleModifierEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IParticleModifierEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSentryZoneSaveData::TypeInfo = ZHMTypeInfo("SSentryZoneSaveData", SSentryZoneSaveData::ToJson);

nlohmann::json SSentryZoneSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSentryZoneSaveData*>(p_Object);

	s_Json["m_tGreetingCooldown"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tGreetingCooldown) }};

	s_Json["m_tLoiteringCooldown"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLoiteringCooldown) }};

	s_Json["m_nWarningCount"] = {{ "$type", "int32" }, { "$val", s_Object->m_nWarningCount }};

	s_Json["m_bShowingWarning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bShowingWarning }};

	s_Json["bLeftThroughWarningZone"] = {{ "$type", "bool" }, { "$val", s_Object->bLeftThroughWarningZone }};

	s_Json["bEnteredThroughEntranceZone"] = {{ "$type", "bool" }, { "$val", s_Object->bEnteredThroughEntranceZone }};

	s_Json["bInEntranceZone"] = {{ "$type", "bool" }, { "$val", s_Object->bInEntranceZone }};

	s_Json["bInWarningZone"] = {{ "$type", "bool" }, { "$val", s_Object->bInWarningZone }};

	s_Json["bInGreetingZone"] = {{ "$type", "bool" }, { "$val", s_Object->bInGreetingZone }};

	s_Json["bInReFriskZone"] = {{ "$type", "bool" }, { "$val", s_Object->bInReFriskZone }};

	s_Json["m_bInRequiredDisguise"] = {{ "$type", "bool" }, { "$val", s_Object->m_bInRequiredDisguise }};

	s_Json["m_bInFriskExemptDisguise"] = {{ "$type", "bool" }, { "$val", s_Object->m_bInFriskExemptDisguise }};

	s_Json["m_bHasRequiredItem"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHasRequiredItem }};

	s_Json["m_bCanShowActionPrompt"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCanShowActionPrompt }};

	s_Json["m_bTargetInAnyZone"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTargetInAnyZone }};

	s_Json["m_bSituationActive"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSituationActive }};

	s_Json["m_bFrisked"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFrisked }};

	s_Json["m_bItemChecked"] = {{ "$type", "bool" }, { "$val", s_Object->m_bItemChecked }};

	s_Json["m_bGreeted"] = {{ "$type", "bool" }, { "$val", s_Object->m_bGreeted }};

	s_Json["m_bGreetedInstruction"] = {{ "$type", "bool" }, { "$val", s_Object->m_bGreetedInstruction }};

	s_Json["m_bGreetedLoitering"] = {{ "$type", "bool" }, { "$val", s_Object->m_bGreetedLoitering }};

	s_Json["m_bGreetedUnexpected"] = {{ "$type", "bool" }, { "$val", s_Object->m_bGreetedUnexpected }};

	s_Json["m_bInFriskWarningZone"] = {{ "$type", "bool" }, { "$val", s_Object->m_bInFriskWarningZone }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aDisguisesAllowedDisabled)
		{
			s_JsonArray.push_back({{ "$type", "bool" }, { "$val", s_Item }});
		}

		s_Json["m_aDisguisesAllowedDisabled"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aDisguisesFriskExemptDisabled)
		{
			s_JsonArray.push_back({{ "$type", "bool" }, { "$val", s_Item }});
		}

		s_Json["m_aDisguisesFriskExemptDisabled"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled)
		{
			s_JsonArray.push_back({{ "$type", "bool" }, { "$val", s_Item }});
		}

		s_Json["m_aDisguisesDontEscalateOnLineCrossingDisabled"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_ItemsDroppedInZone)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_ItemsDroppedInZone"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZUIDataProvider::TypeInfo = ZHMTypeInfo("ZUIDataProvider", ZUIDataProvider::ToJson);

nlohmann::json ZUIDataProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZUIDataProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IShootTargetEntity::TypeInfo = ZHMTypeInfo("IShootTargetEntity", IShootTargetEntity::ToJson);

nlohmann::json IShootTargetEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IShootTargetEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MinExpired::TypeInfo = ZHMTypeInfo("SCondition_MinExpired", SCondition_MinExpired::ToJson);

nlohmann::json SCondition_MinExpired::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MinExpired*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["time"] = {{ "$type", "float32" }, { "$val", s_Object->time }};

	return s_Json;
}

ZHMTypeInfo ZGenericOrder::TypeInfo = ZHMTypeInfo("ZGenericOrder", ZGenericOrder::ToJson);

nlohmann::json ZGenericOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGenericOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSituationOrderSaveData::TypeInfo = ZHMTypeInfo("SSituationOrderSaveData", SSituationOrderSaveData::ToJson);

nlohmann::json SSituationOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSituationOrderSaveData*>(p_Object);

	s_Json["m_sClassTypeName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sClassTypeName.c_str() }};

	s_Json["m_eType"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->m_eType) }};

	s_Json["m_nTarget"] = {{ "$type", "int32" }, { "$val", s_Object->m_nTarget }};

	s_Json["m_bHasPosition"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHasPosition }};

	s_Json["m_vPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_CustomData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_CustomData) }};

	return s_Json;
}

ZHMTypeInfo IDramaResource::TypeInfo = ZHMTypeInfo("IDramaResource", IDramaResource::ToJson);

nlohmann::json IDramaResource::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IDramaResource*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZObserversGroup::TypeInfo = ZHMTypeInfo("ZObserversGroup", ZObserversGroup::ToJson);

nlohmann::json ZObserversGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZObserversGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IHM5ForceMovementCallBack::TypeInfo = ZHMTypeInfo("IHM5ForceMovementCallBack", IHM5ForceMovementCallBack::ToJson);

nlohmann::json IHM5ForceMovementCallBack::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5ForceMovementCallBack*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SGetHelpGroupSaveData::TypeInfo = ZHMTypeInfo("SGetHelpGroupSaveData", SGetHelpGroupSaveData::ToJson);

nlohmann::json SGetHelpGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGetHelpGroupSaveData*>(p_Object);

	s_Json["m_vLastKnownTargetPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vLastKnownTargetPosition) }};

	s_Json["m_rReturnNode"] = {{ "$type", "uint16" }, { "$val", s_Object->m_rReturnNode }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_blocked)
		{
			s_JsonArray.push_back({{ "$type", "uint16" }, { "$val", s_Item }});
		}

		s_Json["m_blocked"] = s_JsonArray;
	}

	s_Json["m_bReportingToHitman"] = {{ "$type", "bool" }, { "$val", s_Object->m_bReportingToHitman }};

	s_Json["m_bStartedReportDialog"] = {{ "$type", "bool" }, { "$val", s_Object->m_bStartedReportDialog }};

	s_Json["m_bMultipleBodies"] = {{ "$type", "bool" }, { "$val", s_Object->m_bMultipleBodies }};

	s_Json["m_bGetHelpOrderCompleted"] = {{ "$type", "bool" }, { "$val", s_Object->m_bGetHelpOrderCompleted }};

	s_Json["m_bDoneReporting"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDoneReporting }};

	s_Json["m_tGetHelpCompleted"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tGetHelpCompleted) }};

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_type"] = {{ "$type", "EDisturbanceType" }, { "$val", static_cast<int>(s_Object->m_type) }};

	s_Json["m_target"] = {{ "$type", "uint32" }, { "$val", s_Object->m_target }};

	s_Json["m_pReporter"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pReporter }};

	s_Json["m_pGuard"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pGuard }};

	s_Json["m_IllegalItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_IllegalItem }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_additionalGuards)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_additionalGuards"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SClothWireEntitySaveData::TypeInfo = ZHMTypeInfo("SClothWireEntitySaveData", SClothWireEntitySaveData::ToJson);

nlohmann::json SClothWireEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SClothWireEntitySaveData*>(p_Object);

	s_Json["m_fWireLength"] = {{ "$type", "float32" }, { "$val", s_Object->m_fWireLength }};

	s_Json["m_bAttachToAnchorTransform"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAttachToAnchorTransform }};

	s_Json["m_bSimulationEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSimulationEnabled }};

	s_Json["m_bVisible"] = {{ "$type", "bool" }, { "$val", s_Object->m_bVisible }};

	return s_Json;
}

ZHMTypeInfo SVIPEvacuationNodesSaveData::TypeInfo = ZHMTypeInfo("SVIPEvacuationNodesSaveData", SVIPEvacuationNodesSaveData::ToJson);

nlohmann::json SVIPEvacuationNodesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVIPEvacuationNodesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SVIPEvacuationNodeSaveData" }, { "$val", SVIPEvacuationNodeSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SDoorsSaveData::TypeInfo = ZHMTypeInfo("SDoorsSaveData", SDoorsSaveData::ToJson);

nlohmann::json SDoorsSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDoorsSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SDoorSaveData" }, { "$val", SDoorSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SActorProxiesSaveData::TypeInfo = ZHMTypeInfo("SActorProxiesSaveData", SActorProxiesSaveData::ToJson);

nlohmann::json SActorProxiesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorProxiesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SActorProxySaveData" }, { "$val", SActorProxySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SMathLerpSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector3", SMathLerpSaveData_SVector3::ToJson);

nlohmann::json SMathLerpSaveData_SVector3::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpSaveData_SVector3*>(p_Object);

	s_Json["m_A"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_A) }};

	s_Json["m_B"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_B) }};

	s_Json["m_fT"] = {{ "$type", "float32" }, { "$val", s_Object->m_fT }};

	return s_Json;
}

ZHMTypeInfo SMathLerpsSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector3", SMathLerpsSaveData_SVector3::ToJson);

nlohmann::json SMathLerpsSaveData_SVector3::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpsSaveData_SVector3*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathLerpSaveData_SVector3" }, { "$val", SMathLerpSaveData_SVector3::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SMathLerpsSaveData_SColorRGB::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SColorRGB", SMathLerpsSaveData_SColorRGB::ToJson);

nlohmann::json SMathLerpsSaveData_SColorRGB::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGB*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aEntities)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aData)
		{
			s_JsonArray.push_back({{ "$type", "SMathLerpSaveData_SColorRGB" }, { "$val", SMathLerpSaveData_SColorRGB::ToJson(&s_Item) }});
		}

		s_Json["m_aData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IDynamicAttachment::TypeInfo = ZHMTypeInfo("IDynamicAttachment", IDynamicAttachment::ToJson);

nlohmann::json IDynamicAttachment::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IDynamicAttachment*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCautiousVIPGroupState::TypeInfo = ZHMTypeInfo("SCautiousVIPGroupState", SCautiousVIPGroupState::ToJson);

nlohmann::json SCautiousVIPGroupState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCautiousVIPGroupState*>(p_Object);

	s_Json["m_tMove"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tMove) }};

	return s_Json;
}

ZHMTypeInfo SCautiousVIPGroupSaveData::TypeInfo = ZHMTypeInfo("SCautiousVIPGroupSaveData", SCautiousVIPGroupSaveData::ToJson);

nlohmann::json SCautiousVIPGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCautiousVIPGroupSaveData*>(p_Object);

	s_Json["m_vip"] = {{ "$type", "uint32" }, { "$val", s_Object->m_vip }};

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_stateData"] = {{ "$type", "SCautiousVIPGroupState" }, { "$val", SCautiousVIPGroupState::ToJson(&s_Object->m_stateData) }};

	s_Json["m_vipTargetNode"] = {{ "$type", "int32" }, { "$val", s_Object->m_vipTargetNode }};

	s_Json["m_occupancyNode"] = {{ "$type", "int32" }, { "$val", s_Object->m_occupancyNode }};

	return s_Json;
}

ZHMTypeInfo IFreeCameraControl::TypeInfo = ZHMTypeInfo("IFreeCameraControl", IFreeCameraControl::ToJson);

nlohmann::json IFreeCameraControl::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IFreeCameraControl*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IContractModule::TypeInfo = ZHMTypeInfo("IContractModule", IContractModule::ToJson);

nlohmann::json IContractModule::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IContractModule*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSpeakEntitySaveData::TypeInfo = ZHMTypeInfo("SSpeakEntitySaveData", SSpeakEntitySaveData::ToJson);

nlohmann::json SSpeakEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSpeakEntitySaveData*>(p_Object);

	s_Json["m_fSeekPosition"] = {{ "$type", "float32" }, { "$val", s_Object->m_fSeekPosition }};

	return s_Json;
}

ZHMTypeInfo IUIMapProvider::TypeInfo = ZHMTypeInfo("IUIMapProvider", IUIMapProvider::ToJson);

nlohmann::json IUIMapProvider::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IUIMapProvider*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZSniperCombatGroup::TypeInfo = ZHMTypeInfo("ZSniperCombatGroup", ZSniperCombatGroup::ToJson);

nlohmann::json ZSniperCombatGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZSniperCombatGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZPlanningObjectiveInfoBuilder::TypeInfo = ZHMTypeInfo("ZPlanningObjectiveInfoBuilder", ZPlanningObjectiveInfoBuilder::ToJson);

nlohmann::json ZPlanningObjectiveInfoBuilder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZPlanningObjectiveInfoBuilder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SEntityTemplatePropertyAlias::TypeInfo = ZHMTypeInfo("SEntityTemplatePropertyAlias", SEntityTemplatePropertyAlias::ToJson);

nlohmann::json SEntityTemplatePropertyAlias::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEntityTemplatePropertyAlias*>(p_Object);

	s_Json["sAliasName"] = {{ "$type", "ZString" }, { "$val", s_Object->sAliasName.c_str() }};

	s_Json["entityID"] = {{ "$type", "int32" }, { "$val", s_Object->entityID }};

	s_Json["sPropertyName"] = {{ "$type", "ZString" }, { "$val", s_Object->sPropertyName.c_str() }};

	return s_Json;
}

ZHMTypeInfo STrackDollyControllerSaveData::TypeInfo = ZHMTypeInfo("STrackDollyControllerSaveData", STrackDollyControllerSaveData::ToJson);

nlohmann::json STrackDollyControllerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STrackDollyControllerSaveData*>(p_Object);

	s_Json["m_rTrackEntity"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rTrackEntity }};

	s_Json["m_fTrackPosition"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTrackPosition }};

	s_Json["m_bIsDollyAttached"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsDollyAttached }};

	s_Json["m_vDollyPosition"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vDollyPosition) }};

	s_Json["m_vDollyRotation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_vDollyRotation) }};

	return s_Json;
}

ZHMTypeInfo SRepositionOrderSaveData::TypeInfo = ZHMTypeInfo("SRepositionOrderSaveData", SRepositionOrderSaveData::ToJson);

nlohmann::json SRepositionOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRepositionOrderSaveData*>(p_Object);

	s_Json["m_bStrafe"] = {{ "$type", "bool" }, { "$val", s_Object->m_bStrafe }};

	s_Json["m_bAimAtTarget"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAimAtTarget }};

	return s_Json;
}

ZHMTypeInfo ZPostfilterGraphBaseNode::TypeInfo = ZHMTypeInfo("ZPostfilterGraphBaseNode", ZPostfilterGraphBaseNode::ToJson);

nlohmann::json ZPostfilterGraphBaseNode::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZPostfilterGraphBaseNode*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZGuardPointOrder::TypeInfo = ZHMTypeInfo("ZGuardPointOrder", ZGuardPointOrder::ToJson);

nlohmann::json ZGuardPointOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZGuardPointOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ID6Constraint::TypeInfo = ZHMTypeInfo("ID6Constraint", ID6Constraint::ToJson);

nlohmann::json ID6Constraint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ID6Constraint*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAnimPlayerSaveData::TypeInfo = ZHMTypeInfo("SAnimPlayerSaveData", SAnimPlayerSaveData::ToJson);

nlohmann::json SAnimPlayerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAnimPlayerSaveData*>(p_Object);

	s_Json["mTrajectoryQuaterion"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mTrajectoryQuaterion) }};

	s_Json["mTrajectoryTranslation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mTrajectoryTranslation) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBones)
		{
			s_JsonArray.push_back({{ "$type", "SBoneTransformSaveData" }, { "$val", SBoneTransformSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aBones"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IEntityGroup::TypeInfo = ZHMTypeInfo("IEntityGroup", IEntityGroup::ToJson);

nlohmann::json IEntityGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IEntityGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IRenderGraphNodeProducer::TypeInfo = ZHMTypeInfo("IRenderGraphNodeProducer", IRenderGraphNodeProducer::ToJson);

nlohmann::json IRenderGraphNodeProducer::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRenderGraphNodeProducer*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SActorSpreadControllerSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadControllerSaveData", SActorSpreadControllerSaveData::ToJson);

nlohmann::json SActorSpreadControllerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorSpreadControllerSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aSpreadingActors)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aSpreadingActors"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aDeadSpreadingActors)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aDeadSpreadingActors"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aSpreadingActorsAddedTime)
		{
			s_JsonArray.push_back({{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Item) }});
		}

		s_Json["m_aSpreadingActorsAddedTime"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aNewCandidates)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aNewCandidates"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aCandidates)
		{
			s_JsonArray.push_back({{ "$type", "SActorSpreadControllerCandidateSaveData" }, { "$val", SActorSpreadControllerCandidateSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aCandidates"] = s_JsonArray;
	}

	s_Json["m_rCurrentSpreadingActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCurrentSpreadingActor }};

	s_Json["m_nCurrentActorIndex"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nCurrentActorIndex }};

	s_Json["m_bPlayerCheckEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPlayerCheckEnabled }};

	s_Json["m_bPlayerSpreading"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPlayerSpreading }};

	s_Json["m_bPlayerIsValidCandidate"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPlayerIsValidCandidate }};

	s_Json["m_bPlayerIsCandidate"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPlayerIsCandidate }};

	s_Json["m_PlayerCandidateTime"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_PlayerCandidateTime) }};

	return s_Json;
}

ZHMTypeInfo SClothBundleSaveData::TypeInfo = ZHMTypeInfo("SClothBundleSaveData", SClothBundleSaveData::ToJson);

nlohmann::json SClothBundleSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SClothBundleSaveData*>(p_Object);

	s_Json["m_vPosition"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_vQuaternion"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_vQuaternion) }};

	s_Json["m_OutfitID"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_OutfitID) }};

	s_Json["m_nOutfitVariation"] = {{ "$type", "int32" }, { "$val", s_Object->m_nOutfitVariation }};

	s_Json["m_nOutfitCharset"] = {{ "$type", "int32" }, { "$val", s_Object->m_nOutfitCharset }};

	s_Json["bSpawnedByHitman"] = {{ "$type", "bool" }, { "$val", s_Object->bSpawnedByHitman }};

	return s_Json;
}

ZHMTypeInfo SCondition_SituationTarget::TypeInfo = ZHMTypeInfo("SCondition_SituationTarget", SCondition_SituationTarget::ToJson);

nlohmann::json SCondition_SituationTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SituationTarget*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	return s_Json;
}

ZHMTypeInfo SWeaponCustomControlSaveData::TypeInfo = ZHMTypeInfo("SWeaponCustomControlSaveData", SWeaponCustomControlSaveData::ToJson);

nlohmann::json SWeaponCustomControlSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SWeaponCustomControlSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	s_Json["m_rItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItem }};

	s_Json["m_bTargetRegistered"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTargetRegistered }};

	return s_Json;
}

ZHMTypeInfo SCondition_MinAge::TypeInfo = ZHMTypeInfo("SCondition_MinAge", SCondition_MinAge::ToJson);

nlohmann::json SCondition_MinAge::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MinAge*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["age"] = {{ "$type", "float32" }, { "$val", s_Object->age }};

	return s_Json;
}

ZHMTypeInfo SItemStorageSaveData::TypeInfo = ZHMTypeInfo("SItemStorageSaveData", SItemStorageSaveData::ToJson);

nlohmann::json SItemStorageSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemStorageSaveData*>(p_Object);

	s_Json["m_Storage"] = {{ "$type", "uint32" }, { "$val", s_Object->m_Storage }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_ContainedItems)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_ContainedItems"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_IsDistanceFromKnownToActualLessThan::TypeInfo = ZHMTypeInfo("SCondition_IsDistanceFromKnownToActualLessThan", SCondition_IsDistanceFromKnownToActualLessThan::ToJson);

nlohmann::json SCondition_IsDistanceFromKnownToActualLessThan::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDistanceFromKnownToActualLessThan*>(p_Object);

	s_Json["knownEntity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->knownEntity) }};

	s_Json["distance"] = {{ "$type", "float32" }, { "$val", s_Object->distance }};

	return s_Json;
}

ZHMTypeInfo SFaceOrderSaveData::TypeInfo = ZHMTypeInfo("SFaceOrderSaveData", SFaceOrderSaveData::ToJson);

nlohmann::json SFaceOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SFaceOrderSaveData*>(p_Object);

	s_Json["m_bLookAt"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLookAt }};

	s_Json["m_bAimAt"] = {{ "$type", "bool" }, { "$val", s_Object->m_bAimAt }};

	s_Json["m_bUpdateKnownPosition"] = {{ "$type", "bool" }, { "$val", s_Object->m_bUpdateKnownPosition }};

	s_Json["m_bStopActFast"] = {{ "$type", "bool" }, { "$val", s_Object->m_bStopActFast }};

	s_Json["m_fDuration"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDuration }};

	s_Json["m_fDurationVariance"] = {{ "$type", "float32" }, { "$val", s_Object->m_fDurationVariance }};

	return s_Json;
}

ZHMTypeInfo SCondition_IllegalItemPickedUp::TypeInfo = ZHMTypeInfo("SCondition_IllegalItemPickedUp", SCondition_IllegalItemPickedUp::ToJson);

nlohmann::json SCondition_IllegalItemPickedUp::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IllegalItemPickedUp*>(p_Object);

	s_Json["actor"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->actor) }};

	s_Json["includeWeapons"] = {{ "$type", "int32" }, { "$val", s_Object->includeWeapons }};

	return s_Json;
}

ZHMTypeInfo ZRayQueryInput::TypeInfo = ZHMTypeInfo("ZRayQueryInput", ZRayQueryInput::ToJson);

nlohmann::json ZRayQueryInput::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZRayQueryInput*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SPatrolOrderSaveData::TypeInfo = ZHMTypeInfo("SPatrolOrderSaveData", SPatrolOrderSaveData::ToJson);

nlohmann::json SPatrolOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPatrolOrderSaveData*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZResourcePtr::TypeInfo = ZHMTypeInfo("ZResourcePtr", ZResourcePtr::ToJson);

nlohmann::json ZResourcePtr::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZResourcePtr*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IActorProviderFilter::TypeInfo = ZHMTypeInfo("IActorProviderFilter", IActorProviderFilter::ToJson);

nlohmann::json IActorProviderFilter::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IActorProviderFilter*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SVideoDatabaseData::TypeInfo = ZHMTypeInfo("SVideoDatabaseData", SVideoDatabaseData::ToJson);

nlohmann::json SVideoDatabaseData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVideoDatabaseData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->Videos)
		{
			s_JsonArray.push_back({{ "$type", "SVideoDatabaseEntry" }, { "$val", SVideoDatabaseEntry::ToJson(&s_Item) }});
		}

		s_Json["Videos"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IBoneAnimator::TypeInfo = ZHMTypeInfo("IBoneAnimator", IBoneAnimator::ToJson);

nlohmann::json IBoneAnimator::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoneAnimator*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZER64::TypeInfo = ZHMTypeInfo("ZER64", ZER64::ToJson);

nlohmann::json ZER64::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZER64*>(p_Object);

	s_Json["m_nEntityID"] = {{ "$type", "uint64" }, { "$val", s_Object->m_nEntityID }};

	s_Json["m_sExposedEntity"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sExposedEntity.c_str() }};

	return s_Json;
}

ZHMTypeInfo ZScopedER64::TypeInfo = ZHMTypeInfo("ZScopedER64", ZScopedER64::ToJson);

nlohmann::json ZScopedER64::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZScopedER64*>(p_Object);

	s_Json["m_er64"] = {{ "$type", "ZER64" }, { "$val", ZER64::ToJson(&s_Object->m_er64) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aScopePath)
		{
			s_JsonArray.push_back({{ "$type", "uint64" }, { "$val", s_Item }});
		}

		s_Json["m_aScopePath"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ICloset::TypeInfo = ZHMTypeInfo("ICloset", ICloset::ToJson);

nlohmann::json ICloset::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICloset*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ICubemapProbeEntity::TypeInfo = ZHMTypeInfo("ICubemapProbeEntity", ICubemapProbeEntity::ToJson);

nlohmann::json ICubemapProbeEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICubemapProbeEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IChildNetworkEntity::TypeInfo = ZHMTypeInfo("IChildNetworkEntity", IChildNetworkEntity::ToJson);

nlohmann::json IChildNetworkEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IChildNetworkEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IParticleEmitterEntity::TypeInfo = ZHMTypeInfo("IParticleEmitterEntity", IParticleEmitterEntity::ToJson);

nlohmann::json IParticleEmitterEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IParticleEmitterEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZCautiousSearchGroup::TypeInfo = ZHMTypeInfo("ZCautiousSearchGroup", ZCautiousSearchGroup::ToJson);

nlohmann::json ZCautiousSearchGroup::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZCautiousSearchGroup*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsCombatPositionActReady::TypeInfo = ZHMTypeInfo("SCondition_IsCombatPositionActReady", SCondition_IsCombatPositionActReady::ToJson);

nlohmann::json SCondition_IsCombatPositionActReady::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsCombatPositionActReady*>(p_Object);

	s_Json["combatPosition"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->combatPosition) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsDifficultyGreaterOrEqual::TypeInfo = ZHMTypeInfo("SCondition_IsDifficultyGreaterOrEqual", SCondition_IsDifficultyGreaterOrEqual::ToJson);

nlohmann::json SCondition_IsDifficultyGreaterOrEqual::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDifficultyGreaterOrEqual*>(p_Object);

	s_Json["difficultyLevel"] = {{ "$type", "int32" }, { "$val", s_Object->difficultyLevel }};

	return s_Json;
}

ZHMTypeInfo SExtendedCppEntityBlueprint::TypeInfo = ZHMTypeInfo("SExtendedCppEntityBlueprint", SExtendedCppEntityBlueprint::ToJson);

nlohmann::json SExtendedCppEntityBlueprint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SExtendedCppEntityBlueprint*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->properties)
		{
			s_JsonArray.push_back({{ "$type", "SExtendedCppEntityProperty" }, { "$val", SExtendedCppEntityProperty::ToJson(&s_Item) }});
		}

		s_Json["properties"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IRoleEventSource::TypeInfo = ZHMTypeInfo("IRoleEventSource", IRoleEventSource::ToJson);

nlohmann::json IRoleEventSource::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRoleEventSource*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAnimatedActorStandOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorStandOrderSaveData", SAnimatedActorStandOrderSaveData::ToJson);

nlohmann::json SAnimatedActorStandOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAnimatedActorStandOrderSaveData*>(p_Object);

	s_Json["m_vFacingDirection"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vFacingDirection) }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasCustomDistractionStndSoundDef::TypeInfo = ZHMTypeInfo("SCondition_HasCustomDistractionStndSoundDef", SCondition_HasCustomDistractionStndSoundDef::ToJson);

nlohmann::json SCondition_HasCustomDistractionStndSoundDef::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasCustomDistractionStndSoundDef*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsDistracted::TypeInfo = ZHMTypeInfo("SCondition_IsDistracted", SCondition_IsDistracted::ToJson);

nlohmann::json SCondition_IsDistracted::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDistracted*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAudioMemoryMonitorEntry::TypeInfo = ZHMTypeInfo("SAudioMemoryMonitorEntry", SAudioMemoryMonitorEntry::ToJson);

nlohmann::json SAudioMemoryMonitorEntry::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAudioMemoryMonitorEntry*>(p_Object);

	s_Json["shortId"] = {{ "$type", "uint32" }, { "$val", s_Object->shortId }};

	s_Json["size"] = {{ "$type", "uint32" }, { "$val", s_Object->size }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->references)
		{
			s_JsonArray.push_back({{ "$type", "ZResourceID" }, { "$val", ZResourceID::ToJson(&s_Item) }});
		}

		s_Json["references"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo ZEntityID::TypeInfo = ZHMTypeInfo("ZEntityID", ZEntityID::ToJson);

nlohmann::json ZEntityID::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZEntityID*>(p_Object);

	s_Json["m_sStr"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sStr.c_str() }};

	return s_Json;
}

ZHMTypeInfo ZEntityReference::TypeInfo = ZHMTypeInfo("ZEntityReference", ZEntityReference::ToJson);

nlohmann::json ZEntityReference::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZEntityReference*>(p_Object);

	s_Json["m_EntityID"] = {{ "$type", "ZEntityID" }, { "$val", ZEntityID::ToJson(&s_Object->m_EntityID) }};

	s_Json["m_sExposedEntity"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sExposedEntity.c_str() }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsCurrent::TypeInfo = ZHMTypeInfo("SCondition_IsCurrent", SCondition_IsCurrent::ToJson);

nlohmann::json SCondition_IsCurrent::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsCurrent*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	s_Json["nAndUnhandled"] = {{ "$type", "int32" }, { "$val", s_Object->nAndUnhandled }};

	return s_Json;
}

ZHMTypeInfo SItemLeftHandUIData::TypeInfo = ZHMTypeInfo("SItemLeftHandUIData", SItemLeftHandUIData::ToJson);

nlohmann::json SItemLeftHandUIData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SItemLeftHandUIData*>(p_Object);

	s_Json["icon"] = {{ "$type", "ZRuntimeResourceID" }, { "$val", ZRuntimeResourceID::ToJson(&s_Object->icon) }};

	s_Json["nItemHUDType"] = {{ "$type", "int32" }, { "$val", s_Object->nItemHUDType }};

	s_Json["bHasItemToShow"] = {{ "$type", "bool" }, { "$val", s_Object->bHasItemToShow }};

	s_Json["bSuspicious"] = {{ "$type", "bool" }, { "$val", s_Object->bSuspicious }};

	s_Json["bIllegal"] = {{ "$type", "bool" }, { "$val", s_Object->bIllegal }};

	return s_Json;
}

ZHMTypeInfo SCombatOrderSaveData::TypeInfo = ZHMTypeInfo("SCombatOrderSaveData", SCombatOrderSaveData::ToJson);

nlohmann::json SCombatOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCombatOrderSaveData*>(p_Object);

	s_Json["m_vPos"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vPos) }};

	s_Json["m_coverPlane"] = {{ "$type", "uint32" }, { "$val", s_Object->m_coverPlane }};

	s_Json["m_rInteraction"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rInteraction }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasOrder::TypeInfo = ZHMTypeInfo("SCondition_HasOrder", SCondition_HasOrder::ToJson);

nlohmann::json SCondition_HasOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasOrder*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	s_Json["eOrder"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->eOrder) }};

	return s_Json;
}

ZHMTypeInfo STrajectoryTrackSaveData::TypeInfo = ZHMTypeInfo("STrajectoryTrackSaveData", STrajectoryTrackSaveData::ToJson);

nlohmann::json STrajectoryTrackSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STrajectoryTrackSaveData*>(p_Object);

	s_Json["m_vOriginalEntityTransform"] = {{ "$type", "SMatrix" }, { "$val", SMatrix::ToJson(&s_Object->m_vOriginalEntityTransform) }};

	s_Json["m_vTargetStartTransform"] = {{ "$type", "SMatrix" }, { "$val", SMatrix::ToJson(&s_Object->m_vTargetStartTransform) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsCombatDisabled::TypeInfo = ZHMTypeInfo("SCondition_IsCombatDisabled", SCondition_IsCombatDisabled::ToJson);

nlohmann::json SCondition_IsCombatDisabled::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsCombatDisabled*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ICharacterCollision::TypeInfo = ZHMTypeInfo("ICharacterCollision", ICharacterCollision::ToJson);

nlohmann::json ICharacterCollision::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterCollision*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SManHuntServiceSaveData::TypeInfo = ZHMTypeInfo("SManHuntServiceSaveData", SManHuntServiceSaveData::ToJson);

nlohmann::json SManHuntServiceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SManHuntServiceSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_rGuardNodes)
		{
			s_JsonArray.push_back({{ "$type", "uint16" }, { "$val", s_Item }});
		}

		s_Json["m_rGuardNodes"] = s_JsonArray;
	}

	s_Json["m_rInitialNode"] = {{ "$type", "uint16" }, { "$val", s_Object->m_rInitialNode }};

	s_Json["m_fGuardSightRange"] = {{ "$type", "float32" }, { "$val", s_Object->m_fGuardSightRange }};

	return s_Json;
}

ZHMTypeInfo SLockdownManagerSaveData::TypeInfo = ZHMTypeInfo("SLockdownManagerSaveData", SLockdownManagerSaveData::ToJson);

nlohmann::json SLockdownManagerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLockdownManagerSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aAIZones)
		{
			s_JsonArray.push_back({{ "$type", "SLockdownManagerAIZoneSaveData" }, { "$val", SLockdownManagerAIZoneSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aAIZones"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_CombatSituationsWithDesiredNumberOfCombatants::TypeInfo = ZHMTypeInfo("SCondition_CombatSituationsWithDesiredNumberOfCombatants", SCondition_CombatSituationsWithDesiredNumberOfCombatants::ToJson);

nlohmann::json SCondition_CombatSituationsWithDesiredNumberOfCombatants::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CombatSituationsWithDesiredNumberOfCombatants*>(p_Object);

	s_Json["m_CombatSituations"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_CombatSituations) }};

	return s_Json;
}

ZHMTypeInfo ZOnlineSocialManager::TypeInfo = ZHMTypeInfo("ZOnlineSocialManager", ZOnlineSocialManager::ToJson);

nlohmann::json ZOnlineSocialManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZOnlineSocialManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SOnlineSaveData::TypeInfo = ZHMTypeInfo("SOnlineSaveData", SOnlineSaveData::ToJson);

nlohmann::json SOnlineSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SOnlineSaveData*>(p_Object);

	s_Json["m_sName"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sName.c_str() }};

	s_Json["m_nTimeStamp"] = {{ "$type", "int64" }, { "$val", s_Object->m_nTimeStamp }};

	s_Json["m_bIsOnline"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsOnline }};

	s_Json["m_sContractSessionId"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sContractSessionId.c_str() }};

	s_Json["m_sLastEventToken"] = {{ "$type", "ZString" }, { "$val", s_Object->m_sLastEventToken.c_str() }};

	return s_Json;
}

ZHMTypeInfo SMovementLadderSaveData::TypeInfo = ZHMTypeInfo("SMovementLadderSaveData", SMovementLadderSaveData::ToJson);

nlohmann::json SMovementLadderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMovementLadderSaveData*>(p_Object);

	s_Json["m_rLadder"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rLadder }};

	return s_Json;
}

ZHMTypeInfo IValueVector3Set::TypeInfo = ZHMTypeInfo("IValueVector3Set", IValueVector3Set::ToJson);

nlohmann::json IValueVector3Set::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueVector3Set*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCautiousSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SCautiousSituationMemberSaveData", SCautiousSituationMemberSaveData::ToJson);

nlohmann::json SCautiousSituationMemberSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCautiousSituationMemberSaveData*>(p_Object);

	s_Json["m_tLastDisturbance"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastDisturbance) }};

	s_Json["m_tLastSearchCalc"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastSearchCalc) }};

	s_Json["m_tLastInfluenceCalc"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastInfluenceCalc) }};

	s_Json["m_tLastSearchCompleted"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastSearchCompleted) }};

	s_Json["m_tLastInvestigationCompleted"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tLastInvestigationCompleted) }};

	s_Json["m_tTimeIdling"] = {{ "$type", "ZGameTime" }, { "$val", ZGameTime::ToJson(&s_Object->m_tTimeIdling) }};

	s_Json["m_pGuardDutyPoint"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pGuardDutyPoint }};

	s_Json["m_nBulletImpactsHeard"] = {{ "$type", "int32" }, { "$val", s_Object->m_nBulletImpactsHeard }};

	s_Json["m_nPatrolWaypointIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_nPatrolWaypointIndex }};

	s_Json["m_nPatrolWaypointSubIndex"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nPatrolWaypointSubIndex }};

	s_Json["m_bBanterCandidate"] = {{ "$type", "bool" }, { "$val", s_Object->m_bBanterCandidate }};

	s_Json["m_bCivOccupant"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCivOccupant }};

	s_Json["m_bRecievingNewHuntTarget"] = {{ "$type", "bool" }, { "$val", s_Object->m_bRecievingNewHuntTarget }};

	s_Json["m_bLockdownEnforcer"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLockdownEnforcer }};

	return s_Json;
}

ZHMTypeInfo SCondition_HasCustomInvestigationAckSoundDef::TypeInfo = ZHMTypeInfo("SCondition_HasCustomInvestigationAckSoundDef", SCondition_HasCustomInvestigationAckSoundDef::ToJson);

nlohmann::json SCondition_HasCustomInvestigationAckSoundDef::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_HasCustomInvestigationAckSoundDef*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	return s_Json;
}

ZHMTypeInfo ICharacterMovementState::TypeInfo = ZHMTypeInfo("ICharacterMovementState", ICharacterMovementState::ToJson);

nlohmann::json ICharacterMovementState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterMovementState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SRegionSaveData::TypeInfo = ZHMTypeInfo("SRegionSaveData", SRegionSaveData::ToJson);

nlohmann::json SRegionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SRegionSaveData*>(p_Object);

	s_Json["m_nIndex"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nIndex }};

	s_Json["m_eType"] = {{ "$type", "CrowdRegionType" }, { "$val", static_cast<int>(s_Object->m_eType) }};

	s_Json["m_vCenter"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vCenter) }};

	s_Json["m_nDirection"] = {{ "$type", "float32" }, { "$val", s_Object->m_nDirection }};

	s_Json["m_nRadius"] = {{ "$type", "float32" }, { "$val", s_Object->m_nRadius }};

	s_Json["m_nAngle"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nAngle }};

	s_Json["m_nLifetime"] = {{ "$type", "float32" }, { "$val", s_Object->m_nLifetime }};

	s_Json["m_nAge"] = {{ "$type", "float32" }, { "$val", s_Object->m_nAge }};

	s_Json["m_nGroupID"] = {{ "$type", "uint8" }, { "$val", s_Object->m_nGroupID }};

	s_Json["m_nObstacleActorIndex"] = {{ "$type", "int16" }, { "$val", s_Object->m_nObstacleActorIndex }};

	return s_Json;
}

ZHMTypeInfo IFloat3CurvesEntity::TypeInfo = ZHMTypeInfo("IFloat3CurvesEntity", IFloat3CurvesEntity::ToJson);

nlohmann::json IFloat3CurvesEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IFloat3CurvesEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo BoneId::TypeInfo = ZHMTypeInfo("BoneId", BoneId::ToJson);

nlohmann::json BoneId::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<BoneId*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IScreenplayContext::TypeInfo = ZHMTypeInfo("IScreenplayContext", IScreenplayContext::ToJson);

nlohmann::json IScreenplayContext::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IScreenplayContext*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SGameplayRenderablesSaveData::TypeInfo = ZHMTypeInfo("SGameplayRenderablesSaveData", SGameplayRenderablesSaveData::ToJson);

nlohmann::json SGameplayRenderablesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SGameplayRenderablesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aLightData)
		{
			s_JsonArray.push_back({{ "$type", "SLightSaveData" }, { "$val", SLightSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aLightData"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aMaterialData)
		{
			s_JsonArray.push_back({{ "$type", "SRenderMaterialSaveData" }, { "$val", SRenderMaterialSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aMaterialData"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aParticleData)
		{
			s_JsonArray.push_back({{ "$type", "SParticleEmitterSaveData" }, { "$val", SParticleEmitterSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aParticleData"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBoneAttachData)
		{
			s_JsonArray.push_back({{ "$type", "SBoneAttachSaveData" }, { "$val", SBoneAttachSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aBoneAttachData"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aPostFilterParametersData)
		{
			s_JsonArray.push_back({{ "$type", "SPostfilterParametersSaveData" }, { "$val", SPostfilterParametersSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aPostFilterParametersData"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aGateData)
		{
			s_JsonArray.push_back({{ "$type", "SGateSaveData" }, { "$val", SGateSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aGateData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SPrivateAreaSaveData::TypeInfo = ZHMTypeInfo("SPrivateAreaSaveData", SPrivateAreaSaveData::ToJson);

nlohmann::json SPrivateAreaSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SPrivateAreaSaveData*>(p_Object);

	s_Json["m_bIsInside"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsInside }};

	s_Json["m_nHasEntered"] = {{ "$type", "bool" }, { "$val", s_Object->m_nHasEntered }};

	s_Json["m_bHasExited"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHasExited }};

	s_Json["m_bSpotted"] = {{ "$type", "bool" }, { "$val", s_Object->m_bSpotted }};

	s_Json["m_vHitmanEnterPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vHitmanEnterPosition) }};

	s_Json["m_vHitmanExitPosition"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vHitmanExitPosition) }};

	return s_Json;
}

ZHMTypeInfo SWorldSpaceSettings::TypeInfo = ZHMTypeInfo("SWorldSpaceSettings", SWorldSpaceSettings::ToJson);

nlohmann::json SWorldSpaceSettings::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SWorldSpaceSettings*>(p_Object);

	s_Json["fCloseupDistance"] = {{ "$type", "float32" }, { "$val", s_Object->fCloseupDistance }};

	s_Json["fScale"] = {{ "$type", "float32" }, { "$val", s_Object->fScale }};

	s_Json["bDynamicScale"] = {{ "$type", "bool" }, { "$val", s_Object->bDynamicScale }};

	s_Json["fDynamicScaleAlpha"] = {{ "$type", "float32" }, { "$val", s_Object->fDynamicScaleAlpha }};

	s_Json["fDynamicScaleNearDistance"] = {{ "$type", "float32" }, { "$val", s_Object->fDynamicScaleNearDistance }};

	s_Json["fDynamicScaleBlendRange"] = {{ "$type", "float32" }, { "$val", s_Object->fDynamicScaleBlendRange }};

	return s_Json;
}

ZHMTypeInfo ISituation::TypeInfo = ZHMTypeInfo("ISituation", ISituation::ToJson);

nlohmann::json ISituation::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISituation*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SVRConfigCameraComponent::TypeInfo = ZHMTypeInfo("SVRConfigCameraComponent", SVRConfigCameraComponent::ToJson);

nlohmann::json SVRConfigCameraComponent::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SVRConfigCameraComponent*>(p_Object);

	s_Json["m_eHeadAnchorMode"] = {{ "$type", "EVRConfigHeadAnchorMode" }, { "$val", static_cast<int>(s_Object->m_eHeadAnchorMode) }};

	s_Json["m_uRecenterRequestCounter"] = {{ "$type", "uint32" }, { "$val", s_Object->m_uRecenterRequestCounter }};

	s_Json["m_fVRUserInputWeight"] = {{ "$type", "float32" }, { "$val", s_Object->m_fVRUserInputWeight }};

	s_Json["m_fGridSize"] = {{ "$type", "float32" }, { "$val", s_Object->m_fGridSize }};

	s_Json["m_fCapsuleHeadAttacherOffset"] = {{ "$type", "float32" }, { "$val", s_Object->m_fCapsuleHeadAttacherOffset }};

	s_Json["m_fCapsuleHeadAttacherOffsetSneaking"] = {{ "$type", "float32" }, { "$val", s_Object->m_fCapsuleHeadAttacherOffsetSneaking }};

	s_Json["m_fHeadBoneAttacherOffset"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHeadBoneAttacherOffset }};

	s_Json["m_vAnchorPosOffset"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vAnchorPosOffset) }};

	s_Json["m_mAnchorRotOffset"] = {{ "$type", "SMatrix" }, { "$val", SMatrix::ToJson(&s_Object->m_mAnchorRotOffset) }};

	return s_Json;
}

ZHMTypeInfo SCondition_GetRandomFightTarget::TypeInfo = ZHMTypeInfo("SCondition_GetRandomFightTarget", SCondition_GetRandomFightTarget::ToJson);

nlohmann::json SCondition_GetRandomFightTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_GetRandomFightTarget*>(p_Object);

	s_Json["combatPosition"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->combatPosition) }};

	return s_Json;
}

ZHMTypeInfo SDynamicRayCastEntitySaveData::TypeInfo = ZHMTypeInfo("SDynamicRayCastEntitySaveData", SDynamicRayCastEntitySaveData::ToJson);

nlohmann::json SDynamicRayCastEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDynamicRayCastEntitySaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_bIsRayIntersecting"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsRayIntersecting }};

	s_Json["m_bIsCurrentlyEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsCurrentlyEnabled }};

	return s_Json;
}

ZHMTypeInfo SExitSaveData::TypeInfo = ZHMTypeInfo("SExitSaveData", SExitSaveData::ToJson);

nlohmann::json SExitSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SExitSaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	return s_Json;
}

ZHMTypeInfo SHintManagerSaveData::TypeInfo = ZHMTypeInfo("SHintManagerSaveData", SHintManagerSaveData::ToJson);

nlohmann::json SHintManagerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHintManagerSaveData*>(p_Object);

	s_Json["m_activeHint"] = {{ "$type", "SHintEntrySaveData" }, { "$val", SHintEntrySaveData::ToJson(&s_Object->m_activeHint) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aQueue)
		{
			s_JsonArray.push_back({{ "$type", "SHintEntrySaveData" }, { "$val", SHintEntrySaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aQueue"] = s_JsonArray;
	}

	s_Json["m_bIsRunning"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsRunning }};

	return s_Json;
}

ZHMTypeInfo IBaseConstraint::TypeInfo = ZHMTypeInfo("IBaseConstraint", IBaseConstraint::ToJson);

nlohmann::json IBaseConstraint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBaseConstraint*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IFloatCurveEntity::TypeInfo = ZHMTypeInfo("IFloatCurveEntity", IFloatCurveEntity::ToJson);

nlohmann::json IFloatCurveEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IFloatCurveEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SProgressTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SProgressTimerEntitySaveData", SProgressTimerEntitySaveData::ToJson);

nlohmann::json SProgressTimerEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SProgressTimerEntitySaveData*>(p_Object);

	s_Json["m_nInterval"] = {{ "$type", "int32" }, { "$val", s_Object->m_nInterval }};

	s_Json["m_nRemaining"] = {{ "$type", "int32" }, { "$val", s_Object->m_nRemaining }};

	s_Json["m_bValue"] = {{ "$type", "bool" }, { "$val", s_Object->m_bValue }};

	return s_Json;
}

ZHMTypeInfo IValueIntSet::TypeInfo = ZHMTypeInfo("IValueIntSet", IValueIntSet::ToJson);

nlohmann::json IValueIntSet::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueIntSet*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IAudioVolumetricGeom::TypeInfo = ZHMTypeInfo("IAudioVolumetricGeom", IAudioVolumetricGeom::ToJson);

nlohmann::json IAudioVolumetricGeom::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IAudioVolumetricGeom*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAvoidDangerousAreaGroupSaveData::TypeInfo = ZHMTypeInfo("SAvoidDangerousAreaGroupSaveData", SAvoidDangerousAreaGroupSaveData::ToJson);

nlohmann::json SAvoidDangerousAreaGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAvoidDangerousAreaGroupSaveData*>(p_Object);

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_rDangerousArea"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rDangerousArea }};

	s_Json["m_vDestinationPoint"] = {{ "$type", "float4" }, { "$val", float4::ToJson(&s_Object->m_vDestinationPoint) }};

	s_Json["m_iGridId"] = {{ "$type", "int32" }, { "$val", s_Object->m_iGridId }};

	s_Json["m_bWaitUntilDangerEnds"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWaitUntilDangerEnds }};

	return s_Json;
}

ZHMTypeInfo ITransitionTarget::TypeInfo = ZHMTypeInfo("ITransitionTarget", ITransitionTarget::ToJson);

nlohmann::json ITransitionTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ITransitionTarget*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SLightFlickerEntitySaveData::TypeInfo = ZHMTypeInfo("SLightFlickerEntitySaveData", SLightFlickerEntitySaveData::ToJson);

nlohmann::json SLightFlickerEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLightFlickerEntitySaveData*>(p_Object);

	s_Json["m_bLightOn"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLightOn }};

	s_Json["m_bFlickerOn"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFlickerOn }};

	return s_Json;
}

ZHMTypeInfo ICharacterArrestState::TypeInfo = ZHMTypeInfo("ICharacterArrestState", ICharacterArrestState::ToJson);

nlohmann::json ICharacterArrestState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterArrestState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MinActualDistance2D::TypeInfo = ZHMTypeInfo("SCondition_MinActualDistance2D", SCondition_MinActualDistance2D::ToJson);

nlohmann::json SCondition_MinActualDistance2D::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MinActualDistance2D*>(p_Object);

	s_Json["m_From"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_From) }};

	s_Json["m_To"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_To) }};

	s_Json["m_Distance"] = {{ "$type", "float32" }, { "$val", s_Object->m_Distance }};

	return s_Json;
}

ZHMTypeInfo ISequenceTarget::TypeInfo = ZHMTypeInfo("ISequenceTarget", ISequenceTarget::ToJson);

nlohmann::json ISequenceTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISequenceTarget*>(p_Object);

	return s_Json;
}

ZHMTypeInfo STemplateEntityFactory::TypeInfo = ZHMTypeInfo("STemplateEntityFactory", STemplateEntityFactory::ToJson);

nlohmann::json STemplateEntityFactory::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STemplateEntityFactory*>(p_Object);

	s_Json["subType"] = {{ "$type", "int32" }, { "$val", s_Object->subType }};

	s_Json["blueprintIndexInResourceHeader"] = {{ "$type", "int32" }, { "$val", s_Object->blueprintIndexInResourceHeader }};

	s_Json["rootEntityIndex"] = {{ "$type", "int32" }, { "$val", s_Object->rootEntityIndex }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->subEntities)
		{
			s_JsonArray.push_back({{ "$type", "STemplateFactorySubEntity" }, { "$val", STemplateFactorySubEntity::ToJson(&s_Item) }});
		}

		s_Json["subEntities"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->propertyOverrides)
		{
			s_JsonArray.push_back({{ "$type", "SEntityTemplatePropertyOverride" }, { "$val", SEntityTemplatePropertyOverride::ToJson(&s_Item) }});
		}

		s_Json["propertyOverrides"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->externalSceneTypeIndicesInResourceHeader)
		{
			s_JsonArray.push_back({{ "$type", "int32" }, { "$val", s_Item }});
		}

		s_Json["externalSceneTypeIndicesInResourceHeader"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IRenderPostfilterParametersEntity::TypeInfo = ZHMTypeInfo("IRenderPostfilterParametersEntity", IRenderPostfilterParametersEntity::ToJson);

nlohmann::json IRenderPostfilterParametersEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IRenderPostfilterParametersEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_CanInvestigateDistraction::TypeInfo = ZHMTypeInfo("SCondition_CanInvestigateDistraction", SCondition_CanInvestigateDistraction::ToJson);

nlohmann::json SCondition_CanInvestigateDistraction::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CanInvestigateDistraction*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	return s_Json;
}

ZHMTypeInfo ZContractEvaluationContext::TypeInfo = ZHMTypeInfo("ZContractEvaluationContext", ZContractEvaluationContext::ToJson);

nlohmann::json ZContractEvaluationContext::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZContractEvaluationContext*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ICharacterFriskingState::TypeInfo = ZHMTypeInfo("ICharacterFriskingState", ICharacterFriskingState::ToJson);

nlohmann::json ICharacterFriskingState::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ICharacterFriskingState*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsSharedEventCurrent::TypeInfo = ZHMTypeInfo("SCondition_IsSharedEventCurrent", SCondition_IsSharedEventCurrent::ToJson);

nlohmann::json SCondition_IsSharedEventCurrent::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsSharedEventCurrent*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo SCondition_MaxActualDistance::TypeInfo = ZHMTypeInfo("SCondition_MaxActualDistance", SCondition_MaxActualDistance::ToJson);

nlohmann::json SCondition_MaxActualDistance::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MaxActualDistance*>(p_Object);

	s_Json["a0"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a0) }};

	s_Json["a1"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->a1) }};

	s_Json["fDistance"] = {{ "$type", "float32" }, { "$val", s_Object->fDistance }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsHighestPriorityTypeToInvestigate::TypeInfo = ZHMTypeInfo("SCondition_IsHighestPriorityTypeToInvestigate", SCondition_IsHighestPriorityTypeToInvestigate::ToJson);

nlohmann::json SCondition_IsHighestPriorityTypeToInvestigate::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsHighestPriorityTypeToInvestigate*>(p_Object);

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	s_Json["distractionType"] = {{ "$type", "EAIEventType" }, { "$val", static_cast<int>(s_Object->distractionType) }};

	return s_Json;
}

ZHMTypeInfo ISequenceValueSource::TypeInfo = ZHMTypeInfo("ISequenceValueSource", ISequenceValueSource::ToJson);

nlohmann::json ISequenceValueSource::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISequenceValueSource*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SEscortSituationActors::TypeInfo = ZHMTypeInfo("SEscortSituationActors", SEscortSituationActors::ToJson);

nlohmann::json SEscortSituationActors::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEscortSituationActors*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo S25DProjectionSettings::TypeInfo = ZHMTypeInfo("S25DProjectionSettings", S25DProjectionSettings::ToJson);

nlohmann::json S25DProjectionSettings::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<S25DProjectionSettings*>(p_Object);

	s_Json["fNearDistance"] = {{ "$type", "float32" }, { "$val", s_Object->fNearDistance }};

	s_Json["fFarDistance"] = {{ "$type", "float32" }, { "$val", s_Object->fFarDistance }};

	s_Json["fNearScale"] = {{ "$type", "float32" }, { "$val", s_Object->fNearScale }};

	s_Json["fFarScale"] = {{ "$type", "float32" }, { "$val", s_Object->fFarScale }};

	s_Json["fNearFov"] = {{ "$type", "float32" }, { "$val", s_Object->fNearFov }};

	s_Json["fFarFov"] = {{ "$type", "float32" }, { "$val", s_Object->fFarFov }};

	s_Json["fNearScaleFov"] = {{ "$type", "float32" }, { "$val", s_Object->fNearScaleFov }};

	s_Json["fFarScaleFov"] = {{ "$type", "float32" }, { "$val", s_Object->fFarScaleFov }};

	s_Json["fScaleFactor"] = {{ "$type", "float32" }, { "$val", s_Object->fScaleFactor }};

	s_Json["fNearAlpha"] = {{ "$type", "float32" }, { "$val", s_Object->fNearAlpha }};

	s_Json["fFarAlpha"] = {{ "$type", "float32" }, { "$val", s_Object->fFarAlpha }};

	s_Json["fAlphaFactor"] = {{ "$type", "float32" }, { "$val", s_Object->fAlphaFactor }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aScaleCurve)
		{
			s_JsonArray.push_back({{ "$type", "S25DProjectionSettingsCurveEntry" }, { "$val", S25DProjectionSettingsCurveEntry::ToJson(&s_Item) }});
		}

		s_Json["aScaleCurve"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->aAlphaCurve)
		{
			s_JsonArray.push_back({{ "$type", "S25DProjectionSettingsCurveEntry" }, { "$val", S25DProjectionSettingsCurveEntry::ToJson(&s_Item) }});
		}

		s_Json["aAlphaCurve"] = s_JsonArray;
	}

	s_Json["eViewportLock"] = {{ "$type", "EViewportLock" }, { "$val", static_cast<int>(s_Object->eViewportLock) }};

	s_Json["fViewportGutter"] = {{ "$type", "float32" }, { "$val", s_Object->fViewportGutter }};

	s_Json["sWorldSpaceSettings"] = {{ "$type", "SWorldSpaceSettings" }, { "$val", SWorldSpaceSettings::ToJson(&s_Object->sWorldSpaceSettings) }};

	return s_Json;
}

ZHMTypeInfo IDramaPriorityModifier::TypeInfo = ZHMTypeInfo("IDramaPriorityModifier", IDramaPriorityModifier::ToJson);

nlohmann::json IDramaPriorityModifier::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IDramaPriorityModifier*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ZEscortOutOrder::TypeInfo = ZHMTypeInfo("ZEscortOutOrder", ZEscortOutOrder::ToJson);

nlohmann::json ZEscortOutOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZEscortOutOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsSituationTarget::TypeInfo = ZHMTypeInfo("SCondition_IsSituationTarget", SCondition_IsSituationTarget::ToJson);

nlohmann::json SCondition_IsSituationTarget::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsSituationTarget*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	s_Json["target"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->target) }};

	return s_Json;
}

ZHMTypeInfo STokenID::TypeInfo = ZHMTypeInfo("STokenID", STokenID::ToJson);

nlohmann::json STokenID::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<STokenID*>(p_Object);

	s_Json["m_iValue"] = {{ "$type", "uint32" }, { "$val", s_Object->m_iValue }};

	s_Json["m_bValid"] = {{ "$type", "bool" }, { "$val", s_Object->m_bValid }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsOfActorRole::TypeInfo = ZHMTypeInfo("SCondition_IsOfActorRole", SCondition_IsOfActorRole::ToJson);

nlohmann::json SCondition_IsOfActorRole::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsOfActorRole*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["eRole"] = {{ "$type", "EActorRole" }, { "$val", static_cast<int>(s_Object->eRole) }};

	return s_Json;
}

ZHMTypeInfo IProjectile::TypeInfo = ZHMTypeInfo("IProjectile", IProjectile::ToJson);

nlohmann::json IProjectile::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IProjectile*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_SharedEventCurrent::TypeInfo = ZHMTypeInfo("SCondition_SharedEventCurrent", SCondition_SharedEventCurrent::ToJson);

nlohmann::json SCondition_SharedEventCurrent::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_SharedEventCurrent*>(p_Object);

	s_Json["type"] = {{ "$type", "EAISharedEventType" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo ZMoveToOrder::TypeInfo = ZHMTypeInfo("ZMoveToOrder", ZMoveToOrder::ToJson);

nlohmann::json ZMoveToOrder::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZMoveToOrder*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IKinematicLinkedPhysicsEntity::TypeInfo = ZHMTypeInfo("IKinematicLinkedPhysicsEntity", IKinematicLinkedPhysicsEntity::ToJson);

nlohmann::json IKinematicLinkedPhysicsEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IKinematicLinkedPhysicsEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IActor::TypeInfo = ZHMTypeInfo("IActor", IActor::ToJson);

nlohmann::json IActor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IActor*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCrowdActivitySaveData::TypeInfo = ZHMTypeInfo("SCrowdActivitySaveData", SCrowdActivitySaveData::ToJson);

nlohmann::json SCrowdActivitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdActivitySaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_eGait"] = {{ "$type", "EGait" }, { "$val", static_cast<int>(s_Object->m_eGait) }};

	s_Json["m_nMaxEnterDelaySec"] = {{ "$type", "float32" }, { "$val", s_Object->m_nMaxEnterDelaySec }};

	s_Json["m_nMaxLeaveDelaySec"] = {{ "$type", "float32" }, { "$val", s_Object->m_nMaxLeaveDelaySec }};

	return s_Json;
}

ZHMTypeInfo SSCCuriousConfiguration::TypeInfo = ZHMTypeInfo("SSCCuriousConfiguration", SSCCuriousConfiguration::ToJson);

nlohmann::json SSCCuriousConfiguration::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSCCuriousConfiguration*>(p_Object);

	s_Json["m_CanGuardsInvestigate"] = {{ "$type", "bool" }, { "$val", s_Object->m_CanGuardsInvestigate }};

	s_Json["m_CanCiviliansInvestigate"] = {{ "$type", "bool" }, { "$val", s_Object->m_CanCiviliansInvestigate }};

	s_Json["m_CanVIPsInvestigate"] = {{ "$type", "bool" }, { "$val", s_Object->m_CanVIPsInvestigate }};

	return s_Json;
}

ZHMTypeInfo SHandleDistractionSituationSaveData::TypeInfo = ZHMTypeInfo("SHandleDistractionSituationSaveData", SHandleDistractionSituationSaveData::ToJson);

nlohmann::json SHandleDistractionSituationSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHandleDistractionSituationSaveData*>(p_Object);

	s_Json["m_pLeader"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pLeader }};

	s_Json["m_pAssistant"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pAssistant }};

	s_Json["m_pPreliminaryLeader"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pPreliminaryLeader }};

	return s_Json;
}

ZHMTypeInfo IAccessoryItem::TypeInfo = ZHMTypeInfo("IAccessoryItem", IAccessoryItem::ToJson);

nlohmann::json IAccessoryItem::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IAccessoryItem*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IValueVector3Get::TypeInfo = ZHMTypeInfo("IValueVector3Get", IValueVector3Get::ToJson);

nlohmann::json IValueVector3Get::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueVector3Get*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_BeingPickedUpBy::TypeInfo = ZHMTypeInfo("SCondition_BeingPickedUpBy", SCondition_BeingPickedUpBy::ToJson);

nlohmann::json SCondition_BeingPickedUpBy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_BeingPickedUpBy*>(p_Object);

	s_Json["item"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->item) }};

	return s_Json;
}

ZHMTypeInfo ISoundMaterialDescriptor::TypeInfo = ZHMTypeInfo("ISoundMaterialDescriptor", ISoundMaterialDescriptor::ToJson);

nlohmann::json ISoundMaterialDescriptor::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISoundMaterialDescriptor*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IHM5ActionEntityListener::TypeInfo = ZHMTypeInfo("IHM5ActionEntityListener", IHM5ActionEntityListener::ToJson);

nlohmann::json IHM5ActionEntityListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5ActionEntityListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_Breakpoint::TypeInfo = ZHMTypeInfo("SCondition_Breakpoint", SCondition_Breakpoint::ToJson);

nlohmann::json SCondition_Breakpoint::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_Breakpoint*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_MinSituationAge::TypeInfo = ZHMTypeInfo("SCondition_MinSituationAge", SCondition_MinSituationAge::ToJson);

nlohmann::json SCondition_MinSituationAge::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_MinSituationAge*>(p_Object);

	s_Json["situation"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->situation) }};

	s_Json["fMinAge"] = {{ "$type", "float32" }, { "$val", s_Object->fMinAge }};

	return s_Json;
}

ZHMTypeInfo SClothBundleSpawnSaveData::TypeInfo = ZHMTypeInfo("SClothBundleSpawnSaveData", SClothBundleSpawnSaveData::ToJson);

nlohmann::json SClothBundleSpawnSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SClothBundleSpawnSaveData*>(p_Object);

	s_Json["m_rClothbundle"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rClothbundle }};

	return s_Json;
}

ZHMTypeInfo SCondition_PerceptibleEntityEndAfterReact::TypeInfo = ZHMTypeInfo("SCondition_PerceptibleEntityEndAfterReact", SCondition_PerceptibleEntityEndAfterReact::ToJson);

nlohmann::json SCondition_PerceptibleEntityEndAfterReact::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_PerceptibleEntityEndAfterReact*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	return s_Json;
}

ZHMTypeInfo SMathDistanceSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector3", SMathDistanceSaveData_SVector3::ToJson);

nlohmann::json SMathDistanceSaveData_SVector3::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMathDistanceSaveData_SVector3*>(p_Object);

	s_Json["m_fA"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_fA) }};

	s_Json["m_fB"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_fB) }};

	return s_Json;
}

ZHMTypeInfo SWorldInventoryInstanceSaveData::TypeInfo = ZHMTypeInfo("SWorldInventoryInstanceSaveData", SWorldInventoryInstanceSaveData::ToJson);

nlohmann::json SWorldInventoryInstanceSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SWorldInventoryInstanceSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aItemInstanceSaveData)
		{
			s_JsonArray.push_back({{ "$type", "SItemInstanceSaveData" }, { "$val", SItemInstanceSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aItemInstanceSaveData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IBoneWeightEntity::TypeInfo = ZHMTypeInfo("IBoneWeightEntity", IBoneWeightEntity::ToJson);

nlohmann::json IBoneWeightEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoneWeightEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_IsOfActorType::TypeInfo = ZHMTypeInfo("SCondition_IsOfActorType", SCondition_IsOfActorType::ToJson);

nlohmann::json SCondition_IsOfActorType::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsOfActorType*>(p_Object);

	s_Json["entity"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->entity) }};

	s_Json["type"] = {{ "$type", "EActorType" }, { "$val", static_cast<int>(s_Object->type) }};

	return s_Json;
}

ZHMTypeInfo IBoxVolumeEntity::TypeInfo = ZHMTypeInfo("IBoxVolumeEntity", IBoxVolumeEntity::ToJson);

nlohmann::json IBoxVolumeEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IBoxVolumeEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo INetRelevancy::TypeInfo = ZHMTypeInfo("INetRelevancy", INetRelevancy::ToJson);

nlohmann::json INetRelevancy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<INetRelevancy*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SChallengesSaveData::TypeInfo = ZHMTypeInfo("SChallengesSaveData", SChallengesSaveData::ToJson);

nlohmann::json SChallengesSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SChallengesSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_mChallengeStates)
		{
			s_JsonArray.push_back({{ "$type", "SChallengeSaveData" }, { "$val", SChallengeSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_mChallengeStates"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SDetectedInPrivateGroupSaveData::TypeInfo = ZHMTypeInfo("SDetectedInPrivateGroupSaveData", SDetectedInPrivateGroupSaveData::ToJson);

nlohmann::json SDetectedInPrivateGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDetectedInPrivateGroupSaveData*>(p_Object);

	s_Json["m_fsmState"] = {{ "$type", "SFSMSaveData" }, { "$val", SFSMSaveData::ToJson(&s_Object->m_fsmState) }};

	s_Json["m_fTimeWaiting"] = {{ "$type", "float32" }, { "$val", s_Object->m_fTimeWaiting }};

	s_Json["m_rLead"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rLead }};

	s_Json["m_bDisbanded"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDisbanded }};

	s_Json["m_bFirstWait"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFirstWait }};

	s_Json["m_target"] = {{ "$type", "int32" }, { "$val", s_Object->m_target }};

	return s_Json;
}

ZHMTypeInfo SDynamicObjectKeyValuePair::TypeInfo = ZHMTypeInfo("SDynamicObjectKeyValuePair", SDynamicObjectKeyValuePair::ToJson);

nlohmann::json SDynamicObjectKeyValuePair::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDynamicObjectKeyValuePair*>(p_Object);

	s_Json["sKey"] = {{ "$type", "ZString" }, { "$val", s_Object->sKey.c_str() }};

	s_Json["value"] = {{ "$type", "ZDynamicObject" }, { "$val", ZDynamicObject::ToJson(&s_Object->value) }};

	return s_Json;
}

ZHMTypeInfo SCondition_IsDistractionNewerThanCurrentOne::TypeInfo = ZHMTypeInfo("SCondition_IsDistractionNewerThanCurrentOne", SCondition_IsDistractionNewerThanCurrentOne::ToJson);

nlohmann::json SCondition_IsDistractionNewerThanCurrentOne::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_IsDistractionNewerThanCurrentOne*>(p_Object);

	s_Json["distraction"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->distraction) }};

	return s_Json;
}

ZHMTypeInfo ZInteractionGuideData::TypeInfo = ZHMTypeInfo("ZInteractionGuideData", ZInteractionGuideData::ToJson);

nlohmann::json ZInteractionGuideData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZInteractionGuideData*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCppEntity::TypeInfo = ZHMTypeInfo("SCppEntity", SCppEntity::ToJson);

nlohmann::json SCppEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCppEntity*>(p_Object);

	s_Json["blueprintIndexInResourceHeader"] = {{ "$type", "int32" }, { "$val", s_Object->blueprintIndexInResourceHeader }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->propertyValues)
		{
			s_JsonArray.push_back({{ "$type", "SEntityTemplateProperty" }, { "$val", SEntityTemplateProperty::ToJson(&s_Item) }});
		}

		s_Json["propertyValues"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SCondition_CombatSituationsThatCanDiscardCombatants::TypeInfo = ZHMTypeInfo("SCondition_CombatSituationsThatCanDiscardCombatants", SCondition_CombatSituationsThatCanDiscardCombatants::ToJson);

nlohmann::json SCondition_CombatSituationsThatCanDiscardCombatants::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_CombatSituationsThatCanDiscardCombatants*>(p_Object);

	s_Json["m_CombatSituations"] = {{ "$type", "ZBehaviorTreeVariable" }, { "$val", ZBehaviorTreeVariable::ToJson(&s_Object->m_CombatSituations) }};

	return s_Json;
}

ZHMTypeInfo SMovementCoverSaveData::TypeInfo = ZHMTypeInfo("SMovementCoverSaveData", SMovementCoverSaveData::ToJson);

nlohmann::json SMovementCoverSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SMovementCoverSaveData*>(p_Object);

	s_Json["m_rCoverPlane"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rCoverPlane }};

	s_Json["m_nCoverAnimNodeID"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nCoverAnimNodeID }};

	s_Json["m_bLeftSideFacing"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLeftSideFacing }};

	s_Json["m_bCrouched"] = {{ "$type", "bool" }, { "$val", s_Object->m_bCrouched }};

	s_Json["m_mPositionInCover"] = {{ "$type", "SMatrix" }, { "$val", SMatrix::ToJson(&s_Object->m_mPositionInCover) }};

	return s_Json;
}

ZHMTypeInfo ZStateEarlyoutBase::TypeInfo = ZHMTypeInfo("ZStateEarlyoutBase", ZStateEarlyoutBase::ToJson);

nlohmann::json ZStateEarlyoutBase::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ZStateEarlyoutBase*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SCondition_FindSuitcaseAssitanceForCivilian::TypeInfo = ZHMTypeInfo("SCondition_FindSuitcaseAssitanceForCivilian", SCondition_FindSuitcaseAssitanceForCivilian::ToJson);

nlohmann::json SCondition_FindSuitcaseAssitanceForCivilian::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCondition_FindSuitcaseAssitanceForCivilian*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAnimatedActorOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorOrderSaveData", SAnimatedActorOrderSaveData::ToJson);

nlohmann::json SAnimatedActorOrderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAnimatedActorOrderSaveData*>(p_Object);

	s_Json["m_eOrderType"] = {{ "$type", "EActorAnimationOrder" }, { "$val", static_cast<int>(s_Object->m_eOrderType) }};

	s_Json["m_OrderData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_OrderData) }};

	return s_Json;
}

ZHMTypeInfo SActorTagManagerSaveData::TypeInfo = ZHMTypeInfo("SActorTagManagerSaveData", SActorTagManagerSaveData::ToJson);

nlohmann::json SActorTagManagerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorTagManagerSaveData*>(p_Object);

	s_Json["m_bContractsCreationMode"] = {{ "$type", "bool" }, { "$val", s_Object->m_bContractsCreationMode }};

	s_Json["m_nTagCount"] = {{ "$type", "int32" }, { "$val", s_Object->m_nTagCount }};

	s_Json["m_nMaxTagCount"] = {{ "$type", "int32" }, { "$val", s_Object->m_nMaxTagCount }};

	s_Json["m_bTaggingEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bTaggingEnabled }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aActorTagData)
		{
			s_JsonArray.push_back({{ "$type", "SActorTagSaveData" }, { "$val", SActorTagSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aActorTagData"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo IHM5CCPostFilterManager::TypeInfo = ZHMTypeInfo("IHM5CCPostFilterManager", IHM5CCPostFilterManager::ToJson);

nlohmann::json IHM5CCPostFilterManager::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5CCPostFilterManager*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IAIGameplayConcept::TypeInfo = ZHMTypeInfo("IAIGameplayConcept", IAIGameplayConcept::ToJson);

nlohmann::json IAIGameplayConcept::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IAIGameplayConcept*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SLocalizedVideoData::TypeInfo = ZHMTypeInfo("SLocalizedVideoData", SLocalizedVideoData::ToJson);

nlohmann::json SLocalizedVideoData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SLocalizedVideoData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->AudioLanguages)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["AudioLanguages"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->VideoRidsPerAudioLanguage)
		{
			s_JsonArray.push_back({{ "$type", "ZRuntimeResourceID" }, { "$val", ZRuntimeResourceID::ToJson(&s_Item) }});
		}

		s_Json["VideoRidsPerAudioLanguage"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->SubtitleLanguages)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["SubtitleLanguages"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->SubtitleMarkupsPerLanguage)
		{
			s_JsonArray.push_back({{ "$type", "ZString" }, { "$val", s_Item.c_str() }});
		}

		s_Json["SubtitleMarkupsPerLanguage"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SSituationConversationGroupSaveData::TypeInfo = ZHMTypeInfo("SSituationConversationGroupSaveData", SSituationConversationGroupSaveData::ToJson);

nlohmann::json SSituationConversationGroupSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSituationConversationGroupSaveData*>(p_Object);

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_members)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_members"] = s_JsonArray;
	}

	return s_Json;
}

ZHMTypeInfo SStepCounterEntitySaveData::TypeInfo = ZHMTypeInfo("SStepCounterEntitySaveData", SStepCounterEntitySaveData::ToJson);

nlohmann::json SStepCounterEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SStepCounterEntitySaveData*>(p_Object);

	s_Json["m_nIndex"] = {{ "$type", "float32" }, { "$val", s_Object->m_nIndex }};

	s_Json["m_nLoopIndex"] = {{ "$type", "int32" }, { "$val", s_Object->m_nLoopIndex }};

	s_Json["m_bFirst"] = {{ "$type", "bool" }, { "$val", s_Object->m_bFirst }};

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	s_Json["m_nCountFrom"] = {{ "$type", "float32" }, { "$val", s_Object->m_nCountFrom }};

	s_Json["m_nCountTo"] = {{ "$type", "float32" }, { "$val", s_Object->m_nCountTo }};

	s_Json["m_nStepSize"] = {{ "$type", "float32" }, { "$val", s_Object->m_nStepSize }};

	return s_Json;
}

ZHMTypeInfo IEntityGroupTargetProxy::TypeInfo = ZHMTypeInfo("IEntityGroupTargetProxy", IEntityGroupTargetProxy::ToJson);

nlohmann::json IEntityGroupTargetProxy::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IEntityGroupTargetProxy*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SAIPerceptibleEntitySaveData::TypeInfo = ZHMTypeInfo("SAIPerceptibleEntitySaveData", SAIPerceptibleEntitySaveData::ToJson);

nlohmann::json SAIPerceptibleEntitySaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SAIPerceptibleEntitySaveData*>(p_Object);

	s_Json["m_bPerceptibleEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bPerceptibleEnabled }};

	return s_Json;
}

ZHMTypeInfo SBodybagBoneSaveData::TypeInfo = ZHMTypeInfo("SBodybagBoneSaveData", SBodybagBoneSaveData::ToJson);

nlohmann::json SBodybagBoneSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBodybagBoneSaveData*>(p_Object);

	s_Json["mQuaterion"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mQuaterion) }};

	s_Json["mTranslation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->mTranslation) }};

	return s_Json;
}

ZHMTypeInfo SBodybagSaveData::TypeInfo = ZHMTypeInfo("SBodybagSaveData", SBodybagSaveData::ToJson);

nlohmann::json SBodybagSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SBodybagSaveData*>(p_Object);

	s_Json["m_vLinkedPosition"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vLinkedPosition) }};

	s_Json["m_vLinkedQuaternionRotation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_vLinkedQuaternionRotation) }};

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBones)
		{
			s_JsonArray.push_back({{ "$type", "SBodybagBoneSaveData" }, { "$val", SBodybagBoneSaveData::ToJson(&s_Item) }});
		}

		s_Json["m_aBones"] = s_JsonArray;
	}

	{
		auto s_JsonArray = nlohmann::json::array();

		for (auto& s_Item : s_Object->m_aBoneIndices)
		{
			s_JsonArray.push_back({{ "$type", "uint32" }, { "$val", s_Item }});
		}

		s_Json["m_aBoneIndices"] = s_JsonArray;
	}

	s_Json["m_rDeadActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rDeadActor }};

	s_Json["m_IsInMorgue"] = {{ "$type", "bool" }, { "$val", s_Object->m_IsInMorgue }};

	return s_Json;
}

ZHMTypeInfo SDangerousAreaSaveData::TypeInfo = ZHMTypeInfo("SDangerousAreaSaveData", SDangerousAreaSaveData::ToJson);

nlohmann::json SDangerousAreaSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDangerousAreaSaveData*>(p_Object);

	s_Json["m_bDangerous"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDangerous }};

	return s_Json;
}

ZHMTypeInfo SHitmanSaveData::TypeInfo = ZHMTypeInfo("SHitmanSaveData", SHitmanSaveData::ToJson);

nlohmann::json SHitmanSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHitmanSaveData*>(p_Object);

	s_Json["m_OutfitID"] = {{ "$type", "ZRepositoryID" }, { "$val", ZRepositoryID::ToJson(&s_Object->m_OutfitID) }};

	s_Json["m_nOutfitCharset"] = {{ "$type", "int32" }, { "$val", s_Object->m_nOutfitCharset }};

	s_Json["m_nOutfitVariation"] = {{ "$type", "int32" }, { "$val", s_Object->m_nOutfitVariation }};

	s_Json["m_fHealth"] = {{ "$type", "float32" }, { "$val", s_Object->m_fHealth }};

	s_Json["m_vPosition"] = {{ "$type", "SVector3" }, { "$val", SVector3::ToJson(&s_Object->m_vPosition) }};

	s_Json["m_vRotation"] = {{ "$type", "SVector4" }, { "$val", SVector4::ToJson(&s_Object->m_vRotation) }};

	s_Json["m_Inventory"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_Inventory) }};

	s_Json["m_Camera"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_Camera) }};

	s_Json["m_eMovementType"] = {{ "$type", "EBaseMovementType" }, { "$val", static_cast<int>(s_Object->m_eMovementType) }};

	s_Json["m_MovementData"] = {{ "$type", "ZVariant" }, { "$val", ZVariant::ToJson(&s_Object->m_MovementData) }};

	s_Json["m_bLethalAgilityElementUsed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bLethalAgilityElementUsed }};

	s_Json["m_bIsChangingClothes"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsChangingClothes }};

	return s_Json;
}

ZHMTypeInfo IHM5BaseCharacter::TypeInfo = ZHMTypeInfo("IHM5BaseCharacter", IHM5BaseCharacter::ToJson);

nlohmann::json IHM5BaseCharacter::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5BaseCharacter*>(p_Object);

	return s_Json;
}

ZHMTypeInfo IHM5Projectile::TypeInfo = ZHMTypeInfo("IHM5Projectile", IHM5Projectile::ToJson);

nlohmann::json IHM5Projectile::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IHM5Projectile*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SSecuritySystemCameraSaveData::TypeInfo = ZHMTypeInfo("SSecuritySystemCameraSaveData", SSecuritySystemCameraSaveData::ToJson);

nlohmann::json SSecuritySystemCameraSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSecuritySystemCameraSaveData*>(p_Object);

	s_Json["m_nEscalation"] = {{ "$type", "uint16" }, { "$val", s_Object->m_nEscalation }};

	s_Json["m_bIsFunctional"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsFunctional }};

	s_Json["m_bHasEnteredOnce"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHasEnteredOnce }};

	s_Json["m_bWasInvestigated"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWasInvestigated }};

	s_Json["m_bDestroyed"] = {{ "$type", "bool" }, { "$val", s_Object->m_bDestroyed }};

	return s_Json;
}

ZHMTypeInfo SCrowdReactionSaveData::TypeInfo = ZHMTypeInfo("SCrowdReactionSaveData", SCrowdReactionSaveData::ToJson);

nlohmann::json SCrowdReactionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SCrowdReactionSaveData*>(p_Object);

	s_Json["m_nNumPacify"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nNumPacify }};

	s_Json["m_nNumShotsFired"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nNumShotsFired }};

	s_Json["m_nNumDeaths"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nNumDeaths }};

	s_Json["m_nNumScared"] = {{ "$type", "uint32" }, { "$val", s_Object->m_nNumScared }};

	s_Json["m_bWarzoneSpawned"] = {{ "$type", "bool" }, { "$val", s_Object->m_bWarzoneSpawned }};

	return s_Json;
}

ZHMTypeInfo SActorItemActionSaveData::TypeInfo = ZHMTypeInfo("SActorItemActionSaveData", SActorItemActionSaveData::ToJson);

nlohmann::json SActorItemActionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorItemActionSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	s_Json["m_rItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItem }};

	return s_Json;
}

ZHMTypeInfo SActorVisibilityConditionSaveData::TypeInfo = ZHMTypeInfo("SActorVisibilityConditionSaveData", SActorVisibilityConditionSaveData::ToJson);

nlohmann::json SActorVisibilityConditionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorVisibilityConditionSaveData*>(p_Object);

	s_Json["m_pActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_pActor }};

	return s_Json;
}

ZHMTypeInfo SDramaControllerSaveData::TypeInfo = ZHMTypeInfo("SDramaControllerSaveData", SDramaControllerSaveData::ToJson);

nlohmann::json SDramaControllerSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SDramaControllerSaveData*>(p_Object);

	s_Json["m_bIsStartCondValid"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsStartCondValid }};

	s_Json["m_bIsEnableCondValid"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsEnableCondValid }};

	return s_Json;
}

ZHMTypeInfo SEscortSituation2Actors::TypeInfo = ZHMTypeInfo("SEscortSituation2Actors", SEscortSituation2Actors::ToJson);

nlohmann::json SEscortSituation2Actors::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEscortSituation2Actors*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

ZHMTypeInfo IDramaFlowControl::TypeInfo = ZHMTypeInfo("IDramaFlowControl", IDramaFlowControl::ToJson);

nlohmann::json IDramaFlowControl::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IDramaFlowControl*>(p_Object);

	return s_Json;
}

ZHMTypeInfo ISituationListener::TypeInfo = ZHMTypeInfo("ISituationListener", ISituationListener::ToJson);

nlohmann::json ISituationListener::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<ISituationListener*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SEventChannelSaveData::TypeInfo = ZHMTypeInfo("SEventChannelSaveData", SEventChannelSaveData::ToJson);

nlohmann::json SEventChannelSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SEventChannelSaveData*>(p_Object);

	s_Json["m_bEnabled"] = {{ "$type", "bool" }, { "$val", s_Object->m_bEnabled }};

	return s_Json;
}

ZHMTypeInfo SHeroItemAttachmentSaveData::TypeInfo = ZHMTypeInfo("SHeroItemAttachmentSaveData", SHeroItemAttachmentSaveData::ToJson);

nlohmann::json SHeroItemAttachmentSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SHeroItemAttachmentSaveData*>(p_Object);

	s_Json["m_rItem"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rItem }};

	return s_Json;
}

ZHMTypeInfo SSecuritySystemRecorderSaveData::TypeInfo = ZHMTypeInfo("SSecuritySystemRecorderSaveData", SSecuritySystemRecorderSaveData::ToJson);

nlohmann::json SSecuritySystemRecorderSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SSecuritySystemRecorderSaveData*>(p_Object);

	s_Json["m_bHasRecordings"] = {{ "$type", "bool" }, { "$val", s_Object->m_bHasRecordings }};

	s_Json["m_bIsFunctional"] = {{ "$type", "bool" }, { "$val", s_Object->m_bIsFunctional }};

	return s_Json;
}

ZHMTypeInfo IValueEntity::TypeInfo = ZHMTypeInfo("IValueEntity", IValueEntity::ToJson);

nlohmann::json IValueEntity::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<IValueEntity*>(p_Object);

	return s_Json;
}

ZHMTypeInfo SActorAliveConditionSaveData::TypeInfo = ZHMTypeInfo("SActorAliveConditionSaveData", SActorAliveConditionSaveData::ToJson);

nlohmann::json SActorAliveConditionSaveData::ToJson(void* p_Object)
{
	nlohmann::json s_Json;

	auto s_Object = static_cast<SActorAliveConditionSaveData*>(p_Object);

	s_Json["m_rActor"] = {{ "$type", "uint32" }, { "$val", s_Object->m_rActor }};

	return s_Json;
}

