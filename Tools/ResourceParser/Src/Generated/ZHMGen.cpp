/*
 * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing.
 *
 * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:
 * https://github.com/OrfeasZ/ZHMModSDK
 */

#include "ZHMGen.h"
#include "ZHMProperties.h"
#include "ZHMEnums.h"

ZHMTypeInfo float4::TypeInfo = ZHMTypeInfo("float4", sizeof(float4), alignof(float4), float4::WriteJson, float4::WriteSimpleJson, float4::FromSimpleJson);

void float4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<float4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->z;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->w;
	p_Stream << "}";

	p_Stream << "}";
}

void float4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<float4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << s_Object->z;
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << s_Object->w;

	p_Stream << "}";
}

void float4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	float4 s_Object;

	s_Object.x = static_cast<float32>(double(p_Document["x"]));

	s_Object.y = static_cast<float32>(double(p_Document["y"]));

	s_Object.z = static_cast<float32>(double(p_Document["z"]));

	s_Object.w = static_cast<float32>(double(p_Document["w"]));

	*reinterpret_cast<float4*>(p_Target) = s_Object;
}

void float4::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMatrix::TypeInfo = ZHMTypeInfo("SMatrix", sizeof(SMatrix), alignof(SMatrix), SMatrix::WriteJson, SMatrix::WriteSimpleJson, SMatrix::FromSimpleJson);

void SMatrix::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("XAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->XAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->YAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->ZAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->Trans, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("XAxis") << ":";
	float4::WriteSimpleJson(&s_Object->XAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	float4::WriteSimpleJson(&s_Object->YAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	float4::WriteSimpleJson(&s_Object->ZAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	float4::WriteSimpleJson(&s_Object->Trans, p_Stream);

	p_Stream << "}";
}

void SMatrix::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["XAxis"], &s_Item);
		s_Object.XAxis = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["YAxis"], &s_Item);
		s_Object.YAxis = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["ZAxis"], &s_Item);
		s_Object.ZAxis = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["Trans"], &s_Item);
		s_Object.Trans = s_Item;
	}

	*reinterpret_cast<SMatrix*>(p_Target) = s_Object;
}

void SMatrix::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	XAxis.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix, XAxis));	YAxis.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix, YAxis));	ZAxis.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix, ZAxis));	Trans.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix, Trans));}

ZHMTypeInfo SVRConfigCameraComponent::TypeInfo = ZHMTypeInfo("SVRConfigCameraComponent", sizeof(SVRConfigCameraComponent), alignof(SVRConfigCameraComponent), SVRConfigCameraComponent::WriteJson, SVRConfigCameraComponent::WriteSimpleJson, SVRConfigCameraComponent::FromSimpleJson);

void SVRConfigCameraComponent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVRConfigCameraComponent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eHeadAnchorMode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EVRConfigHeadAnchorMode") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eHeadAnchorMode) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EVRConfigHeadAnchorMode", static_cast<int>(s_Object->m_eHeadAnchorMode))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uRecenterRequestCounter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uRecenterRequestCounter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fVRUserInputWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fVRUserInputWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffsetSneaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffsetSneaking;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHeadBoneAttacherOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHeadBoneAttacherOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vAnchorPosOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vAnchorPosOffset, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mAnchorRotOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mAnchorRotOffset, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SVRConfigCameraComponent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVRConfigCameraComponent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eHeadAnchorMode") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EVRConfigHeadAnchorMode", static_cast<int>(s_Object->m_eHeadAnchorMode)));
	p_Stream << ",";

	p_Stream << JsonStr("m_uRecenterRequestCounter") << ":";
	p_Stream << s_Object->m_uRecenterRequestCounter;
	p_Stream << ",";

	p_Stream << JsonStr("m_fVRUserInputWeight") << ":";
	p_Stream << s_Object->m_fVRUserInputWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridSize") << ":";
	p_Stream << s_Object->m_fGridSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffset") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffsetSneaking") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffsetSneaking;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHeadBoneAttacherOffset") << ":";
	p_Stream << s_Object->m_fHeadBoneAttacherOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_vAnchorPosOffset") << ":";
	float4::WriteSimpleJson(&s_Object->m_vAnchorPosOffset, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_mAnchorRotOffset") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mAnchorRotOffset, p_Stream);

	p_Stream << "}";
}

void SVRConfigCameraComponent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVRConfigCameraComponent s_Object;

	s_Object.m_eHeadAnchorMode = static_cast<EVRConfigHeadAnchorMode>(ZHMEnums::GetEnumValueByName("EVRConfigHeadAnchorMode", std::string_view(p_Document["m_eHeadAnchorMode"])));

	s_Object.m_uRecenterRequestCounter = static_cast<uint32>(int64_t(p_Document["m_uRecenterRequestCounter"]));

	s_Object.m_fVRUserInputWeight = static_cast<float32>(double(p_Document["m_fVRUserInputWeight"]));

	s_Object.m_fGridSize = static_cast<float32>(double(p_Document["m_fGridSize"]));

	s_Object.m_fCapsuleHeadAttacherOffset = static_cast<float32>(double(p_Document["m_fCapsuleHeadAttacherOffset"]));

	s_Object.m_fCapsuleHeadAttacherOffsetSneaking = static_cast<float32>(double(p_Document["m_fCapsuleHeadAttacherOffsetSneaking"]));

	s_Object.m_fHeadBoneAttacherOffset = static_cast<float32>(double(p_Document["m_fHeadBoneAttacherOffset"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vAnchorPosOffset"], &s_Item);
		s_Object.m_vAnchorPosOffset = s_Item;
	}

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_mAnchorRotOffset"], &s_Item);
		s_Object.m_mAnchorRotOffset = s_Item;
	}

	*reinterpret_cast<SVRConfigCameraComponent*>(p_Target) = s_Object;
}

void SVRConfigCameraComponent::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vAnchorPosOffset.Serialize(p_Serializer, p_OwnOffset + offsetof(SVRConfigCameraComponent, m_vAnchorPosOffset));	m_mAnchorRotOffset.Serialize(p_Serializer, p_OwnOffset + offsetof(SVRConfigCameraComponent, m_mAnchorRotOffset));}

ZHMTypeInfo ZRuntimeResourceID::TypeInfo = ZHMTypeInfo("ZRuntimeResourceID", sizeof(ZRuntimeResourceID), alignof(ZRuntimeResourceID), ZRuntimeResourceID::WriteJson, ZRuntimeResourceID::WriteSimpleJson, ZRuntimeResourceID::FromSimpleJson);

void ZRuntimeResourceID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRuntimeResourceID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_IDHigh") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IDHigh;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IDLow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IDLow;
	p_Stream << "}";

	p_Stream << "}";
}

void ZRuntimeResourceID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRuntimeResourceID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_IDHigh") << ":";
	p_Stream << s_Object->m_IDHigh;
	p_Stream << ",";

	p_Stream << JsonStr("m_IDLow") << ":";
	p_Stream << s_Object->m_IDLow;

	p_Stream << "}";
}

void ZRuntimeResourceID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZRuntimeResourceID s_Object;

	s_Object.m_IDHigh = static_cast<uint32>(int64_t(p_Document["m_IDHigh"]));

	s_Object.m_IDLow = static_cast<uint32>(int64_t(p_Document["m_IDLow"]));

	*reinterpret_cast<ZRuntimeResourceID*>(p_Target) = s_Object;
}

void ZRuntimeResourceID::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SContractConfigResourceEntry::TypeInfo = ZHMTypeInfo("SContractConfigResourceEntry", sizeof(SContractConfigResourceEntry), alignof(SContractConfigResourceEntry), SContractConfigResourceEntry::WriteJson, SContractConfigResourceEntry::WriteSimpleJson, SContractConfigResourceEntry::FromSimpleJson);

void SContractConfigResourceEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContractConfigResourceEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ContractRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->ContractRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SContractConfigResourceEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContractConfigResourceEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Id") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << ",";

	p_Stream << JsonStr("ContractRid") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->ContractRid, p_Stream);

	p_Stream << "}";
}

void SContractConfigResourceEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContractConfigResourceEntry s_Object;

	s_Object.Id = std::string_view(p_Document["Id"]);

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["ContractRid"], &s_Item);
		s_Object.ContractRid = s_Item;
	}

	*reinterpret_cast<SContractConfigResourceEntry*>(p_Target) = s_Object;
}

void SContractConfigResourceEntry::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	Id.Serialize(p_Serializer, p_OwnOffset + offsetof(SContractConfigResourceEntry, Id));	ContractRid.Serialize(p_Serializer, p_OwnOffset + offsetof(SContractConfigResourceEntry, ContractRid));}

ZHMTypeInfo SItemSpawnerSaveData::TypeInfo = ZHMTypeInfo("SItemSpawnerSaveData", sizeof(SItemSpawnerSaveData), alignof(SItemSpawnerSaveData), SItemSpawnerSaveData::WriteJson, SItemSpawnerSaveData::WriteSimpleJson, SItemSpawnerSaveData::FromSimpleJson);

void SItemSpawnerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemSpawnerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bItemUpdateTransformChange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItemUpdateTransformChange;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemSpawnerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemSpawnerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bItemUpdateTransformChange") << ":";
	p_Stream << s_Object->m_bItemUpdateTransformChange;

	p_Stream << "}";
}

void SItemSpawnerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemSpawnerSaveData s_Object;

	s_Object.m_bItemUpdateTransformChange = bool(p_Document["m_bItemUpdateTransformChange"]);

	*reinterpret_cast<SItemSpawnerSaveData*>(p_Target) = s_Object;
}

void SItemSpawnerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IPureWaterReflectable::TypeInfo = ZHMTypeInfo("IPureWaterReflectable", sizeof(IPureWaterReflectable), alignof(IPureWaterReflectable), IPureWaterReflectable::WriteJson, IPureWaterReflectable::WriteSimpleJson, IPureWaterReflectable::FromSimpleJson);

void IPureWaterReflectable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPureWaterReflectable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPureWaterReflectable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IPureWaterReflectable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IPureWaterReflectable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IPureWaterReflectable s_Object;

	*reinterpret_cast<IPureWaterReflectable*>(p_Target) = s_Object;
}

void IPureWaterReflectable::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SPhysicsSaveData::TypeInfo = ZHMTypeInfo("SPhysicsSaveData", sizeof(SPhysicsSaveData), alignof(SPhysicsSaveData), SPhysicsSaveData::WriteJson, SPhysicsSaveData::WriteSimpleJson, SPhysicsSaveData::FromSimpleJson);

void SPhysicsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPhysicsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsInPhysicsWorld") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsInPhysicsWorld;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsKinematicBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsKinematicBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SPhysicsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPhysicsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsInPhysicsWorld") << ":";
	p_Stream << s_Object->m_bIsInPhysicsWorld;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsKinematicBody") << ":";
	p_Stream << s_Object->m_bIsKinematicBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;

	p_Stream << "}";
}

void SPhysicsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPhysicsSaveData s_Object;

	s_Object.m_bIsInPhysicsWorld = bool(p_Document["m_bIsInPhysicsWorld"]);

	s_Object.m_bIsKinematicBody = bool(p_Document["m_bIsKinematicBody"]);

	s_Object.m_bIsVisible = bool(p_Document["m_bIsVisible"]);

	*reinterpret_cast<SPhysicsSaveData*>(p_Target) = s_Object;
}

void SPhysicsSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorSoundDefs::TypeInfo = ZHMTypeInfo("SActorSoundDefs", sizeof(SActorSoundDefs), alignof(SActorSoundDefs), SActorSoundDefs::WriteJson, SActorSoundDefs::WriteSimpleJson, SActorSoundDefs::FromSimpleJson);

void SActorSoundDefs::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSoundDefs*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SActorSoundDefs::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSoundDefs*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SActorSoundDefs::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSoundDefs s_Object;

	*reinterpret_cast<SActorSoundDefs*>(p_Target) = s_Object;
}

void SActorSoundDefs::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SGetHelpOrderSaveData::TypeInfo = ZHMTypeInfo("SGetHelpOrderSaveData", sizeof(SGetHelpOrderSaveData), alignof(SGetHelpOrderSaveData), SGetHelpOrderSaveData::WriteJson, SGetHelpOrderSaveData::WriteSimpleJson, SGetHelpOrderSaveData::FromSimpleJson);

void SGetHelpOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_helpType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_helpType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_helpType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInitialGuard;
	p_Stream << "}";

	p_Stream << "}";
}

void SGetHelpOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_helpType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_helpType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialGuard") << ":";
	p_Stream << s_Object->m_rInitialGuard;

	p_Stream << "}";
}

void SGetHelpOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGetHelpOrderSaveData s_Object;

	s_Object.m_helpType = static_cast<EAISharedEventType>(ZHMEnums::GetEnumValueByName("EAISharedEventType", std::string_view(p_Document["m_helpType"])));

	s_Object.m_rInitialGuard = static_cast<uint32>(int64_t(p_Document["m_rInitialGuard"]));

	*reinterpret_cast<SGetHelpOrderSaveData*>(p_Target) = s_Object;
}

void SGetHelpOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SVoidSignalEntitySaveData::TypeInfo = ZHMTypeInfo("SVoidSignalEntitySaveData", sizeof(SVoidSignalEntitySaveData), alignof(SVoidSignalEntitySaveData), SVoidSignalEntitySaveData::WriteJson, SVoidSignalEntitySaveData::WriteSimpleJson, SVoidSignalEntitySaveData::FromSimpleJson);

void SVoidSignalEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVoidSignalEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSignaling") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSignaling;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFiredAtTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFiredAtTime;
	p_Stream << "}";

	p_Stream << "}";
}

void SVoidSignalEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVoidSignalEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSignaling") << ":";
	p_Stream << s_Object->m_bSignaling;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFiredAtTime") << ":";
	p_Stream << s_Object->m_fFiredAtTime;

	p_Stream << "}";
}

void SVoidSignalEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVoidSignalEntitySaveData s_Object;

	s_Object.m_bSignaling = bool(p_Document["m_bSignaling"]);

	s_Object.m_fFiredAtTime = static_cast<float32>(double(p_Document["m_fFiredAtTime"]));

	*reinterpret_cast<SVoidSignalEntitySaveData*>(p_Target) = s_Object;
}

void SVoidSignalEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorIKControllerSaveData::TypeInfo = ZHMTypeInfo("SActorIKControllerSaveData", sizeof(SActorIKControllerSaveData), alignof(SActorIKControllerSaveData), SActorIKControllerSaveData::WriteJson, SActorIKControllerSaveData::WriteSimpleJson, SActorIKControllerSaveData::FromSimpleJson);

void SActorIKControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorIKControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fRightHandWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRightHandWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLeftHandWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRightHandTargetWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRightHandTargetWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandTargetWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLeftHandTargetWeight;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorIKControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorIKControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fRightHandWeight") << ":";
	p_Stream << s_Object->m_fRightHandWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandWeight") << ":";
	p_Stream << s_Object->m_fLeftHandWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRightHandTargetWeight") << ":";
	p_Stream << s_Object->m_fRightHandTargetWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandTargetWeight") << ":";
	p_Stream << s_Object->m_fLeftHandTargetWeight;

	p_Stream << "}";
}

void SActorIKControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorIKControllerSaveData s_Object;

	s_Object.m_fRightHandWeight = static_cast<float32>(double(p_Document["m_fRightHandWeight"]));

	s_Object.m_fLeftHandWeight = static_cast<float32>(double(p_Document["m_fLeftHandWeight"]));

	s_Object.m_fRightHandTargetWeight = static_cast<float32>(double(p_Document["m_fRightHandTargetWeight"]));

	s_Object.m_fLeftHandTargetWeight = static_cast<float32>(double(p_Document["m_fLeftHandTargetWeight"]));

	*reinterpret_cast<SActorIKControllerSaveData*>(p_Target) = s_Object;
}

void SActorIKControllerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorProviderDirectSaveData::TypeInfo = ZHMTypeInfo("SActorProviderDirectSaveData", sizeof(SActorProviderDirectSaveData), alignof(SActorProviderDirectSaveData), SActorProviderDirectSaveData::WriteJson, SActorProviderDirectSaveData::WriteSimpleJson, SActorProviderDirectSaveData::FromSimpleJson);

void SActorProviderDirectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProviderDirectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRunning;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProviderDirectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProviderDirectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << s_Object->m_bRunning;

	p_Stream << "}";
}

void SActorProviderDirectSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorProviderDirectSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aActors"])
	{
		s_Object.m_aActors.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	s_Object.m_bRunning = bool(p_Document["m_bRunning"]);

	*reinterpret_cast<SActorProviderDirectSaveData*>(p_Target) = s_Object;
}

void SActorProviderDirectSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aActors.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorProviderDirectSaveData, m_aActors));}

ZHMTypeInfo STimerEntitySaveData::TypeInfo = ZHMTypeInfo("STimerEntitySaveData", sizeof(STimerEntitySaveData), alignof(STimerEntitySaveData), STimerEntitySaveData::WriteJson, STimerEntitySaveData::WriteSimpleJson, STimerEntitySaveData::FromSimpleJson);

void STimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;

	p_Stream << "}";
}

void STimerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerEntitySaveData s_Object;

	s_Object.m_nInterval = static_cast<int32>(int64_t(p_Document["m_nInterval"]));

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_fTimeToNextEvent = static_cast<float32>(double(p_Document["m_fTimeToNextEvent"]));

	*reinterpret_cast<STimerEntitySaveData*>(p_Target) = s_Object;
}

void STimerEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IMorphemeEventConsumer::TypeInfo = ZHMTypeInfo("IMorphemeEventConsumer", sizeof(IMorphemeEventConsumer), alignof(IMorphemeEventConsumer), IMorphemeEventConsumer::WriteJson, IMorphemeEventConsumer::WriteSimpleJson, IMorphemeEventConsumer::FromSimpleJson);

void IMorphemeEventConsumer::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeEventConsumer*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeEventConsumer::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeEventConsumer*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMorphemeEventConsumer::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMorphemeEventConsumer s_Object;

	*reinterpret_cast<IMorphemeEventConsumer*>(p_Target) = s_Object;
}

void IMorphemeEventConsumer::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAudioEmitterSwitchSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterSwitchSaveData", sizeof(SAudioEmitterSwitchSaveData), alignof(SAudioEmitterSwitchSaveData), SAudioEmitterSwitchSaveData::WriteJson, SAudioEmitterSwitchSaveData::WriteSimpleJson, SAudioEmitterSwitchSaveData::FromSimpleJson);

void SAudioEmitterSwitchSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterSwitchSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nStateId;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterSwitchSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterSwitchSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << s_Object->m_nStateId;

	p_Stream << "}";
}

void SAudioEmitterSwitchSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterSwitchSaveData s_Object;

	s_Object.m_nGroupId = static_cast<uint32>(int64_t(p_Document["m_nGroupId"]));

	s_Object.m_nStateId = static_cast<uint32>(int64_t(p_Document["m_nStateId"]));

	*reinterpret_cast<SAudioEmitterSwitchSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterSwitchSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SVector2::TypeInfo = ZHMTypeInfo("SVector2", sizeof(SVector2), alignof(SVector2), SVector2::WriteJson, SVector2::WriteSimpleJson, SVector2::FromSimpleJson);

void SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";

	p_Stream << "}";
}

void SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;

	p_Stream << "}";
}

void SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVector2 s_Object;

	s_Object.x = static_cast<float32>(double(p_Document["x"]));

	s_Object.y = static_cast<float32>(double(p_Document["y"]));

	*reinterpret_cast<SVector2*>(p_Target) = s_Object;
}

void SVector2::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMathDistanceSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector2", sizeof(SMathDistanceSaveData_SVector2), alignof(SMathDistanceSaveData_SVector2), SMathDistanceSaveData_SVector2::WriteJson, SMathDistanceSaveData_SVector2::WriteSimpleJson, SMathDistanceSaveData_SVector2::FromSimpleJson);

void SMathDistanceSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fB, p_Stream);

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathDistanceSaveData_SVector2 s_Object;

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	*reinterpret_cast<SMathDistanceSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathDistanceSaveData_SVector2::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fA.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector2, m_fA));	m_fB.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector2, m_fB));}

ZHMTypeInfo SItemStorageSaveData::TypeInfo = ZHMTypeInfo("SItemStorageSaveData", sizeof(SItemStorageSaveData), alignof(SItemStorageSaveData), SItemStorageSaveData::WriteJson, SItemStorageSaveData::WriteSimpleJson, SItemStorageSaveData::FromSimpleJson);

void SItemStorageSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemStorageSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Storage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_Storage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ContainedItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ContainedItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_ContainedItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_ContainedItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SItemStorageSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemStorageSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Storage") << ":";
	p_Stream << s_Object->m_Storage;
	p_Stream << ",";

	p_Stream << JsonStr("m_ContainedItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ContainedItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_ContainedItems[i];
		p_Stream << s_Item;

		if (i < s_Object->m_ContainedItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SItemStorageSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemStorageSaveData s_Object;

	s_Object.m_Storage = static_cast<uint32>(int64_t(p_Document["m_Storage"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_ContainedItems"])
	{
		s_Object.m_ContainedItems.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SItemStorageSaveData*>(p_Target) = s_Object;
}

void SItemStorageSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_ContainedItems.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemStorageSaveData, m_ContainedItems));}

ZHMTypeInfo SBehaviorTreeInputPinCondition::TypeInfo = ZHMTypeInfo("SBehaviorTreeInputPinCondition", sizeof(SBehaviorTreeInputPinCondition), alignof(SBehaviorTreeInputPinCondition), SBehaviorTreeInputPinCondition::WriteJson, SBehaviorTreeInputPinCondition::WriteSimpleJson, SBehaviorTreeInputPinCondition::FromSimpleJson);

void SBehaviorTreeInputPinCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeInputPinCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);

	p_Stream << "}";
}

void SBehaviorTreeInputPinCondition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeInputPinCondition s_Object;

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	*reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Target) = s_Object;
}

void SBehaviorTreeInputPinCondition::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeInputPinCondition, m_sName));}

ZHMTypeInfo SItemWeaponSaveData::TypeInfo = ZHMTypeInfo("SItemWeaponSaveData", sizeof(SItemWeaponSaveData), alignof(SItemWeaponSaveData), SItemWeaponSaveData::WriteJson, SItemWeaponSaveData::WriteSimpleJson, SItemWeaponSaveData::FromSimpleJson);

void SItemWeaponSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemWeaponSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_magazineBulletsByAmmoType") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_magazineBulletsByAmmoType.size(); ++i)
	{
		auto& s_Item = s_Object->m_magazineBulletsByAmmoType[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_magazineBulletsByAmmoType.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nExtraMagazineBullets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nExtraMagazineBullets;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePendingDeathContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePendingDeathContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_ePendingDeathContext))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDeathContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_eDeathContext))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemWeaponSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemWeaponSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_magazineBulletsByAmmoType") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_magazineBulletsByAmmoType.size(); ++i)
	{
		auto& s_Item = s_Object->m_magazineBulletsByAmmoType[i];
		p_Stream << s_Item;

		if (i < s_Object->m_magazineBulletsByAmmoType.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nExtraMagazineBullets") << ":";
	p_Stream << s_Object->m_nExtraMagazineBullets;
	p_Stream << ",";

	p_Stream << JsonStr("m_ePendingDeathContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_ePendingDeathContext)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_eDeathContext)));

	p_Stream << "}";
}

void SItemWeaponSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemWeaponSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_magazineBulletsByAmmoType"])
	{
		s_Object.m_magazineBulletsByAmmoType.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	s_Object.m_nExtraMagazineBullets = static_cast<uint32>(int64_t(p_Document["m_nExtraMagazineBullets"]));

	s_Object.m_ePendingDeathContext = static_cast<EDeathContext>(ZHMEnums::GetEnumValueByName("EDeathContext", std::string_view(p_Document["m_ePendingDeathContext"])));

	s_Object.m_eDeathContext = static_cast<EDeathContext>(ZHMEnums::GetEnumValueByName("EDeathContext", std::string_view(p_Document["m_eDeathContext"])));

	*reinterpret_cast<SItemWeaponSaveData*>(p_Target) = s_Object;
}

void SItemWeaponSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_magazineBulletsByAmmoType.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemWeaponSaveData, m_magazineBulletsByAmmoType));}

ZHMTypeInfo SDestructibleInteractionHandlerData::TypeInfo = ZHMTypeInfo("SDestructibleInteractionHandlerData", sizeof(SDestructibleInteractionHandlerData), alignof(SDestructibleInteractionHandlerData), SDestructibleInteractionHandlerData::WriteJson, SDestructibleInteractionHandlerData::WriteSimpleJson, SDestructibleInteractionHandlerData::FromSimpleJson);

void SDestructibleInteractionHandlerData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleInteractionHandlerData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSettleTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSettleTime;
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleInteractionHandlerData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleInteractionHandlerData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSettleTime") << ":";
	p_Stream << s_Object->m_fSettleTime;

	p_Stream << "}";
}

void SDestructibleInteractionHandlerData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructibleInteractionHandlerData s_Object;

	s_Object.m_fSettleTime = static_cast<float32>(double(p_Document["m_fSettleTime"]));

	*reinterpret_cast<SDestructibleInteractionHandlerData*>(p_Target) = s_Object;
}

void SDestructibleInteractionHandlerData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZGameTime::TypeInfo = ZHMTypeInfo("ZGameTime", sizeof(ZGameTime), alignof(ZGameTime), ZGameTime::WriteJson, ZGameTime::WriteSimpleJson, ZGameTime::FromSimpleJson);

void ZGameTime::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGameTime*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nTicks") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTicks;
	p_Stream << "}";

	p_Stream << "}";
}

void ZGameTime::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGameTime*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nTicks") << ":";
	p_Stream << s_Object->m_nTicks;

	p_Stream << "}";
}

void ZGameTime::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGameTime s_Object;

	s_Object.m_nTicks = int64(p_Document["m_nTicks"]);

	*reinterpret_cast<ZGameTime*>(p_Target) = s_Object;
}

void ZGameTime::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAIEventSaveData::TypeInfo = ZHMTypeInfo("SAIEventSaveData", sizeof(SAIEventSaveData), alignof(SAIEventSaveData), SAIEventSaveData::WriteJson, SAIEventSaveData::WriteSimpleJson, SAIEventSaveData::FromSimpleJson);

void SAIEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHandled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHandled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nEnd, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAIEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bHandled") << ":";
	p_Stream << s_Object->m_bHandled;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nEnd, p_Stream);

	p_Stream << "}";
}

void SAIEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIEventSaveData s_Object;

	s_Object.m_eType = static_cast<EAIEventType>(ZHMEnums::GetEnumValueByName("EAIEventType", std::string_view(p_Document["m_eType"])));

	s_Object.m_bHandled = bool(p_Document["m_bHandled"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nStart"], &s_Item);
		s_Object.m_nStart = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nEnd"], &s_Item);
		s_Object.m_nEnd = s_Item;
	}

	*reinterpret_cast<SAIEventSaveData*>(p_Target) = s_Object;
}

void SAIEventSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_nStart.Serialize(p_Serializer, p_OwnOffset + offsetof(SAIEventSaveData, m_nStart));	m_nEnd.Serialize(p_Serializer, p_OwnOffset + offsetof(SAIEventSaveData, m_nEnd));}

ZHMTypeInfo SKnownEntitySaveData::TypeInfo = ZHMTypeInfo("SKnownEntitySaveData", sizeof(SKnownEntitySaveData), alignof(SKnownEntitySaveData), SKnownEntitySaveData::WriteJson, SKnownEntitySaveData::WriteSimpleJson, SKnownEntitySaveData::FromSimpleJson);

void SKnownEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKnownEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nSharedIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSharedIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAIEventSaveData") << "," << JsonStr("$val") << ":";
		SAIEventSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBooleanEvents;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEventsHandled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBooleanEventsHandled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_knownWorldMatrix") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_knownWorldMatrix, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastWorldMatrixUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastWorldMatrixUpdate, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGoals") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGoals;
	p_Stream << "}";

	p_Stream << "}";
}

void SKnownEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKnownEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nSharedIndex") << ":";
	p_Stream << s_Object->m_nSharedIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEvents[i];
		SAIEventSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEvents") << ":";
	p_Stream << s_Object->m_nBooleanEvents;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEventsHandled") << ":";
	p_Stream << s_Object->m_nBooleanEventsHandled;
	p_Stream << ",";

	p_Stream << JsonStr("m_knownWorldMatrix") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_knownWorldMatrix, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastWorldMatrixUpdate") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastWorldMatrixUpdate, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nGoals") << ":";
	p_Stream << s_Object->m_nGoals;

	p_Stream << "}";
}

void SKnownEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SKnownEntitySaveData s_Object;

	s_Object.m_nSharedIndex = static_cast<int32>(int64_t(p_Document["m_nSharedIndex"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aEvents"])
	{
		SAIEventSaveData s_ArrayItem;
		SAIEventSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aEvents.push_back(s_ArrayItem);
	}

	s_Object.m_nBooleanEvents = static_cast<uint32>(int64_t(p_Document["m_nBooleanEvents"]));

	s_Object.m_nBooleanEventsHandled = static_cast<uint32>(int64_t(p_Document["m_nBooleanEventsHandled"]));

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_knownWorldMatrix"], &s_Item);
		s_Object.m_knownWorldMatrix = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastWorldMatrixUpdate"], &s_Item);
		s_Object.m_tLastWorldMatrixUpdate = s_Item;
	}

	s_Object.m_nGoals = static_cast<uint16>(int64_t(p_Document["m_nGoals"]));

	*reinterpret_cast<SKnownEntitySaveData*>(p_Target) = s_Object;
}

void SKnownEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEvents.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnownEntitySaveData, m_aEvents));	m_knownWorldMatrix.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnownEntitySaveData, m_knownWorldMatrix));	m_tLastWorldMatrixUpdate.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnownEntitySaveData, m_tLastWorldMatrixUpdate));}

ZHMTypeInfo SActorGoalSaveData::TypeInfo = ZHMTypeInfo("SActorGoalSaveData", sizeof(SActorGoalSaveData), alignof(SActorGoalSaveData), SActorGoalSaveData::WriteJson, SActorGoalSaveData::WriteSimpleJson, SActorGoalSaveData::FromSimpleJson);

void SActorGoalSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorGoalSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aHandled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHandled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aHandled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aHandled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIsCurrent") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIsCurrent.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIsCurrent[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aIsCurrent.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fExpiredTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_fExpiredTime.size(); ++i)
	{
		auto& s_Item = s_Object->m_fExpiredTime[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_fExpiredTime.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorGoalSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorGoalSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aHandled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHandled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aHandled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aHandled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIsCurrent") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIsCurrent.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIsCurrent[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aIsCurrent.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fExpiredTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_fExpiredTime.size(); ++i)
	{
		auto& s_Item = s_Object->m_fExpiredTime[i];
		p_Stream << s_Item;

		if (i < s_Object->m_fExpiredTime.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorGoalSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorGoalSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<int32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aHandled"])
	{
		s_Object.m_aHandled.push_back(bool(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aIsCurrent"])
	{
		s_Object.m_aIsCurrent.push_back(bool(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_fExpiredTime"])
	{
		s_Object.m_fExpiredTime.push_back(static_cast<float32>(double(s_Item)));
	}

	*reinterpret_cast<SActorGoalSaveData*>(p_Target) = s_Object;
}

void SActorGoalSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorGoalSaveData, m_aEntities));	m_aHandled.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorGoalSaveData, m_aHandled));	m_aIsCurrent.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorGoalSaveData, m_aIsCurrent));	m_fExpiredTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorGoalSaveData, m_fExpiredTime));}

ZHMTypeInfo SKnowledgeSaveData::TypeInfo = ZHMTypeInfo("SKnowledgeSaveData", sizeof(SKnowledgeSaveData), alignof(SKnowledgeSaveData), SKnowledgeSaveData::WriteJson, SKnowledgeSaveData::WriteSimpleJson, SKnowledgeSaveData::FromSimpleJson);

void SKnowledgeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKnowledgeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aKnownEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKnownEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SKnownEntitySaveData") << "," << JsonStr("$val") << ":";
		SKnownEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aKnownEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoalKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoalKeys.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGoalKeys[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIGoal") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Item))) << "}";
		p_Stream << "}";

		if (i < s_Object->m_aGoalKeys.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoals") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoals.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGoals[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorGoalSaveData") << "," << JsonStr("$val") << ":";
		SActorGoalSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGoals.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttentionLastUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMAttentionLastUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMDisguiseAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMDisguiseAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMTrespassingAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMTrespassingAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMLastTrespassingAttentionMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMLastTrespassingAttentionMax;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTrespassingAttentionGain") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastTrespassingAttentionGain, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastAttentionEvaluate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastAttentionEvaluate, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMWeaponAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttentionChange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMWeaponAttentionChange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGameTension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGameTension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eGameTension))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tAmbientStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tAmbientStartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiredAIModifierSuppressSocialGreeting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiredAIModifierSuppressSocialGreeting, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_behaviorModifiers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_behaviorModifiers;
	p_Stream << "}";

	p_Stream << "}";
}

void SKnowledgeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKnowledgeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aKnownEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKnownEntities[i];
		SKnownEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aKnownEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoalKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoalKeys.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGoalKeys[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Item)));

		if (i < s_Object->m_aGoalKeys.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoals") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoals.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGoals[i];
		SActorGoalSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGoals.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttention") << ":";
	p_Stream << s_Object->m_fHMAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttentionLastUpdate") << ":";
	p_Stream << s_Object->m_fHMAttentionLastUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMDisguiseAttention") << ":";
	p_Stream << s_Object->m_fHMDisguiseAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMTrespassingAttention") << ":";
	p_Stream << s_Object->m_fHMTrespassingAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMLastTrespassingAttentionMax") << ":";
	p_Stream << s_Object->m_fHMLastTrespassingAttentionMax;
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTrespassingAttentionGain") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastTrespassingAttentionGain, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastAttentionEvaluate") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastAttentionEvaluate, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttention") << ":";
	p_Stream << s_Object->m_fHMWeaponAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttentionChange") << ":";
	p_Stream << s_Object->m_fHMWeaponAttentionChange;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGameTension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eGameTension)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tAmbientStartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tAmbientStartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiredAIModifierSuppressSocialGreeting") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiredAIModifierSuppressSocialGreeting, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_behaviorModifiers") << ":";
	p_Stream << s_Object->m_behaviorModifiers;

	p_Stream << "}";
}

void SKnowledgeSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SKnowledgeSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aKnownEntities"])
	{
		SKnownEntitySaveData s_ArrayItem;
		SKnownEntitySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aKnownEntities.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aGoalKeys"])
	{
		s_Object.m_aGoalKeys.push_back(static_cast<EAIGoal>(ZHMEnums::GetEnumValueByName("EAIGoal", std::string_view(s_Item))));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aGoals"])
	{
		SActorGoalSaveData s_ArrayItem;
		SActorGoalSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aGoals.push_back(s_ArrayItem);
	}

	s_Object.m_fHMAttention = static_cast<float32>(double(p_Document["m_fHMAttention"]));

	s_Object.m_fHMAttentionLastUpdate = static_cast<float32>(double(p_Document["m_fHMAttentionLastUpdate"]));

	s_Object.m_fHMDisguiseAttention = static_cast<float32>(double(p_Document["m_fHMDisguiseAttention"]));

	s_Object.m_fHMTrespassingAttention = static_cast<float32>(double(p_Document["m_fHMTrespassingAttention"]));

	s_Object.m_fHMLastTrespassingAttentionMax = static_cast<float32>(double(p_Document["m_fHMLastTrespassingAttentionMax"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastTrespassingAttentionGain"], &s_Item);
		s_Object.m_tLastTrespassingAttentionGain = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastAttentionEvaluate"], &s_Item);
		s_Object.m_tLastAttentionEvaluate = s_Item;
	}

	s_Object.m_fHMWeaponAttention = static_cast<float32>(double(p_Document["m_fHMWeaponAttention"]));

	s_Object.m_fHMWeaponAttentionChange = static_cast<float32>(double(p_Document["m_fHMWeaponAttentionChange"]));

	s_Object.m_eGameTension = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eGameTension"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tAmbientStartTime"], &s_Item);
		s_Object.m_tAmbientStartTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tExpiredAIModifierSuppressSocialGreeting"], &s_Item);
		s_Object.m_tExpiredAIModifierSuppressSocialGreeting = s_Item;
	}

	s_Object.m_behaviorModifiers = static_cast<uint32>(int64_t(p_Document["m_behaviorModifiers"]));

	*reinterpret_cast<SKnowledgeSaveData*>(p_Target) = s_Object;
}

void SKnowledgeSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aKnownEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_aKnownEntities));	m_aGoalKeys.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_aGoalKeys));	m_aGoals.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_aGoals));	m_tLastTrespassingAttentionGain.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_tLastTrespassingAttentionGain));	m_tLastAttentionEvaluate.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_tLastAttentionEvaluate));	m_tAmbientStartTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_tAmbientStartTime));	m_tExpiredAIModifierSuppressSocialGreeting.Serialize(p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_tExpiredAIModifierSuppressSocialGreeting));}

ZHMTypeInfo STimerEntityCommandSaveData::TypeInfo = ZHMTypeInfo("STimerEntityCommandSaveData", sizeof(STimerEntityCommandSaveData), alignof(STimerEntityCommandSaveData), STimerEntityCommandSaveData::WriteJson, STimerEntityCommandSaveData::WriteSimpleJson, STimerEntityCommandSaveData::FromSimpleJson);

void STimerEntityCommandSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntityCommandSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ETimerEntityCommandType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ETimerEntityCommandType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInterval;
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntityCommandSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntityCommandSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ETimerEntityCommandType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_fInterval") << ":";
	p_Stream << s_Object->m_fInterval;

	p_Stream << "}";
}

void STimerEntityCommandSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerEntityCommandSaveData s_Object;

	s_Object.m_eType = static_cast<ETimerEntityCommandType>(ZHMEnums::GetEnumValueByName("ETimerEntityCommandType", std::string_view(p_Document["m_eType"])));

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_fInterval = static_cast<float32>(double(p_Document["m_fInterval"]));

	*reinterpret_cast<STimerEntityCommandSaveData*>(p_Target) = s_Object;
}

void STimerEntityCommandSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo STimerEntityStateSaveData::TypeInfo = ZHMTypeInfo("STimerEntityStateSaveData", sizeof(STimerEntityStateSaveData), alignof(STimerEntityStateSaveData), STimerEntityStateSaveData::WriteJson, STimerEntityStateSaveData::WriteSimpleJson, STimerEntityStateSaveData::FromSimpleJson);

void STimerEntityStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntityStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fNextEventTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fNextEventTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPending") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPending;
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntityStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntityStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_fNextEventTime") << ":";
	p_Stream << s_Object->m_fNextEventTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPending") << ":";
	p_Stream << s_Object->m_bPending;

	p_Stream << "}";
}

void STimerEntityStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerEntityStateSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_fNextEventTime = static_cast<float32>(double(p_Document["m_fNextEventTime"]));

	s_Object.m_bPending = bool(p_Document["m_bPending"]);

	*reinterpret_cast<STimerEntityStateSaveData*>(p_Target) = s_Object;
}

void STimerEntityStateSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SGameTimersSaveData::TypeInfo = ZHMTypeInfo("SGameTimersSaveData", sizeof(SGameTimersSaveData), alignof(SGameTimersSaveData), SGameTimersSaveData::WriteJson, SGameTimersSaveData::WriteSimpleJson, SGameTimersSaveData::FromSimpleJson);

void SGameTimersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameTimersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aTimerEntityCommands") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityCommands.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTimerEntityCommands[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntityCommandSaveData") << "," << JsonStr("$val") << ":";
		STimerEntityCommandSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTimerEntityCommands.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aTimerEntityState") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityState.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTimerEntityState[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntityStateSaveData") << "," << JsonStr("$val") << ":";
		STimerEntityStateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTimerEntityState.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingTimers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingTimers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPendingTimers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aPendingTimers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGameTimersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameTimersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aTimerEntityCommands") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityCommands.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTimerEntityCommands[i];
		STimerEntityCommandSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aTimerEntityCommands.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aTimerEntityState") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityState.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTimerEntityState[i];
		STimerEntityStateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aTimerEntityState.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingTimers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingTimers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPendingTimers[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aPendingTimers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGameTimersSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameTimersSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aTimerEntityCommands"])
	{
		STimerEntityCommandSaveData s_ArrayItem;
		STimerEntityCommandSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aTimerEntityCommands.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aTimerEntityState"])
	{
		STimerEntityStateSaveData s_ArrayItem;
		STimerEntityStateSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aTimerEntityState.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aPendingTimers"])
	{
		s_Object.m_aPendingTimers.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SGameTimersSaveData*>(p_Target) = s_Object;
}

void SGameTimersSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aTimerEntityCommands.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameTimersSaveData, m_aTimerEntityCommands));	m_aTimerEntityState.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameTimersSaveData, m_aTimerEntityState));	m_aPendingTimers.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameTimersSaveData, m_aPendingTimers));}

ZHMTypeInfo SStepCounterEntitySaveData::TypeInfo = ZHMTypeInfo("SStepCounterEntitySaveData", sizeof(SStepCounterEntitySaveData), alignof(SStepCounterEntitySaveData), SStepCounterEntitySaveData::WriteJson, SStepCounterEntitySaveData::WriteSimpleJson, SStepCounterEntitySaveData::FromSimpleJson);

void SStepCounterEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStepCounterEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLoopIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLoopIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirst") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirst;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountFrom") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCountFrom;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountTo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCountTo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStepSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nStepSize;
	p_Stream << "}";

	p_Stream << "}";
}

void SStepCounterEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStepCounterEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLoopIndex") << ":";
	p_Stream << s_Object->m_nLoopIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirst") << ":";
	p_Stream << s_Object->m_bFirst;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountFrom") << ":";
	p_Stream << s_Object->m_nCountFrom;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountTo") << ":";
	p_Stream << s_Object->m_nCountTo;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStepSize") << ":";
	p_Stream << s_Object->m_nStepSize;

	p_Stream << "}";
}

void SStepCounterEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SStepCounterEntitySaveData s_Object;

	s_Object.m_nIndex = static_cast<float32>(double(p_Document["m_nIndex"]));

	s_Object.m_nLoopIndex = static_cast<int32>(int64_t(p_Document["m_nLoopIndex"]));

	s_Object.m_bFirst = bool(p_Document["m_bFirst"]);

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_nCountFrom = static_cast<float32>(double(p_Document["m_nCountFrom"]));

	s_Object.m_nCountTo = static_cast<float32>(double(p_Document["m_nCountTo"]));

	s_Object.m_nStepSize = static_cast<float32>(double(p_Document["m_nStepSize"]));

	*reinterpret_cast<SStepCounterEntitySaveData*>(p_Target) = s_Object;
}

void SStepCounterEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SExtendedCppEntityProperty::TypeInfo = ZHMTypeInfo("SExtendedCppEntityProperty", sizeof(SExtendedCppEntityProperty), alignof(SExtendedCppEntityProperty), SExtendedCppEntityProperty::WriteJson, SExtendedCppEntityProperty::WriteSimpleJson, SExtendedCppEntityProperty::FromSimpleJson);

void SExtendedCppEntityProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExtendedCppEntityProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("propertyName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->propertyName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EExtendedPropertyType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->propertyType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EExtendedPropertyType", static_cast<int>(s_Object->propertyType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rtEditable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rtEditable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("extraData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->extraData;
	p_Stream << "}";

	p_Stream << "}";
}

void SExtendedCppEntityProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExtendedCppEntityProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("propertyName") << ":";
	p_Stream << JsonStr(s_Object->propertyName);
	p_Stream << ",";

	p_Stream << JsonStr("propertyType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EExtendedPropertyType", static_cast<int>(s_Object->propertyType)));
	p_Stream << ",";

	p_Stream << JsonStr("rtEditable") << ":";
	p_Stream << s_Object->rtEditable;
	p_Stream << ",";

	p_Stream << JsonStr("extraData") << ":";
	p_Stream << s_Object->extraData;

	p_Stream << "}";
}

void SExtendedCppEntityProperty::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExtendedCppEntityProperty s_Object;

	s_Object.propertyName = std::string_view(p_Document["propertyName"]);

	s_Object.propertyType = static_cast<EExtendedPropertyType>(ZHMEnums::GetEnumValueByName("EExtendedPropertyType", std::string_view(p_Document["propertyType"])));

	s_Object.rtEditable = bool(p_Document["rtEditable"]);

	s_Object.extraData = uint64(p_Document["extraData"]);

	*reinterpret_cast<SExtendedCppEntityProperty*>(p_Target) = s_Object;
}

void SExtendedCppEntityProperty::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	propertyName.Serialize(p_Serializer, p_OwnOffset + offsetof(SExtendedCppEntityProperty, propertyName));}

ZHMTypeInfo SExtendedCppEntityBlueprint::TypeInfo = ZHMTypeInfo("SExtendedCppEntityBlueprint", sizeof(SExtendedCppEntityBlueprint), alignof(SExtendedCppEntityBlueprint), SExtendedCppEntityBlueprint::WriteJson, SExtendedCppEntityBlueprint::WriteSimpleJson, SExtendedCppEntityBlueprint::FromSimpleJson);

void SExtendedCppEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExtendedCppEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("properties") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->properties.size(); ++i)
	{
		auto& s_Item = s_Object->properties[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExtendedCppEntityProperty") << "," << JsonStr("$val") << ":";
		SExtendedCppEntityProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->properties.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SExtendedCppEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExtendedCppEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("properties") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->properties.size(); ++i)
	{
		auto& s_Item = s_Object->properties[i];
		SExtendedCppEntityProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->properties.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SExtendedCppEntityBlueprint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExtendedCppEntityBlueprint s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["properties"])
	{
		SExtendedCppEntityProperty s_ArrayItem;
		SExtendedCppEntityProperty::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.properties.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SExtendedCppEntityBlueprint*>(p_Target) = s_Object;
}

void SExtendedCppEntityBlueprint::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	properties.Serialize(p_Serializer, p_OwnOffset + offsetof(SExtendedCppEntityBlueprint, properties));}

ZHMTypeInfo SHintEntrySaveData::TypeInfo = ZHMTypeInfo("SHintEntrySaveData", sizeof(SHintEntrySaveData), alignof(SHintEntrySaveData), SHintEntrySaveData::WriteJson, SHintEntrySaveData::WriteSimpleJson, SHintEntrySaveData::FromSimpleJson);

void SHintEntrySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHintEntrySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsValid;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_hint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_hint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_context") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_context;
	p_Stream << "}";

	p_Stream << "}";
}

void SHintEntrySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHintEntrySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsValid") << ":";
	p_Stream << s_Object->m_bIsValid;
	p_Stream << ",";

	p_Stream << JsonStr("m_hint") << ":";
	p_Stream << s_Object->m_hint;
	p_Stream << ",";

	p_Stream << JsonStr("m_context") << ":";
	p_Stream << s_Object->m_context;

	p_Stream << "}";
}

void SHintEntrySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHintEntrySaveData s_Object;

	s_Object.m_bIsValid = bool(p_Document["m_bIsValid"]);

	s_Object.m_hint = static_cast<uint32>(int64_t(p_Document["m_hint"]));

	s_Object.m_context = static_cast<uint32>(int64_t(p_Document["m_context"]));

	*reinterpret_cast<SHintEntrySaveData*>(p_Target) = s_Object;
}

void SHintEntrySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SVector4::TypeInfo = ZHMTypeInfo("SVector4", sizeof(SVector4), alignof(SVector4), SVector4::WriteJson, SVector4::WriteSimpleJson, SVector4::FromSimpleJson);

void SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->z;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->w;
	p_Stream << "}";

	p_Stream << "}";
}

void SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << s_Object->z;
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << s_Object->w;

	p_Stream << "}";
}

void SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVector4 s_Object;

	s_Object.x = static_cast<float32>(double(p_Document["x"]));

	s_Object.y = static_cast<float32>(double(p_Document["y"]));

	s_Object.z = static_cast<float32>(double(p_Document["z"]));

	s_Object.w = static_cast<float32>(double(p_Document["w"]));

	*reinterpret_cast<SVector4*>(p_Target) = s_Object;
}

void SVector4::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMathLerpSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector4", sizeof(SMathLerpSaveData_SVector4), alignof(SMathLerpSaveData_SVector4), SMathLerpSaveData_SVector4::WriteJson, SMathLerpSaveData_SVector4::WriteSimpleJson, SMathLerpSaveData_SVector4::FromSimpleJson);

void SMathLerpSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SVector4 s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SVector4::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_A.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector4, m_A));	m_B.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector4, m_B));}

ZHMTypeInfo SMathLerpsSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector4", sizeof(SMathLerpsSaveData_SVector4), alignof(SMathLerpsSaveData_SVector4), SMathLerpsSaveData_SVector4::WriteJson, SMathLerpsSaveData_SVector4::WriteSimpleJson, SMathLerpsSaveData_SVector4::FromSimpleJson);

void SMathLerpsSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SVector4") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SVector4::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SVector4::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SVector4 s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathLerpSaveData_SVector4 s_ArrayItem;
		SMathLerpSaveData_SVector4::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathLerpsSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SVector4::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector4, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector4, m_aData));}

ZHMTypeInfo SSentryOrderSaveData::TypeInfo = ZHMTypeInfo("SSentryOrderSaveData", sizeof(SSentryOrderSaveData), alignof(SSentryOrderSaveData), SSentryOrderSaveData::WriteJson, SSentryOrderSaveData::WriteSimpleJson, SSentryOrderSaveData::FromSimpleJson);

void SSentryOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSentryZone;
	p_Stream << "}";

	p_Stream << "}";
}

void SSentryOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << s_Object->m_rSentryZone;

	p_Stream << "}";
}

void SSentryOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSentryOrderSaveData s_Object;

	s_Object.m_rSentryZone = static_cast<uint32>(int64_t(p_Document["m_rSentryZone"]));

	*reinterpret_cast<SSentryOrderSaveData*>(p_Target) = s_Object;
}

void SSentryOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SHUDPromptDisplayInfo::TypeInfo = ZHMTypeInfo("SHUDPromptDisplayInfo", sizeof(SHUDPromptDisplayInfo), alignof(SHUDPromptDisplayInfo), SHUDPromptDisplayInfo::WriteJson, SHUDPromptDisplayInfo::WriteSimpleJson, SHUDPromptDisplayInfo::FromSimpleJson);

void SHUDPromptDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPromptDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActionPromptState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActionPromptState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nIconId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIconId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTypeId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_eTypeId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoActionAvailable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNoActionAvailable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLabel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sLabel);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sDescription") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sDescription);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sGlyph") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sGlyph);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOpacity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegalItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIllegalItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSuspiciousItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSuspiciousItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropTempHolsterableItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropTempHolsterableItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFontSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFontSize;
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDPromptDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPromptDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActionPromptState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nIconId") << ":";
	p_Stream << s_Object->m_nIconId;
	p_Stream << ",";

	p_Stream << JsonStr("m_eTypeId") << ":";
	p_Stream << s_Object->m_eTypeId;
	p_Stream << ",";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << s_Object->m_fDistance;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowWarning") << ":";
	p_Stream << s_Object->m_bShowWarning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoActionAvailable") << ":";
	p_Stream << s_Object->m_bNoActionAvailable;
	p_Stream << ",";

	p_Stream << JsonStr("m_sLabel") << ":";
	p_Stream << JsonStr(s_Object->m_sLabel);
	p_Stream << ",";

	p_Stream << JsonStr("m_sDescription") << ":";
	p_Stream << JsonStr(s_Object->m_sDescription);
	p_Stream << ",";

	p_Stream << JsonStr("m_sGlyph") << ":";
	p_Stream << JsonStr(s_Object->m_sGlyph);
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << s_Object->m_fOpacity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegalItem") << ":";
	p_Stream << s_Object->m_bIllegalItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSuspiciousItem") << ":";
	p_Stream << s_Object->m_bSuspiciousItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropTempHolsterableItems") << ":";
	p_Stream << s_Object->m_bDropTempHolsterableItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFontSize") << ":";
	p_Stream << s_Object->m_nFontSize;

	p_Stream << "}";
}

void SHUDPromptDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHUDPromptDisplayInfo s_Object;

	s_Object.m_bActive = bool(p_Document["m_bActive"]);

	s_Object.m_eState = static_cast<EActionPromptState>(ZHMEnums::GetEnumValueByName("EActionPromptState", std::string_view(p_Document["m_eState"])));

	s_Object.m_nIconId = static_cast<int32>(int64_t(p_Document["m_nIconId"]));

	s_Object.m_eTypeId = static_cast<int32>(int64_t(p_Document["m_eTypeId"]));

	s_Object.m_fProgress = static_cast<float32>(double(p_Document["m_fProgress"]));

	s_Object.m_fDistance = static_cast<float32>(double(p_Document["m_fDistance"]));

	s_Object.m_bShowWarning = bool(p_Document["m_bShowWarning"]);

	s_Object.m_bNoActionAvailable = bool(p_Document["m_bNoActionAvailable"]);

	s_Object.m_sLabel = std::string_view(p_Document["m_sLabel"]);

	s_Object.m_sDescription = std::string_view(p_Document["m_sDescription"]);

	s_Object.m_sGlyph = std::string_view(p_Document["m_sGlyph"]);

	s_Object.m_fOpacity = static_cast<float32>(double(p_Document["m_fOpacity"]));

	s_Object.m_bIllegalItem = bool(p_Document["m_bIllegalItem"]);

	s_Object.m_bSuspiciousItem = bool(p_Document["m_bSuspiciousItem"]);

	s_Object.m_bDropTempHolsterableItems = bool(p_Document["m_bDropTempHolsterableItems"]);

	s_Object.m_nFontSize = static_cast<int32>(int64_t(p_Document["m_nFontSize"]));

	*reinterpret_cast<SHUDPromptDisplayInfo*>(p_Target) = s_Object;
}

void SHUDPromptDisplayInfo::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sLabel.Serialize(p_Serializer, p_OwnOffset + offsetof(SHUDPromptDisplayInfo, m_sLabel));	m_sDescription.Serialize(p_Serializer, p_OwnOffset + offsetof(SHUDPromptDisplayInfo, m_sDescription));	m_sGlyph.Serialize(p_Serializer, p_OwnOffset + offsetof(SHUDPromptDisplayInfo, m_sGlyph));}

ZHMTypeInfo ZGuid::TypeInfo = ZHMTypeInfo("ZGuid", sizeof(ZGuid), alignof(ZGuid), ZGuid::WriteJson, ZGuid::WriteSimpleJson, ZGuid::FromSimpleJson);

void ZGuid::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuid*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("_a") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->_a;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->_b;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_c") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->_c;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_d") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_d);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_e") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_e);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_f") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_f);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_g") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_g);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_h") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_h);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_i") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_i);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_j") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_j);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_k") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_k);
	p_Stream << "}";

	p_Stream << "}";
}

void ZGuid::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuid*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("_a") << ":";
	p_Stream << s_Object->_a;
	p_Stream << ",";

	p_Stream << JsonStr("_b") << ":";
	p_Stream << s_Object->_b;
	p_Stream << ",";

	p_Stream << JsonStr("_c") << ":";
	p_Stream << s_Object->_c;
	p_Stream << ",";

	p_Stream << JsonStr("_d") << ":";
	p_Stream << static_cast<int>(s_Object->_d);
	p_Stream << ",";

	p_Stream << JsonStr("_e") << ":";
	p_Stream << static_cast<int>(s_Object->_e);
	p_Stream << ",";

	p_Stream << JsonStr("_f") << ":";
	p_Stream << static_cast<int>(s_Object->_f);
	p_Stream << ",";

	p_Stream << JsonStr("_g") << ":";
	p_Stream << static_cast<int>(s_Object->_g);
	p_Stream << ",";

	p_Stream << JsonStr("_h") << ":";
	p_Stream << static_cast<int>(s_Object->_h);
	p_Stream << ",";

	p_Stream << JsonStr("_i") << ":";
	p_Stream << static_cast<int>(s_Object->_i);
	p_Stream << ",";

	p_Stream << JsonStr("_j") << ":";
	p_Stream << static_cast<int>(s_Object->_j);
	p_Stream << ",";

	p_Stream << JsonStr("_k") << ":";
	p_Stream << static_cast<int>(s_Object->_k);

	p_Stream << "}";
}

void ZGuid::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGuid s_Object;

	s_Object._a = static_cast<uint32>(int64_t(p_Document["_a"]));

	s_Object._b = static_cast<uint16>(int64_t(p_Document["_b"]));

	s_Object._c = static_cast<uint16>(int64_t(p_Document["_c"]));

	s_Object._d = static_cast<uint8>(int64_t(p_Document["_d"]));

	s_Object._e = static_cast<uint8>(int64_t(p_Document["_e"]));

	s_Object._f = static_cast<uint8>(int64_t(p_Document["_f"]));

	s_Object._g = static_cast<uint8>(int64_t(p_Document["_g"]));

	s_Object._h = static_cast<uint8>(int64_t(p_Document["_h"]));

	s_Object._i = static_cast<uint8>(int64_t(p_Document["_i"]));

	s_Object._j = static_cast<uint8>(int64_t(p_Document["_j"]));

	s_Object._k = static_cast<uint8>(int64_t(p_Document["_k"]));

	*reinterpret_cast<ZGuid*>(p_Target) = s_Object;
}

void ZGuid::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActivity::TypeInfo = ZHMTypeInfo("SActivity", sizeof(SActivity), alignof(SActivity), SActivity::WriteJson, SActivity::WriteSimpleJson, SActivity::FromSimpleJson);

void SActivity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGuid") << "," << JsonStr("$val") << ":";
	ZGuid::WriteJson(&s_Object->id, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("activityId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->activityId);
	p_Stream << "}";

	p_Stream << "}";
}

void SActivity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("id") << ":";
	ZGuid::WriteSimpleJson(&s_Object->id, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("activityId") << ":";
	p_Stream << JsonStr(s_Object->activityId);

	p_Stream << "}";
}

void SActivity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivity s_Object;

	{
		ZGuid s_Item;
		ZGuid::FromSimpleJson(p_Document["id"], &s_Item);
		s_Object.id = s_Item;
	}

	s_Object.activityId = std::string_view(p_Document["activityId"]);

	*reinterpret_cast<SActivity*>(p_Target) = s_Object;
}

void SActivity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	id.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivity, id));	activityId.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivity, activityId));}

ZHMTypeInfo SActivityExits::TypeInfo = ZHMTypeInfo("SActivityExits", sizeof(SActivityExits), alignof(SActivityExits), SActivityExits::WriteJson, SActivityExits::WriteSimpleJson, SActivityExits::FromSimpleJson);

void SActivityExits::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityExits*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("activity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
	SActivity::WriteJson(&s_Object->activity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exits.size(); ++i)
	{
		auto& s_Item = s_Object->exits[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->exits.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActivityExits::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityExits*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("activity") << ":";
	SActivity::WriteSimpleJson(&s_Object->activity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exits.size(); ++i)
	{
		auto& s_Item = s_Object->exits[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->exits.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActivityExits::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivityExits s_Object;

	{
		SActivity s_Item;
		SActivity::FromSimpleJson(p_Document["activity"], &s_Item);
		s_Object.activity = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["exits"])
	{
		s_Object.exits.push_back(std::string_view(s_Item));
	}

	*reinterpret_cast<SActivityExits*>(p_Target) = s_Object;
}

void SActivityExits::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	activity.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivityExits, activity));	exits.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivityExits, exits));}

ZHMTypeInfo SIntelListDisplayInfo::TypeInfo = ZHMTypeInfo("SIntelListDisplayInfo", sizeof(SIntelListDisplayInfo), alignof(SIntelListDisplayInfo), SIntelListDisplayInfo::WriteJson, SIntelListDisplayInfo::WriteSimpleJson, SIntelListDisplayInfo::FromSimpleJson);

void SIntelListDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelListDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("index") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->index;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->active;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("newInfo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->newInfo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelListDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelListDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("index") << ":";
	p_Stream << s_Object->index;
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << s_Object->active;
	p_Stream << ",";

	p_Stream << JsonStr("newInfo") << ":";
	p_Stream << s_Object->newInfo;
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);

	p_Stream << "}";
}

void SIntelListDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelListDisplayInfo s_Object;

	s_Object.index = static_cast<int32>(int64_t(p_Document["index"]));

	s_Object.active = bool(p_Document["active"]);

	s_Object.newInfo = bool(p_Document["newInfo"]);

	s_Object.label = std::string_view(p_Document["label"]);

	*reinterpret_cast<SIntelListDisplayInfo*>(p_Target) = s_Object;
}

void SIntelListDisplayInfo::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	label.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelListDisplayInfo, label));}

ZHMTypeInfo SIntelListDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SIntelListDisplayInfoArray_dummy", sizeof(SIntelListDisplayInfoArray_dummy), alignof(SIntelListDisplayInfoArray_dummy), SIntelListDisplayInfoArray_dummy::WriteJson, SIntelListDisplayInfoArray_dummy::WriteSimpleJson, SIntelListDisplayInfoArray_dummy::FromSimpleJson);

void SIntelListDisplayInfoArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelListDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SIntelListDisplayInfo") << "," << JsonStr("$val") << ":";
		SIntelListDisplayInfo::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SIntelListDisplayInfoArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelListDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SIntelListDisplayInfo::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SIntelListDisplayInfoArray_dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelListDisplayInfoArray_dummy s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["dummy"])
	{
		SIntelListDisplayInfo s_ArrayItem;
		SIntelListDisplayInfo::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.dummy.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SIntelListDisplayInfoArray_dummy*>(p_Target) = s_Object;
}

void SIntelListDisplayInfoArray_dummy::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	dummy.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelListDisplayInfoArray_dummy, dummy));}

ZHMTypeInfo S25DProjectionSettingsCurveEntry::TypeInfo = ZHMTypeInfo("S25DProjectionSettingsCurveEntry", sizeof(S25DProjectionSettingsCurveEntry), alignof(S25DProjectionSettingsCurveEntry), S25DProjectionSettingsCurveEntry::WriteJson, S25DProjectionSettingsCurveEntry::WriteSimpleJson, S25DProjectionSettingsCurveEntry::FromSimpleJson);

void S25DProjectionSettingsCurveEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S25DProjectionSettingsCurveEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fValue;
	p_Stream << "}";

	p_Stream << "}";
}

void S25DProjectionSettingsCurveEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S25DProjectionSettingsCurveEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fDistance") << ":";
	p_Stream << s_Object->fDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fValue") << ":";
	p_Stream << s_Object->fValue;

	p_Stream << "}";
}

void S25DProjectionSettingsCurveEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	S25DProjectionSettingsCurveEntry s_Object;

	s_Object.fDistance = static_cast<float32>(double(p_Document["fDistance"]));

	s_Object.fValue = static_cast<float32>(double(p_Document["fValue"]));

	*reinterpret_cast<S25DProjectionSettingsCurveEntry*>(p_Target) = s_Object;
}

void S25DProjectionSettingsCurveEntry::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector4", sizeof(SMathMultiplyDivideSaveData_SVector4), alignof(SMathMultiplyDivideSaveData_SVector4), SMathMultiplyDivideSaveData_SVector4::WriteJson, SMathMultiplyDivideSaveData_SVector4::WriteSimpleJson, SMathMultiplyDivideSaveData_SVector4::FromSimpleJson);

void SMathMultiplyDivideSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultiplyDivideSaveData_SVector4 s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	s_Object.m_bDivide = bool(p_Document["m_bDivide"]);

	*reinterpret_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathMultiplyDivideSaveData_SVector4::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fA.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector4, m_fA));	m_fB.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector4, m_fB));}

ZHMTypeInfo SMathMultipliesSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector4", sizeof(SMathMultipliesSaveData_SVector4), alignof(SMathMultipliesSaveData_SVector4), SMathMultipliesSaveData_SVector4::WriteJson, SMathMultipliesSaveData_SVector4::WriteSimpleJson, SMathMultipliesSaveData_SVector4::FromSimpleJson);

void SMathMultipliesSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_SVector4") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_SVector4::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_SVector4::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultipliesSaveData_SVector4 s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathMultiplyDivideSaveData_SVector4 s_ArrayItem;
		SMathMultiplyDivideSaveData_SVector4::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathMultipliesSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathMultipliesSaveData_SVector4::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector4, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector4, m_aData));}

ZHMTypeInfo SActorSpreadControllerCandidateSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadControllerCandidateSaveData", sizeof(SActorSpreadControllerCandidateSaveData), alignof(SActorSpreadControllerCandidateSaveData), SActorSpreadControllerCandidateSaveData::WriteJson, SActorSpreadControllerCandidateSaveData::WriteSimpleJson, SActorSpreadControllerCandidateSaveData::FromSimpleJson);

void SActorSpreadControllerCandidateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadControllerCandidateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CandidateActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CandidateActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CandidateTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_CandidateTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValidCandidate;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadControllerCandidateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadControllerCandidateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CandidateActor") << ":";
	p_Stream << s_Object->m_CandidateActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_CandidateTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_CandidateTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidCandidate") << ":";
	p_Stream << s_Object->m_bValidCandidate;

	p_Stream << "}";
}

void SActorSpreadControllerCandidateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSpreadControllerCandidateSaveData s_Object;

	s_Object.m_CandidateActor = static_cast<uint32>(int64_t(p_Document["m_CandidateActor"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_CandidateTime"], &s_Item);
		s_Object.m_CandidateTime = s_Item;
	}

	s_Object.m_bValidCandidate = bool(p_Document["m_bValidCandidate"]);

	*reinterpret_cast<SActorSpreadControllerCandidateSaveData*>(p_Target) = s_Object;
}

void SActorSpreadControllerCandidateSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_CandidateTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerCandidateSaveData, m_CandidateTime));}

ZHMTypeInfo ZBehaviorTreeVariable::TypeInfo = ZHMTypeInfo("ZBehaviorTreeVariable", sizeof(ZBehaviorTreeVariable), alignof(ZBehaviorTreeVariable), ZBehaviorTreeVariable::WriteJson, ZBehaviorTreeVariable::WriteSimpleJson, ZBehaviorTreeVariable::FromSimpleJson);

void ZBehaviorTreeVariable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZBehaviorTreeVariable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZBehaviorTreeVariable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZBehaviorTreeVariable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZBehaviorTreeVariable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZBehaviorTreeVariable s_Object;

	*reinterpret_cast<ZBehaviorTreeVariable*>(p_Target) = s_Object;
}

void ZBehaviorTreeVariable::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMusicGridData::TypeInfo = ZHMTypeInfo("SMusicGridData", sizeof(SMusicGridData), alignof(SMusicGridData), SMusicGridData::WriteJson, SMusicGridData::WriteSimpleJson, SMusicGridData::FromSimpleJson);

void SMusicGridData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMusicGridData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fGridDurationSec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridDurationSec;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridOffsetSec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridOffsetSec;
	p_Stream << "}";

	p_Stream << "}";
}

void SMusicGridData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMusicGridData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fGridDurationSec") << ":";
	p_Stream << s_Object->m_fGridDurationSec;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridOffsetSec") << ":";
	p_Stream << s_Object->m_fGridOffsetSec;

	p_Stream << "}";
}

void SMusicGridData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMusicGridData s_Object;

	s_Object.m_fGridDurationSec = static_cast<float32>(double(p_Document["m_fGridDurationSec"]));

	s_Object.m_fGridOffsetSec = static_cast<float32>(double(p_Document["m_fGridOffsetSec"]));

	*reinterpret_cast<SMusicGridData*>(p_Target) = s_Object;
}

void SMusicGridData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCollidingParticle::TypeInfo = ZHMTypeInfo("SCollidingParticle", sizeof(SCollidingParticle), alignof(SCollidingParticle), SCollidingParticle::WriteJson, SCollidingParticle::WriteSimpleJson, SCollidingParticle::FromSimpleJson);

void SCollidingParticle::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollidingParticle*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vNewVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vNewVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nColor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nColor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSize;
	p_Stream << "}";

	p_Stream << "}";
}

void SCollidingParticle::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollidingParticle*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vNewVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_vNewVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nColor") << ":";
	p_Stream << s_Object->m_nColor;
	p_Stream << ",";

	p_Stream << JsonStr("m_fSize") << ":";
	p_Stream << s_Object->m_fSize;

	p_Stream << "}";
}

void SCollidingParticle::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCollidingParticle s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vVelocity"], &s_Item);
		s_Object.m_vVelocity = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vNewVelocity"], &s_Item);
		s_Object.m_vNewVelocity = s_Item;
	}

	s_Object.m_nColor = static_cast<uint32>(int64_t(p_Document["m_nColor"]));

	s_Object.m_fSize = static_cast<float32>(double(p_Document["m_fSize"]));

	*reinterpret_cast<SCollidingParticle*>(p_Target) = s_Object;
}

void SCollidingParticle::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SCollidingParticle, m_vPosition));	m_vVelocity.Serialize(p_Serializer, p_OwnOffset + offsetof(SCollidingParticle, m_vVelocity));	m_vNewVelocity.Serialize(p_Serializer, p_OwnOffset + offsetof(SCollidingParticle, m_vNewVelocity));}

ZHMTypeInfo SRepositionOrderSaveData::TypeInfo = ZHMTypeInfo("SRepositionOrderSaveData", sizeof(SRepositionOrderSaveData), alignof(SRepositionOrderSaveData), SRepositionOrderSaveData::WriteJson, SRepositionOrderSaveData::WriteSimpleJson, SRepositionOrderSaveData::FromSimpleJson);

void SRepositionOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRepositionOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bStrafe") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStrafe;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAtTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAimAtTarget;
	p_Stream << "}";

	p_Stream << "}";
}

void SRepositionOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRepositionOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bStrafe") << ":";
	p_Stream << s_Object->m_bStrafe;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAtTarget") << ":";
	p_Stream << s_Object->m_bAimAtTarget;

	p_Stream << "}";
}

void SRepositionOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRepositionOrderSaveData s_Object;

	s_Object.m_bStrafe = bool(p_Document["m_bStrafe"]);

	s_Object.m_bAimAtTarget = bool(p_Document["m_bAimAtTarget"]);

	*reinterpret_cast<SRepositionOrderSaveData*>(p_Target) = s_Object;
}

void SRepositionOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SSecuritySystemCameraSaveData::TypeInfo = ZHMTypeInfo("SSecuritySystemCameraSaveData", sizeof(SSecuritySystemCameraSaveData), alignof(SSecuritySystemCameraSaveData), SSecuritySystemCameraSaveData::WriteJson, SSecuritySystemCameraSaveData::WriteSimpleJson, SSecuritySystemCameraSaveData::FromSimpleJson);

void SSecuritySystemCameraSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSecuritySystemCameraSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEscalation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEscalation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFunctional;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasEnteredOnce") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasEnteredOnce;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasInvestigated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << "}";

	p_Stream << "}";
}

void SSecuritySystemCameraSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSecuritySystemCameraSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEscalation") << ":";
	p_Stream << s_Object->m_nEscalation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << s_Object->m_bIsFunctional;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasEnteredOnce") << ":";
	p_Stream << s_Object->m_bHasEnteredOnce;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasInvestigated") << ":";
	p_Stream << s_Object->m_bWasInvestigated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << s_Object->m_bDestroyed;

	p_Stream << "}";
}

void SSecuritySystemCameraSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSecuritySystemCameraSaveData s_Object;

	s_Object.m_nEscalation = static_cast<uint16>(int64_t(p_Document["m_nEscalation"]));

	s_Object.m_bIsFunctional = bool(p_Document["m_bIsFunctional"]);

	s_Object.m_bHasEnteredOnce = bool(p_Document["m_bHasEnteredOnce"]);

	s_Object.m_bWasInvestigated = bool(p_Document["m_bWasInvestigated"]);

	s_Object.m_bDestroyed = bool(p_Document["m_bDestroyed"]);

	*reinterpret_cast<SSecuritySystemCameraSaveData*>(p_Target) = s_Object;
}

void SSecuritySystemCameraSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZRuntimePinConDesc::TypeInfo = ZHMTypeInfo("ZRuntimePinConDesc", sizeof(ZRuntimePinConDesc), alignof(ZRuntimePinConDesc), ZRuntimePinConDesc::WriteJson, ZRuntimePinConDesc::WriteSimpleJson, ZRuntimePinConDesc::FromSimpleJson);

void ZRuntimePinConDesc::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRuntimePinConDesc*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nFromEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFromEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nToEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nToEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFromPinID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFromPinID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nToPinID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nToPinID;
	p_Stream << "}";

	p_Stream << "}";
}

void ZRuntimePinConDesc::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRuntimePinConDesc*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nFromEntityID") << ":";
	p_Stream << s_Object->m_nFromEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nToEntityID") << ":";
	p_Stream << s_Object->m_nToEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFromPinID") << ":";
	p_Stream << s_Object->m_nFromPinID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nToPinID") << ":";
	p_Stream << s_Object->m_nToPinID;

	p_Stream << "}";
}

void ZRuntimePinConDesc::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZRuntimePinConDesc s_Object;

	s_Object.m_nFromEntityID = uint64(p_Document["m_nFromEntityID"]);

	s_Object.m_nToEntityID = uint64(p_Document["m_nToEntityID"]);

	s_Object.m_nFromPinID = static_cast<uint32>(int64_t(p_Document["m_nFromPinID"]));

	s_Object.m_nToPinID = static_cast<uint32>(int64_t(p_Document["m_nToPinID"]));

	*reinterpret_cast<ZRuntimePinConDesc*>(p_Target) = s_Object;
}

void ZRuntimePinConDesc::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZScopedRuntimePinConDesc::TypeInfo = ZHMTypeInfo("ZScopedRuntimePinConDesc", sizeof(ZScopedRuntimePinConDesc), alignof(ZScopedRuntimePinConDesc), ZScopedRuntimePinConDesc::WriteJson, ZScopedRuntimePinConDesc::WriteSimpleJson, ZScopedRuntimePinConDesc::FromSimpleJson);

void ZScopedRuntimePinConDesc::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZScopedRuntimePinConDesc*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aScopePath[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_PinConDesc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimePinConDesc") << "," << JsonStr("$val") << ":";
	ZRuntimePinConDesc::WriteJson(&s_Object->m_PinConDesc, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZScopedRuntimePinConDesc::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZScopedRuntimePinConDesc*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aScopePath[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_PinConDesc") << ":";
	ZRuntimePinConDesc::WriteSimpleJson(&s_Object->m_PinConDesc, p_Stream);

	p_Stream << "}";
}

void ZScopedRuntimePinConDesc::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZScopedRuntimePinConDesc s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aScopePath"])
	{
		s_Object.m_aScopePath.push_back(uint64(s_Item));
	}

	{
		ZRuntimePinConDesc s_Item;
		ZRuntimePinConDesc::FromSimpleJson(p_Document["m_PinConDesc"], &s_Item);
		s_Object.m_PinConDesc = s_Item;
	}

	*reinterpret_cast<ZScopedRuntimePinConDesc*>(p_Target) = s_Object;
}

void ZScopedRuntimePinConDesc::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aScopePath.Serialize(p_Serializer, p_OwnOffset + offsetof(ZScopedRuntimePinConDesc, m_aScopePath));	m_PinConDesc.Serialize(p_Serializer, p_OwnOffset + offsetof(ZScopedRuntimePinConDesc, m_PinConDesc));}

ZHMTypeInfo SSequenceTrackSaveData::TypeInfo = ZHMTypeInfo("SSequenceTrackSaveData", sizeof(SSequenceTrackSaveData), alignof(SSequenceTrackSaveData), SSequenceTrackSaveData::WriteJson, SSequenceTrackSaveData::WriteSimpleJson, SSequenceTrackSaveData::FromSimpleJson);

void SSequenceTrackSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSequenceTrackSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomTrackData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomTrackData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSequenceTrackSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSequenceTrackSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomTrackData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomTrackData, p_Stream);

	p_Stream << "}";
}

void SSequenceTrackSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSequenceTrackSaveData s_Object;

	s_Object.m_rTrackEntity = static_cast<uint32>(int64_t(p_Document["m_rTrackEntity"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_CustomTrackData"], &s_Item);
		s_Object.m_CustomTrackData = s_Item;
	}

	*reinterpret_cast<SSequenceTrackSaveData*>(p_Target) = s_Object;
}

void SSequenceTrackSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_CustomTrackData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSequenceTrackSaveData, m_CustomTrackData));}

ZHMTypeInfo SVector3::TypeInfo = ZHMTypeInfo("SVector3", sizeof(SVector3), alignof(SVector3), SVector3::WriteJson, SVector3::WriteSimpleJson, SVector3::FromSimpleJson);

void SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->z;
	p_Stream << "}";

	p_Stream << "}";
}

void SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << s_Object->z;

	p_Stream << "}";
}

void SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVector3 s_Object;

	s_Object.x = static_cast<float32>(double(p_Document["x"]));

	s_Object.y = static_cast<float32>(double(p_Document["y"]));

	s_Object.z = static_cast<float32>(double(p_Document["z"]));

	*reinterpret_cast<SVector3*>(p_Target) = s_Object;
}

void SVector3::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SSpatialSaveData::TypeInfo = ZHMTypeInfo("SSpatialSaveData", sizeof(SSpatialSaveData), alignof(SSpatialSaveData), SSpatialSaveData::WriteJson, SSpatialSaveData::WriteSimpleJson, SSpatialSaveData::FromSimpleJson);

void SSpatialSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpatialSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternionRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vQuaternionRotation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSpatialSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpatialSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternionRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vQuaternionRotation, p_Stream);

	p_Stream << "}";
}

void SSpatialSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSpatialSaveData s_Object;

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vQuaternionRotation"], &s_Item);
		s_Object.m_vQuaternionRotation = s_Item;
	}

	*reinterpret_cast<SSpatialSaveData*>(p_Target) = s_Object;
}

void SSpatialSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SSpatialSaveData, m_vPosition));	m_vQuaternionRotation.Serialize(p_Serializer, p_OwnOffset + offsetof(SSpatialSaveData, m_vQuaternionRotation));}

ZHMTypeInfo SWeaponStatusUIData::TypeInfo = ZHMTypeInfo("SWeaponStatusUIData", sizeof(SWeaponStatusUIData), alignof(SWeaponStatusUIData), SWeaponStatusUIData::WriteJson, SWeaponStatusUIData::WriteSimpleJson, SWeaponStatusUIData::FromSimpleJson);

void SWeaponStatusUIData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWeaponStatusUIData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->containedIcon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sWeaponName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sWeaponName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContainedItemName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContainedItemName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSilenced") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSilenced;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsFirearm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsFirearm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHolstered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHolstered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bCannotBeHolstered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bCannotBeHolstered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bCanReload") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bCanReload;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsReloading") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsReloading;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fReloadDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fReloadDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInfiniteAmmo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInfiniteAmmo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsContainer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsContainer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainsItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainsItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fLastBulletFiredTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fLastBulletFiredTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fTimeBetweenBullets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fTimeBetweenBullets;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aPerks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aPerks.size(); ++i)
	{
		auto& s_Item = s_Object->aPerks[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->aPerks.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAmmoTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAmmoTypes.size(); ++i)
	{
		auto& s_Item = s_Object->aAmmoTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->aAmmoTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("nCurrentAmmoType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nCurrentAmmoType;
	p_Stream << "}";

	p_Stream << "}";
}

void SWeaponStatusUIData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWeaponStatusUIData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->containedIcon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("sWeaponName") << ":";
	p_Stream << JsonStr(s_Object->sWeaponName);
	p_Stream << ",";

	p_Stream << JsonStr("sContainedItemName") << ":";
	p_Stream << JsonStr(s_Object->sContainedItemName);
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << ",";

	p_Stream << JsonStr("bSilenced") << ":";
	p_Stream << s_Object->bSilenced;
	p_Stream << ",";

	p_Stream << JsonStr("bIsFirearm") << ":";
	p_Stream << s_Object->bIsFirearm;
	p_Stream << ",";

	p_Stream << JsonStr("bHolstered") << ":";
	p_Stream << s_Object->bHolstered;
	p_Stream << ",";

	p_Stream << JsonStr("bCannotBeHolstered") << ":";
	p_Stream << s_Object->bCannotBeHolstered;
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("bCanReload") << ":";
	p_Stream << s_Object->bCanReload;
	p_Stream << ",";

	p_Stream << JsonStr("bIsReloading") << ":";
	p_Stream << s_Object->bIsReloading;
	p_Stream << ",";

	p_Stream << JsonStr("fReloadDuration") << ":";
	p_Stream << s_Object->fReloadDuration;
	p_Stream << ",";

	p_Stream << JsonStr("bInfiniteAmmo") << ":";
	p_Stream << s_Object->bInfiniteAmmo;
	p_Stream << ",";

	p_Stream << JsonStr("bIsContainer") << ":";
	p_Stream << s_Object->bIsContainer;
	p_Stream << ",";

	p_Stream << JsonStr("bContainsItem") << ":";
	p_Stream << s_Object->bContainsItem;
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << ",";

	p_Stream << JsonStr("fLastBulletFiredTime") << ":";
	p_Stream << s_Object->fLastBulletFiredTime;
	p_Stream << ",";

	p_Stream << JsonStr("fTimeBetweenBullets") << ":";
	p_Stream << s_Object->fTimeBetweenBullets;
	p_Stream << ",";

	p_Stream << JsonStr("aPerks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aPerks.size(); ++i)
	{
		auto& s_Item = s_Object->aPerks[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->aPerks.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAmmoTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAmmoTypes.size(); ++i)
	{
		auto& s_Item = s_Object->aAmmoTypes[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->aAmmoTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("nCurrentAmmoType") << ":";
	p_Stream << s_Object->nCurrentAmmoType;

	p_Stream << "}";
}

void SWeaponStatusUIData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWeaponStatusUIData s_Object;

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["containedIcon"], &s_Item);
		s_Object.containedIcon = s_Item;
	}

	s_Object.sWeaponName = std::string_view(p_Document["sWeaponName"]);

	s_Object.sContainedItemName = std::string_view(p_Document["sContainedItemName"]);

	s_Object.nWeaponType = static_cast<int32>(int64_t(p_Document["nWeaponType"]));

	s_Object.nItemHUDType = static_cast<int32>(int64_t(p_Document["nItemHUDType"]));

	s_Object.nAmmoRemaining = static_cast<int32>(int64_t(p_Document["nAmmoRemaining"]));

	s_Object.nAmmoTotal = static_cast<int32>(int64_t(p_Document["nAmmoTotal"]));

	s_Object.nAmmoInClip = static_cast<int32>(int64_t(p_Document["nAmmoInClip"]));

	s_Object.bSilenced = bool(p_Document["bSilenced"]);

	s_Object.bIsFirearm = bool(p_Document["bIsFirearm"]);

	s_Object.bHolstered = bool(p_Document["bHolstered"]);

	s_Object.bCannotBeHolstered = bool(p_Document["bCannotBeHolstered"]);

	s_Object.bHasItemToShow = bool(p_Document["bHasItemToShow"]);

	s_Object.bSuspicious = bool(p_Document["bSuspicious"]);

	s_Object.bIllegal = bool(p_Document["bIllegal"]);

	s_Object.bCanReload = bool(p_Document["bCanReload"]);

	s_Object.bIsReloading = bool(p_Document["bIsReloading"]);

	s_Object.fReloadDuration = static_cast<float32>(double(p_Document["fReloadDuration"]));

	s_Object.bInfiniteAmmo = bool(p_Document["bInfiniteAmmo"]);

	s_Object.bIsContainer = bool(p_Document["bIsContainer"]);

	s_Object.bContainsItem = bool(p_Document["bContainsItem"]);

	s_Object.nContainedItemHUDType = static_cast<int32>(int64_t(p_Document["nContainedItemHUDType"]));

	s_Object.bContainedItemIllegal = bool(p_Document["bContainedItemIllegal"]);

	s_Object.bContainedItemSuspicious = bool(p_Document["bContainedItemSuspicious"]);

	s_Object.bContainedItemDetectedDuringFrisk = bool(p_Document["bContainedItemDetectedDuringFrisk"]);

	s_Object.fLastBulletFiredTime = static_cast<float32>(double(p_Document["fLastBulletFiredTime"]));

	s_Object.fTimeBetweenBullets = static_cast<float32>(double(p_Document["fTimeBetweenBullets"]));

	for (simdjson::ondemand::value s_Item : p_Document["aPerks"])
	{
		s_Object.aPerks.push_back(std::string_view(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["aAmmoTypes"])
	{
		s_Object.aAmmoTypes.push_back(std::string_view(s_Item));
	}

	s_Object.nCurrentAmmoType = static_cast<uint32>(int64_t(p_Document["nCurrentAmmoType"]));

	*reinterpret_cast<SWeaponStatusUIData*>(p_Target) = s_Object;
}

void SWeaponStatusUIData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	icon.Serialize(p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, icon));	containedIcon.Serialize(p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, containedIcon));	sWeaponName.Serialize(p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, sWeaponName));	sContainedItemName.Serialize(p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, sContainedItemName));	aPerks.Serialize(p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, aPerks));	aAmmoTypes.Serialize(p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, aAmmoTypes));}

ZHMTypeInfo SEntityTemplatePropertyAlias::TypeInfo = ZHMTypeInfo("SEntityTemplatePropertyAlias", sizeof(SEntityTemplatePropertyAlias), alignof(SEntityTemplatePropertyAlias), SEntityTemplatePropertyAlias::WriteJson, SEntityTemplatePropertyAlias::WriteSimpleJson, SEntityTemplatePropertyAlias::FromSimpleJson);

void SEntityTemplatePropertyAlias::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePropertyAlias*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sAliasName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sAliasName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sPropertyName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sPropertyName);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePropertyAlias::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePropertyAlias*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sAliasName") << ":";
	p_Stream << JsonStr(s_Object->sAliasName);
	p_Stream << ",";

	p_Stream << JsonStr("entityID") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << ",";

	p_Stream << JsonStr("sPropertyName") << ":";
	p_Stream << JsonStr(s_Object->sPropertyName);

	p_Stream << "}";
}

void SEntityTemplatePropertyAlias::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePropertyAlias s_Object;

	s_Object.sAliasName = std::string_view(p_Document["sAliasName"]);

	s_Object.entityID = static_cast<int32>(int64_t(p_Document["entityID"]));

	s_Object.sPropertyName = std::string_view(p_Document["sPropertyName"]);

	*reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Target) = s_Object;
}

void SEntityTemplatePropertyAlias::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sAliasName.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyAlias, sAliasName));	sPropertyName.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyAlias, sPropertyName));}

ZHMTypeInfo ZDynamicObject::TypeInfo = ZHMTypeInfo("ZDynamicObject", sizeof(ZDynamicObject), alignof(ZDynamicObject), ZDynamicObject::WriteJson, ZDynamicObject::WriteSimpleJson, ZDynamicObject::FromSimpleJson);

void ZDynamicObject::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDynamicObject*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZDynamicObject::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDynamicObject*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_value") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_value, p_Stream);

	p_Stream << "}";
}

void ZDynamicObject::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZDynamicObject s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_value"], &s_Item);
		s_Object.m_value = s_Item;
	}

	*reinterpret_cast<ZDynamicObject*>(p_Target) = s_Object;
}

void ZDynamicObject::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_value.Serialize(p_Serializer, p_OwnOffset + offsetof(ZDynamicObject, m_value));}

ZHMTypeInfo SChallengeSaveData::TypeInfo = ZHMTypeInfo("SChallengeSaveData", sizeof(SChallengeSaveData), alignof(SChallengeSaveData), SChallengeSaveData::WriteJson, SChallengeSaveData::WriteSimpleJson, SChallengeSaveData::FromSimpleJson);

void SChallengeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChallengeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_State") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_State, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SChallengeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChallengeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sId") << ":";
	p_Stream << JsonStr(s_Object->m_sId);
	p_Stream << ",";

	p_Stream << JsonStr("m_State") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_State, p_Stream);

	p_Stream << "}";
}

void SChallengeSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SChallengeSaveData s_Object;

	s_Object.m_sId = std::string_view(p_Document["m_sId"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_State"], &s_Item);
		s_Object.m_State = s_Item;
	}

	*reinterpret_cast<SChallengeSaveData*>(p_Target) = s_Object;
}

void SChallengeSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sId.Serialize(p_Serializer, p_OwnOffset + offsetof(SChallengeSaveData, m_sId));	m_State.Serialize(p_Serializer, p_OwnOffset + offsetof(SChallengeSaveData, m_State));}

ZHMTypeInfo SDrama2ActorSaveState::TypeInfo = ZHMTypeInfo("SDrama2ActorSaveState", sizeof(SDrama2ActorSaveState), alignof(SDrama2ActorSaveState), SDrama2ActorSaveState::WriteJson, SDrama2ActorSaveState::WriteSimpleJson, SDrama2ActorSaveState::FromSimpleJson);

void SDrama2ActorSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2ActorSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSpeaking;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOwnsCurrentBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOwnsCurrentBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequired") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRequired;
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2ActorSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2ActorSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << s_Object->m_bIsSpeaking;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOwnsCurrentBehavior") << ":";
	p_Stream << s_Object->m_bOwnsCurrentBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequired") << ":";
	p_Stream << s_Object->m_bRequired;

	p_Stream << "}";
}

void SDrama2ActorSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2ActorSaveState s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rSequence = static_cast<uint32>(int64_t(p_Document["m_rSequence"]));

	s_Object.m_rBehavior = static_cast<uint32>(int64_t(p_Document["m_rBehavior"]));

	s_Object.m_rCurrentSpeakEntity = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpeakEntity"]));

	s_Object.m_rScreenplay = static_cast<uint32>(int64_t(p_Document["m_rScreenplay"]));

	s_Object.m_sMatchName = std::string_view(p_Document["m_sMatchName"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tActorSpeakEnd"], &s_Item);
		s_Object.m_tActorSpeakEnd = s_Item;
	}

	s_Object.m_bIsDone = bool(p_Document["m_bIsDone"]);

	s_Object.m_bIsPaused = bool(p_Document["m_bIsPaused"]);

	s_Object.m_bIsSpeaking = bool(p_Document["m_bIsSpeaking"]);

	s_Object.m_bOwnsCurrentBehavior = bool(p_Document["m_bOwnsCurrentBehavior"]);

	s_Object.m_bActive = bool(p_Document["m_bActive"]);

	s_Object.m_bRequired = bool(p_Document["m_bRequired"]);

	*reinterpret_cast<SDrama2ActorSaveState*>(p_Target) = s_Object;
}

void SDrama2ActorSaveState::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sMatchName.Serialize(p_Serializer, p_OwnOffset + offsetof(SDrama2ActorSaveState, m_sMatchName));	m_tActorSpeakEnd.Serialize(p_Serializer, p_OwnOffset + offsetof(SDrama2ActorSaveState, m_tActorSpeakEnd));}

ZHMTypeInfo SSpatialMoverEntitySaveData::TypeInfo = ZHMTypeInfo("SSpatialMoverEntitySaveData", sizeof(SSpatialMoverEntitySaveData), alignof(SSpatialMoverEntitySaveData), SSpatialMoverEntitySaveData::WriteJson, SSpatialMoverEntitySaveData::WriteSimpleJson, SSpatialMoverEntitySaveData::FromSimpleJson);

void SSpatialMoverEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpatialMoverEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBackwards") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBackwards;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFrameUpdateRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFrameUpdateRegistered;
	p_Stream << "}";

	p_Stream << "}";
}

void SSpatialMoverEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpatialMoverEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSpeed") << ":";
	p_Stream << s_Object->m_fSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBackwards") << ":";
	p_Stream << s_Object->m_bBackwards;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFrameUpdateRegistered") << ":";
	p_Stream << s_Object->m_bIsFrameUpdateRegistered;

	p_Stream << "}";
}

void SSpatialMoverEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSpatialMoverEntitySaveData s_Object;

	s_Object.m_fSpeed = static_cast<float32>(double(p_Document["m_fSpeed"]));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bBackwards = bool(p_Document["m_bBackwards"]);

	s_Object.m_bIsFrameUpdateRegistered = bool(p_Document["m_bIsFrameUpdateRegistered"]);

	*reinterpret_cast<SSpatialMoverEntitySaveData*>(p_Target) = s_Object;
}

void SSpatialMoverEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SSpatialMoverEntitySaveData, m_vPosition));}

ZHMTypeInfo SLayerBehaviorConfiguration::TypeInfo = ZHMTypeInfo("SLayerBehaviorConfiguration", sizeof(SLayerBehaviorConfiguration), alignof(SLayerBehaviorConfiguration), SLayerBehaviorConfiguration::WriteJson, SLayerBehaviorConfiguration::WriteSimpleJson, SLayerBehaviorConfiguration::FromSimpleJson);

void SLayerBehaviorConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLayerBehaviorConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bTrigger") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTrigger;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollector") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCollector;
	p_Stream << "}";

	p_Stream << "}";
}

void SLayerBehaviorConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLayerBehaviorConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bTrigger") << ":";
	p_Stream << s_Object->m_bTrigger;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollector") << ":";
	p_Stream << s_Object->m_bCollector;

	p_Stream << "}";
}

void SLayerBehaviorConfiguration::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLayerBehaviorConfiguration s_Object;

	s_Object.m_bTrigger = bool(p_Document["m_bTrigger"]);

	s_Object.m_bCollector = bool(p_Document["m_bCollector"]);

	*reinterpret_cast<SLayerBehaviorConfiguration*>(p_Target) = s_Object;
}

void SLayerBehaviorConfiguration::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZAMDEvent::TypeInfo = ZHMTypeInfo("ZAMDEvent", sizeof(ZAMDEvent), alignof(ZAMDEvent), ZAMDEvent::WriteJson, ZAMDEvent::WriteSimpleJson, ZAMDEvent::FromSimpleJson);

void ZAMDEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEventID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStartFraction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_customData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZAMDEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << s_Object->m_nEventID;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartFraction") << ":";
	p_Stream << s_Object->m_fStartFraction;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_customData, p_Stream);

	p_Stream << "}";
}

void ZAMDEvent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAMDEvent s_Object;

	s_Object.m_nEventID = static_cast<uint32>(int64_t(p_Document["m_nEventID"]));

	s_Object.m_fStartFraction = static_cast<float32>(double(p_Document["m_fStartFraction"]));

	s_Object.m_fDuration = static_cast<float32>(double(p_Document["m_fDuration"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_customData"], &s_Item);
		s_Object.m_customData = s_Item;
	}

	*reinterpret_cast<ZAMDEvent*>(p_Target) = s_Object;
}

void ZAMDEvent::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_customData.Serialize(p_Serializer, p_OwnOffset + offsetof(ZAMDEvent, m_customData));}

ZHMTypeInfo ZAMDEventTrack::TypeInfo = ZHMTypeInfo("ZAMDEventTrack", sizeof(ZAMDEventTrack), alignof(ZAMDEventTrack), ZAMDEventTrack::WriteJson, ZAMDEventTrack::WriteSimpleJson, ZAMDEventTrack::FromSimpleJson);

void ZAMDEventTrack::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDEventTrack*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_events") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_events.size(); ++i)
	{
		auto& s_Item = s_Object->m_events[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZAMDEvent") << "," << JsonStr("$val") << ":";
		ZAMDEvent::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_events.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void ZAMDEventTrack::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDEventTrack*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_events") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_events.size(); ++i)
	{
		auto& s_Item = s_Object->m_events[i];
		ZAMDEvent::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_events.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZAMDEventTrack::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAMDEventTrack s_Object;

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_events"])
	{
		ZAMDEvent s_ArrayItem;
		ZAMDEvent::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_events.push_back(s_ArrayItem);
	}

	*reinterpret_cast<ZAMDEventTrack*>(p_Target) = s_Object;
}

void ZAMDEventTrack::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sName.Serialize(p_Serializer, p_OwnOffset + offsetof(ZAMDEventTrack, m_sName));	m_events.Serialize(p_Serializer, p_OwnOffset + offsetof(ZAMDEventTrack, m_events));}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector2", sizeof(SMathMultiplyDivideSaveData_SVector2), alignof(SMathMultiplyDivideSaveData_SVector2), SMathMultiplyDivideSaveData_SVector2::WriteJson, SMathMultiplyDivideSaveData_SVector2::WriteSimpleJson, SMathMultiplyDivideSaveData_SVector2::FromSimpleJson);

void SMathMultiplyDivideSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultiplyDivideSaveData_SVector2 s_Object;

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	s_Object.m_bDivide = bool(p_Document["m_bDivide"]);

	*reinterpret_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathMultiplyDivideSaveData_SVector2::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fA.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector2, m_fA));	m_fB.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector2, m_fB));}

ZHMTypeInfo SMathMultipliesSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector2", sizeof(SMathMultipliesSaveData_SVector2), alignof(SMathMultipliesSaveData_SVector2), SMathMultipliesSaveData_SVector2::WriteJson, SMathMultipliesSaveData_SVector2::WriteSimpleJson, SMathMultipliesSaveData_SVector2::FromSimpleJson);

void SMathMultipliesSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_SVector2") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_SVector2::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_SVector2::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultipliesSaveData_SVector2 s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathMultiplyDivideSaveData_SVector2 s_ArrayItem;
		SMathMultiplyDivideSaveData_SVector2::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathMultipliesSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathMultipliesSaveData_SVector2::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector2, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector2, m_aData));}

ZHMTypeInfo ZRayQueryInput::TypeInfo = ZHMTypeInfo("ZRayQueryInput", sizeof(ZRayQueryInput), alignof(ZRayQueryInput), ZRayQueryInput::WriteJson, ZRayQueryInput::WriteSimpleJson, ZRayQueryInput::FromSimpleJson);

void ZRayQueryInput::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRayQueryInput*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZRayQueryInput::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZRayQueryInput*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZRayQueryInput::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZRayQueryInput s_Object;

	*reinterpret_cast<ZRayQueryInput*>(p_Target) = s_Object;
}

void ZRayQueryInput::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SContextActionSaveData::TypeInfo = ZHMTypeInfo("SContextActionSaveData", sizeof(SContextActionSaveData), alignof(SContextActionSaveData), SContextActionSaveData::WriteJson, SContextActionSaveData::WriteSimpleJson, SContextActionSaveData::FromSimpleJson);

void SContextActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContextActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShouldShow;
	p_Stream << "}";

	p_Stream << "}";
}

void SContextActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContextActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggered") << ":";
	p_Stream << s_Object->m_bTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldShow") << ":";
	p_Stream << s_Object->m_bShouldShow;

	p_Stream << "}";
}

void SContextActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContextActionSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bTriggered = bool(p_Document["m_bTriggered"]);

	s_Object.m_bShouldShow = bool(p_Document["m_bShouldShow"]);

	*reinterpret_cast<SContextActionSaveData*>(p_Target) = s_Object;
}

void SContextActionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZResourceID::TypeInfo = ZHMTypeInfo("ZResourceID", sizeof(ZResourceID), alignof(ZResourceID), ZResourceID::WriteJson, ZResourceID::WriteSimpleJson, ZResourceID::FromSimpleJson);

void ZResourceID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZResourceID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_uri") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_uri);
	p_Stream << "}";

	p_Stream << "}";
}

void ZResourceID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZResourceID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_uri") << ":";
	p_Stream << JsonStr(s_Object->m_uri);

	p_Stream << "}";
}

void ZResourceID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZResourceID s_Object;

	s_Object.m_uri = std::string_view(p_Document["m_uri"]);

	*reinterpret_cast<ZResourceID*>(p_Target) = s_Object;
}

void ZResourceID::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_uri.Serialize(p_Serializer, p_OwnOffset + offsetof(ZResourceID, m_uri));}

ZHMTypeInfo SAudioMemoryMonitorEntry::TypeInfo = ZHMTypeInfo("SAudioMemoryMonitorEntry", sizeof(SAudioMemoryMonitorEntry), alignof(SAudioMemoryMonitorEntry), SAudioMemoryMonitorEntry::WriteJson, SAudioMemoryMonitorEntry::WriteSimpleJson, SAudioMemoryMonitorEntry::FromSimpleJson);

void SAudioMemoryMonitorEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioMemoryMonitorEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("shortId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->shortId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("size") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->size;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->references.size(); ++i)
	{
		auto& s_Item = s_Object->references[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->references.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAudioMemoryMonitorEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioMemoryMonitorEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("shortId") << ":";
	p_Stream << s_Object->shortId;
	p_Stream << ",";

	p_Stream << JsonStr("size") << ":";
	p_Stream << s_Object->size;
	p_Stream << ",";

	p_Stream << JsonStr("references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->references.size(); ++i)
	{
		auto& s_Item = s_Object->references[i];
		ZResourceID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->references.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAudioMemoryMonitorEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioMemoryMonitorEntry s_Object;

	s_Object.shortId = static_cast<uint32>(int64_t(p_Document["shortId"]));

	s_Object.size = static_cast<uint32>(int64_t(p_Document["size"]));

	for (simdjson::ondemand::value s_Item : p_Document["references"])
	{
		ZResourceID s_ArrayItem;
		ZResourceID::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.references.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SAudioMemoryMonitorEntry*>(p_Target) = s_Object;
}

void SAudioMemoryMonitorEntry::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	references.Serialize(p_Serializer, p_OwnOffset + offsetof(SAudioMemoryMonitorEntry, references));}

ZHMTypeInfo SActorThrowSaveData::TypeInfo = ZHMTypeInfo("SActorThrowSaveData", sizeof(SActorThrowSaveData), alignof(SActorThrowSaveData), SActorThrowSaveData::WriteJson, SActorThrowSaveData::WriteSimpleJson, SActorThrowSaveData::FromSimpleJson);

void SActorThrowSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorThrowSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vStartPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vStartPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vEndPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vEndPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vItemVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vItemVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistance;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorThrowSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorThrowSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_vStartPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vStartPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vEndPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vEndPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vItemVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_vItemVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << s_Object->m_fDistance;

	p_Stream << "}";
}

void SActorThrowSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorThrowSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vStartPosition"], &s_Item);
		s_Object.m_vStartPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vEndPosition"], &s_Item);
		s_Object.m_vEndPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vItemVelocity"], &s_Item);
		s_Object.m_vItemVelocity = s_Item;
	}

	s_Object.m_fDistance = static_cast<float32>(double(p_Document["m_fDistance"]));

	*reinterpret_cast<SActorThrowSaveData*>(p_Target) = s_Object;
}

void SActorThrowSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vStartPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorThrowSaveData, m_vStartPosition));	m_vEndPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorThrowSaveData, m_vEndPosition));	m_vItemVelocity.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorThrowSaveData, m_vItemVelocity));}

ZHMTypeInfo ZSituationOrder::TypeInfo = ZHMTypeInfo("ZSituationOrder", sizeof(ZSituationOrder), alignof(ZSituationOrder), ZSituationOrder::WriteJson, ZSituationOrder::WriteSimpleJson, ZSituationOrder::FromSimpleJson);

void ZSituationOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSituationOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSituationOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSituationOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZSituationOrder::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSituationOrder s_Object;

	*reinterpret_cast<ZSituationOrder*>(p_Target) = s_Object;
}

void ZSituationOrder::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo BoneId::TypeInfo = ZHMTypeInfo("BoneId", sizeof(BoneId), alignof(BoneId), BoneId::WriteJson, BoneId::WriteSimpleJson, BoneId::FromSimpleJson);

void BoneId::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<BoneId*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void BoneId::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<BoneId*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void BoneId::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	BoneId s_Object;

	*reinterpret_cast<BoneId*>(p_Target) = s_Object;
}

void BoneId::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SFSMSaveData::TypeInfo = ZHMTypeInfo("SFSMSaveData", sizeof(SFSMSaveData), alignof(SFSMSaveData), SFSMSaveData::WriteJson, SFSMSaveData::WriteSimpleJson, SFSMSaveData::FromSimpleJson);

void SFSMSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFSMSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eStateStatus") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EFSMStateStatus") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStateStatus) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EFSMStateStatus", static_cast<int>(s_Object->m_eStateStatus))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_state;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_prevState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_prevState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tCurrentStateEnterTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tCurrentStateEnterTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SFSMSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFSMSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eStateStatus") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EFSMStateStatus", static_cast<int>(s_Object->m_eStateStatus)));
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << s_Object->m_state;
	p_Stream << ",";

	p_Stream << JsonStr("m_prevState") << ":";
	p_Stream << s_Object->m_prevState;
	p_Stream << ",";

	p_Stream << JsonStr("m_tCurrentStateEnterTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tCurrentStateEnterTime, p_Stream);

	p_Stream << "}";
}

void SFSMSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFSMSaveData s_Object;

	s_Object.m_eStateStatus = static_cast<EFSMStateStatus>(ZHMEnums::GetEnumValueByName("EFSMStateStatus", std::string_view(p_Document["m_eStateStatus"])));

	s_Object.m_state = static_cast<int32>(int64_t(p_Document["m_state"]));

	s_Object.m_prevState = static_cast<int32>(int64_t(p_Document["m_prevState"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tCurrentStateEnterTime"], &s_Item);
		s_Object.m_tCurrentStateEnterTime = s_Item;
	}

	*reinterpret_cast<SFSMSaveData*>(p_Target) = s_Object;
}

void SFSMSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tCurrentStateEnterTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SFSMSaveData, m_tCurrentStateEnterTime));}

ZHMTypeInfo SGetHelpGroupSaveData::TypeInfo = ZHMTypeInfo("SGetHelpGroupSaveData", sizeof(SGetHelpGroupSaveData), alignof(SGetHelpGroupSaveData), SGetHelpGroupSaveData::WriteJson, SGetHelpGroupSaveData::WriteSimpleJson, SGetHelpGroupSaveData::FromSimpleJson);

void SGetHelpGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vLastKnownTargetPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vLastKnownTargetPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rReturnNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rReturnNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_blocked") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_blocked.size(); ++i)
	{
		auto& s_Item = s_Object->m_blocked[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_blocked.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportingToHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReportingToHitman;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStartedReportDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStartedReportDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMultipleBodies") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMultipleBodies;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGetHelpOrderCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGetHelpOrderCompleted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDoneReporting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDoneReporting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tGetHelpCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tGetHelpCompleted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pReporter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pReporter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IllegalItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IllegalItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_additionalGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_additionalGuards.size(); ++i)
	{
		auto& s_Item = s_Object->m_additionalGuards[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_additionalGuards.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGetHelpGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vLastKnownTargetPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vLastKnownTargetPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rReturnNode") << ":";
	p_Stream << s_Object->m_rReturnNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_blocked") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_blocked.size(); ++i)
	{
		auto& s_Item = s_Object->m_blocked[i];
		p_Stream << s_Item;

		if (i < s_Object->m_blocked.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportingToHitman") << ":";
	p_Stream << s_Object->m_bReportingToHitman;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStartedReportDialog") << ":";
	p_Stream << s_Object->m_bStartedReportDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMultipleBodies") << ":";
	p_Stream << s_Object->m_bMultipleBodies;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGetHelpOrderCompleted") << ":";
	p_Stream << s_Object->m_bGetHelpOrderCompleted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDoneReporting") << ":";
	p_Stream << s_Object->m_bDoneReporting;
	p_Stream << ",";

	p_Stream << JsonStr("m_tGetHelpCompleted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tGetHelpCompleted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type)));
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_pReporter") << ":";
	p_Stream << s_Object->m_pReporter;
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuard") << ":";
	p_Stream << s_Object->m_pGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_IllegalItem") << ":";
	p_Stream << s_Object->m_IllegalItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_additionalGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_additionalGuards.size(); ++i)
	{
		auto& s_Item = s_Object->m_additionalGuards[i];
		p_Stream << s_Item;

		if (i < s_Object->m_additionalGuards.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGetHelpGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGetHelpGroupSaveData s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vLastKnownTargetPosition"], &s_Item);
		s_Object.m_vLastKnownTargetPosition = s_Item;
	}

	s_Object.m_rReturnNode = static_cast<uint16>(int64_t(p_Document["m_rReturnNode"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_blocked"])
	{
		s_Object.m_blocked.push_back(static_cast<uint16>(int64_t(s_Item)));
	}

	s_Object.m_bReportingToHitman = bool(p_Document["m_bReportingToHitman"]);

	s_Object.m_bStartedReportDialog = bool(p_Document["m_bStartedReportDialog"]);

	s_Object.m_bMultipleBodies = bool(p_Document["m_bMultipleBodies"]);

	s_Object.m_bGetHelpOrderCompleted = bool(p_Document["m_bGetHelpOrderCompleted"]);

	s_Object.m_bDoneReporting = bool(p_Document["m_bDoneReporting"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tGetHelpCompleted"], &s_Item);
		s_Object.m_tGetHelpCompleted = s_Item;
	}

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_type = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_type"])));

	s_Object.m_target = static_cast<uint32>(int64_t(p_Document["m_target"]));

	s_Object.m_pReporter = static_cast<uint32>(int64_t(p_Document["m_pReporter"]));

	s_Object.m_pGuard = static_cast<uint32>(int64_t(p_Document["m_pGuard"]));

	s_Object.m_IllegalItem = static_cast<uint32>(int64_t(p_Document["m_IllegalItem"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_additionalGuards"])
	{
		s_Object.m_additionalGuards.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SGetHelpGroupSaveData*>(p_Target) = s_Object;
}

void SGetHelpGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vLastKnownTargetPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_vLastKnownTargetPosition));	m_blocked.Serialize(p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_blocked));	m_tGetHelpCompleted.Serialize(p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_tGetHelpCompleted));	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_fsmState));	m_additionalGuards.Serialize(p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_additionalGuards));}

ZHMTypeInfo ZER64::TypeInfo = ZHMTypeInfo("ZER64", sizeof(ZER64), alignof(ZER64), ZER64::WriteJson, ZER64::WriteSimpleJson, ZER64::FromSimpleJson);

void ZER64::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZER64*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);
	p_Stream << "}";

	p_Stream << "}";
}

void ZER64::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZER64*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);

	p_Stream << "}";
}

void ZER64::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZER64 s_Object;

	s_Object.m_nEntityID = uint64(p_Document["m_nEntityID"]);

	s_Object.m_sExposedEntity = std::string_view(p_Document["m_sExposedEntity"]);

	*reinterpret_cast<ZER64*>(p_Target) = s_Object;
}

void ZER64::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sExposedEntity.Serialize(p_Serializer, p_OwnOffset + offsetof(ZER64, m_sExposedEntity));}

ZHMTypeInfo ZScopedER64::TypeInfo = ZHMTypeInfo("ZScopedER64", sizeof(ZScopedER64), alignof(ZScopedER64), ZScopedER64::WriteJson, ZScopedER64::WriteSimpleJson, ZScopedER64::FromSimpleJson);

void ZScopedER64::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZScopedER64*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_er64") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZER64") << "," << JsonStr("$val") << ":";
	ZER64::WriteJson(&s_Object->m_er64, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aScopePath[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void ZScopedER64::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZScopedER64*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_er64") << ":";
	ZER64::WriteSimpleJson(&s_Object->m_er64, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aScopePath[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZScopedER64::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZScopedER64 s_Object;

	{
		ZER64 s_Item;
		ZER64::FromSimpleJson(p_Document["m_er64"], &s_Item);
		s_Object.m_er64 = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aScopePath"])
	{
		s_Object.m_aScopePath.push_back(uint64(s_Item));
	}

	*reinterpret_cast<ZScopedER64*>(p_Target) = s_Object;
}

void ZScopedER64::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_er64.Serialize(p_Serializer, p_OwnOffset + offsetof(ZScopedER64, m_er64));	m_aScopePath.Serialize(p_Serializer, p_OwnOffset + offsetof(ZScopedER64, m_aScopePath));}

ZHMTypeInfo SShotListenerSaveData::TypeInfo = ZHMTypeInfo("SShotListenerSaveData", sizeof(SShotListenerSaveData), alignof(SShotListenerSaveData), SShotListenerSaveData::WriteJson, SShotListenerSaveData::WriteSimpleJson, SShotListenerSaveData::FromSimpleJson);

void SShotListenerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SShotListenerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNPCShotProcessed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNPCShotProcessed;
	p_Stream << "}";

	p_Stream << "}";
}

void SShotListenerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SShotListenerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNPCShotProcessed") << ":";
	p_Stream << s_Object->m_bNPCShotProcessed;

	p_Stream << "}";
}

void SShotListenerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SShotListenerSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bNPCShotProcessed = bool(p_Document["m_bNPCShotProcessed"]);

	*reinterpret_cast<SShotListenerSaveData*>(p_Target) = s_Object;
}

void SShotListenerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SShotListenersSaveData::TypeInfo = ZHMTypeInfo("SShotListenersSaveData", sizeof(SShotListenersSaveData), alignof(SShotListenersSaveData), SShotListenersSaveData::WriteJson, SShotListenersSaveData::WriteSimpleJson, SShotListenersSaveData::FromSimpleJson);

void SShotListenersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SShotListenersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SShotListenerSaveData") << "," << JsonStr("$val") << ":";
		SShotListenerSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SShotListenersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SShotListenersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SShotListenerSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SShotListenersSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SShotListenersSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SShotListenerSaveData s_ArrayItem;
		SShotListenerSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SShotListenersSaveData*>(p_Target) = s_Object;
}

void SShotListenersSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SShotListenersSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SShotListenersSaveData, m_aData));}

ZHMTypeInfo SVariantStruct::TypeInfo = ZHMTypeInfo("SVariantStruct", sizeof(SVariantStruct), alignof(SVariantStruct), SVariantStruct::WriteJson, SVariantStruct::WriteSimpleJson, SVariantStruct::FromSimpleJson);

void SVariantStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVariantStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Data, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SVariantStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVariantStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Data") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Data, p_Stream);

	p_Stream << "}";
}

void SVariantStruct::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVariantStruct s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Data"], &s_Item);
		s_Object.m_Data = s_Item;
	}

	*reinterpret_cast<SVariantStruct*>(p_Target) = s_Object;
}

void SVariantStruct::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_Data.Serialize(p_Serializer, p_OwnOffset + offsetof(SVariantStruct, m_Data));}

ZHMTypeInfo SBehaviorTreeEntityReference::TypeInfo = ZHMTypeInfo("SBehaviorTreeEntityReference", sizeof(SBehaviorTreeEntityReference), alignof(SBehaviorTreeEntityReference), SBehaviorTreeEntityReference::WriteJson, SBehaviorTreeEntityReference::WriteSimpleJson, SBehaviorTreeEntityReference::FromSimpleJson);

void SBehaviorTreeEntityReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEntityReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bList") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bList;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEntityReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEntityReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bList") << ":";
	p_Stream << s_Object->m_bList;
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);

	p_Stream << "}";
}

void SBehaviorTreeEntityReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeEntityReference s_Object;

	s_Object.m_bList = bool(p_Document["m_bList"]);

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	*reinterpret_cast<SBehaviorTreeEntityReference*>(p_Target) = s_Object;
}

void SBehaviorTreeEntityReference::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeEntityReference, m_sName));}

ZHMTypeInfo SBehaviorTreeInfo::TypeInfo = ZHMTypeInfo("SBehaviorTreeInfo", sizeof(SBehaviorTreeInfo), alignof(SBehaviorTreeInfo), SBehaviorTreeInfo::WriteJson, SBehaviorTreeInfo::WriteSimpleJson, SBehaviorTreeInfo::FromSimpleJson);

void SBehaviorTreeInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_references.size(); ++i)
	{
		auto& s_Item = s_Object->m_references[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBehaviorTreeEntityReference") << "," << JsonStr("$val") << ":";
		SBehaviorTreeEntityReference::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_references.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_inputPinConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_inputPinConditions.size(); ++i)
	{
		auto& s_Item = s_Object->m_inputPinConditions[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBehaviorTreeInputPinCondition") << "," << JsonStr("$val") << ":";
		SBehaviorTreeInputPinCondition::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_inputPinConditions.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_references.size(); ++i)
	{
		auto& s_Item = s_Object->m_references[i];
		SBehaviorTreeEntityReference::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_references.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_inputPinConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_inputPinConditions.size(); ++i)
	{
		auto& s_Item = s_Object->m_inputPinConditions[i];
		SBehaviorTreeInputPinCondition::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_inputPinConditions.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeInfo s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_references"])
	{
		SBehaviorTreeEntityReference s_ArrayItem;
		SBehaviorTreeEntityReference::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_references.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_inputPinConditions"])
	{
		SBehaviorTreeInputPinCondition s_ArrayItem;
		SBehaviorTreeInputPinCondition::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_inputPinConditions.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SBehaviorTreeInfo*>(p_Target) = s_Object;
}

void SBehaviorTreeInfo::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_references.Serialize(p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeInfo, m_references));	m_inputPinConditions.Serialize(p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeInfo, m_inputPinConditions));}

ZHMTypeInfo SComboDeviceBinding::TypeInfo = ZHMTypeInfo("SComboDeviceBinding", sizeof(SComboDeviceBinding), alignof(SComboDeviceBinding), SComboDeviceBinding::WriteJson, SComboDeviceBinding::WriteSimpleJson, SComboDeviceBinding::FromSimpleJson);

void SComboDeviceBinding::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SComboDeviceBinding*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->type;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("button") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->button;
	p_Stream << "}";

	p_Stream << "}";
}

void SComboDeviceBinding::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SComboDeviceBinding*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << s_Object->type;
	p_Stream << ",";

	p_Stream << JsonStr("button") << ":";
	p_Stream << s_Object->button;

	p_Stream << "}";
}

void SComboDeviceBinding::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SComboDeviceBinding s_Object;

	s_Object.type = static_cast<uint32>(int64_t(p_Document["type"]));

	s_Object.button = static_cast<uint32>(int64_t(p_Document["button"]));

	*reinterpret_cast<SComboDeviceBinding*>(p_Target) = s_Object;
}

void SComboDeviceBinding::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMatrix33::TypeInfo = ZHMTypeInfo("SMatrix33", sizeof(SMatrix33), alignof(SMatrix33), SMatrix33::WriteJson, SMatrix33::WriteSimpleJson, SMatrix33::FromSimpleJson);

void SMatrix33::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix33*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("XAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->XAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->YAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->ZAxis, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix33::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix33*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("XAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->XAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->YAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->ZAxis, p_Stream);

	p_Stream << "}";
}

void SMatrix33::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix33 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["XAxis"], &s_Item);
		s_Object.XAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["YAxis"], &s_Item);
		s_Object.YAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["ZAxis"], &s_Item);
		s_Object.ZAxis = s_Item;
	}

	*reinterpret_cast<SMatrix33*>(p_Target) = s_Object;
}

void SMatrix33::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	XAxis.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix33, XAxis));	YAxis.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix33, YAxis));	ZAxis.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix33, ZAxis));}

ZHMTypeInfo SCrowdBodySaveData::TypeInfo = ZHMTypeInfo("SCrowdBodySaveData", sizeof(SCrowdBodySaveData), alignof(SCrowdBodySaveData), SCrowdBodySaveData::WriteJson, SCrowdBodySaveData::WriteSimpleJson, SCrowdBodySaveData::FromSimpleJson);

void SCrowdBodySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdBodySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pCorpseBodybagEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pCorpseBodybagEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCrowdEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCrowdEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iActorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iActorIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rPerceptibleEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rPerceptibleEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aKnownBy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownBy.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKnownBy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aKnownBy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bManaged") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bManaged;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBagSharedKnowledge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBagSharedKnowledge;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdBodySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdBodySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pCorpseBodybagEntity") << ":";
	p_Stream << s_Object->m_pCorpseBodybagEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCrowdEntity") << ":";
	p_Stream << s_Object->m_rCrowdEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_iActorIndex") << ":";
	p_Stream << s_Object->m_iActorIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_rPerceptibleEntity") << ":";
	p_Stream << s_Object->m_rPerceptibleEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_aKnownBy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownBy.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKnownBy[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aKnownBy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bManaged") << ":";
	p_Stream << s_Object->m_bManaged;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBagSharedKnowledge") << ":";
	p_Stream << s_Object->m_rBagSharedKnowledge;

	p_Stream << "}";
}

void SCrowdBodySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdBodySaveData s_Object;

	s_Object.m_pCorpseBodybagEntity = static_cast<uint32>(int64_t(p_Document["m_pCorpseBodybagEntity"]));

	s_Object.m_rCrowdEntity = static_cast<uint32>(int64_t(p_Document["m_rCrowdEntity"]));

	s_Object.m_iActorIndex = static_cast<uint16>(int64_t(p_Document["m_iActorIndex"]));

	s_Object.m_rPerceptibleEntity = static_cast<uint32>(int64_t(p_Document["m_rPerceptibleEntity"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aKnownBy"])
	{
		s_Object.m_aKnownBy.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tStart"], &s_Item);
		s_Object.m_tStart = s_Item;
	}

	s_Object.m_bManaged = bool(p_Document["m_bManaged"]);

	s_Object.m_rBagSharedKnowledge = static_cast<int32>(int64_t(p_Document["m_rBagSharedKnowledge"]));

	*reinterpret_cast<SCrowdBodySaveData*>(p_Target) = s_Object;
}

void SCrowdBodySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aKnownBy.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdBodySaveData, m_aKnownBy));	m_tStart.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdBodySaveData, m_tStart));}

ZHMTypeInfo SActorProxySaveData::TypeInfo = ZHMTypeInfo("SActorProxySaveData", sizeof(SActorProxySaveData), alignof(SActorProxySaveData), SActorProxySaveData::WriteJson, SActorProxySaveData::WriteSimpleJson, SActorProxySaveData::FromSimpleJson);

void SActorProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorProxySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorProxySaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorProxySaveData*>(p_Target) = s_Object;
}

void SActorProxySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorProxiesSaveData::TypeInfo = ZHMTypeInfo("SActorProxiesSaveData", sizeof(SActorProxiesSaveData), alignof(SActorProxiesSaveData), SActorProxiesSaveData::WriteJson, SActorProxiesSaveData::WriteSimpleJson, SActorProxiesSaveData::FromSimpleJson);

void SActorProxiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProxiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorProxySaveData") << "," << JsonStr("$val") << ":";
		SActorProxySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorProxiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProxiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SActorProxySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorProxiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorProxiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SActorProxySaveData s_ArrayItem;
		SActorProxySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActorProxiesSaveData*>(p_Target) = s_Object;
}

void SActorProxiesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorProxiesSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorProxiesSaveData, m_aData));}

ZHMTypeInfo SDramaSituationSaveData::TypeInfo = ZHMTypeInfo("SDramaSituationSaveData", sizeof(SDramaSituationSaveData), alignof(SDramaSituationSaveData), SDramaSituationSaveData::WriteJson, SDramaSituationSaveData::WriteSimpleJson, SDramaSituationSaveData::FromSimpleJson);

void SDramaSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsTerminated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bProvidersStarted;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << s_Object->m_bIsTerminated;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << s_Object->m_bProvidersStarted;

	p_Stream << "}";
}

void SDramaSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaSituationSaveData s_Object;

	s_Object.m_bSituationRunning = bool(p_Document["m_bSituationRunning"]);

	s_Object.m_bIsTerminated = bool(p_Document["m_bIsTerminated"]);

	s_Object.m_nPriorityModifier = static_cast<float32>(double(p_Document["m_nPriorityModifier"]));

	s_Object.m_nCurrentDrama = static_cast<int32>(int64_t(p_Document["m_nCurrentDrama"]));

	s_Object.m_bProvidersStarted = bool(p_Document["m_bProvidersStarted"]);

	*reinterpret_cast<SDramaSituationSaveData*>(p_Target) = s_Object;
}

void SDramaSituationSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDramaSituationCollectionSaveData::TypeInfo = ZHMTypeInfo("SDramaSituationCollectionSaveData", sizeof(SDramaSituationCollectionSaveData), alignof(SDramaSituationCollectionSaveData), SDramaSituationCollectionSaveData::WriteJson, SDramaSituationCollectionSaveData::WriteSimpleJson, SDramaSituationCollectionSaveData::FromSimpleJson);

void SDramaSituationCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaSituationCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaSituationSaveData") << "," << JsonStr("$val") << ":";
		SDramaSituationSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDramaSituationCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaSituationCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDramaSituationSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDramaSituationCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaSituationCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aStates"])
	{
		SDramaSituationSaveData s_ArrayItem;
		SDramaSituationSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aStates.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SDramaSituationCollectionSaveData*>(p_Target) = s_Object;
}

void SDramaSituationCollectionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SDramaSituationCollectionSaveData, m_aEntities));	m_aStates.Serialize(p_Serializer, p_OwnOffset + offsetof(SDramaSituationCollectionSaveData, m_aStates));}

ZHMTypeInfo SMovementLadderSaveData::TypeInfo = ZHMTypeInfo("SMovementLadderSaveData", sizeof(SMovementLadderSaveData), alignof(SMovementLadderSaveData), SMovementLadderSaveData::WriteJson, SMovementLadderSaveData::WriteSimpleJson, SMovementLadderSaveData::FromSimpleJson);

void SMovementLadderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementLadderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rLadder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rLadder;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementLadderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementLadderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rLadder") << ":";
	p_Stream << s_Object->m_rLadder;

	p_Stream << "}";
}

void SMovementLadderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementLadderSaveData s_Object;

	s_Object.m_rLadder = static_cast<uint32>(int64_t(p_Document["m_rLadder"]));

	*reinterpret_cast<SMovementLadderSaveData*>(p_Target) = s_Object;
}

void SMovementLadderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAIModifierServiceActorSaveData::TypeInfo = ZHMTypeInfo("SAIModifierServiceActorSaveData", sizeof(SAIModifierServiceActorSaveData), alignof(SAIModifierServiceActorSaveData), SAIModifierServiceActorSaveData::WriteJson, SAIModifierServiceActorSaveData::WriteSimpleJson, SAIModifierServiceActorSaveData::FromSimpleJson);

void SAIModifierServiceActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIModifierServiceActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActorRef;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsVolumeUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNeedsVolumeUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsKnowledgeUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNeedsKnowledgeUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModVolume") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModVolume;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModRole") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModRole;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModOutfit;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOverride") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModOverride;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModStatus") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModStatus;
	p_Stream << "}";

	p_Stream << "}";
}

void SAIModifierServiceActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIModifierServiceActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << s_Object->m_rActorRef;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsVolumeUpdate") << ":";
	p_Stream << s_Object->m_bNeedsVolumeUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsKnowledgeUpdate") << ":";
	p_Stream << s_Object->m_bNeedsKnowledgeUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModVolume") << ":";
	p_Stream << s_Object->m_uiModVolume;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModBehavior") << ":";
	p_Stream << s_Object->m_uiModBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModRole") << ":";
	p_Stream << s_Object->m_uiModRole;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModItem") << ":";
	p_Stream << s_Object->m_uiModItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModSituation") << ":";
	p_Stream << s_Object->m_uiModSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOutfit") << ":";
	p_Stream << s_Object->m_uiModOutfit;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOverride") << ":";
	p_Stream << s_Object->m_uiModOverride;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModStatus") << ":";
	p_Stream << s_Object->m_uiModStatus;

	p_Stream << "}";
}

void SAIModifierServiceActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIModifierServiceActorSaveData s_Object;

	s_Object.m_rActorRef = static_cast<uint32>(int64_t(p_Document["m_rActorRef"]));

	s_Object.m_bNeedsVolumeUpdate = bool(p_Document["m_bNeedsVolumeUpdate"]);

	s_Object.m_bNeedsKnowledgeUpdate = bool(p_Document["m_bNeedsKnowledgeUpdate"]);

	s_Object.m_uiModVolume = static_cast<uint32>(int64_t(p_Document["m_uiModVolume"]));

	s_Object.m_uiModBehavior = static_cast<uint32>(int64_t(p_Document["m_uiModBehavior"]));

	s_Object.m_uiModRole = static_cast<uint32>(int64_t(p_Document["m_uiModRole"]));

	s_Object.m_uiModItem = static_cast<uint32>(int64_t(p_Document["m_uiModItem"]));

	s_Object.m_uiModSituation = static_cast<uint32>(int64_t(p_Document["m_uiModSituation"]));

	s_Object.m_uiModOutfit = static_cast<uint32>(int64_t(p_Document["m_uiModOutfit"]));

	s_Object.m_uiModOverride = static_cast<uint32>(int64_t(p_Document["m_uiModOverride"]));

	s_Object.m_uiModStatus = static_cast<uint32>(int64_t(p_Document["m_uiModStatus"]));

	*reinterpret_cast<SAIModifierServiceActorSaveData*>(p_Target) = s_Object;
}

void SAIModifierServiceActorSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAIModifierServiceSaveData::TypeInfo = ZHMTypeInfo("SAIModifierServiceSaveData", sizeof(SAIModifierServiceSaveData), alignof(SAIModifierServiceSaveData), SAIModifierServiceSaveData::WriteJson, SAIModifierServiceSaveData::WriteSimpleJson, SAIModifierServiceSaveData::FromSimpleJson);

void SAIModifierServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIModifierServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bFullVolumeUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFullVolumeUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAIModifierServiceActorSaveData") << "," << JsonStr("$val") << ":";
		SAIModifierServiceActorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAIModifierServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIModifierServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bFullVolumeUpdate") << ":";
	p_Stream << s_Object->m_bFullVolumeUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		SAIModifierServiceActorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAIModifierServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIModifierServiceSaveData s_Object;

	s_Object.m_bFullVolumeUpdate = bool(p_Document["m_bFullVolumeUpdate"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_aActors"])
	{
		SAIModifierServiceActorSaveData s_ArrayItem;
		SAIModifierServiceActorSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aActors.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SAIModifierServiceSaveData*>(p_Target) = s_Object;
}

void SAIModifierServiceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aActors.Serialize(p_Serializer, p_OwnOffset + offsetof(SAIModifierServiceSaveData, m_aActors));}

ZHMTypeInfo ISoundGateController::TypeInfo = ZHMTypeInfo("ISoundGateController", sizeof(ISoundGateController), alignof(ISoundGateController), ISoundGateController::WriteJson, ISoundGateController::WriteSimpleJson, ISoundGateController::FromSimpleJson);

void ISoundGateController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundGateController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundGateController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundGateController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISoundGateController::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISoundGateController s_Object;

	*reinterpret_cast<ISoundGateController*>(p_Target) = s_Object;
}

void ISoundGateController::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZDialogEventItemTypedIndex::TypeInfo = ZHMTypeInfo("ZDialogEventItemTypedIndex", sizeof(ZDialogEventItemTypedIndex), alignof(ZDialogEventItemTypedIndex), ZDialogEventItemTypedIndex::WriteJson, ZDialogEventItemTypedIndex::WriteSimpleJson, ZDialogEventItemTypedIndex::FromSimpleJson);

void ZDialogEventItemTypedIndex::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDialogEventItemTypedIndex*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZDialogEventItemTypedIndex::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZDialogEventItemTypedIndex*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZDialogEventItemTypedIndex::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZDialogEventItemTypedIndex s_Object;

	*reinterpret_cast<ZDialogEventItemTypedIndex*>(p_Target) = s_Object;
}

void ZDialogEventItemTypedIndex::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZAMDTake::TypeInfo = ZHMTypeInfo("ZAMDTake", sizeof(ZAMDTake), alignof(ZAMDTake), ZAMDTake::WriteJson, ZAMDTake::WriteSimpleJson, ZAMDTake::FromSimpleJson);

void ZAMDTake::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDTake*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eventTracks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_eventTracks.size(); ++i)
	{
		auto& s_Item = s_Object->m_eventTracks[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZAMDEventTrack") << "," << JsonStr("$val") << ":";
		ZAMDEventTrack::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_eventTracks.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_customData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSyncTrackIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSyncTrackIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void ZAMDTake::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAMDTake*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eventTracks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_eventTracks.size(); ++i)
	{
		auto& s_Item = s_Object->m_eventTracks[i];
		ZAMDEventTrack::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_eventTracks.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_customData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nSyncTrackIndex") << ":";
	p_Stream << s_Object->m_nSyncTrackIndex;

	p_Stream << "}";
}

void ZAMDTake::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAMDTake s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_eventTracks"])
	{
		ZAMDEventTrack s_ArrayItem;
		ZAMDEventTrack::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_eventTracks.push_back(s_ArrayItem);
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_customData"], &s_Item);
		s_Object.m_customData = s_Item;
	}

	s_Object.m_nSyncTrackIndex = static_cast<int32>(int64_t(p_Document["m_nSyncTrackIndex"]));

	*reinterpret_cast<ZAMDTake*>(p_Target) = s_Object;
}

void ZAMDTake::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_eventTracks.Serialize(p_Serializer, p_OwnOffset + offsetof(ZAMDTake, m_eventTracks));	m_customData.Serialize(p_Serializer, p_OwnOffset + offsetof(ZAMDTake, m_customData));}

ZHMTypeInfo SSniperScoringEvent::TypeInfo = ZHMTypeInfo("SSniperScoringEvent", sizeof(SSniperScoringEvent), alignof(SSniperScoringEvent), SSniperScoringEvent::WriteJson, SSniperScoringEvent::WriteSimpleJson, SSniperScoringEvent::FromSimpleJson);

void SSniperScoringEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSniperScoringEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_iPoints") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iPoints;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iPlayer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iPlayer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iScoringMachine") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_iScoringMachine);
	p_Stream << "}";

	p_Stream << "}";
}

void SSniperScoringEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSniperScoringEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_iPoints") << ":";
	p_Stream << s_Object->m_iPoints;
	p_Stream << ",";

	p_Stream << JsonStr("m_iPlayer") << ":";
	p_Stream << s_Object->m_iPlayer;
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_sText") << ":";
	p_Stream << JsonStr(s_Object->m_sText);
	p_Stream << ",";

	p_Stream << JsonStr("m_iType") << ":";
	p_Stream << s_Object->m_iType;
	p_Stream << ",";

	p_Stream << JsonStr("m_iScoringMachine") << ":";
	p_Stream << static_cast<int>(s_Object->m_iScoringMachine);

	p_Stream << "}";
}

void SSniperScoringEvent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSniperScoringEvent s_Object;

	s_Object.m_iPoints = static_cast<int32>(int64_t(p_Document["m_iPoints"]));

	s_Object.m_iPlayer = static_cast<int32>(int64_t(p_Document["m_iPlayer"]));

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	s_Object.m_sText = std::string_view(p_Document["m_sText"]);

	s_Object.m_iType = static_cast<int32>(int64_t(p_Document["m_iType"]));

	s_Object.m_iScoringMachine = static_cast<uint8>(int64_t(p_Document["m_iScoringMachine"]));

	*reinterpret_cast<SSniperScoringEvent*>(p_Target) = s_Object;
}

void SSniperScoringEvent::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SSniperScoringEvent, m_sName));	m_sText.Serialize(p_Serializer, p_OwnOffset + offsetof(SSniperScoringEvent, m_sText));}

ZHMTypeInfo SItemActionSaveData::TypeInfo = ZHMTypeInfo("SItemActionSaveData", sizeof(SItemActionSaveData), alignof(SItemActionSaveData), SItemActionSaveData::WriteJson, SItemActionSaveData::WriteSimpleJson, SItemActionSaveData::FromSimpleJson);

void SItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SItemActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemActionSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SItemActionSaveData*>(p_Target) = s_Object;
}

void SItemActionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZHttpUrl::TypeInfo = ZHMTypeInfo("ZHttpUrl", sizeof(ZHttpUrl), alignof(ZHttpUrl), ZHttpUrl::WriteJson, ZHttpUrl::WriteSimpleJson, ZHttpUrl::FromSimpleJson);

void ZHttpUrl::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZHttpUrl*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZHttpUrl::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZHttpUrl*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZHttpUrl::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHttpUrl s_Object;

	*reinterpret_cast<ZHttpUrl*>(p_Target) = s_Object;
}

void ZHttpUrl::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SEntityTemplateReference::TypeInfo = ZHMTypeInfo("SEntityTemplateReference", sizeof(SEntityTemplateReference), alignof(SEntityTemplateReference), SEntityTemplateReference::WriteJson, SEntityTemplateReference::WriteSimpleJson, SEntityTemplateReference::FromSimpleJson);

void SEntityTemplateReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->externalSceneIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->exposedEntity);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entityID") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneIndex") << ":";
	p_Stream << s_Object->externalSceneIndex;
	p_Stream << ",";

	p_Stream << JsonStr("entityIndex") << ":";
	p_Stream << s_Object->entityIndex;
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntity") << ":";
	p_Stream << JsonStr(s_Object->exposedEntity);

	p_Stream << "}";
}

void SEntityTemplateReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateReference s_Object;

	s_Object.entityID = uint64(p_Document["entityID"]);

	s_Object.externalSceneIndex = static_cast<int32>(int64_t(p_Document["externalSceneIndex"]));

	s_Object.entityIndex = static_cast<int32>(int64_t(p_Document["entityIndex"]));

	s_Object.exposedEntity = std::string_view(p_Document["exposedEntity"]);

	*reinterpret_cast<SEntityTemplateReference*>(p_Target) = s_Object;
}

void SEntityTemplateReference::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	exposedEntity.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplateReference, exposedEntity));}

ZHMTypeInfo SEntityTemplateProperty::TypeInfo = ZHMTypeInfo("SEntityTemplateProperty", sizeof(SEntityTemplateProperty), alignof(SEntityTemplateProperty), SEntityTemplateProperty::WriteJson, SEntityTemplateProperty::WriteSimpleJson, SEntityTemplateProperty::FromSimpleJson);

void SEntityTemplateProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nPropertyID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nPropertyID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nPropertyID") << ":";
	{
		auto s_PropertyName = ZHMProperties::PropertyToString(s_Object->nPropertyID);

		if (s_PropertyName.size() == 0)
			p_Stream << s_Object->nPropertyID;
		else
			p_Stream << JsonStr(s_PropertyName);
	}
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	ZVariant::WriteSimpleJson(&s_Object->value, p_Stream);

	p_Stream << "}";
}

void SEntityTemplateProperty::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateProperty s_Object;

	if (p_Document["nPropertyID"].type() == simdjson::ondemand::json_type::string)
		s_Object.nPropertyID = Hash::Crc32(std::string_view(p_Document["nPropertyID"]));
	else
		s_Object.nPropertyID = static_cast<uint32>(int64_t(p_Document["nPropertyID"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["value"], &s_Item);
		s_Object.value = s_Item;
	}

	*reinterpret_cast<SEntityTemplateProperty*>(p_Target) = s_Object;
}

void SEntityTemplateProperty::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	value.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplateProperty, value));}

ZHMTypeInfo SEntityTemplatePropertyOverride::TypeInfo = ZHMTypeInfo("SEntityTemplatePropertyOverride", sizeof(SEntityTemplatePropertyOverride), alignof(SEntityTemplatePropertyOverride), SEntityTemplatePropertyOverride::WriteJson, SEntityTemplatePropertyOverride::WriteSimpleJson, SEntityTemplatePropertyOverride::FromSimpleJson);

void SEntityTemplatePropertyOverride::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePropertyOverride*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("propertyOwner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->propertyOwner, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
	SEntityTemplateProperty::WriteJson(&s_Object->propertyValue, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePropertyOverride::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePropertyOverride*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("propertyOwner") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->propertyOwner, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("propertyValue") << ":";
	SEntityTemplateProperty::WriteSimpleJson(&s_Object->propertyValue, p_Stream);

	p_Stream << "}";
}

void SEntityTemplatePropertyOverride::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePropertyOverride s_Object;

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["propertyOwner"], &s_Item);
		s_Object.propertyOwner = s_Item;
	}

	{
		SEntityTemplateProperty s_Item;
		SEntityTemplateProperty::FromSimpleJson(p_Document["propertyValue"], &s_Item);
		s_Object.propertyValue = s_Item;
	}

	*reinterpret_cast<SEntityTemplatePropertyOverride*>(p_Target) = s_Object;
}

void SEntityTemplatePropertyOverride::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	propertyOwner.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyOverride, propertyOwner));	propertyValue.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyOverride, propertyValue));}

ZHMTypeInfo STimerEntitiesSaveData::TypeInfo = ZHMTypeInfo("STimerEntitiesSaveData", sizeof(STimerEntitiesSaveData), alignof(STimerEntitiesSaveData), STimerEntitiesSaveData::WriteJson, STimerEntitiesSaveData::WriteSimpleJson, STimerEntitiesSaveData::FromSimpleJson);

void STimerEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntitySaveData") << "," << JsonStr("$val") << ":";
		STimerEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STimerEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		STimerEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STimerEntitiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerEntitiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		STimerEntitySaveData s_ArrayItem;
		STimerEntitySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<STimerEntitiesSaveData*>(p_Target) = s_Object;
}

void STimerEntitiesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(STimerEntitiesSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(STimerEntitiesSaveData, m_aData));}

ZHMTypeInfo ZGuidString::TypeInfo = ZHMTypeInfo("ZGuidString", sizeof(ZGuidString), alignof(ZGuidString), ZGuidString::WriteJson, ZGuidString::WriteSimpleJson, ZGuidString::FromSimpleJson);

void ZGuidString::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuidString*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGuidString::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGuidString*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZGuidString::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGuidString s_Object;

	*reinterpret_cast<ZGuidString*>(p_Target) = s_Object;
}

void ZGuidString::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SRemoteControlReceiverSaveData::TypeInfo = ZHMTypeInfo("SRemoteControlReceiverSaveData", sizeof(SRemoteControlReceiverSaveData), alignof(SRemoteControlReceiverSaveData), SRemoteControlReceiverSaveData::WriteJson, SRemoteControlReceiverSaveData::WriteSimpleJson, SRemoteControlReceiverSaveData::FromSimpleJson);

void SRemoteControlReceiverSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRemoteControlReceiverSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReceiverActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReceiverActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << "}";

	p_Stream << "}";
}

void SRemoteControlReceiverSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRemoteControlReceiverSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bReceiverActivated") << ":";
	p_Stream << s_Object->m_bReceiverActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << s_Object->m_bDestroyed;

	p_Stream << "}";
}

void SRemoteControlReceiverSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRemoteControlReceiverSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bReceiverActivated = bool(p_Document["m_bReceiverActivated"]);

	s_Object.m_bDestroyed = bool(p_Document["m_bDestroyed"]);

	*reinterpret_cast<SRemoteControlReceiverSaveData*>(p_Target) = s_Object;
}

void SRemoteControlReceiverSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo S3rdPersonCameraSaveData::TypeInfo = ZHMTypeInfo("S3rdPersonCameraSaveData", sizeof(S3rdPersonCameraSaveData), alignof(S3rdPersonCameraSaveData), S3rdPersonCameraSaveData::WriteJson, S3rdPersonCameraSaveData::WriteSimpleJson, S3rdPersonCameraSaveData::FromSimpleJson);

void S3rdPersonCameraSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S3rdPersonCameraSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fAngleYaw") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAngleYaw;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnglePitch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAnglePitch;
	p_Stream << "}";

	p_Stream << "}";
}

void S3rdPersonCameraSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S3rdPersonCameraSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fAngleYaw") << ":";
	p_Stream << s_Object->m_fAngleYaw;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnglePitch") << ":";
	p_Stream << s_Object->m_fAnglePitch;

	p_Stream << "}";
}

void S3rdPersonCameraSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	S3rdPersonCameraSaveData s_Object;

	s_Object.m_fAngleYaw = static_cast<float32>(double(p_Document["m_fAngleYaw"]));

	s_Object.m_fAnglePitch = static_cast<float32>(double(p_Document["m_fAnglePitch"]));

	*reinterpret_cast<S3rdPersonCameraSaveData*>(p_Target) = s_Object;
}

void S3rdPersonCameraSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SChallengesSaveData::TypeInfo = ZHMTypeInfo("SChallengesSaveData", sizeof(SChallengesSaveData), alignof(SChallengesSaveData), SChallengesSaveData::WriteJson, SChallengesSaveData::WriteSimpleJson, SChallengesSaveData::FromSimpleJson);

void SChallengesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChallengesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_mChallengeStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mChallengeStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_mChallengeStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SChallengeSaveData") << "," << JsonStr("$val") << ":";
		SChallengeSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_mChallengeStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SChallengesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChallengesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_mChallengeStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mChallengeStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_mChallengeStates[i];
		SChallengeSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_mChallengeStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SChallengesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SChallengesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_mChallengeStates"])
	{
		SChallengeSaveData s_ArrayItem;
		SChallengeSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_mChallengeStates.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SChallengesSaveData*>(p_Target) = s_Object;
}

void SChallengesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_mChallengeStates.Serialize(p_Serializer, p_OwnOffset + offsetof(SChallengesSaveData, m_mChallengeStates));}

ZHMTypeInfo SBehaviorTreeEvaluationLogEntry::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLogEntry", sizeof(SBehaviorTreeEvaluationLogEntry), alignof(SBehaviorTreeEvaluationLogEntry), SBehaviorTreeEvaluationLogEntry::WriteJson, SBehaviorTreeEvaluationLogEntry::WriteSimpleJson, SBehaviorTreeEvaluationLogEntry::FromSimpleJson);

void SBehaviorTreeEvaluationLogEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nBehaviorTreeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBehaviorTreeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nConditionOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nConditionOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bResult") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bResult;
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLogEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nBehaviorTreeIndex") << ":";
	p_Stream << s_Object->m_nBehaviorTreeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nConditionOffset") << ":";
	p_Stream << s_Object->m_nConditionOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_bResult") << ":";
	p_Stream << s_Object->m_bResult;

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLogEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeEvaluationLogEntry s_Object;

	s_Object.m_nBehaviorTreeIndex = static_cast<uint32>(int64_t(p_Document["m_nBehaviorTreeIndex"]));

	s_Object.m_nConditionOffset = uint64(p_Document["m_nConditionOffset"]);

	s_Object.m_bResult = bool(p_Document["m_bResult"]);

	*reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Target) = s_Object;
}

void SBehaviorTreeEvaluationLogEntry::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SBehaviorTreeEvaluationLog::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLog", sizeof(SBehaviorTreeEvaluationLog), alignof(SBehaviorTreeEvaluationLog), SBehaviorTreeEvaluationLog::WriteJson, SBehaviorTreeEvaluationLog::WriteSimpleJson, SBehaviorTreeEvaluationLog::FromSimpleJson);

void SBehaviorTreeEvaluationLog::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_BehaviorTrees") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_BehaviorTrees.size(); ++i)
	{
		auto& s_Item = s_Object->m_BehaviorTrees[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_BehaviorTrees.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_Entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Entries.size(); ++i)
	{
		auto& s_Item = s_Object->m_Entries[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBehaviorTreeEvaluationLogEntry") << "," << JsonStr("$val") << ":";
		SBehaviorTreeEvaluationLogEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_Entries.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLog::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_BehaviorTrees") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_BehaviorTrees.size(); ++i)
	{
		auto& s_Item = s_Object->m_BehaviorTrees[i];
		ZResourceID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_BehaviorTrees.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_Entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Entries.size(); ++i)
	{
		auto& s_Item = s_Object->m_Entries[i];
		SBehaviorTreeEvaluationLogEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_Entries.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLog::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeEvaluationLog s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_BehaviorTrees"])
	{
		ZResourceID s_ArrayItem;
		ZResourceID::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_BehaviorTrees.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_Entries"])
	{
		SBehaviorTreeEvaluationLogEntry s_ArrayItem;
		SBehaviorTreeEvaluationLogEntry::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_Entries.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Target) = s_Object;
}

void SBehaviorTreeEvaluationLog::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_BehaviorTrees.Serialize(p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeEvaluationLog, m_BehaviorTrees));	m_Entries.Serialize(p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeEvaluationLog, m_Entries));}

ZHMTypeInfo SIntelDisplayInfo::TypeInfo = ZHMTypeInfo("SIntelDisplayInfo", sizeof(SIntelDisplayInfo), alignof(SIntelDisplayInfo), SIntelDisplayInfo::WriteJson, SIntelDisplayInfo::WriteSimpleJson, SIntelDisplayInfo::FromSimpleJson);

void SIntelDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("index") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->index;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("selected") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->selected;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->active;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("headline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->headline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bodyheadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->bodyheadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("text") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->text);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("img") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->img);
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("index") << ":";
	p_Stream << s_Object->index;
	p_Stream << ",";

	p_Stream << JsonStr("selected") << ":";
	p_Stream << s_Object->selected;
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << s_Object->active;
	p_Stream << ",";

	p_Stream << JsonStr("headline") << ":";
	p_Stream << JsonStr(s_Object->headline);
	p_Stream << ",";

	p_Stream << JsonStr("bodyheadline") << ":";
	p_Stream << JsonStr(s_Object->bodyheadline);
	p_Stream << ",";

	p_Stream << JsonStr("text") << ":";
	p_Stream << JsonStr(s_Object->text);
	p_Stream << ",";

	p_Stream << JsonStr("img") << ":";
	p_Stream << JsonStr(s_Object->img);

	p_Stream << "}";
}

void SIntelDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelDisplayInfo s_Object;

	s_Object.index = static_cast<int32>(int64_t(p_Document["index"]));

	s_Object.selected = bool(p_Document["selected"]);

	s_Object.active = bool(p_Document["active"]);

	s_Object.headline = std::string_view(p_Document["headline"]);

	s_Object.bodyheadline = std::string_view(p_Document["bodyheadline"]);

	s_Object.text = std::string_view(p_Document["text"]);

	s_Object.img = std::string_view(p_Document["img"]);

	*reinterpret_cast<SIntelDisplayInfo*>(p_Target) = s_Object;
}

void SIntelDisplayInfo::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	headline.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfo, headline));	bodyheadline.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfo, bodyheadline));	text.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfo, text));	img.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfo, img));}

ZHMTypeInfo STargetInfoObjectiveCondition::TypeInfo = ZHMTypeInfo("STargetInfoObjectiveCondition", sizeof(STargetInfoObjectiveCondition), alignof(STargetInfoObjectiveCondition), STargetInfoObjectiveCondition::WriteJson, STargetInfoObjectiveCondition::WriteSimpleJson, STargetInfoObjectiveCondition::FromSimpleJson);

void STargetInfoObjectiveCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoObjectiveCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("header") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->header);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("title") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->title);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->icon);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->type);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("hardCondition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->hardCondition;
	p_Stream << "}";

	p_Stream << "}";
}

void STargetInfoObjectiveCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoObjectiveCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("header") << ":";
	p_Stream << JsonStr(s_Object->header);
	p_Stream << ",";

	p_Stream << JsonStr("title") << ":";
	p_Stream << JsonStr(s_Object->title);
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << JsonStr(s_Object->icon);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(s_Object->type);
	p_Stream << ",";

	p_Stream << JsonStr("hardCondition") << ":";
	p_Stream << s_Object->hardCondition;

	p_Stream << "}";
}

void STargetInfoObjectiveCondition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetInfoObjectiveCondition s_Object;

	s_Object.header = std::string_view(p_Document["header"]);

	s_Object.title = std::string_view(p_Document["title"]);

	s_Object.icon = std::string_view(p_Document["icon"]);

	s_Object.type = std::string_view(p_Document["type"]);

	s_Object.hardCondition = bool(p_Document["hardCondition"]);

	*reinterpret_cast<STargetInfoObjectiveCondition*>(p_Target) = s_Object;
}

void STargetInfoObjectiveCondition::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	header.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetInfoObjectiveCondition, header));	title.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetInfoObjectiveCondition, title));	icon.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetInfoObjectiveCondition, icon));	type.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetInfoObjectiveCondition, type));}

ZHMTypeInfo STargetInfoDisplayData::TypeInfo = ZHMTypeInfo("STargetInfoDisplayData", sizeof(STargetInfoDisplayData), alignof(STargetInfoDisplayData), STargetInfoDisplayData::WriteJson, STargetInfoDisplayData::WriteSimpleJson, STargetInfoDisplayData::FromSimpleJson);

void STargetInfoDisplayData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoDisplayData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("npcName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->npcName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("disguiseName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->disguiseName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectiveType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->objectiveType);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectiveConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectiveConditions.size(); ++i)
	{
		auto& s_Item = s_Object->objectiveConditions[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STargetInfoObjectiveCondition") << "," << JsonStr("$val") << ":";
		STargetInfoObjectiveCondition::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->objectiveConditions.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("fX") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fX;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fY") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fY;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsTarget;
	p_Stream << "}";

	p_Stream << "}";
}

void STargetInfoDisplayData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoDisplayData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("npcName") << ":";
	p_Stream << JsonStr(s_Object->npcName);
	p_Stream << ",";

	p_Stream << JsonStr("disguiseName") << ":";
	p_Stream << JsonStr(s_Object->disguiseName);
	p_Stream << ",";

	p_Stream << JsonStr("objectiveType") << ":";
	p_Stream << JsonStr(s_Object->objectiveType);
	p_Stream << ",";

	p_Stream << JsonStr("objectiveConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectiveConditions.size(); ++i)
	{
		auto& s_Item = s_Object->objectiveConditions[i];
		STargetInfoObjectiveCondition::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->objectiveConditions.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("fX") << ":";
	p_Stream << s_Object->fX;
	p_Stream << ",";

	p_Stream << JsonStr("fY") << ":";
	p_Stream << s_Object->fY;
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("bIsTarget") << ":";
	p_Stream << s_Object->bIsTarget;

	p_Stream << "}";
}

void STargetInfoDisplayData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetInfoDisplayData s_Object;

	s_Object.npcName = std::string_view(p_Document["npcName"]);

	s_Object.disguiseName = std::string_view(p_Document["disguiseName"]);

	s_Object.objectiveType = std::string_view(p_Document["objectiveType"]);

	for (simdjson::ondemand::value s_Item : p_Document["objectiveConditions"])
	{
		STargetInfoObjectiveCondition s_ArrayItem;
		STargetInfoObjectiveCondition::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.objectiveConditions.push_back(s_ArrayItem);
	}

	s_Object.fX = static_cast<int32>(int64_t(p_Document["fX"]));

	s_Object.fY = static_cast<int32>(int64_t(p_Document["fY"]));

	s_Object.fAlpha = static_cast<float32>(double(p_Document["fAlpha"]));

	s_Object.bIsTarget = bool(p_Document["bIsTarget"]);

	*reinterpret_cast<STargetInfoDisplayData*>(p_Target) = s_Object;
}

void STargetInfoDisplayData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	npcName.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData, npcName));	disguiseName.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData, disguiseName));	objectiveType.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData, objectiveType));	objectiveConditions.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData, objectiveConditions));}

ZHMTypeInfo STargetInfoDisplayData_Dummy::TypeInfo = ZHMTypeInfo("STargetInfoDisplayData_Dummy", sizeof(STargetInfoDisplayData_Dummy), alignof(STargetInfoDisplayData_Dummy), STargetInfoDisplayData_Dummy::WriteJson, STargetInfoDisplayData_Dummy::WriteSimpleJson, STargetInfoDisplayData_Dummy::FromSimpleJson);

void STargetInfoDisplayData_Dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoDisplayData_Dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("__dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->__dummy.size(); ++i)
	{
		auto& s_Item = s_Object->__dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STargetInfoDisplayData") << "," << JsonStr("$val") << ":";
		STargetInfoDisplayData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->__dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STargetInfoDisplayData_Dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetInfoDisplayData_Dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("__dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->__dummy.size(); ++i)
	{
		auto& s_Item = s_Object->__dummy[i];
		STargetInfoDisplayData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->__dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STargetInfoDisplayData_Dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetInfoDisplayData_Dummy s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["__dummy"])
	{
		STargetInfoDisplayData s_ArrayItem;
		STargetInfoDisplayData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.__dummy.push_back(s_ArrayItem);
	}

	*reinterpret_cast<STargetInfoDisplayData_Dummy*>(p_Target) = s_Object;
}

void STargetInfoDisplayData_Dummy::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	__dummy.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData_Dummy, __dummy));}

ZHMTypeInfo SSoundAmbienceSaveData::TypeInfo = ZHMTypeInfo("SSoundAmbienceSaveData", sizeof(SSoundAmbienceSaveData), alignof(SSoundAmbienceSaveData), SSoundAmbienceSaveData::WriteJson, SSoundAmbienceSaveData::WriteSimpleJson, SSoundAmbienceSaveData::FromSimpleJson);

void SSoundAmbienceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSoundAmbienceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCurrentAmbience") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentAmbience;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentGate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentGate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTransitionAmount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTransitionAmount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnteredFromSide0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnteredFromSide0;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInTransition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInTransition;
	p_Stream << "}";

	p_Stream << "}";
}

void SSoundAmbienceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSoundAmbienceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCurrentAmbience") << ":";
	p_Stream << s_Object->m_rCurrentAmbience;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentGate") << ":";
	p_Stream << s_Object->m_rCurrentGate;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTransitionAmount") << ":";
	p_Stream << s_Object->m_fTransitionAmount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnteredFromSide0") << ":";
	p_Stream << s_Object->m_bEnteredFromSide0;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInTransition") << ":";
	p_Stream << s_Object->m_bInTransition;

	p_Stream << "}";
}

void SSoundAmbienceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSoundAmbienceSaveData s_Object;

	s_Object.m_rCurrentAmbience = static_cast<uint32>(int64_t(p_Document["m_rCurrentAmbience"]));

	s_Object.m_rCurrentGate = static_cast<uint32>(int64_t(p_Document["m_rCurrentGate"]));

	s_Object.m_fTransitionAmount = static_cast<float32>(double(p_Document["m_fTransitionAmount"]));

	s_Object.m_bEnteredFromSide0 = bool(p_Document["m_bEnteredFromSide0"]);

	s_Object.m_bInTransition = bool(p_Document["m_bInTransition"]);

	*reinterpret_cast<SSoundAmbienceSaveData*>(p_Target) = s_Object;
}

void SSoundAmbienceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZSoundCollisionInfo::TypeInfo = ZHMTypeInfo("ZSoundCollisionInfo", sizeof(ZSoundCollisionInfo), alignof(ZSoundCollisionInfo), ZSoundCollisionInfo::WriteJson, ZSoundCollisionInfo::WriteSimpleJson, ZSoundCollisionInfo::FromSimpleJson);

void ZSoundCollisionInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSoundCollisionInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSoundCollisionInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSoundCollisionInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZSoundCollisionInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSoundCollisionInfo s_Object;

	*reinterpret_cast<ZSoundCollisionInfo*>(p_Target) = s_Object;
}

void ZSoundCollisionInfo::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZGfxValueWrapper::TypeInfo = ZHMTypeInfo("ZGfxValueWrapper", sizeof(ZGfxValueWrapper), alignof(ZGfxValueWrapper), ZGfxValueWrapper::WriteJson, ZGfxValueWrapper::WriteSimpleJson, ZGfxValueWrapper::FromSimpleJson);

void ZGfxValueWrapper::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGfxValueWrapper*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGfxValueWrapper::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGfxValueWrapper*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZGfxValueWrapper::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGfxValueWrapper s_Object;

	*reinterpret_cast<ZGfxValueWrapper*>(p_Target) = s_Object;
}

void ZGfxValueWrapper::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAnimatedActorReactOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorReactOrderSaveData", sizeof(SAnimatedActorReactOrderSaveData), alignof(SAnimatedActorReactOrderSaveData), SAnimatedActorReactOrderSaveData::WriteJson, SAnimatedActorReactOrderSaveData::WriteSimpleJson, SAnimatedActorReactOrderSaveData::FromSimpleJson);

void SAnimatedActorReactOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorReactOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vFaceTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vFaceTarget, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLookAtTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLookAtTarget, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_targetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_targetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_targetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadbody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadbody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bExplosion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bExplosion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTrespassing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTrespassing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFaceTargetSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFaceTargetSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLookAtTargetSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLookAtTargetSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorReactOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorReactOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vFaceTarget") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vFaceTarget, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vLookAtTarget") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLookAtTarget, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_targetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_targetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadbody") << ":";
	p_Stream << s_Object->m_bDeadbody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bExplosion") << ":";
	p_Stream << s_Object->m_bExplosion;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTrespassing") << ":";
	p_Stream << s_Object->m_bTrespassing;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFaceTargetSet") << ":";
	p_Stream << s_Object->m_bFaceTargetSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLookAtTargetSet") << ":";
	p_Stream << s_Object->m_bLookAtTargetSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);

	p_Stream << "}";
}

void SAnimatedActorReactOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorReactOrderSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vFaceTarget"], &s_Item);
		s_Object.m_vFaceTarget = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vLookAtTarget"], &s_Item);
		s_Object.m_vLookAtTarget = s_Item;
	}

	s_Object.m_rChildNetworkEntity = static_cast<uint32>(int64_t(p_Document["m_rChildNetworkEntity"]));

	s_Object.m_targetEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_targetEmotionState"])));

	s_Object.m_bDeadbody = bool(p_Document["m_bDeadbody"]);

	s_Object.m_bExplosion = bool(p_Document["m_bExplosion"]);

	s_Object.m_bTrespassing = bool(p_Document["m_bTrespassing"]);

	s_Object.m_bDropCarriedItems = bool(p_Document["m_bDropCarriedItems"]);

	s_Object.m_bFaceTargetSet = bool(p_Document["m_bFaceTargetSet"]);

	s_Object.m_bLookAtTargetSet = bool(p_Document["m_bLookAtTargetSet"]);

	s_Object.m_sAct = std::string_view(p_Document["m_sAct"]);

	*reinterpret_cast<SAnimatedActorReactOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorReactOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vFaceTarget.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorReactOrderSaveData, m_vFaceTarget));	m_vLookAtTarget.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorReactOrderSaveData, m_vLookAtTarget));	m_sAct.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorReactOrderSaveData, m_sAct));}

ZHMTypeInfo SSaveGameMetaData::TypeInfo = ZHMTypeInfo("SSaveGameMetaData", sizeof(SSaveGameMetaData), alignof(SSaveGameMetaData), SSaveGameMetaData::WriteJson, SSaveGameMetaData::WriteSimpleJson, SSaveGameMetaData::FromSimpleJson);

void SSaveGameMetaData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameMetaData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nSlot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->nSlot);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eSaveType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESaveType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eSaveType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESaveType", static_cast<int>(s_Object->eSaveType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eDifficultyLevel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->eDifficultyLevel;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractTitle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractTitle);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractType);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sLocationId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sLocationId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractSessionId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractSessionId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sLastEventToken") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sLastEventToken);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsOnline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsOnline;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsVR") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsVR;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aScreenShot") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScreenShot.size(); ++i)
	{
		auto& s_Item = s_Object->aScreenShot[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->aScreenShot.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aRequirements") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRequirements.size(); ++i)
	{
		auto& s_Item = s_Object->aRequirements[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ERequirementId") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ERequirementId", static_cast<int>(s_Item))) << "}";
		p_Stream << "}";

		if (i < s_Object->aRequirements.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSaveGameMetaData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameMetaData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nSlot") << ":";
	p_Stream << static_cast<int>(s_Object->nSlot);
	p_Stream << ",";

	p_Stream << JsonStr("eSaveType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESaveType", static_cast<int>(s_Object->eSaveType)));
	p_Stream << ",";

	p_Stream << JsonStr("eDifficultyLevel") << ":";
	p_Stream << s_Object->eDifficultyLevel;
	p_Stream << ",";

	p_Stream << JsonStr("sContractId") << ":";
	p_Stream << JsonStr(s_Object->sContractId);
	p_Stream << ",";

	p_Stream << JsonStr("sContractTitle") << ":";
	p_Stream << JsonStr(s_Object->sContractTitle);
	p_Stream << ",";

	p_Stream << JsonStr("sContractType") << ":";
	p_Stream << JsonStr(s_Object->sContractType);
	p_Stream << ",";

	p_Stream << JsonStr("sLocationId") << ":";
	p_Stream << JsonStr(s_Object->sLocationId);
	p_Stream << ",";

	p_Stream << JsonStr("sContractSessionId") << ":";
	p_Stream << JsonStr(s_Object->sContractSessionId);
	p_Stream << ",";

	p_Stream << JsonStr("sLastEventToken") << ":";
	p_Stream << JsonStr(s_Object->sLastEventToken);
	p_Stream << ",";

	p_Stream << JsonStr("bIsOnline") << ":";
	p_Stream << s_Object->bIsOnline;
	p_Stream << ",";

	p_Stream << JsonStr("bIsVR") << ":";
	p_Stream << s_Object->bIsVR;
	p_Stream << ",";

	p_Stream << JsonStr("aScreenShot") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScreenShot.size(); ++i)
	{
		auto& s_Item = s_Object->aScreenShot[i];
		p_Stream << s_Item;

		if (i < s_Object->aScreenShot.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aRequirements") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRequirements.size(); ++i)
	{
		auto& s_Item = s_Object->aRequirements[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ERequirementId", static_cast<int>(s_Item)));

		if (i < s_Object->aRequirements.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSaveGameMetaData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSaveGameMetaData s_Object;

	s_Object.nSlot = static_cast<uint8>(int64_t(p_Document["nSlot"]));

	s_Object.eSaveType = static_cast<ESaveType>(ZHMEnums::GetEnumValueByName("ESaveType", std::string_view(p_Document["eSaveType"])));

	s_Object.eDifficultyLevel = static_cast<int32>(int64_t(p_Document["eDifficultyLevel"]));

	s_Object.sContractId = std::string_view(p_Document["sContractId"]);

	s_Object.sContractTitle = std::string_view(p_Document["sContractTitle"]);

	s_Object.sContractType = std::string_view(p_Document["sContractType"]);

	s_Object.sLocationId = std::string_view(p_Document["sLocationId"]);

	s_Object.sContractSessionId = std::string_view(p_Document["sContractSessionId"]);

	s_Object.sLastEventToken = std::string_view(p_Document["sLastEventToken"]);

	s_Object.bIsOnline = bool(p_Document["bIsOnline"]);

	s_Object.bIsVR = bool(p_Document["bIsVR"]);

	for (simdjson::ondemand::value s_Item : p_Document["aScreenShot"])
	{
		s_Object.aScreenShot.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["aRequirements"])
	{
		s_Object.aRequirements.push_back(static_cast<ERequirementId>(ZHMEnums::GetEnumValueByName("ERequirementId", std::string_view(s_Item))));
	}

	*reinterpret_cast<SSaveGameMetaData*>(p_Target) = s_Object;
}

void SSaveGameMetaData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sContractId.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sContractId));	sContractTitle.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sContractTitle));	sContractType.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sContractType));	sLocationId.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sLocationId));	sContractSessionId.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sContractSessionId));	sLastEventToken.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sLastEventToken));	aScreenShot.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, aScreenShot));	aRequirements.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, aRequirements));}

ZHMTypeInfo SSaveGameHeader::TypeInfo = ZHMTypeInfo("SSaveGameHeader", sizeof(SSaveGameHeader), alignof(SSaveGameHeader), SSaveGameHeader::WriteJson, SSaveGameHeader::WriteSimpleJson, SSaveGameHeader::FromSimpleJson);

void SSaveGameHeader::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameHeader*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nFourCC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nFourCC;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nVersion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nVersion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nCrc32") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nCrc32;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nTimeStamp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nTimeStamp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("MetaData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSaveGameMetaData") << "," << JsonStr("$val") << ":";
	SSaveGameMetaData::WriteJson(&s_Object->MetaData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSaveGameHeader::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameHeader*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nFourCC") << ":";
	p_Stream << s_Object->nFourCC;
	p_Stream << ",";

	p_Stream << JsonStr("nVersion") << ":";
	p_Stream << s_Object->nVersion;
	p_Stream << ",";

	p_Stream << JsonStr("nCrc32") << ":";
	p_Stream << s_Object->nCrc32;
	p_Stream << ",";

	p_Stream << JsonStr("nSize") << ":";
	p_Stream << s_Object->nSize;
	p_Stream << ",";

	p_Stream << JsonStr("nTimeStamp") << ":";
	p_Stream << s_Object->nTimeStamp;
	p_Stream << ",";

	p_Stream << JsonStr("MetaData") << ":";
	SSaveGameMetaData::WriteSimpleJson(&s_Object->MetaData, p_Stream);

	p_Stream << "}";
}

void SSaveGameHeader::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSaveGameHeader s_Object;

	s_Object.nFourCC = static_cast<uint32>(int64_t(p_Document["nFourCC"]));

	s_Object.nVersion = static_cast<uint32>(int64_t(p_Document["nVersion"]));

	s_Object.nCrc32 = static_cast<uint32>(int64_t(p_Document["nCrc32"]));

	s_Object.nSize = static_cast<uint32>(int64_t(p_Document["nSize"]));

	s_Object.nTimeStamp = int64(p_Document["nTimeStamp"]);

	{
		SSaveGameMetaData s_Item;
		SSaveGameMetaData::FromSimpleJson(p_Document["MetaData"], &s_Item);
		s_Object.MetaData = s_Item;
	}

	*reinterpret_cast<SSaveGameHeader*>(p_Target) = s_Object;
}

void SSaveGameHeader::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	MetaData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameHeader, MetaData));}

ZHMTypeInfo SGateSaveData::TypeInfo = ZHMTypeInfo("SGateSaveData", sizeof(SGateSaveData), alignof(SGateSaveData), SGateSaveData::WriteJson, SGateSaveData::WriteSimpleJson, SGateSaveData::FromSimpleJson);

void SGateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOpen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOpen;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpenFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOpenFraction;
	p_Stream << "}";

	p_Stream << "}";
}

void SGateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOpen") << ":";
	p_Stream << s_Object->m_bIsOpen;
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpenFraction") << ":";
	p_Stream << s_Object->m_fOpenFraction;

	p_Stream << "}";
}

void SGateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGateSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_bIsOpen = bool(p_Document["m_bIsOpen"]);

	s_Object.m_fOpenFraction = static_cast<float32>(double(p_Document["m_fOpenFraction"]));

	*reinterpret_cast<SGateSaveData*>(p_Target) = s_Object;
}

void SGateSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IRenderCompositorEntity::TypeInfo = ZHMTypeInfo("IRenderCompositorEntity", sizeof(IRenderCompositorEntity), alignof(IRenderCompositorEntity), IRenderCompositorEntity::WriteJson, IRenderCompositorEntity::WriteSimpleJson, IRenderCompositorEntity::FromSimpleJson);

void IRenderCompositorEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderCompositorEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderCompositorEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IRenderCompositorEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IRenderCompositorEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IRenderCompositorEntity s_Object;

	*reinterpret_cast<IRenderCompositorEntity*>(p_Target) = s_Object;
}

void IRenderCompositorEntity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IContractModule::TypeInfo = ZHMTypeInfo("IContractModule", sizeof(IContractModule), alignof(IContractModule), IContractModule::WriteJson, IContractModule::WriteSimpleJson, IContractModule::FromSimpleJson);

void IContractModule::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractModule*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContractModule::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractModule*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IContractModule::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IContractModule s_Object;

	*reinterpret_cast<IContractModule*>(p_Target) = s_Object;
}

void IContractModule::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IFreeCameraControl::TypeInfo = ZHMTypeInfo("IFreeCameraControl", sizeof(IFreeCameraControl), alignof(IFreeCameraControl), IFreeCameraControl::WriteJson, IFreeCameraControl::WriteSimpleJson, IFreeCameraControl::FromSimpleJson);

void IFreeCameraControl::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFreeCameraControl*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IFreeCameraControl::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IFreeCameraControl*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IFreeCameraControl::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IFreeCameraControl s_Object;

	*reinterpret_cast<IFreeCameraControl*>(p_Target) = s_Object;
}

void IFreeCameraControl::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SSpeakEntitySaveData::TypeInfo = ZHMTypeInfo("SSpeakEntitySaveData", sizeof(SSpeakEntitySaveData), alignof(SSpeakEntitySaveData), SSpeakEntitySaveData::WriteJson, SSpeakEntitySaveData::WriteSimpleJson, SSpeakEntitySaveData::FromSimpleJson);

void SSpeakEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSeekPosition;
	p_Stream << "}";

	p_Stream << "}";
}

void SSpeakEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << s_Object->m_fSeekPosition;

	p_Stream << "}";
}

void SSpeakEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSpeakEntitySaveData s_Object;

	s_Object.m_fSeekPosition = static_cast<float32>(double(p_Document["m_fSeekPosition"]));

	*reinterpret_cast<SSpeakEntitySaveData*>(p_Target) = s_Object;
}

void SSpeakEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SSecuritySystemRecorderSaveData::TypeInfo = ZHMTypeInfo("SSecuritySystemRecorderSaveData", sizeof(SSecuritySystemRecorderSaveData), alignof(SSecuritySystemRecorderSaveData), SSecuritySystemRecorderSaveData::WriteJson, SSecuritySystemRecorderSaveData::WriteSimpleJson, SSecuritySystemRecorderSaveData::FromSimpleJson);

void SSecuritySystemRecorderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSecuritySystemRecorderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bHasRecordings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasRecordings;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFunctional;
	p_Stream << "}";

	p_Stream << "}";
}

void SSecuritySystemRecorderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSecuritySystemRecorderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bHasRecordings") << ":";
	p_Stream << s_Object->m_bHasRecordings;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << s_Object->m_bIsFunctional;

	p_Stream << "}";
}

void SSecuritySystemRecorderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSecuritySystemRecorderSaveData s_Object;

	s_Object.m_bHasRecordings = bool(p_Document["m_bHasRecordings"]);

	s_Object.m_bIsFunctional = bool(p_Document["m_bIsFunctional"]);

	*reinterpret_cast<SSecuritySystemRecorderSaveData*>(p_Target) = s_Object;
}

void SSecuritySystemRecorderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SBoneTransformSaveData::TypeInfo = ZHMTypeInfo("SBoneTransformSaveData", sizeof(SBoneTransformSaveData), alignof(SBoneTransformSaveData), SBoneTransformSaveData::WriteJson, SBoneTransformSaveData::WriteSimpleJson, SBoneTransformSaveData::FromSimpleJson);

void SBoneTransformSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneTransformSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SBoneTransformSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneTransformSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

void SBoneTransformSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBoneTransformSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mQuaterion"], &s_Item);
		s_Object.mQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTranslation"], &s_Item);
		s_Object.mTranslation = s_Item;
	}

	*reinterpret_cast<SBoneTransformSaveData*>(p_Target) = s_Object;
}

void SBoneTransformSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	mQuaterion.Serialize(p_Serializer, p_OwnOffset + offsetof(SBoneTransformSaveData, mQuaterion));	mTranslation.Serialize(p_Serializer, p_OwnOffset + offsetof(SBoneTransformSaveData, mTranslation));}

ZHMTypeInfo ZCrowdGridPoint::TypeInfo = ZHMTypeInfo("ZCrowdGridPoint", sizeof(ZCrowdGridPoint), alignof(ZCrowdGridPoint), ZCrowdGridPoint::WriteJson, ZCrowdGridPoint::WriteSimpleJson, ZCrowdGridPoint::FromSimpleJson);

void ZCrowdGridPoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCrowdGridPoint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nHeightOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nHeightOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOnNavGrid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_nOnNavGrid);
	p_Stream << "}";

	p_Stream << "}";
}

void ZCrowdGridPoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZCrowdGridPoint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nHeightOffset") << ":";
	p_Stream << s_Object->m_nHeightOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_nOnNavGrid") << ":";
	p_Stream << static_cast<int>(s_Object->m_nOnNavGrid);

	p_Stream << "}";
}

void ZCrowdGridPoint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZCrowdGridPoint s_Object;

	s_Object.m_nHeightOffset = static_cast<int16>(int64_t(p_Document["m_nHeightOffset"]));

	s_Object.m_nOnNavGrid = static_cast<uint8>(int64_t(p_Document["m_nOnNavGrid"]));

	*reinterpret_cast<ZCrowdGridPoint*>(p_Target) = s_Object;
}

void ZCrowdGridPoint::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SLampCoreSaveState::TypeInfo = ZHMTypeInfo("SLampCoreSaveState", sizeof(SLampCoreSaveState), alignof(SLampCoreSaveState), SLampCoreSaveState::WriteJson, SLampCoreSaveState::WriteSimpleJson, SLampCoreSaveState::FromSimpleJson);

void SLampCoreSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLampCoreSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSwitchState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSwitchState;
	p_Stream << "}";

	p_Stream << "}";
}

void SLampCoreSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLampCoreSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSwitchState") << ":";
	p_Stream << s_Object->m_bSwitchState;

	p_Stream << "}";
}

void SLampCoreSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLampCoreSaveState s_Object;

	s_Object.m_fDiffusePower = static_cast<float32>(double(p_Document["m_fDiffusePower"]));

	s_Object.m_bSwitchState = bool(p_Document["m_bSwitchState"]);

	*reinterpret_cast<SLampCoreSaveState*>(p_Target) = s_Object;
}

void SLampCoreSaveState::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SLampCoreSaveData::TypeInfo = ZHMTypeInfo("SLampCoreSaveData", sizeof(SLampCoreSaveData), alignof(SLampCoreSaveData), SLampCoreSaveData::WriteJson, SLampCoreSaveData::WriteSimpleJson, SLampCoreSaveData::FromSimpleJson);

void SLampCoreSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLampCoreSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLampCoreSaveState") << "," << JsonStr("$val") << ":";
		SLampCoreSaveState::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SLampCoreSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLampCoreSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SLampCoreSaveState::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLampCoreSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLampCoreSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SLampCoreSaveState s_ArrayItem;
		SLampCoreSaveState::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SLampCoreSaveData*>(p_Target) = s_Object;
}

void SLampCoreSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SLampCoreSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SLampCoreSaveData, m_aData));}

ZHMTypeInfo ISoundMaterialDescriptor::TypeInfo = ZHMTypeInfo("ISoundMaterialDescriptor", sizeof(ISoundMaterialDescriptor), alignof(ISoundMaterialDescriptor), ISoundMaterialDescriptor::WriteJson, ISoundMaterialDescriptor::WriteSimpleJson, ISoundMaterialDescriptor::FromSimpleJson);

void ISoundMaterialDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundMaterialDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundMaterialDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISoundMaterialDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISoundMaterialDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISoundMaterialDescriptor s_Object;

	*reinterpret_cast<ISoundMaterialDescriptor*>(p_Target) = s_Object;
}

void ISoundMaterialDescriptor::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDisturbanceSaveData::TypeInfo = ZHMTypeInfo("SDisturbanceSaveData", sizeof(SDisturbanceSaveData), alignof(SDisturbanceSaveData), SDisturbanceSaveData::WriteJson, SDisturbanceSaveData::WriteSimpleJson, SDisturbanceSaveData::FromSimpleJson);

void SDisturbanceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDisturbanceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_object") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_object;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECautiousDisturbanceState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_state) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECautiousDisturbanceState", static_cast<int>(s_Object->m_state))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_started") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_started, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pInvestigateGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pInvestigateGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockOnHitmanPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockOnHitmanPosition;
	p_Stream << "}";

	p_Stream << "}";
}

void SDisturbanceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDisturbanceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_object") << ":";
	p_Stream << s_Object->m_object;
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type)));
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECautiousDisturbanceState", static_cast<int>(s_Object->m_state)));
	p_Stream << ",";

	p_Stream << JsonStr("m_started") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_started, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_pInvestigateGroup") << ":";
	p_Stream << s_Object->m_pInvestigateGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockOnHitmanPosition") << ":";
	p_Stream << s_Object->m_bLockOnHitmanPosition;

	p_Stream << "}";
}

void SDisturbanceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDisturbanceSaveData s_Object;

	s_Object.m_object = static_cast<int32>(int64_t(p_Document["m_object"]));

	s_Object.m_type = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_type"])));

	s_Object.m_state = static_cast<ECautiousDisturbanceState>(ZHMEnums::GetEnumValueByName("ECautiousDisturbanceState", std::string_view(p_Document["m_state"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_started"], &s_Item);
		s_Object.m_started = s_Item;
	}

	s_Object.m_pInvestigateGroup = static_cast<int32>(int64_t(p_Document["m_pInvestigateGroup"]));

	s_Object.m_bLockOnHitmanPosition = bool(p_Document["m_bLockOnHitmanPosition"]);

	*reinterpret_cast<SDisturbanceSaveData*>(p_Target) = s_Object;
}

void SDisturbanceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_started.Serialize(p_Serializer, p_OwnOffset + offsetof(SDisturbanceSaveData, m_started));}

ZHMTypeInfo SInvestigateWeaponGroupSaveData::TypeInfo = ZHMTypeInfo("SInvestigateWeaponGroupSaveData", sizeof(SInvestigateWeaponGroupSaveData), alignof(SInvestigateWeaponGroupSaveData), SInvestigateWeaponGroupSaveData::WriteJson, SInvestigateWeaponGroupSaveData::WriteSimpleJson, SInvestigateWeaponGroupSaveData::FromSimpleJson);

void SInvestigateWeaponGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInvestigateWeaponGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rReporter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rReporter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInvestigator") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInvestigator;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ReporterIsVIPWithAmbientEscort") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_ReporterIsVIPWithAmbientEscort;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastGuardSearch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastGuardSearch, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aUnconsciousGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aUnconsciousGuards.size(); ++i)
	{
		auto& s_Item = s_Object->m_aUnconsciousGuards[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aUnconsciousGuards.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SInvestigateWeaponGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInvestigateWeaponGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rReporter") << ":";
	p_Stream << s_Object->m_rReporter;
	p_Stream << ",";

	p_Stream << JsonStr("m_rInvestigator") << ":";
	p_Stream << s_Object->m_rInvestigator;
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_ReporterIsVIPWithAmbientEscort") << ":";
	p_Stream << s_Object->m_ReporterIsVIPWithAmbientEscort;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastGuardSearch") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastGuardSearch, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aUnconsciousGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aUnconsciousGuards.size(); ++i)
	{
		auto& s_Item = s_Object->m_aUnconsciousGuards[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aUnconsciousGuards.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SInvestigateWeaponGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInvestigateWeaponGroupSaveData s_Object;

	s_Object.m_rTarget = static_cast<uint32>(int64_t(p_Document["m_rTarget"]));

	s_Object.m_rReporter = static_cast<uint32>(int64_t(p_Document["m_rReporter"]));

	s_Object.m_rInvestigator = static_cast<uint32>(int64_t(p_Document["m_rInvestigator"]));

	s_Object.m_rGuard = static_cast<uint32>(int64_t(p_Document["m_rGuard"]));

	s_Object.m_ReporterIsVIPWithAmbientEscort = bool(p_Document["m_ReporterIsVIPWithAmbientEscort"]);

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastGuardSearch"], &s_Item);
		s_Object.m_tLastGuardSearch = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aUnconsciousGuards"])
	{
		s_Object.m_aUnconsciousGuards.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SInvestigateWeaponGroupSaveData*>(p_Target) = s_Object;
}

void SInvestigateWeaponGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SInvestigateWeaponGroupSaveData, m_fsmState));	m_tLastGuardSearch.Serialize(p_Serializer, p_OwnOffset + offsetof(SInvestigateWeaponGroupSaveData, m_tLastGuardSearch));	m_aUnconsciousGuards.Serialize(p_Serializer, p_OwnOffset + offsetof(SInvestigateWeaponGroupSaveData, m_aUnconsciousGuards));}

ZHMTypeInfo SAttentionHUDUIElement::TypeInfo = ZHMTypeInfo("SAttentionHUDUIElement", sizeof(SAttentionHUDUIElement), alignof(SAttentionHUDUIElement), SAttentionHUDUIElement::WriteJson, SAttentionHUDUIElement::WriteSimpleJson, SAttentionHUDUIElement::FromSimpleJson);

void SAttentionHUDUIElement::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAttentionHUDUIElement*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fRadius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fRadius;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nColor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nColor;
	p_Stream << "}";

	p_Stream << "}";
}

void SAttentionHUDUIElement::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAttentionHUDUIElement*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fAngle") << ":";
	p_Stream << s_Object->fAngle;
	p_Stream << ",";

	p_Stream << JsonStr("fAttention") << ":";
	p_Stream << s_Object->fAttention;
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fRadius") << ":";
	p_Stream << s_Object->fRadius;
	p_Stream << ",";

	p_Stream << JsonStr("nColor") << ":";
	p_Stream << s_Object->nColor;

	p_Stream << "}";
}

void SAttentionHUDUIElement::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAttentionHUDUIElement s_Object;

	s_Object.fAngle = static_cast<float32>(double(p_Document["fAngle"]));

	s_Object.fAttention = static_cast<float32>(double(p_Document["fAttention"]));

	s_Object.fAlpha = static_cast<float32>(double(p_Document["fAlpha"]));

	s_Object.fRadius = static_cast<float32>(double(p_Document["fRadius"]));

	s_Object.nColor = static_cast<int32>(int64_t(p_Document["nColor"]));

	*reinterpret_cast<SAttentionHUDUIElement*>(p_Target) = s_Object;
}

void SAttentionHUDUIElement::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SEntityTemplatePlatformSpecificProperty::TypeInfo = ZHMTypeInfo("SEntityTemplatePlatformSpecificProperty", sizeof(SEntityTemplatePlatformSpecificProperty), alignof(SEntityTemplatePlatformSpecificProperty), SEntityTemplatePlatformSpecificProperty::WriteJson, SEntityTemplatePlatformSpecificProperty::WriteSimpleJson, SEntityTemplatePlatformSpecificProperty::FromSimpleJson);

void SEntityTemplatePlatformSpecificProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePlatformSpecificProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("propertyValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
	SEntityTemplateProperty::WriteJson(&s_Object->propertyValue, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("platform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EVirtualPlatformID") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->platform) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EVirtualPlatformID", static_cast<int>(s_Object->platform))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("postInit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->postInit;
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePlatformSpecificProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePlatformSpecificProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("propertyValue") << ":";
	SEntityTemplateProperty::WriteSimpleJson(&s_Object->propertyValue, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("platform") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EVirtualPlatformID", static_cast<int>(s_Object->platform)));
	p_Stream << ",";

	p_Stream << JsonStr("postInit") << ":";
	p_Stream << s_Object->postInit;

	p_Stream << "}";
}

void SEntityTemplatePlatformSpecificProperty::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePlatformSpecificProperty s_Object;

	{
		SEntityTemplateProperty s_Item;
		SEntityTemplateProperty::FromSimpleJson(p_Document["propertyValue"], &s_Item);
		s_Object.propertyValue = s_Item;
	}

	s_Object.platform = static_cast<EVirtualPlatformID>(ZHMEnums::GetEnumValueByName("EVirtualPlatformID", std::string_view(p_Document["platform"])));

	s_Object.postInit = bool(p_Document["postInit"]);

	*reinterpret_cast<SEntityTemplatePlatformSpecificProperty*>(p_Target) = s_Object;
}

void SEntityTemplatePlatformSpecificProperty::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	propertyValue.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePlatformSpecificProperty, propertyValue));}

ZHMTypeInfo STemplateFactorySubEntity::TypeInfo = ZHMTypeInfo("STemplateFactorySubEntity", sizeof(STemplateFactorySubEntity), alignof(STemplateFactorySubEntity), STemplateFactorySubEntity::WriteJson, STemplateFactorySubEntity::WriteSimpleJson, STemplateFactorySubEntity::FromSimpleJson);

void STemplateFactorySubEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateFactorySubEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("logicalParent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->logicalParent, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->propertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplateProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("postInitPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->postInitPropertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->postInitPropertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplateProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->postInitPropertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("platformSpecificPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->platformSpecificPropertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->platformSpecificPropertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePlatformSpecificProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplatePlatformSpecificProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->platformSpecificPropertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STemplateFactorySubEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateFactorySubEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("logicalParent") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->logicalParent, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->propertyValues[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("postInitPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->postInitPropertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->postInitPropertyValues[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->postInitPropertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("platformSpecificPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->platformSpecificPropertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->platformSpecificPropertyValues[i];
		SEntityTemplatePlatformSpecificProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->platformSpecificPropertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateFactorySubEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateFactorySubEntity s_Object;

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["logicalParent"], &s_Item);
		s_Object.logicalParent = s_Item;
	}

	s_Object.entityTypeResourceIndex = static_cast<int32>(int64_t(p_Document["entityTypeResourceIndex"]));

	for (simdjson::ondemand::value s_Item : p_Document["propertyValues"])
	{
		SEntityTemplateProperty s_ArrayItem;
		SEntityTemplateProperty::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.propertyValues.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["postInitPropertyValues"])
	{
		SEntityTemplateProperty s_ArrayItem;
		SEntityTemplateProperty::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.postInitPropertyValues.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["platformSpecificPropertyValues"])
	{
		SEntityTemplatePlatformSpecificProperty s_ArrayItem;
		SEntityTemplatePlatformSpecificProperty::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.platformSpecificPropertyValues.push_back(s_ArrayItem);
	}

	*reinterpret_cast<STemplateFactorySubEntity*>(p_Target) = s_Object;
}

void STemplateFactorySubEntity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	logicalParent.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateFactorySubEntity, logicalParent));	propertyValues.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateFactorySubEntity, propertyValues));	postInitPropertyValues.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateFactorySubEntity, postInitPropertyValues));	platformSpecificPropertyValues.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateFactorySubEntity, platformSpecificPropertyValues));}

ZHMTypeInfo SRotateEntitySaveData::TypeInfo = ZHMTypeInfo("SRotateEntitySaveData", sizeof(SRotateEntitySaveData), alignof(SRotateEntitySaveData), SRotateEntitySaveData::WriteJson, SRotateEntitySaveData::WriteSimpleJson, SRotateEntitySaveData::FromSimpleJson);

void SRotateEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRotateEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fXAxisSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fXAxisSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fYAxisSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fYAxisSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fZAxisSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fZAxisSpeed;
	p_Stream << "}";

	p_Stream << "}";
}

void SRotateEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRotateEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fXAxisSpeed") << ":";
	p_Stream << s_Object->m_fXAxisSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_fYAxisSpeed") << ":";
	p_Stream << s_Object->m_fYAxisSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_fZAxisSpeed") << ":";
	p_Stream << s_Object->m_fZAxisSpeed;

	p_Stream << "}";
}

void SRotateEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRotateEntitySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_fXAxisSpeed = static_cast<float32>(double(p_Document["m_fXAxisSpeed"]));

	s_Object.m_fYAxisSpeed = static_cast<float32>(double(p_Document["m_fYAxisSpeed"]));

	s_Object.m_fZAxisSpeed = static_cast<float32>(double(p_Document["m_fZAxisSpeed"]));

	*reinterpret_cast<SRotateEntitySaveData*>(p_Target) = s_Object;
}

void SRotateEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo STypeReference::TypeInfo = ZHMTypeInfo("STypeReference", sizeof(STypeReference), alignof(STypeReference), STypeReference::WriteJson, STypeReference::WriteSimpleJson, STypeReference::FromSimpleJson);

void STypeReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STypeReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sEntityID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sTypeArgName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sTypeArgName);
	p_Stream << "}";

	p_Stream << "}";
}

void STypeReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STypeReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sEntityID") << ":";
	p_Stream << JsonStr(s_Object->sEntityID);
	p_Stream << ",";

	p_Stream << JsonStr("sTypeArgName") << ":";
	p_Stream << JsonStr(s_Object->sTypeArgName);

	p_Stream << "}";
}

void STypeReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STypeReference s_Object;

	s_Object.sEntityID = std::string_view(p_Document["sEntityID"]);

	s_Object.sTypeArgName = std::string_view(p_Document["sTypeArgName"]);

	*reinterpret_cast<STypeReference*>(p_Target) = s_Object;
}

void STypeReference::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sEntityID.Serialize(p_Serializer, p_OwnOffset + offsetof(STypeReference, sEntityID));	sTypeArgName.Serialize(p_Serializer, p_OwnOffset + offsetof(STypeReference, sTypeArgName));}

ZHMTypeInfo SExposedTypeInfo::TypeInfo = ZHMTypeInfo("SExposedTypeInfo", sizeof(SExposedTypeInfo), alignof(SExposedTypeInfo), SExposedTypeInfo::WriteJson, SExposedTypeInfo::WriteSimpleJson, SExposedTypeInfo::FromSimpleJson);

void SExposedTypeInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedTypeInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STypeReference") << "," << JsonStr("$val") << ":";
	STypeReference::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SExposedTypeInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedTypeInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	STypeReference::WriteSimpleJson(&s_Object->target, p_Stream);

	p_Stream << "}";
}

void SExposedTypeInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExposedTypeInfo s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	s_Object.sDisplayName = std::string_view(p_Document["sDisplayName"]);

	s_Object.sHelpText = std::string_view(p_Document["sHelpText"]);

	{
		STypeReference s_Item;
		STypeReference::FromSimpleJson(p_Document["target"], &s_Item);
		s_Object.target = s_Item;
	}

	*reinterpret_cast<SExposedTypeInfo*>(p_Target) = s_Object;
}

void SExposedTypeInfo::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedTypeInfo, sName));	sDisplayName.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedTypeInfo, sDisplayName));	sHelpText.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedTypeInfo, sHelpText));	target.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedTypeInfo, target));}

ZHMTypeInfo SDynamicEnforcerCandidateSaveData::TypeInfo = ZHMTypeInfo("SDynamicEnforcerCandidateSaveData", sizeof(SDynamicEnforcerCandidateSaveData), alignof(SDynamicEnforcerCandidateSaveData), SDynamicEnforcerCandidateSaveData::WriteJson, SDynamicEnforcerCandidateSaveData::WriteSimpleJson, SDynamicEnforcerCandidateSaveData::FromSimpleJson);

void SDynamicEnforcerCandidateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicEnforcerCandidateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRadius;
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicEnforcerCandidateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicEnforcerCandidateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadius") << ":";
	p_Stream << s_Object->m_fRadius;

	p_Stream << "}";
}

void SDynamicEnforcerCandidateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDynamicEnforcerCandidateSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	s_Object.m_eType = static_cast<EAISharedEventType>(ZHMEnums::GetEnumValueByName("EAISharedEventType", std::string_view(p_Document["m_eType"])));

	s_Object.m_fRadius = static_cast<float32>(double(p_Document["m_fRadius"]));

	*reinterpret_cast<SDynamicEnforcerCandidateSaveData*>(p_Target) = s_Object;
}

void SDynamicEnforcerCandidateSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SDynamicEnforcerCandidateSaveData, m_vPosition));}

ZHMTypeInfo SDynamicEnforcerServiceSaveData::TypeInfo = ZHMTypeInfo("SDynamicEnforcerServiceSaveData", sizeof(SDynamicEnforcerServiceSaveData), alignof(SDynamicEnforcerServiceSaveData), SDynamicEnforcerServiceSaveData::WriteJson, SDynamicEnforcerServiceSaveData::WriteSimpleJson, SDynamicEnforcerServiceSaveData::FromSimpleJson);

void SDynamicEnforcerServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicEnforcerServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDynamicEnforcerCandidateSaveData") << "," << JsonStr("$val") << ":";
		SDynamicEnforcerCandidateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDynamicEnforcerServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicEnforcerServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCandidates[i];
		SDynamicEnforcerCandidateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDynamicEnforcerServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDynamicEnforcerServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aCandidates"])
	{
		SDynamicEnforcerCandidateSaveData s_ArrayItem;
		SDynamicEnforcerCandidateSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aCandidates.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SDynamicEnforcerServiceSaveData*>(p_Target) = s_Object;
}

void SDynamicEnforcerServiceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aCandidates.Serialize(p_Serializer, p_OwnOffset + offsetof(SDynamicEnforcerServiceSaveData, m_aCandidates));}

ZHMTypeInfo SActorStandInSaveData::TypeInfo = ZHMTypeInfo("SActorStandInSaveData", sizeof(SActorStandInSaveData), alignof(SActorStandInSaveData), SActorStandInSaveData::WriteJson, SActorStandInSaveData::WriteSimpleJson, SActorStandInSaveData::FromSimpleJson);

void SActorStandInSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorStandInSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorStandInSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorStandInSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorStandInSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorStandInSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorStandInSaveData*>(p_Target) = s_Object;
}

void SActorStandInSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDynamicRayCastEntitySaveData::TypeInfo = ZHMTypeInfo("SDynamicRayCastEntitySaveData", sizeof(SDynamicRayCastEntitySaveData), alignof(SDynamicRayCastEntitySaveData), SDynamicRayCastEntitySaveData::WriteJson, SDynamicRayCastEntitySaveData::WriteSimpleJson, SDynamicRayCastEntitySaveData::FromSimpleJson);

void SDynamicRayCastEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicRayCastEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRayIntersecting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsRayIntersecting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCurrentlyEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsCurrentlyEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicRayCastEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicRayCastEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRayIntersecting") << ":";
	p_Stream << s_Object->m_bIsRayIntersecting;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCurrentlyEnabled") << ":";
	p_Stream << s_Object->m_bIsCurrentlyEnabled;

	p_Stream << "}";
}

void SDynamicRayCastEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDynamicRayCastEntitySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bIsRayIntersecting = bool(p_Document["m_bIsRayIntersecting"]);

	s_Object.m_bIsCurrentlyEnabled = bool(p_Document["m_bIsCurrentlyEnabled"]);

	*reinterpret_cast<SDynamicRayCastEntitySaveData*>(p_Target) = s_Object;
}

void SDynamicRayCastEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SColorRGB::TypeInfo = ZHMTypeInfo("SColorRGB", sizeof(SColorRGB), alignof(SColorRGB), SColorRGB::WriteJson, SColorRGB::WriteSimpleJson, SColorRGB::FromSimpleJson);

void SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("r") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->r;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->g;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->b;
	p_Stream << "}";

	p_Stream << "}";
}

void SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("r") << ":";
	p_Stream << s_Object->r;
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << s_Object->g;
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << s_Object->b;

	p_Stream << "}";
}

void SColorRGB::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SColorRGB s_Object;

	s_Object.r = static_cast<float32>(double(p_Document["r"]));

	s_Object.g = static_cast<float32>(double(p_Document["g"]));

	s_Object.b = static_cast<float32>(double(p_Document["b"]));

	*reinterpret_cast<SColorRGB*>(p_Target) = s_Object;
}

void SColorRGB::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SPostfilterParametersSaveData::TypeInfo = ZHMTypeInfo("SPostfilterParametersSaveData", sizeof(SPostfilterParametersSaveData), alignof(SPostfilterParametersSaveData), SPostfilterParametersSaveData::WriteJson, SPostfilterParametersSaveData::WriteSimpleJson, SPostfilterParametersSaveData::FromSimpleJson);

void SPostfilterParametersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPostfilterParametersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDepthOfFieldEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDepthOfFieldEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDepthOfFieldBlurriness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDepthOfFieldBlurriness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRadialBlurEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRadialBlurEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurriness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRadialBlurriness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vRadialBlurCenter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vRadialBlurCenter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRadialBlurStart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialBlurEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSpatialBlurEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurriness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpatialBlurriness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vSpatialBlurCenter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vSpatialBlurCenter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpatialBlurStart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurFade") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpatialBlurFade;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDistortionWobbleEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistortionWobbleScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistortionWobbleScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleWaveLength") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vDistortionWobbleWaveLength, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vDistortionWobbleSpeed, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleUseRealTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDistortionWobbleUseRealTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDRActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHDRActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDREnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHDREnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vHDRAdaptationSpeed, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationLuminanceMinMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vHDRAdaptationLuminanceMinMax, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationMiddleGrayMinMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vHDRAdaptationMiddleGrayMinMax, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRWhitePoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHDRWhitePoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassThreshold") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHDRBrightPassThreshold;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassMaxPercentage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHDRBrightPassMaxPercentage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HDRColorTint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_HDRColorTint, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SPostfilterParametersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPostfilterParametersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDepthOfFieldEnabled") << ":";
	p_Stream << s_Object->m_bDepthOfFieldEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDepthOfFieldBlurriness") << ":";
	p_Stream << s_Object->m_fDepthOfFieldBlurriness;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRadialBlurEnabled") << ":";
	p_Stream << s_Object->m_bRadialBlurEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurriness") << ":";
	p_Stream << s_Object->m_fRadialBlurriness;
	p_Stream << ",";

	p_Stream << JsonStr("m_vRadialBlurCenter") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vRadialBlurCenter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurStart") << ":";
	p_Stream << s_Object->m_fRadialBlurStart;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialBlurEnabled") << ":";
	p_Stream << s_Object->m_bSpatialBlurEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurriness") << ":";
	p_Stream << s_Object->m_fSpatialBlurriness;
	p_Stream << ",";

	p_Stream << JsonStr("m_vSpatialBlurCenter") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vSpatialBlurCenter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurStart") << ":";
	p_Stream << s_Object->m_fSpatialBlurStart;
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurFade") << ":";
	p_Stream << s_Object->m_fSpatialBlurFade;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleEnabled") << ":";
	p_Stream << s_Object->m_bDistortionWobbleEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistortionWobbleScale") << ":";
	p_Stream << s_Object->m_fDistortionWobbleScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleWaveLength") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vDistortionWobbleWaveLength, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleSpeed") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vDistortionWobbleSpeed, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleUseRealTime") << ":";
	p_Stream << s_Object->m_bDistortionWobbleUseRealTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDRActive") << ":";
	p_Stream << s_Object->m_bHDRActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDREnabled") << ":";
	p_Stream << s_Object->m_bHDREnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationSpeed") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vHDRAdaptationSpeed, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationLuminanceMinMax") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vHDRAdaptationLuminanceMinMax, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationMiddleGrayMinMax") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vHDRAdaptationMiddleGrayMinMax, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRWhitePoint") << ":";
	p_Stream << s_Object->m_fHDRWhitePoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassThreshold") << ":";
	p_Stream << s_Object->m_fHDRBrightPassThreshold;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassMaxPercentage") << ":";
	p_Stream << s_Object->m_fHDRBrightPassMaxPercentage;
	p_Stream << ",";

	p_Stream << JsonStr("m_HDRColorTint") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_HDRColorTint, p_Stream);

	p_Stream << "}";
}

void SPostfilterParametersSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPostfilterParametersSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_bDepthOfFieldEnabled = bool(p_Document["m_bDepthOfFieldEnabled"]);

	s_Object.m_fDepthOfFieldBlurriness = static_cast<float32>(double(p_Document["m_fDepthOfFieldBlurriness"]));

	s_Object.m_bRadialBlurEnabled = bool(p_Document["m_bRadialBlurEnabled"]);

	s_Object.m_fRadialBlurriness = static_cast<float32>(double(p_Document["m_fRadialBlurriness"]));

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vRadialBlurCenter"], &s_Item);
		s_Object.m_vRadialBlurCenter = s_Item;
	}

	s_Object.m_fRadialBlurStart = static_cast<float32>(double(p_Document["m_fRadialBlurStart"]));

	s_Object.m_bSpatialBlurEnabled = bool(p_Document["m_bSpatialBlurEnabled"]);

	s_Object.m_fSpatialBlurriness = static_cast<float32>(double(p_Document["m_fSpatialBlurriness"]));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vSpatialBlurCenter"], &s_Item);
		s_Object.m_vSpatialBlurCenter = s_Item;
	}

	s_Object.m_fSpatialBlurStart = static_cast<float32>(double(p_Document["m_fSpatialBlurStart"]));

	s_Object.m_fSpatialBlurFade = static_cast<float32>(double(p_Document["m_fSpatialBlurFade"]));

	s_Object.m_bDistortionWobbleEnabled = bool(p_Document["m_bDistortionWobbleEnabled"]);

	s_Object.m_fDistortionWobbleScale = static_cast<float32>(double(p_Document["m_fDistortionWobbleScale"]));

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vDistortionWobbleWaveLength"], &s_Item);
		s_Object.m_vDistortionWobbleWaveLength = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vDistortionWobbleSpeed"], &s_Item);
		s_Object.m_vDistortionWobbleSpeed = s_Item;
	}

	s_Object.m_bDistortionWobbleUseRealTime = bool(p_Document["m_bDistortionWobbleUseRealTime"]);

	s_Object.m_bHDRActive = bool(p_Document["m_bHDRActive"]);

	s_Object.m_bHDREnabled = bool(p_Document["m_bHDREnabled"]);

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vHDRAdaptationSpeed"], &s_Item);
		s_Object.m_vHDRAdaptationSpeed = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vHDRAdaptationLuminanceMinMax"], &s_Item);
		s_Object.m_vHDRAdaptationLuminanceMinMax = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vHDRAdaptationMiddleGrayMinMax"], &s_Item);
		s_Object.m_vHDRAdaptationMiddleGrayMinMax = s_Item;
	}

	s_Object.m_fHDRWhitePoint = static_cast<float32>(double(p_Document["m_fHDRWhitePoint"]));

	s_Object.m_fHDRBrightPassThreshold = static_cast<float32>(double(p_Document["m_fHDRBrightPassThreshold"]));

	s_Object.m_fHDRBrightPassMaxPercentage = static_cast<float32>(double(p_Document["m_fHDRBrightPassMaxPercentage"]));

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_HDRColorTint"], &s_Item);
		s_Object.m_HDRColorTint = s_Item;
	}

	*reinterpret_cast<SPostfilterParametersSaveData*>(p_Target) = s_Object;
}

void SPostfilterParametersSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vRadialBlurCenter.Serialize(p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vRadialBlurCenter));	m_vSpatialBlurCenter.Serialize(p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vSpatialBlurCenter));	m_vDistortionWobbleWaveLength.Serialize(p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vDistortionWobbleWaveLength));	m_vDistortionWobbleSpeed.Serialize(p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vDistortionWobbleSpeed));	m_vHDRAdaptationSpeed.Serialize(p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vHDRAdaptationSpeed));	m_vHDRAdaptationLuminanceMinMax.Serialize(p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vHDRAdaptationLuminanceMinMax));	m_vHDRAdaptationMiddleGrayMinMax.Serialize(p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vHDRAdaptationMiddleGrayMinMax));	m_HDRColorTint.Serialize(p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_HDRColorTint));}

ZHMTypeInfo SEventHistorySaveData::TypeInfo = ZHMTypeInfo("SEventHistorySaveData", sizeof(SEventHistorySaveData), alignof(SEventHistorySaveData), SEventHistorySaveData::WriteJson, SEventHistorySaveData::WriteSimpleJson, SEventHistorySaveData::FromSimpleJson);

void SEventHistorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventHistorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aOccurences") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aOccurences.size(); ++i)
	{
		auto& s_Item = s_Object->m_aOccurences[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
		ZGameTime::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aOccurences.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEventHistorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventHistorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aOccurences") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aOccurences.size(); ++i)
	{
		auto& s_Item = s_Object->m_aOccurences[i];
		ZGameTime::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aOccurences.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEventHistorySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEventHistorySaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aOccurences"])
	{
		ZGameTime s_ArrayItem;
		ZGameTime::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aOccurences.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SEventHistorySaveData*>(p_Target) = s_Object;
}

void SEventHistorySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aOccurences.Serialize(p_Serializer, p_OwnOffset + offsetof(SEventHistorySaveData, m_aOccurences));}

ZHMTypeInfo SSerializedValue::TypeInfo = ZHMTypeInfo("SSerializedValue", sizeof(SSerializedValue), alignof(SSerializedValue), SSerializedValue::WriteJson, SSerializedValue::WriteSimpleJson, SSerializedValue::FromSimpleJson);

void SSerializedValue::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSerializedValue*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SSerializedValue::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSerializedValue*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SSerializedValue::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSerializedValue s_Object;

	*reinterpret_cast<SSerializedValue*>(p_Target) = s_Object;
}

void SSerializedValue::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IMetricValue::TypeInfo = ZHMTypeInfo("IMetricValue", sizeof(IMetricValue), alignof(IMetricValue), IMetricValue::WriteJson, IMetricValue::WriteSimpleJson, IMetricValue::FromSimpleJson);

void IMetricValue::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMetricValue*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMetricValue::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMetricValue*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMetricValue::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMetricValue s_Object;

	*reinterpret_cast<IMetricValue*>(p_Target) = s_Object;
}

void IMetricValue::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZEntityPath::TypeInfo = ZHMTypeInfo("ZEntityPath", sizeof(ZEntityPath), alignof(ZEntityPath), ZEntityPath::WriteJson, ZEntityPath::WriteSimpleJson, ZEntityPath::FromSimpleJson);

void ZEntityPath::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityPath*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEntityPath::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityPath*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZEntityPath::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityPath s_Object;

	*reinterpret_cast<ZEntityPath*>(p_Target) = s_Object;
}

void ZEntityPath::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZInteractionData::TypeInfo = ZHMTypeInfo("ZInteractionData", sizeof(ZInteractionData), alignof(ZInteractionData), ZInteractionData::WriteJson, ZInteractionData::WriteSimpleJson, ZInteractionData::FromSimpleJson);

void ZInteractionData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInteractionData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZInteractionData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInteractionData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZInteractionData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInteractionData s_Object;

	*reinterpret_cast<ZInteractionData*>(p_Target) = s_Object;
}

void ZInteractionData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMovementAgilitySaveData::TypeInfo = ZHMTypeInfo("SMovementAgilitySaveData", sizeof(SMovementAgilitySaveData), alignof(SMovementAgilitySaveData), SMovementAgilitySaveData::WriteJson, SMovementAgilitySaveData::WriteSimpleJson, SMovementAgilitySaveData::FromSimpleJson);

void SMovementAgilitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementAgilitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rLedgeGuide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rLedgeGuide;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceLeftRightTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFaceLeftRightTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePrevAgilityState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAgilityState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePrevAgilityState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_ePrevAgilityState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAgilityState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAgilityState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAgilityState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_eAgilityState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nActiveAnimNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nActiveAnimNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eCameraOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECameraOffset_old") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eCameraOffset) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECameraOffset_old", static_cast<int>(s_Object->m_eCameraOffset))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementAgilitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementAgilitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rLedgeGuide") << ":";
	p_Stream << s_Object->m_rLedgeGuide;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceLeftRightTarget") << ":";
	p_Stream << s_Object->m_fFaceLeftRightTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_ePrevAgilityState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_ePrevAgilityState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eAgilityState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_eAgilityState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nActiveAnimNode") << ":";
	p_Stream << s_Object->m_nActiveAnimNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_eCameraOffset") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECameraOffset_old", static_cast<int>(s_Object->m_eCameraOffset)));

	p_Stream << "}";
}

void SMovementAgilitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementAgilitySaveData s_Object;

	s_Object.m_rLedgeGuide = static_cast<uint32>(int64_t(p_Document["m_rLedgeGuide"]));

	s_Object.m_fFaceLeftRightTarget = static_cast<float32>(double(p_Document["m_fFaceLeftRightTarget"]));

	s_Object.m_ePrevAgilityState = static_cast<EAgilityState>(ZHMEnums::GetEnumValueByName("EAgilityState", std::string_view(p_Document["m_ePrevAgilityState"])));

	s_Object.m_eAgilityState = static_cast<EAgilityState>(ZHMEnums::GetEnumValueByName("EAgilityState", std::string_view(p_Document["m_eAgilityState"])));

	s_Object.m_nActiveAnimNode = static_cast<uint32>(int64_t(p_Document["m_nActiveAnimNode"]));

	s_Object.m_eCameraOffset = static_cast<ECameraOffset_old>(ZHMEnums::GetEnumValueByName("ECameraOffset_old", std::string_view(p_Document["m_eCameraOffset"])));

	*reinterpret_cast<SMovementAgilitySaveData*>(p_Target) = s_Object;
}

void SMovementAgilitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SClothVertex::TypeInfo = ZHMTypeInfo("SClothVertex", sizeof(SClothVertex), alignof(SClothVertex), SClothVertex::WriteJson, SClothVertex::WriteSimpleJson, SClothVertex::FromSimpleJson);

void SClothVertex::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothVertex*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nColumn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nColumn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRow;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothVertex::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothVertex*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nColumn") << ":";
	p_Stream << s_Object->m_nColumn;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRow") << ":";
	p_Stream << s_Object->m_nRow;

	p_Stream << "}";
}

void SClothVertex::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SClothVertex s_Object;

	s_Object.m_nColumn = static_cast<uint16>(int64_t(p_Document["m_nColumn"]));

	s_Object.m_nRow = static_cast<uint16>(int64_t(p_Document["m_nRow"]));

	*reinterpret_cast<SClothVertex*>(p_Target) = s_Object;
}

void SClothVertex::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorManagerReferencableData::TypeInfo = ZHMTypeInfo("SActorManagerReferencableData", sizeof(SActorManagerReferencableData), alignof(SActorManagerReferencableData), SActorManagerReferencableData::WriteJson, SActorManagerReferencableData::WriteSimpleJson, SActorManagerReferencableData::FromSimpleJson);

void SActorManagerReferencableData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorManagerReferencableData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aSituationTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSituationTypes.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSituationTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Item))) << "}";
		p_Stream << "}";

		if (i < s_Object->m_aSituationTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorManagerReferencableData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorManagerReferencableData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aSituationTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSituationTypes.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSituationTypes[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Item)));

		if (i < s_Object->m_aSituationTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorManagerReferencableData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorManagerReferencableData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aSituationTypes"])
	{
		s_Object.m_aSituationTypes.push_back(static_cast<ESituationType>(ZHMEnums::GetEnumValueByName("ESituationType", std::string_view(s_Item))));
	}

	*reinterpret_cast<SActorManagerReferencableData*>(p_Target) = s_Object;
}

void SActorManagerReferencableData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aSituationTypes.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorManagerReferencableData, m_aSituationTypes));}

ZHMTypeInfo ZEntityRef::TypeInfo = ZHMTypeInfo("ZEntityRef", sizeof(ZEntityRef), alignof(ZEntityRef), ZEntityRef::WriteJson, ZEntityRef::WriteSimpleJson, ZEntityRef::FromSimpleJson);

void ZEntityRef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityRef*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEntityRef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityRef*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZEntityRef::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityRef s_Object;

	*reinterpret_cast<ZEntityRef*>(p_Target) = s_Object;
}

void ZEntityRef::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDeadBodyInfoSaveData::TypeInfo = ZHMTypeInfo("SDeadBodyInfoSaveData", sizeof(SDeadBodyInfoSaveData), alignof(SDeadBodyInfoSaveData), SDeadBodyInfoSaveData::WriteJson, SDeadBodyInfoSaveData::WriteSimpleJson, SDeadBodyInfoSaveData::FromSimpleJson);

void SDeadBodyInfoSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDeadBodyInfoSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_knownByActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_knownByActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_knownByActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_knownByActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tKnownSince") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tKnownSince, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tInvestigatedSince") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tInvestigatedSince, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGuarded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGuarded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBodyInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBodyInvestigated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByAccident") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadByAccident;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByUnnoticed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadByUnnoticed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHitmanSuspectedInCurrentOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHitmanSuspectedInCurrentOutfit;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByExplosion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadByExplosion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsFoundOutsideNavmeshAndIgnored") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsFoundOutsideNavmeshAndIgnored;
	p_Stream << "}";

	p_Stream << "}";
}

void SDeadBodyInfoSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDeadBodyInfoSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_knownByActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_knownByActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_knownByActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_knownByActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tKnownSince") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tKnownSince, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tInvestigatedSince") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tInvestigatedSince, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bGuarded") << ":";
	p_Stream << s_Object->m_bGuarded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBodyInvestigated") << ":";
	p_Stream << s_Object->m_bBodyInvestigated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHidden") << ":";
	p_Stream << s_Object->m_bHidden;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByAccident") << ":";
	p_Stream << s_Object->m_bDeadByAccident;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByUnnoticed") << ":";
	p_Stream << s_Object->m_bDeadByUnnoticed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHitmanSuspectedInCurrentOutfit") << ":";
	p_Stream << s_Object->m_bHitmanSuspectedInCurrentOutfit;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByExplosion") << ":";
	p_Stream << s_Object->m_bDeadByExplosion;
	p_Stream << ",";

	p_Stream << JsonStr("m_IsFoundOutsideNavmeshAndIgnored") << ":";
	p_Stream << s_Object->m_IsFoundOutsideNavmeshAndIgnored;

	p_Stream << "}";
}

void SDeadBodyInfoSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDeadBodyInfoSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rGuard = static_cast<uint32>(int64_t(p_Document["m_rGuard"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_knownByActors"])
	{
		s_Object.m_knownByActors.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tKnownSince"], &s_Item);
		s_Object.m_tKnownSince = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tInvestigatedSince"], &s_Item);
		s_Object.m_tInvestigatedSince = s_Item;
	}

	s_Object.m_bGuarded = bool(p_Document["m_bGuarded"]);

	s_Object.m_bBodyInvestigated = bool(p_Document["m_bBodyInvestigated"]);

	s_Object.m_bHidden = bool(p_Document["m_bHidden"]);

	s_Object.m_bDeadByAccident = bool(p_Document["m_bDeadByAccident"]);

	s_Object.m_bDeadByUnnoticed = bool(p_Document["m_bDeadByUnnoticed"]);

	s_Object.m_bHitmanSuspectedInCurrentOutfit = bool(p_Document["m_bHitmanSuspectedInCurrentOutfit"]);

	s_Object.m_bDeadByExplosion = bool(p_Document["m_bDeadByExplosion"]);

	s_Object.m_IsFoundOutsideNavmeshAndIgnored = bool(p_Document["m_IsFoundOutsideNavmeshAndIgnored"]);

	*reinterpret_cast<SDeadBodyInfoSaveData*>(p_Target) = s_Object;
}

void SDeadBodyInfoSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_knownByActors.Serialize(p_Serializer, p_OwnOffset + offsetof(SDeadBodyInfoSaveData, m_knownByActors));	m_tKnownSince.Serialize(p_Serializer, p_OwnOffset + offsetof(SDeadBodyInfoSaveData, m_tKnownSince));	m_tInvestigatedSince.Serialize(p_Serializer, p_OwnOffset + offsetof(SDeadBodyInfoSaveData, m_tInvestigatedSince));}

ZHMTypeInfo SDeadBodySensorSaveData::TypeInfo = ZHMTypeInfo("SDeadBodySensorSaveData", sizeof(SDeadBodySensorSaveData), alignof(SDeadBodySensorSaveData), SDeadBodySensorSaveData::WriteJson, SDeadBodySensorSaveData::WriteSimpleJson, SDeadBodySensorSaveData::FromSimpleJson);

void SDeadBodySensorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDeadBodySensorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBodies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDeadBodyInfoSaveData") << "," << JsonStr("$val") << ":";
		SDeadBodyInfoSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBodies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBodyIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SDeadBodySensorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDeadBodySensorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBodies[i];
		SDeadBodyInfoSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBodies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyIndex") << ":";
	p_Stream << s_Object->m_nBodyIndex;

	p_Stream << "}";
}

void SDeadBodySensorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDeadBodySensorSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aBodies"])
	{
		SDeadBodyInfoSaveData s_ArrayItem;
		SDeadBodyInfoSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aBodies.push_back(s_ArrayItem);
	}

	s_Object.m_nBodyIndex = static_cast<int32>(int64_t(p_Document["m_nBodyIndex"]));

	*reinterpret_cast<SDeadBodySensorSaveData*>(p_Target) = s_Object;
}

void SDeadBodySensorSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aBodies.Serialize(p_Serializer, p_OwnOffset + offsetof(SDeadBodySensorSaveData, m_aBodies));}

ZHMTypeInfo SCheckLastPositionGroupSaveData::TypeInfo = ZHMTypeInfo("SCheckLastPositionGroupSaveData", sizeof(SCheckLastPositionGroupSaveData), alignof(SCheckLastPositionGroupSaveData), SCheckLastPositionGroupSaveData::WriteJson, SCheckLastPositionGroupSaveData::WriteSimpleJson, SCheckLastPositionGroupSaveData::FromSimpleJson);

void SCheckLastPositionGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCheckLastPositionGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLeaderTargetNodeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLeaderTargetNodeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeaderOrderAssigned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLeaderOrderAssigned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAssistantOrderAssigned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAssistantOrderAssigned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSearchCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSearchCompleted;
	p_Stream << "}";

	p_Stream << "}";
}

void SCheckLastPositionGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCheckLastPositionGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLeaderTargetNodeIndex") << ":";
	p_Stream << s_Object->m_nLeaderTargetNodeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeaderOrderAssigned") << ":";
	p_Stream << s_Object->m_bLeaderOrderAssigned;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAssistantOrderAssigned") << ":";
	p_Stream << s_Object->m_bAssistantOrderAssigned;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSearchCompleted") << ":";
	p_Stream << s_Object->m_bSearchCompleted;

	p_Stream << "}";
}

void SCheckLastPositionGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCheckLastPositionGroupSaveData s_Object;

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_pAssistant = static_cast<uint32>(int64_t(p_Document["m_pAssistant"]));

	s_Object.m_nLeaderTargetNodeIndex = static_cast<uint16>(int64_t(p_Document["m_nLeaderTargetNodeIndex"]));

	s_Object.m_bLeaderOrderAssigned = bool(p_Document["m_bLeaderOrderAssigned"]);

	s_Object.m_bAssistantOrderAssigned = bool(p_Document["m_bAssistantOrderAssigned"]);

	s_Object.m_bSearchCompleted = bool(p_Document["m_bSearchCompleted"]);

	*reinterpret_cast<SCheckLastPositionGroupSaveData*>(p_Target) = s_Object;
}

void SCheckLastPositionGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SWaveformGeneratorSaveData::TypeInfo = ZHMTypeInfo("SWaveformGeneratorSaveData", sizeof(SWaveformGeneratorSaveData), alignof(SWaveformGeneratorSaveData), SWaveformGeneratorSaveData::WriteJson, SWaveformGeneratorSaveData::WriteSimpleJson, SWaveformGeneratorSaveData::FromSimpleJson);

void SWaveformGeneratorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWaveformGeneratorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFrequency") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFrequency;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStartTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCount;
	p_Stream << "}";

	p_Stream << "}";
}

void SWaveformGeneratorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWaveformGeneratorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fTime") << ":";
	p_Stream << s_Object->m_fTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFrequency") << ":";
	p_Stream << s_Object->m_fFrequency;
	p_Stream << ",";

	p_Stream << JsonStr("m_fOffset") << ":";
	p_Stream << s_Object->m_fOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_fScale") << ":";
	p_Stream << s_Object->m_fScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartTime") << ":";
	p_Stream << s_Object->m_fStartTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCount") << ":";
	p_Stream << s_Object->m_nCount;

	p_Stream << "}";
}

void SWaveformGeneratorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWaveformGeneratorSaveData s_Object;

	s_Object.m_fTime = static_cast<float32>(double(p_Document["m_fTime"]));

	s_Object.m_fFrequency = static_cast<float32>(double(p_Document["m_fFrequency"]));

	s_Object.m_fOffset = static_cast<float32>(double(p_Document["m_fOffset"]));

	s_Object.m_fScale = static_cast<float32>(double(p_Document["m_fScale"]));

	s_Object.m_fStartTime = static_cast<float32>(double(p_Document["m_fStartTime"]));

	s_Object.m_nCount = static_cast<uint32>(int64_t(p_Document["m_nCount"]));

	*reinterpret_cast<SWaveformGeneratorSaveData*>(p_Target) = s_Object;
}

void SWaveformGeneratorSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorSpreadTransitionOperatorMaterialActorSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadTransitionOperatorMaterialActorSaveData", sizeof(SActorSpreadTransitionOperatorMaterialActorSaveData), alignof(SActorSpreadTransitionOperatorMaterialActorSaveData), SActorSpreadTransitionOperatorMaterialActorSaveData::WriteJson, SActorSpreadTransitionOperatorMaterialActorSaveData::WriteSimpleJson, SActorSpreadTransitionOperatorMaterialActorSaveData::FromSimpleJson);

void SActorSpreadTransitionOperatorMaterialActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_Actor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOpacity;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Actor") << ":";
	p_Stream << s_Object->m_Actor;
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << s_Object->m_fOpacity;

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSpreadTransitionOperatorMaterialActorSaveData s_Object;

	s_Object.m_Actor = static_cast<uint32>(int64_t(p_Document["m_Actor"]));

	s_Object.m_fOpacity = static_cast<float32>(double(p_Document["m_fOpacity"]));

	*reinterpret_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Target) = s_Object;
}

void SActorSpreadTransitionOperatorMaterialActorSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SEntityPath::TypeInfo = ZHMTypeInfo("SEntityPath", sizeof(SEntityPath), alignof(SEntityPath), SEntityPath::WriteJson, SEntityPath::WriteSimpleJson, SEntityPath::FromSimpleJson);

void SEntityPath::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPath*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nOwnerID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOwnerID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityPath[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntityPath.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEntityPath::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPath*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nOwnerID") << ":";
	p_Stream << s_Object->m_nOwnerID;
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPath.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityPath[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntityPath.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEntityPath::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityPath s_Object;

	s_Object.m_nOwnerID = uint64(p_Document["m_nOwnerID"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntityPath"])
	{
		s_Object.m_aEntityPath.push_back(uint64(s_Item));
	}

	*reinterpret_cast<SEntityPath*>(p_Target) = s_Object;
}

void SEntityPath::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntityPath.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityPath, m_aEntityPath));}

ZHMTypeInfo SZHUDIgnoreVisibilitySaveData::TypeInfo = ZHMTypeInfo("SZHUDIgnoreVisibilitySaveData", sizeof(SZHUDIgnoreVisibilitySaveData), alignof(SZHUDIgnoreVisibilitySaveData), SZHUDIgnoreVisibilitySaveData::WriteJson, SZHUDIgnoreVisibilitySaveData::WriteSimpleJson, SZHUDIgnoreVisibilitySaveData::FromSimpleJson);

void SZHUDIgnoreVisibilitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SZHUDIgnoreVisibilitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("alpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->alpha;
	p_Stream << "}";

	p_Stream << "}";
}

void SZHUDIgnoreVisibilitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SZHUDIgnoreVisibilitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("alpha") << ":";
	p_Stream << s_Object->alpha;

	p_Stream << "}";
}

void SZHUDIgnoreVisibilitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SZHUDIgnoreVisibilitySaveData s_Object;

	s_Object.alpha = static_cast<float32>(double(p_Document["alpha"]));

	*reinterpret_cast<SZHUDIgnoreVisibilitySaveData*>(p_Target) = s_Object;
}

void SZHUDIgnoreVisibilitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SGameCamProfileEntitySaveData::TypeInfo = ZHMTypeInfo("SGameCamProfileEntitySaveData", sizeof(SGameCamProfileEntitySaveData), alignof(SGameCamProfileEntitySaveData), SGameCamProfileEntitySaveData::WriteJson, SGameCamProfileEntitySaveData::WriteSimpleJson, SGameCamProfileEntitySaveData::FromSimpleJson);

void SGameCamProfileEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameCamProfileEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << "}";

	p_Stream << "}";
}

void SGameCamProfileEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameCamProfileEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << s_Object->m_rHero;

	p_Stream << "}";
}

void SGameCamProfileEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameCamProfileEntitySaveData s_Object;

	s_Object.m_bIsEnabled = bool(p_Document["m_bIsEnabled"]);

	s_Object.m_rHero = static_cast<uint32>(int64_t(p_Document["m_rHero"]));

	*reinterpret_cast<SGameCamProfileEntitySaveData*>(p_Target) = s_Object;
}

void SGameCamProfileEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SEntityTemplateExposedEntity::TypeInfo = ZHMTypeInfo("SEntityTemplateExposedEntity", sizeof(SEntityTemplateExposedEntity), alignof(SEntityTemplateExposedEntity), SEntityTemplateExposedEntity::WriteJson, SEntityTemplateExposedEntity::WriteSimpleJson, SEntityTemplateExposedEntity::FromSimpleJson);

void SEntityTemplateExposedEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateExposedEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aTargets.size(); ++i)
	{
		auto& s_Item = s_Object->aTargets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
		SEntityTemplateReference::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aTargets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTemplateExposedEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateExposedEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << ",";

	p_Stream << JsonStr("aTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aTargets.size(); ++i)
	{
		auto& s_Item = s_Object->aTargets[i];
		SEntityTemplateReference::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->aTargets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTemplateExposedEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateExposedEntity s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	s_Object.bIsArray = bool(p_Document["bIsArray"]);

	for (simdjson::ondemand::value s_Item : p_Document["aTargets"])
	{
		SEntityTemplateReference s_ArrayItem;
		SEntityTemplateReference::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.aTargets.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SEntityTemplateExposedEntity*>(p_Target) = s_Object;
}

void SEntityTemplateExposedEntity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplateExposedEntity, sName));	aTargets.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplateExposedEntity, aTargets));}

ZHMTypeInfo SVolumeTriggerListenerSaveData::TypeInfo = ZHMTypeInfo("SVolumeTriggerListenerSaveData", sizeof(SVolumeTriggerListenerSaveData), alignof(SVolumeTriggerListenerSaveData), SVolumeTriggerListenerSaveData::WriteJson, SVolumeTriggerListenerSaveData::WriteSimpleJson, SVolumeTriggerListenerSaveData::FromSimpleJson);

void SVolumeTriggerListenerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVolumeTriggerListenerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bColliding") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bColliding;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInternalEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInternalEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SVolumeTriggerListenerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVolumeTriggerListenerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bColliding") << ":";
	p_Stream << s_Object->m_bColliding;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInternalEnabled") << ":";
	p_Stream << s_Object->m_bInternalEnabled;

	p_Stream << "}";
}

void SVolumeTriggerListenerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVolumeTriggerListenerSaveData s_Object;

	s_Object.m_bColliding = bool(p_Document["m_bColliding"]);

	s_Object.m_bInternalEnabled = bool(p_Document["m_bInternalEnabled"]);

	*reinterpret_cast<SVolumeTriggerListenerSaveData*>(p_Target) = s_Object;
}

void SVolumeTriggerListenerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SVolumeTriggersSaveData::TypeInfo = ZHMTypeInfo("SVolumeTriggersSaveData", sizeof(SVolumeTriggersSaveData), alignof(SVolumeTriggersSaveData), SVolumeTriggersSaveData::WriteJson, SVolumeTriggersSaveData::WriteSimpleJson, SVolumeTriggersSaveData::FromSimpleJson);

void SVolumeTriggersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVolumeTriggersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVolumeTriggerListenerSaveData") << "," << JsonStr("$val") << ":";
		SVolumeTriggerListenerSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SVolumeTriggersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVolumeTriggersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SVolumeTriggerListenerSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SVolumeTriggersSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVolumeTriggersSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SVolumeTriggerListenerSaveData s_ArrayItem;
		SVolumeTriggerListenerSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SVolumeTriggersSaveData*>(p_Target) = s_Object;
}

void SVolumeTriggersSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SVolumeTriggersSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SVolumeTriggersSaveData, m_aData));}

ZHMTypeInfo SFaceOrderSaveData::TypeInfo = ZHMTypeInfo("SFaceOrderSaveData", sizeof(SFaceOrderSaveData), alignof(SFaceOrderSaveData), SFaceOrderSaveData::WriteJson, SFaceOrderSaveData::WriteSimpleJson, SFaceOrderSaveData::FromSimpleJson);

void SFaceOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFaceOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bLookAt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLookAt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAimAt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateKnownPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUpdateKnownPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopActFast;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDurationVariance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDurationVariance;
	p_Stream << "}";

	p_Stream << "}";
}

void SFaceOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFaceOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bLookAt") << ":";
	p_Stream << s_Object->m_bLookAt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAt") << ":";
	p_Stream << s_Object->m_bAimAt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateKnownPosition") << ":";
	p_Stream << s_Object->m_bUpdateKnownPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << s_Object->m_bStopActFast;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDurationVariance") << ":";
	p_Stream << s_Object->m_fDurationVariance;

	p_Stream << "}";
}

void SFaceOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFaceOrderSaveData s_Object;

	s_Object.m_bLookAt = bool(p_Document["m_bLookAt"]);

	s_Object.m_bAimAt = bool(p_Document["m_bAimAt"]);

	s_Object.m_bUpdateKnownPosition = bool(p_Document["m_bUpdateKnownPosition"]);

	s_Object.m_bStopActFast = bool(p_Document["m_bStopActFast"]);

	s_Object.m_fDuration = static_cast<float32>(double(p_Document["m_fDuration"]));

	s_Object.m_fDurationVariance = static_cast<float32>(double(p_Document["m_fDurationVariance"]));

	*reinterpret_cast<SFaceOrderSaveData*>(p_Target) = s_Object;
}

void SFaceOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SBoneAttachSaveData::TypeInfo = ZHMTypeInfo("SBoneAttachSaveData", sizeof(SBoneAttachSaveData), alignof(SBoneAttachSaveData), SBoneAttachSaveData::WriteJson, SBoneAttachSaveData::WriteSimpleJson, SBoneAttachSaveData::FromSimpleJson);

void SBoneAttachSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneAttachSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsAttached;
	p_Stream << "}";

	p_Stream << "}";
}

void SBoneAttachSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneAttachSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << s_Object->m_bIsAttached;

	p_Stream << "}";
}

void SBoneAttachSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBoneAttachSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_bIsAttached = bool(p_Document["m_bIsAttached"]);

	*reinterpret_cast<SBoneAttachSaveData*>(p_Target) = s_Object;
}

void SBoneAttachSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SVIPEvacuationNodeSaveData::TypeInfo = ZHMTypeInfo("SVIPEvacuationNodeSaveData", sizeof(SVIPEvacuationNodeSaveData), alignof(SVIPEvacuationNodeSaveData), SVIPEvacuationNodeSaveData::WriteJson, SVIPEvacuationNodeSaveData::WriteSimpleJson, SVIPEvacuationNodeSaveData::FromSimpleJson);

void SVIPEvacuationNodeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVIPEvacuationNodeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fPenaltyMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPenaltyMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPenaltyDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPenaltyDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tPenalty") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tPenalty, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_compromisedOnEnter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_compromisedOnEnter;
	p_Stream << "}";

	p_Stream << "}";
}

void SVIPEvacuationNodeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVIPEvacuationNodeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fPenaltyMultiplier") << ":";
	p_Stream << s_Object->m_fPenaltyMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPenaltyDuration") << ":";
	p_Stream << s_Object->m_fPenaltyDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_tPenalty") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tPenalty, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_compromisedOnEnter") << ":";
	p_Stream << s_Object->m_compromisedOnEnter;

	p_Stream << "}";
}

void SVIPEvacuationNodeSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVIPEvacuationNodeSaveData s_Object;

	s_Object.m_fPenaltyMultiplier = static_cast<float32>(double(p_Document["m_fPenaltyMultiplier"]));

	s_Object.m_fPenaltyDuration = static_cast<float32>(double(p_Document["m_fPenaltyDuration"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tPenalty"], &s_Item);
		s_Object.m_tPenalty = s_Item;
	}

	s_Object.m_bIsEnabled = bool(p_Document["m_bIsEnabled"]);

	s_Object.m_compromisedOnEnter = bool(p_Document["m_compromisedOnEnter"]);

	*reinterpret_cast<SVIPEvacuationNodeSaveData*>(p_Target) = s_Object;
}

void SVIPEvacuationNodeSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tPenalty.Serialize(p_Serializer, p_OwnOffset + offsetof(SVIPEvacuationNodeSaveData, m_tPenalty));}

ZHMTypeInfo SVIPEvacuationNodesSaveData::TypeInfo = ZHMTypeInfo("SVIPEvacuationNodesSaveData", sizeof(SVIPEvacuationNodesSaveData), alignof(SVIPEvacuationNodesSaveData), SVIPEvacuationNodesSaveData::WriteJson, SVIPEvacuationNodesSaveData::WriteSimpleJson, SVIPEvacuationNodesSaveData::FromSimpleJson);

void SVIPEvacuationNodesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVIPEvacuationNodesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVIPEvacuationNodeSaveData") << "," << JsonStr("$val") << ":";
		SVIPEvacuationNodeSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SVIPEvacuationNodesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVIPEvacuationNodesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SVIPEvacuationNodeSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SVIPEvacuationNodesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVIPEvacuationNodesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SVIPEvacuationNodeSaveData s_ArrayItem;
		SVIPEvacuationNodeSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SVIPEvacuationNodesSaveData*>(p_Target) = s_Object;
}

void SVIPEvacuationNodesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SVIPEvacuationNodesSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SVIPEvacuationNodesSaveData, m_aData));}

ZHMTypeInfo SExactCompressedGridFloatField::TypeInfo = ZHMTypeInfo("SExactCompressedGridFloatField", sizeof(SExactCompressedGridFloatField), alignof(SExactCompressedGridFloatField), SExactCompressedGridFloatField::WriteJson, SExactCompressedGridFloatField::WriteSimpleJson, SExactCompressedGridFloatField::FromSimpleJson);

void SExactCompressedGridFloatField::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExactCompressedGridFloatField*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_aValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SExactCompressedGridFloatField::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExactCompressedGridFloatField*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_aValues[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SExactCompressedGridFloatField::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExactCompressedGridFloatField s_Object;

	s_Object.m_fInitialValue = static_cast<float32>(double(p_Document["m_fInitialValue"]));

	s_Object.m_nFieldSize = static_cast<uint32>(int64_t(p_Document["m_nFieldSize"]));

	s_Object.m_nGridCRC = static_cast<uint32>(int64_t(p_Document["m_nGridCRC"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aIndices"])
	{
		s_Object.m_aIndices.push_back(static_cast<uint16>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aValues"])
	{
		s_Object.m_aValues.push_back(static_cast<float32>(double(s_Item)));
	}

	*reinterpret_cast<SExactCompressedGridFloatField*>(p_Target) = s_Object;
}

void SExactCompressedGridFloatField::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aIndices.Serialize(p_Serializer, p_OwnOffset + offsetof(SExactCompressedGridFloatField, m_aIndices));	m_aValues.Serialize(p_Serializer, p_OwnOffset + offsetof(SExactCompressedGridFloatField, m_aValues));}

ZHMTypeInfo SIntelData::TypeInfo = ZHMTypeInfo("SIntelData", sizeof(SIntelData), alignof(SIntelData), SIntelData::WriteJson, SIntelData::WriteSimpleJson, SIntelData::FromSimpleJson);

void SIntelData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sHeadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sHeadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyHeadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyHeadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodytext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sBodytext);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sImage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sImage);
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sHeadline") << ":";
	p_Stream << JsonStr(s_Object->m_sHeadline);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyHeadline") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyHeadline);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodytext") << ":";
	p_Stream << JsonStr(s_Object->m_sBodytext);
	p_Stream << ",";

	p_Stream << JsonStr("m_sImage") << ":";
	p_Stream << JsonStr(s_Object->m_sImage);

	p_Stream << "}";
}

void SIntelData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelData s_Object;

	s_Object.m_sHeadline = std::string_view(p_Document["m_sHeadline"]);

	s_Object.m_sBodyHeadline = std::string_view(p_Document["m_sBodyHeadline"]);

	s_Object.m_sBodytext = std::string_view(p_Document["m_sBodytext"]);

	s_Object.m_sImage = std::string_view(p_Document["m_sImage"]);

	*reinterpret_cast<SIntelData*>(p_Target) = s_Object;
}

void SIntelData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sHeadline.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelData, m_sHeadline));	m_sBodyHeadline.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelData, m_sBodyHeadline));	m_sBodytext.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelData, m_sBodytext));	m_sImage.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelData, m_sImage));}

ZHMTypeInfo SHeroItemAttachmentSaveData::TypeInfo = ZHMTypeInfo("SHeroItemAttachmentSaveData", sizeof(SHeroItemAttachmentSaveData), alignof(SHeroItemAttachmentSaveData), SHeroItemAttachmentSaveData::WriteJson, SHeroItemAttachmentSaveData::WriteSimpleJson, SHeroItemAttachmentSaveData::FromSimpleJson);

void SHeroItemAttachmentSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroItemAttachmentSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroItemAttachmentSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroItemAttachmentSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SHeroItemAttachmentSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroItemAttachmentSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SHeroItemAttachmentSaveData*>(p_Target) = s_Object;
}

void SHeroItemAttachmentSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SColorRGBA::TypeInfo = ZHMTypeInfo("SColorRGBA", sizeof(SColorRGBA), alignof(SColorRGBA), SColorRGBA::WriteJson, SColorRGBA::WriteSimpleJson, SColorRGBA::FromSimpleJson);

void SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("r") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->r;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->g;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->b;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->a;
	p_Stream << "}";

	p_Stream << "}";
}

void SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("r") << ":";
	p_Stream << s_Object->r;
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << s_Object->g;
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << s_Object->b;
	p_Stream << ",";

	p_Stream << JsonStr("a") << ":";
	p_Stream << s_Object->a;

	p_Stream << "}";
}

void SColorRGBA::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SColorRGBA s_Object;

	s_Object.r = static_cast<float32>(double(p_Document["r"]));

	s_Object.g = static_cast<float32>(double(p_Document["g"]));

	s_Object.b = static_cast<float32>(double(p_Document["b"]));

	s_Object.a = static_cast<float32>(double(p_Document["a"]));

	*reinterpret_cast<SColorRGBA*>(p_Target) = s_Object;
}

void SColorRGBA::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SLightSaveData::TypeInfo = ZHMTypeInfo("SLightSaveData", sizeof(SLightSaveData), alignof(SLightSaveData), SLightSaveData::WriteJson, SLightSaveData::WriteSimpleJson, SLightSaveData::FromSimpleJson);

void SLightSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLightSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DiffuseColor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_DiffuseColor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAspectXByY_Actual") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAspectXByY_Actual;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SLightSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLightSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_DiffuseColor") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_DiffuseColor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAspectXByY_Actual") << ":";
	p_Stream << s_Object->m_fAspectXByY_Actual;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

void SLightSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLightSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_DiffuseColor"], &s_Item);
		s_Object.m_DiffuseColor = s_Item;
	}

	s_Object.m_fDiffusePower = static_cast<float32>(double(p_Document["m_fDiffusePower"]));

	s_Object.m_fAspectXByY_Actual = static_cast<float32>(double(p_Document["m_fAspectXByY_Actual"]));

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	*reinterpret_cast<SLightSaveData*>(p_Target) = s_Object;
}

void SLightSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_DiffuseColor.Serialize(p_Serializer, p_OwnOffset + offsetof(SLightSaveData, m_DiffuseColor));}

ZHMTypeInfo STemplateEntityFactory::TypeInfo = ZHMTypeInfo("STemplateEntityFactory", sizeof(STemplateEntityFactory), alignof(STemplateEntityFactory), STemplateEntityFactory::WriteJson, STemplateEntityFactory::WriteSimpleJson, STemplateEntityFactory::FromSimpleJson);

void STemplateEntityFactory::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateEntityFactory*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("subType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->subType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item = s_Object->subEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STemplateFactorySubEntity") << "," << JsonStr("$val") << ":";
		STemplateFactorySubEntity::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("propertyOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->propertyOverrides[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePropertyOverride") << "," << JsonStr("$val") << ":";
		SEntityTemplatePropertyOverride::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyOverrides.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntityFactory::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateEntityFactory*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("subType") << ":";
	p_Stream << s_Object->subType;
	p_Stream << ",";

	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item = s_Object->subEntities[i];
		STemplateFactorySubEntity::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("propertyOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->propertyOverrides[i];
		SEntityTemplatePropertyOverride::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->propertyOverrides.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << s_Item;

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntityFactory::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateEntityFactory s_Object;

	s_Object.subType = static_cast<int32>(int64_t(p_Document["subType"]));

	s_Object.blueprintIndexInResourceHeader = static_cast<int32>(int64_t(p_Document["blueprintIndexInResourceHeader"]));

	s_Object.rootEntityIndex = static_cast<int32>(int64_t(p_Document["rootEntityIndex"]));

	for (simdjson::ondemand::value s_Item : p_Document["subEntities"])
	{
		STemplateFactorySubEntity s_ArrayItem;
		STemplateFactorySubEntity::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.subEntities.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["propertyOverrides"])
	{
		SEntityTemplatePropertyOverride s_ArrayItem;
		SEntityTemplatePropertyOverride::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.propertyOverrides.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["externalSceneTypeIndicesInResourceHeader"])
	{
		s_Object.externalSceneTypeIndicesInResourceHeader.push_back(static_cast<int32>(int64_t(s_Item)));
	}

	*reinterpret_cast<STemplateEntityFactory*>(p_Target) = s_Object;
}

void STemplateEntityFactory::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	subEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityFactory, subEntities));	propertyOverrides.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityFactory, propertyOverrides));	externalSceneTypeIndicesInResourceHeader.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityFactory, externalSceneTypeIndicesInResourceHeader));}

ZHMTypeInfo SMathDistanceSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector3", sizeof(SMathDistanceSaveData_SVector3), alignof(SMathDistanceSaveData_SVector3), SMathDistanceSaveData_SVector3::WriteJson, SMathDistanceSaveData_SVector3::WriteSimpleJson, SMathDistanceSaveData_SVector3::FromSimpleJson);

void SMathDistanceSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fB, p_Stream);

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathDistanceSaveData_SVector3 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	*reinterpret_cast<SMathDistanceSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathDistanceSaveData_SVector3::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fA.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector3, m_fA));	m_fB.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector3, m_fB));}

ZHMTypeInfo SSavableData::TypeInfo = ZHMTypeInfo("SSavableData", sizeof(SSavableData), alignof(SSavableData), SSavableData::WriteJson, SSavableData::WriteSimpleJson, SSavableData::FromSimpleJson);

void SSavableData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSavableData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_EntitiesData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_EntitiesData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Data, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nId;
	p_Stream << "}";

	p_Stream << "}";
}

void SSavableData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSavableData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_EntitiesData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_EntitiesData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Data, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nId") << ":";
	p_Stream << s_Object->m_nId;

	p_Stream << "}";
}

void SSavableData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSavableData s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_EntitiesData"], &s_Item);
		s_Object.m_EntitiesData = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Data"], &s_Item);
		s_Object.m_Data = s_Item;
	}

	s_Object.m_nId = static_cast<uint32>(int64_t(p_Document["m_nId"]));

	*reinterpret_cast<SSavableData*>(p_Target) = s_Object;
}

void SSavableData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_EntitiesData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSavableData, m_EntitiesData));	m_Data.Serialize(p_Serializer, p_OwnOffset + offsetof(SSavableData, m_Data));}

ZHMTypeInfo SGuardPointOrderSaveData::TypeInfo = ZHMTypeInfo("SGuardPointOrderSaveData", sizeof(SGuardPointOrderSaveData), alignof(SGuardPointOrderSaveData), SGuardPointOrderSaveData::WriteJson, SGuardPointOrderSaveData::WriteSimpleJson, SGuardPointOrderSaveData::FromSimpleJson);

void SGuardPointOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardPointOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_guardPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_guardPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_walkOnly") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_walkOnly;
	p_Stream << "}";

	p_Stream << "}";
}

void SGuardPointOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardPointOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_guardPoint") << ":";
	p_Stream << s_Object->m_guardPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_walkOnly") << ":";
	p_Stream << s_Object->m_walkOnly;

	p_Stream << "}";
}

void SGuardPointOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGuardPointOrderSaveData s_Object;

	s_Object.m_guardPoint = static_cast<uint32>(int64_t(p_Document["m_guardPoint"]));

	s_Object.m_walkOnly = bool(p_Document["m_walkOnly"]);

	*reinterpret_cast<SGuardPointOrderSaveData*>(p_Target) = s_Object;
}

void SGuardPointOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorVisibilityConditionSaveData::TypeInfo = ZHMTypeInfo("SActorVisibilityConditionSaveData", sizeof(SActorVisibilityConditionSaveData), alignof(SActorVisibilityConditionSaveData), SActorVisibilityConditionSaveData::WriteJson, SActorVisibilityConditionSaveData::WriteSimpleJson, SActorVisibilityConditionSaveData::FromSimpleJson);

void SActorVisibilityConditionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorVisibilityConditionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorVisibilityConditionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorVisibilityConditionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pActor") << ":";
	p_Stream << s_Object->m_pActor;

	p_Stream << "}";
}

void SActorVisibilityConditionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorVisibilityConditionSaveData s_Object;

	s_Object.m_pActor = static_cast<uint32>(int64_t(p_Document["m_pActor"]));

	*reinterpret_cast<SActorVisibilityConditionSaveData*>(p_Target) = s_Object;
}

void SActorVisibilityConditionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SUIBreadcrumbDataSaveData::TypeInfo = ZHMTypeInfo("SUIBreadcrumbDataSaveData", sizeof(SUIBreadcrumbDataSaveData), alignof(SUIBreadcrumbDataSaveData), SUIBreadcrumbDataSaveData::WriteJson, SUIBreadcrumbDataSaveData::WriteSimpleJson, SUIBreadcrumbDataSaveData::FromSimpleJson);

void SUIBreadcrumbDataSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SUIBreadcrumbDataSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nState;
	p_Stream << "}";

	p_Stream << "}";
}

void SUIBreadcrumbDataSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SUIBreadcrumbDataSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << s_Object->m_nState;

	p_Stream << "}";
}

void SUIBreadcrumbDataSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SUIBreadcrumbDataSaveData s_Object;

	s_Object.m_fProgress = static_cast<float32>(double(p_Document["m_fProgress"]));

	s_Object.m_nState = static_cast<int32>(int64_t(p_Document["m_nState"]));

	*reinterpret_cast<SUIBreadcrumbDataSaveData*>(p_Target) = s_Object;
}

void SUIBreadcrumbDataSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SRandomTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SRandomTimerEntitySaveData", sizeof(SRandomTimerEntitySaveData), alignof(SRandomTimerEntitySaveData), SRandomTimerEntitySaveData::WriteJson, SRandomTimerEntitySaveData::WriteSimpleJson, SRandomTimerEntitySaveData::FromSimpleJson);

void SRandomTimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRandomTimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMinTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMinTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMaxTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMaxTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fProbability") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProbability;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << "}";

	p_Stream << "}";
}

void SRandomTimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRandomTimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << ",";

	p_Stream << JsonStr("m_fMinTime") << ":";
	p_Stream << s_Object->m_fMinTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fMaxTime") << ":";
	p_Stream << s_Object->m_fMaxTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fProbability") << ":";
	p_Stream << s_Object->m_fProbability;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << s_Object->m_nRemaining;

	p_Stream << "}";
}

void SRandomTimerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRandomTimerEntitySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bRegistered = bool(p_Document["m_bRegistered"]);

	s_Object.m_fMinTime = static_cast<float32>(double(p_Document["m_fMinTime"]));

	s_Object.m_fMaxTime = static_cast<float32>(double(p_Document["m_fMaxTime"]));

	s_Object.m_fProbability = static_cast<float32>(double(p_Document["m_fProbability"]));

	s_Object.m_nRemaining = static_cast<int32>(int64_t(p_Document["m_nRemaining"]));

	*reinterpret_cast<SRandomTimerEntitySaveData*>(p_Target) = s_Object;
}

void SRandomTimerEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SBoneScalesList::TypeInfo = ZHMTypeInfo("SBoneScalesList", sizeof(SBoneScalesList), alignof(SBoneScalesList), SBoneScalesList::WriteJson, SBoneScalesList::WriteSimpleJson, SBoneScalesList::FromSimpleJson);

void SBoneScalesList::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneScalesList*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBoneScales") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneScales.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneScales[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
		SVector3::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBoneScales.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SBoneScalesList::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBoneScalesList*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBoneScales") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneScales.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneScales[i];
		SVector3::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBoneScales.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBoneScalesList::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBoneScalesList s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aBoneScales"])
	{
		SVector3 s_ArrayItem;
		SVector3::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aBoneScales.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SBoneScalesList*>(p_Target) = s_Object;
}

void SBoneScalesList::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aBoneScales.Serialize(p_Serializer, p_OwnOffset + offsetof(SBoneScalesList, m_aBoneScales));}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector3", sizeof(SMathMultiplyDivideSaveData_SVector3), alignof(SMathMultiplyDivideSaveData_SVector3), SMathMultiplyDivideSaveData_SVector3::WriteJson, SMathMultiplyDivideSaveData_SVector3::WriteSimpleJson, SMathMultiplyDivideSaveData_SVector3::FromSimpleJson);

void SMathMultiplyDivideSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultiplyDivideSaveData_SVector3 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	s_Object.m_bDivide = bool(p_Document["m_bDivide"]);

	*reinterpret_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathMultiplyDivideSaveData_SVector3::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fA.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector3, m_fA));	m_fB.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector3, m_fB));}

ZHMTypeInfo SMathMultipliesSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector3", sizeof(SMathMultipliesSaveData_SVector3), alignof(SMathMultipliesSaveData_SVector3), SMathMultipliesSaveData_SVector3::WriteJson, SMathMultipliesSaveData_SVector3::WriteSimpleJson, SMathMultipliesSaveData_SVector3::FromSimpleJson);

void SMathMultipliesSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_SVector3") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_SVector3::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_SVector3::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultipliesSaveData_SVector3 s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathMultiplyDivideSaveData_SVector3 s_ArrayItem;
		SMathMultiplyDivideSaveData_SVector3::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathMultipliesSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathMultipliesSaveData_SVector3::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector3, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector3, m_aData));}

ZHMTypeInfo SMathLerpSaveData_SColorRGBA::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SColorRGBA", sizeof(SMathLerpSaveData_SColorRGBA), alignof(SMathLerpSaveData_SColorRGBA), SMathLerpSaveData_SColorRGBA::WriteJson, SMathLerpSaveData_SColorRGBA::WriteSimpleJson, SMathLerpSaveData_SColorRGBA::FromSimpleJson);

void SMathLerpSaveData_SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGBA") << "," << JsonStr("$val") << ":";
	SColorRGBA::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGBA") << "," << JsonStr("$val") << ":";
	SColorRGBA::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SColorRGBA::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SColorRGBA::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGBA::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SColorRGBA s_Object;

	{
		SColorRGBA s_Item;
		SColorRGBA::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SColorRGBA s_Item;
		SColorRGBA::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SColorRGBA*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SColorRGBA::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_A.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SColorRGBA, m_A));	m_B.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SColorRGBA, m_B));}

ZHMTypeInfo SMathLerpSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector3", sizeof(SMathLerpSaveData_SVector3), alignof(SMathLerpSaveData_SVector3), SMathLerpSaveData_SVector3::WriteJson, SMathLerpSaveData_SVector3::WriteSimpleJson, SMathLerpSaveData_SVector3::FromSimpleJson);

void SMathLerpSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SVector3 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SVector3::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_A.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector3, m_A));	m_B.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector3, m_B));}

ZHMTypeInfo SDrama2ActorCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2ActorCollectionSaveData", sizeof(SDrama2ActorCollectionSaveData), alignof(SDrama2ActorCollectionSaveData), SDrama2ActorCollectionSaveData::WriteJson, SDrama2ActorCollectionSaveData::WriteSimpleJson, SDrama2ActorCollectionSaveData::FromSimpleJson);

void SDrama2ActorCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2ActorCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2ActorSaveState") << "," << JsonStr("$val") << ":";
		SDrama2ActorSaveState::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2ActorCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2ActorCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDrama2ActorSaveState::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2ActorCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2ActorCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aStates"])
	{
		SDrama2ActorSaveState s_ArrayItem;
		SDrama2ActorSaveState::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aStates.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SDrama2ActorCollectionSaveData*>(p_Target) = s_Object;
}

void SDrama2ActorCollectionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SDrama2ActorCollectionSaveData, m_aEntities));	m_aStates.Serialize(p_Serializer, p_OwnOffset + offsetof(SDrama2ActorCollectionSaveData, m_aStates));}

ZHMTypeInfo SDramaActorSaveState::TypeInfo = ZHMTypeInfo("SDramaActorSaveState", sizeof(SDramaActorSaveState), alignof(SDramaActorSaveState), SDramaActorSaveState::WriteJson, SDramaActorSaveState::WriteSimpleJson, SDramaActorSaveState::FromSimpleJson);

void SDramaActorSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaActorSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSpeaking;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaActorSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaActorSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << s_Object->m_bIsSpeaking;

	p_Stream << "}";
}

void SDramaActorSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaActorSaveState s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rSequence = static_cast<uint32>(int64_t(p_Document["m_rSequence"]));

	s_Object.m_rBehavior = static_cast<uint32>(int64_t(p_Document["m_rBehavior"]));

	s_Object.m_rCurrentSpeakEntity = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpeakEntity"]));

	s_Object.m_rScreenplay = static_cast<uint32>(int64_t(p_Document["m_rScreenplay"]));

	s_Object.m_sMatchName = std::string_view(p_Document["m_sMatchName"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tActorSpeakEnd"], &s_Item);
		s_Object.m_tActorSpeakEnd = s_Item;
	}

	s_Object.m_bIsDone = bool(p_Document["m_bIsDone"]);

	s_Object.m_bIsPaused = bool(p_Document["m_bIsPaused"]);

	s_Object.m_bIsSpeaking = bool(p_Document["m_bIsSpeaking"]);

	*reinterpret_cast<SDramaActorSaveState*>(p_Target) = s_Object;
}

void SDramaActorSaveState::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sMatchName.Serialize(p_Serializer, p_OwnOffset + offsetof(SDramaActorSaveState, m_sMatchName));	m_tActorSpeakEnd.Serialize(p_Serializer, p_OwnOffset + offsetof(SDramaActorSaveState, m_tActorSpeakEnd));}

ZHMTypeInfo SDramaActorCollectionSaveData::TypeInfo = ZHMTypeInfo("SDramaActorCollectionSaveData", sizeof(SDramaActorCollectionSaveData), alignof(SDramaActorCollectionSaveData), SDramaActorCollectionSaveData::WriteJson, SDramaActorCollectionSaveData::WriteSimpleJson, SDramaActorCollectionSaveData::FromSimpleJson);

void SDramaActorCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaActorCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaActorSaveState") << "," << JsonStr("$val") << ":";
		SDramaActorSaveState::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDramaActorCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaActorCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDramaActorSaveState::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDramaActorCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaActorCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aStates"])
	{
		SDramaActorSaveState s_ArrayItem;
		SDramaActorSaveState::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aStates.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SDramaActorCollectionSaveData*>(p_Target) = s_Object;
}

void SDramaActorCollectionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SDramaActorCollectionSaveData, m_aEntities));	m_aStates.Serialize(p_Serializer, p_OwnOffset + offsetof(SDramaActorCollectionSaveData, m_aStates));}

ZHMTypeInfo SDrama2SituationSaveData::TypeInfo = ZHMTypeInfo("SDrama2SituationSaveData", sizeof(SDrama2SituationSaveData), alignof(SDrama2SituationSaveData), SDrama2SituationSaveData::WriteJson, SDrama2SituationSaveData::WriteSimpleJson, SDrama2SituationSaveData::FromSimpleJson);

void SDrama2SituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nDoneTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDoneTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnCooldown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOnCooldown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bProvidersStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsTerminated;
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2SituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << ",";

	p_Stream << JsonStr("m_nDoneTime") << ":";
	p_Stream << s_Object->m_nDoneTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnCooldown") << ":";
	p_Stream << s_Object->m_bIsOnCooldown;
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << s_Object->m_bProvidersStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << s_Object->m_bIsTerminated;

	p_Stream << "}";
}

void SDrama2SituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2SituationSaveData s_Object;

	s_Object.m_nPriorityModifier = static_cast<float32>(double(p_Document["m_nPriorityModifier"]));

	s_Object.m_nCurrentDrama = static_cast<int32>(int64_t(p_Document["m_nCurrentDrama"]));

	s_Object.m_nDoneTime = static_cast<float32>(double(p_Document["m_nDoneTime"]));

	s_Object.m_bIsOnCooldown = bool(p_Document["m_bIsOnCooldown"]);

	s_Object.m_bProvidersStarted = bool(p_Document["m_bProvidersStarted"]);

	s_Object.m_bSituationRunning = bool(p_Document["m_bSituationRunning"]);

	s_Object.m_bIsTerminated = bool(p_Document["m_bIsTerminated"]);

	*reinterpret_cast<SDrama2SituationSaveData*>(p_Target) = s_Object;
}

void SDrama2SituationSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDrama2SituationCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2SituationCollectionSaveData", sizeof(SDrama2SituationCollectionSaveData), alignof(SDrama2SituationCollectionSaveData), SDrama2SituationCollectionSaveData::WriteJson, SDrama2SituationCollectionSaveData::WriteSimpleJson, SDrama2SituationCollectionSaveData::FromSimpleJson);

void SDrama2SituationCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SituationCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2SituationSaveData") << "," << JsonStr("$val") << ":";
		SDrama2SituationSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2SituationCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SituationCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDrama2SituationSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2SituationCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2SituationCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aStates"])
	{
		SDrama2SituationSaveData s_ArrayItem;
		SDrama2SituationSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aStates.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SDrama2SituationCollectionSaveData*>(p_Target) = s_Object;
}

void SDrama2SituationCollectionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SDrama2SituationCollectionSaveData, m_aEntities));	m_aStates.Serialize(p_Serializer, p_OwnOffset + offsetof(SDrama2SituationCollectionSaveData, m_aStates));}

ZHMTypeInfo SDrama2SetupSaveData::TypeInfo = ZHMTypeInfo("SDrama2SetupSaveData", sizeof(SDrama2SetupSaveData), alignof(SDrama2SetupSaveData), SDrama2SetupSaveData::WriteJson, SDrama2SetupSaveData::WriteSimpleJson, SDrama2SetupSaveData::FromSimpleJson);

void SDrama2SetupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SetupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bDoneTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDoneTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EScreenPlayState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EScreenPlayState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2SetupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SetupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bDoneTriggered") << ":";
	p_Stream << s_Object->m_bDoneTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EScreenPlayState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << s_Object->m_rSituation;

	p_Stream << "}";
}

void SDrama2SetupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2SetupSaveData s_Object;

	s_Object.m_bDoneTriggered = bool(p_Document["m_bDoneTriggered"]);

	s_Object.m_eState = static_cast<EScreenPlayState>(ZHMEnums::GetEnumValueByName("EScreenPlayState", std::string_view(p_Document["m_eState"])));

	s_Object.m_rSituation = static_cast<uint32>(int64_t(p_Document["m_rSituation"]));

	*reinterpret_cast<SDrama2SetupSaveData*>(p_Target) = s_Object;
}

void SDrama2SetupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDrama2SetupCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2SetupCollectionSaveData", sizeof(SDrama2SetupCollectionSaveData), alignof(SDrama2SetupCollectionSaveData), SDrama2SetupCollectionSaveData::WriteJson, SDrama2SetupCollectionSaveData::WriteSimpleJson, SDrama2SetupCollectionSaveData::FromSimpleJson);

void SDrama2SetupCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SetupCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2SetupSaveData") << "," << JsonStr("$val") << ":";
		SDrama2SetupSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2SetupCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDrama2SetupCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aStates[i];
		SDrama2SetupSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2SetupCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2SetupCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aStates"])
	{
		SDrama2SetupSaveData s_ArrayItem;
		SDrama2SetupSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aStates.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SDrama2SetupCollectionSaveData*>(p_Target) = s_Object;
}

void SDrama2SetupCollectionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SDrama2SetupCollectionSaveData, m_aEntities));	m_aStates.Serialize(p_Serializer, p_OwnOffset + offsetof(SDrama2SetupCollectionSaveData, m_aStates));}

ZHMTypeInfo SInventoryUISlotSlim::TypeInfo = ZHMTypeInfo("SInventoryUISlotSlim", sizeof(SInventoryUISlotSlim), alignof(SInventoryUISlotSlim), SInventoryUISlotSlim::WriteJson, SInventoryUISlotSlim::WriteSimpleJson, SInventoryUISlotSlim::FromSimpleJson);

void SInventoryUISlotSlim::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUISlotSlim*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->containedIcon, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryUISlotSlim::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUISlotSlim*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZVariant::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	ZVariant::WriteSimpleJson(&s_Object->containedIcon, p_Stream);

	p_Stream << "}";
}

void SInventoryUISlotSlim::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryUISlotSlim s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["containedIcon"], &s_Item);
		s_Object.containedIcon = s_Item;
	}

	*reinterpret_cast<SInventoryUISlotSlim*>(p_Target) = s_Object;
}

void SInventoryUISlotSlim::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	icon.Serialize(p_Serializer, p_OwnOffset + offsetof(SInventoryUISlotSlim, icon));	containedIcon.Serialize(p_Serializer, p_OwnOffset + offsetof(SInventoryUISlotSlim, containedIcon));}

ZHMTypeInfo SInventoryUI::TypeInfo = ZHMTypeInfo("SInventoryUI", sizeof(SInventoryUI), alignof(SInventoryUI), SInventoryUI::WriteJson, SInventoryUI::WriteSimpleJson, SInventoryUI::FromSimpleJson);

void SInventoryUI::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUI*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mainslotsSlim") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslotsSlim.size(); ++i)
	{
		auto& s_Item = s_Object->mainslotsSlim[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryUISlotSlim") << "," << JsonStr("$val") << ":";
		SInventoryUISlotSlim::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->mainslotsSlim.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("otherslotsCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->otherslotsCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("selectedIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->selectedIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("isActionInventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->isActionInventory;
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryUI::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryUI*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mainslotsSlim") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslotsSlim.size(); ++i)
	{
		auto& s_Item = s_Object->mainslotsSlim[i];
		SInventoryUISlotSlim::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->mainslotsSlim.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("otherslotsCount") << ":";
	p_Stream << s_Object->otherslotsCount;
	p_Stream << ",";

	p_Stream << JsonStr("selectedIndex") << ":";
	p_Stream << s_Object->selectedIndex;
	p_Stream << ",";

	p_Stream << JsonStr("isActionInventory") << ":";
	p_Stream << s_Object->isActionInventory;

	p_Stream << "}";
}

void SInventoryUI::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryUI s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["mainslotsSlim"])
	{
		SInventoryUISlotSlim s_ArrayItem;
		SInventoryUISlotSlim::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.mainslotsSlim.push_back(s_ArrayItem);
	}

	s_Object.otherslotsCount = static_cast<int32>(int64_t(p_Document["otherslotsCount"]));

	s_Object.selectedIndex = static_cast<int32>(int64_t(p_Document["selectedIndex"]));

	s_Object.isActionInventory = bool(p_Document["isActionInventory"]);

	*reinterpret_cast<SInventoryUI*>(p_Target) = s_Object;
}

void SInventoryUI::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	mainslotsSlim.Serialize(p_Serializer, p_OwnOffset + offsetof(SInventoryUI, mainslotsSlim));}

ZHMTypeInfo SActorBoneAttachSaveData::TypeInfo = ZHMTypeInfo("SActorBoneAttachSaveData", sizeof(SActorBoneAttachSaveData), alignof(SActorBoneAttachSaveData), SActorBoneAttachSaveData::WriteJson, SActorBoneAttachSaveData::WriteSimpleJson, SActorBoneAttachSaveData::FromSimpleJson);

void SActorBoneAttachSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneAttachSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rAttachmentTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rAttachmentTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsAttached;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorBoneAttachSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneAttachSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rAttachmentTarget") << ":";
	p_Stream << s_Object->m_rAttachmentTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << s_Object->m_bIsAttached;

	p_Stream << "}";
}

void SActorBoneAttachSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorBoneAttachSaveData s_Object;

	s_Object.m_rAttachmentTarget = static_cast<uint32>(int64_t(p_Document["m_rAttachmentTarget"]));

	s_Object.m_bIsAttached = bool(p_Document["m_bIsAttached"]);

	*reinterpret_cast<SActorBoneAttachSaveData*>(p_Target) = s_Object;
}

void SActorBoneAttachSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorBoneAttachmentsSaveData::TypeInfo = ZHMTypeInfo("SActorBoneAttachmentsSaveData", sizeof(SActorBoneAttachmentsSaveData), alignof(SActorBoneAttachmentsSaveData), SActorBoneAttachmentsSaveData::WriteJson, SActorBoneAttachmentsSaveData::WriteSimpleJson, SActorBoneAttachmentsSaveData::FromSimpleJson);

void SActorBoneAttachmentsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneAttachmentsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorBoneAttachSaveData") << "," << JsonStr("$val") << ":";
		SActorBoneAttachSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorBoneAttachmentsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneAttachmentsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SActorBoneAttachSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorBoneAttachmentsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorBoneAttachmentsSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SActorBoneAttachSaveData s_ArrayItem;
		SActorBoneAttachSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActorBoneAttachmentsSaveData*>(p_Target) = s_Object;
}

void SActorBoneAttachmentsSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorBoneAttachmentsSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorBoneAttachmentsSaveData, m_aData));}

ZHMTypeInfo IMorphemeCutSequenceAnimatable::TypeInfo = ZHMTypeInfo("IMorphemeCutSequenceAnimatable", sizeof(IMorphemeCutSequenceAnimatable), alignof(IMorphemeCutSequenceAnimatable), IMorphemeCutSequenceAnimatable::WriteJson, IMorphemeCutSequenceAnimatable::WriteSimpleJson, IMorphemeCutSequenceAnimatable::FromSimpleJson);

void IMorphemeCutSequenceAnimatable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeCutSequenceAnimatable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMorphemeCutSequenceAnimatable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMorphemeCutSequenceAnimatable s_Object;

	*reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Target) = s_Object;
}

void IMorphemeCutSequenceAnimatable::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SOptionValueSaveData::TypeInfo = ZHMTypeInfo("SOptionValueSaveData", sizeof(SOptionValueSaveData), alignof(SOptionValueSaveData), SOptionValueSaveData::WriteJson, SOptionValueSaveData::WriteSimpleJson, SOptionValueSaveData::FromSimpleJson);

void SOptionValueSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOptionValueSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SOptionValueSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOptionValueSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Value") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Value, p_Stream);

	p_Stream << "}";
}

void SOptionValueSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SOptionValueSaveData s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Value"], &s_Item);
		s_Object.m_Value = s_Item;
	}

	*reinterpret_cast<SOptionValueSaveData*>(p_Target) = s_Object;
}

void SOptionValueSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_Value.Serialize(p_Serializer, p_OwnOffset + offsetof(SOptionValueSaveData, m_Value));}

ZHMTypeInfo SPersistentEntitySaveData::TypeInfo = ZHMTypeInfo("SPersistentEntitySaveData", sizeof(SPersistentEntitySaveData), alignof(SPersistentEntitySaveData), SPersistentEntitySaveData::WriteJson, SPersistentEntitySaveData::WriteSimpleJson, SPersistentEntitySaveData::FromSimpleJson);

void SPersistentEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPersistentEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nResourceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nResourceId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityIDs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityIDs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityIDs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntityIDs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityNames") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityNames.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityNames[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aEntityNames.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SPersistentEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPersistentEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nResourceId") << ":";
	p_Stream << s_Object->m_nResourceId;
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityIDs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityIDs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityIDs[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntityIDs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityNames") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityNames.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityNames[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->m_aEntityNames.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SPersistentEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPersistentEntitySaveData s_Object;

	s_Object.m_nResourceId = uint64(p_Document["m_nResourceId"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntityIDs"])
	{
		s_Object.m_aEntityIDs.push_back(uint64(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntityNames"])
	{
		s_Object.m_aEntityNames.push_back(std::string_view(s_Item));
	}

	*reinterpret_cast<SPersistentEntitySaveData*>(p_Target) = s_Object;
}

void SPersistentEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntityIDs.Serialize(p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveData, m_aEntityIDs));	m_aEntityNames.Serialize(p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveData, m_aEntityNames));}

ZHMTypeInfo SPersistentEntitySaveDataList::TypeInfo = ZHMTypeInfo("SPersistentEntitySaveDataList", sizeof(SPersistentEntitySaveDataList), alignof(SPersistentEntitySaveDataList), SPersistentEntitySaveDataList::WriteJson, SPersistentEntitySaveDataList::WriteSimpleJson, SPersistentEntitySaveDataList::FromSimpleJson);

void SPersistentEntitySaveDataList::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPersistentEntitySaveDataList*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityDatas[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SPersistentEntitySaveData") << "," << JsonStr("$val") << ":";
		SPersistentEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationKeys.size(); ++i)
	{
		auto& s_Item = s_Object->m_mDynamicObjectIDGenerationKeys[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_mDynamicObjectIDGenerationKeys.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_mDynamicObjectIDGenerationValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_mDynamicObjectIDGenerationValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SPersistentEntitySaveDataList::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPersistentEntitySaveDataList*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityDatas[i];
		SPersistentEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationKeys.size(); ++i)
	{
		auto& s_Item = s_Object->m_mDynamicObjectIDGenerationKeys[i];
		p_Stream << s_Item;

		if (i < s_Object->m_mDynamicObjectIDGenerationKeys.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_mDynamicObjectIDGenerationValues[i];
		p_Stream << s_Item;

		if (i < s_Object->m_mDynamicObjectIDGenerationValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SPersistentEntitySaveDataList::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPersistentEntitySaveDataList s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntityDatas"])
	{
		SPersistentEntitySaveData s_ArrayItem;
		SPersistentEntitySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aEntityDatas.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_mDynamicObjectIDGenerationKeys"])
	{
		s_Object.m_mDynamicObjectIDGenerationKeys.push_back(uint64(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_mDynamicObjectIDGenerationValues"])
	{
		s_Object.m_mDynamicObjectIDGenerationValues.push_back(uint64(s_Item));
	}

	*reinterpret_cast<SPersistentEntitySaveDataList*>(p_Target) = s_Object;
}

void SPersistentEntitySaveDataList::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntityDatas.Serialize(p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveDataList, m_aEntityDatas));	m_mDynamicObjectIDGenerationKeys.Serialize(p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveDataList, m_mDynamicObjectIDGenerationKeys));	m_mDynamicObjectIDGenerationValues.Serialize(p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveDataList, m_mDynamicObjectIDGenerationValues));}

ZHMTypeInfo SFontDefinition::TypeInfo = ZHMTypeInfo("SFontDefinition", sizeof(SFontDefinition), alignof(SFontDefinition), SFontDefinition::WriteJson, SFontDefinition::WriteSimpleJson, SFontDefinition::FromSimpleJson);

void SFontDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFontDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sFontId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFontId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sFontName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFontName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eFontFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EFontFlags") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eFontFlags) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EFontFlags", static_cast<int>(s_Object->eFontFlags))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fScaleFactor;
	p_Stream << "}";

	p_Stream << "}";
}

void SFontDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFontDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sFontId") << ":";
	p_Stream << JsonStr(s_Object->sFontId);
	p_Stream << ",";

	p_Stream << JsonStr("sFontName") << ":";
	p_Stream << JsonStr(s_Object->sFontName);
	p_Stream << ",";

	p_Stream << JsonStr("eFontFlags") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EFontFlags", static_cast<int>(s_Object->eFontFlags)));
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << s_Object->fScaleFactor;

	p_Stream << "}";
}

void SFontDefinition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFontDefinition s_Object;

	s_Object.sFontId = std::string_view(p_Document["sFontId"]);

	s_Object.sFontName = std::string_view(p_Document["sFontName"]);

	s_Object.eFontFlags = static_cast<EFontFlags>(ZHMEnums::GetEnumValueByName("EFontFlags", std::string_view(p_Document["eFontFlags"])));

	s_Object.fScaleFactor = static_cast<float32>(double(p_Document["fScaleFactor"]));

	*reinterpret_cast<SFontDefinition*>(p_Target) = s_Object;
}

void SFontDefinition::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sFontId.Serialize(p_Serializer, p_OwnOffset + offsetof(SFontDefinition, sFontId));	sFontName.Serialize(p_Serializer, p_OwnOffset + offsetof(SFontDefinition, sFontName));}

ZHMTypeInfo SFontLibraryDefinition::TypeInfo = ZHMTypeInfo("SFontLibraryDefinition", sizeof(SFontLibraryDefinition), alignof(SFontLibraryDefinition), SFontLibraryDefinition::WriteJson, SFontLibraryDefinition::WriteSimpleJson, SFontLibraryDefinition::FromSimpleJson);

void SFontLibraryDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFontLibraryDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sFontLocaleID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFontLocaleID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFontDefinitions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFontDefinitions.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFontDefinitions[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFontDefinition") << "," << JsonStr("$val") << ":";
		SFontDefinition::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aFontDefinitions.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SFontLibraryDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFontLibraryDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sFontLocaleID") << ":";
	p_Stream << JsonStr(s_Object->sFontLocaleID);
	p_Stream << ",";

	p_Stream << JsonStr("m_aFontDefinitions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFontDefinitions.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFontDefinitions[i];
		SFontDefinition::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aFontDefinitions.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SFontLibraryDefinition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFontLibraryDefinition s_Object;

	s_Object.sFontLocaleID = std::string_view(p_Document["sFontLocaleID"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_aFontDefinitions"])
	{
		SFontDefinition s_ArrayItem;
		SFontDefinition::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aFontDefinitions.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SFontLibraryDefinition*>(p_Target) = s_Object;
}

void SFontLibraryDefinition::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sFontLocaleID.Serialize(p_Serializer, p_OwnOffset + offsetof(SFontLibraryDefinition, sFontLocaleID));	m_aFontDefinitions.Serialize(p_Serializer, p_OwnOffset + offsetof(SFontLibraryDefinition, m_aFontDefinitions));}

ZHMTypeInfo SMathLerpSaveData_SColorRGB::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SColorRGB", sizeof(SMathLerpSaveData_SColorRGB), alignof(SMathLerpSaveData_SColorRGB), SMathLerpSaveData_SColorRGB::WriteJson, SMathLerpSaveData_SColorRGB::WriteSimpleJson, SMathLerpSaveData_SColorRGB::FromSimpleJson);

void SMathLerpSaveData_SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGB::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SColorRGB s_Object;

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SColorRGB*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SColorRGB::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_A.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SColorRGB, m_A));	m_B.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SColorRGB, m_B));}

ZHMTypeInfo SCautiousVIPGroupState::TypeInfo = ZHMTypeInfo("SCautiousVIPGroupState", sizeof(SCautiousVIPGroupState), alignof(SCautiousVIPGroupState), SCautiousVIPGroupState::WriteJson, SCautiousVIPGroupState::WriteSimpleJson, SCautiousVIPGroupState::FromSimpleJson);

void SCautiousVIPGroupState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousVIPGroupState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tMove") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tMove, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousVIPGroupState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousVIPGroupState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tMove") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tMove, p_Stream);

	p_Stream << "}";
}

void SCautiousVIPGroupState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousVIPGroupState s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tMove"], &s_Item);
		s_Object.m_tMove = s_Item;
	}

	*reinterpret_cast<SCautiousVIPGroupState*>(p_Target) = s_Object;
}

void SCautiousVIPGroupState::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tMove.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousVIPGroupState, m_tMove));}

ZHMTypeInfo SCautiousVIPGroupSaveData::TypeInfo = ZHMTypeInfo("SCautiousVIPGroupSaveData", sizeof(SCautiousVIPGroupSaveData), alignof(SCautiousVIPGroupSaveData), SCautiousVIPGroupSaveData::WriteJson, SCautiousVIPGroupSaveData::WriteSimpleJson, SCautiousVIPGroupSaveData::FromSimpleJson);

void SCautiousVIPGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousVIPGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_vip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_stateData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCautiousVIPGroupState") << "," << JsonStr("$val") << ":";
	SCautiousVIPGroupState::WriteJson(&s_Object->m_stateData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vipTargetNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_vipTargetNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_occupancyNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_occupancyNode;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousVIPGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousVIPGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vip") << ":";
	p_Stream << s_Object->m_vip;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_stateData") << ":";
	SCautiousVIPGroupState::WriteSimpleJson(&s_Object->m_stateData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vipTargetNode") << ":";
	p_Stream << s_Object->m_vipTargetNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_occupancyNode") << ":";
	p_Stream << s_Object->m_occupancyNode;

	p_Stream << "}";
}

void SCautiousVIPGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousVIPGroupSaveData s_Object;

	s_Object.m_vip = static_cast<uint32>(int64_t(p_Document["m_vip"]));

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	{
		SCautiousVIPGroupState s_Item;
		SCautiousVIPGroupState::FromSimpleJson(p_Document["m_stateData"], &s_Item);
		s_Object.m_stateData = s_Item;
	}

	s_Object.m_vipTargetNode = static_cast<int32>(int64_t(p_Document["m_vipTargetNode"]));

	s_Object.m_occupancyNode = static_cast<int32>(int64_t(p_Document["m_occupancyNode"]));

	*reinterpret_cast<SCautiousVIPGroupSaveData*>(p_Target) = s_Object;
}

void SCautiousVIPGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousVIPGroupSaveData, m_fsmState));	m_stateData.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousVIPGroupSaveData, m_stateData));}

ZHMTypeInfo SAIVisionBlockerSaveData::TypeInfo = ZHMTypeInfo("SAIVisionBlockerSaveData", sizeof(SAIVisionBlockerSaveData), alignof(SAIVisionBlockerSaveData), SAIVisionBlockerSaveData::WriteJson, SAIVisionBlockerSaveData::WriteSimpleJson, SAIVisionBlockerSaveData::FromSimpleJson);

void SAIVisionBlockerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIVisionBlockerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SAIVisionBlockerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIVisionBlockerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SAIVisionBlockerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIVisionBlockerSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SAIVisionBlockerSaveData*>(p_Target) = s_Object;
}

void SAIVisionBlockerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SSituationGroupSaveData::TypeInfo = ZHMTypeInfo("SSituationGroupSaveData", sizeof(SSituationGroupSaveData), alignof(SSituationGroupSaveData), SSituationGroupSaveData::WriteJson, SSituationGroupSaveData::WriteSimpleJson, SSituationGroupSaveData::FromSimpleJson);

void SSituationGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << ",";

	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << s_Object->m_nGroupID;
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomData, p_Stream);

	p_Stream << "}";
}

void SSituationGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationGroupSaveData s_Object;

	s_Object.m_sClassTypeName = std::string_view(p_Document["m_sClassTypeName"]);

	s_Object.m_nSituation = static_cast<uint32>(int64_t(p_Document["m_nSituation"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aActors"])
	{
		s_Object.m_aActors.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	s_Object.m_nGroupID = static_cast<int32>(int64_t(p_Document["m_nGroupID"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_CustomData"], &s_Item);
		s_Object.m_CustomData = s_Item;
	}

	*reinterpret_cast<SSituationGroupSaveData*>(p_Target) = s_Object;
}

void SSituationGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sClassTypeName.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationGroupSaveData, m_sClassTypeName));	m_aActors.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationGroupSaveData, m_aActors));	m_CustomData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationGroupSaveData, m_CustomData));}

ZHMTypeInfo SMathLerpSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector2", sizeof(SMathLerpSaveData_SVector2), alignof(SMathLerpSaveData_SVector2), SMathLerpSaveData_SVector2::WriteJson, SMathLerpSaveData_SVector2::WriteSimpleJson, SMathLerpSaveData_SVector2::FromSimpleJson);

void SMathLerpSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SVector2 s_Object;

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SVector2::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_A.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector2, m_A));	m_B.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector2, m_B));}

ZHMTypeInfo SMathLerpsSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector2", sizeof(SMathLerpsSaveData_SVector2), alignof(SMathLerpsSaveData_SVector2), SMathLerpsSaveData_SVector2::WriteJson, SMathLerpsSaveData_SVector2::WriteSimpleJson, SMathLerpsSaveData_SVector2::FromSimpleJson);

void SMathLerpsSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SVector2") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SVector2::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SVector2::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SVector2 s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathLerpSaveData_SVector2 s_ArrayItem;
		SMathLerpSaveData_SVector2::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathLerpsSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SVector2::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector2, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector2, m_aData));}

ZHMTypeInfo ZPlanningObjectiveInfoBuilder::TypeInfo = ZHMTypeInfo("ZPlanningObjectiveInfoBuilder", sizeof(ZPlanningObjectiveInfoBuilder), alignof(ZPlanningObjectiveInfoBuilder), ZPlanningObjectiveInfoBuilder::WriteJson, ZPlanningObjectiveInfoBuilder::WriteSimpleJson, ZPlanningObjectiveInfoBuilder::FromSimpleJson);

void ZPlanningObjectiveInfoBuilder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPlanningObjectiveInfoBuilder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPlanningObjectiveInfoBuilder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPlanningObjectiveInfoBuilder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZPlanningObjectiveInfoBuilder::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZPlanningObjectiveInfoBuilder s_Object;

	*reinterpret_cast<ZPlanningObjectiveInfoBuilder*>(p_Target) = s_Object;
}

void ZPlanningObjectiveInfoBuilder::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAnimatedActorStandOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorStandOrderSaveData", sizeof(SAnimatedActorStandOrderSaveData), alignof(SAnimatedActorStandOrderSaveData), SAnimatedActorStandOrderSaveData::WriteJson, SAnimatedActorStandOrderSaveData::WriteSimpleJson, SAnimatedActorStandOrderSaveData::FromSimpleJson);

void SAnimatedActorStandOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorStandOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vFacingDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vFacingDirection, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorStandOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorStandOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vFacingDirection") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vFacingDirection, p_Stream);

	p_Stream << "}";
}

void SAnimatedActorStandOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorStandOrderSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vFacingDirection"], &s_Item);
		s_Object.m_vFacingDirection = s_Item;
	}

	*reinterpret_cast<SAnimatedActorStandOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorStandOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vFacingDirection.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorStandOrderSaveData, m_vFacingDirection));}

ZHMTypeInfo SRandomTimerEntitiesSaveData::TypeInfo = ZHMTypeInfo("SRandomTimerEntitiesSaveData", sizeof(SRandomTimerEntitiesSaveData), alignof(SRandomTimerEntitiesSaveData), SRandomTimerEntitiesSaveData::WriteJson, SRandomTimerEntitiesSaveData::WriteSimpleJson, SRandomTimerEntitiesSaveData::FromSimpleJson);

void SRandomTimerEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRandomTimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRandomTimerEntitySaveData") << "," << JsonStr("$val") << ":";
		SRandomTimerEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SRandomTimerEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRandomTimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SRandomTimerEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SRandomTimerEntitiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRandomTimerEntitiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SRandomTimerEntitySaveData s_ArrayItem;
		SRandomTimerEntitySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SRandomTimerEntitiesSaveData*>(p_Target) = s_Object;
}

void SRandomTimerEntitiesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SRandomTimerEntitiesSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SRandomTimerEntitiesSaveData, m_aData));}

ZHMTypeInfo SCrowdFlowChannel::TypeInfo = ZHMTypeInfo("SCrowdFlowChannel", sizeof(SCrowdFlowChannel), alignof(SCrowdFlowChannel), SCrowdFlowChannel::WriteJson, SCrowdFlowChannel::WriteSimpleJson, SCrowdFlowChannel::FromSimpleJson);

void SCrowdFlowChannel::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdFlowChannel*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aFlowVectorIndex") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowVectorIndex.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFlowVectorIndex[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aFlowVectorIndex.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFlowCost") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowCost.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFlowCost[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aFlowCost.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdFlowChannel::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdFlowChannel*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aFlowVectorIndex") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowVectorIndex.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFlowVectorIndex[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_aFlowVectorIndex.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFlowCost") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowCost.size(); ++i)
	{
		auto& s_Item = s_Object->m_aFlowCost[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aFlowCost.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdFlowChannel::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdFlowChannel s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aFlowVectorIndex"])
	{
		s_Object.m_aFlowVectorIndex.push_back(static_cast<uint8>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aFlowCost"])
	{
		s_Object.m_aFlowCost.push_back(static_cast<uint16>(int64_t(s_Item)));
	}

	*reinterpret_cast<SCrowdFlowChannel*>(p_Target) = s_Object;
}

void SCrowdFlowChannel::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aFlowVectorIndex.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdFlowChannel, m_aFlowVectorIndex));	m_aFlowCost.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdFlowChannel, m_aFlowCost));}

ZHMTypeInfo SMovementDisguiseSafeZoneSaveData::TypeInfo = ZHMTypeInfo("SMovementDisguiseSafeZoneSaveData", sizeof(SMovementDisguiseSafeZoneSaveData), alignof(SMovementDisguiseSafeZoneSaveData), SMovementDisguiseSafeZoneSaveData::WriteJson, SMovementDisguiseSafeZoneSaveData::WriteSimpleJson, SMovementDisguiseSafeZoneSaveData::FromSimpleJson);

void SMovementDisguiseSafeZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDisguiseSafeZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rSafeZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSafeZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSafeZoneAnimNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSafeZoneAnimNode;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementDisguiseSafeZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDisguiseSafeZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rSafeZone") << ":";
	p_Stream << s_Object->m_rSafeZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_nSafeZoneAnimNode") << ":";
	p_Stream << s_Object->m_nSafeZoneAnimNode;

	p_Stream << "}";
}

void SMovementDisguiseSafeZoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementDisguiseSafeZoneSaveData s_Object;

	s_Object.m_rSafeZone = static_cast<uint32>(int64_t(p_Document["m_rSafeZone"]));

	s_Object.m_nSafeZoneAnimNode = static_cast<uint32>(int64_t(p_Document["m_nSafeZoneAnimNode"]));

	*reinterpret_cast<SMovementDisguiseSafeZoneSaveData*>(p_Target) = s_Object;
}

void SMovementDisguiseSafeZoneSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAccessoryItemSaveData::TypeInfo = ZHMTypeInfo("SAccessoryItemSaveData", sizeof(SAccessoryItemSaveData), alignof(SAccessoryItemSaveData), SAccessoryItemSaveData::WriteJson, SAccessoryItemSaveData::WriteSimpleJson, SAccessoryItemSaveData::FromSimpleJson);

void SAccessoryItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAccessoryItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBoneId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBoneId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAttached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SAccessoryItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAccessoryItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBoneId") << ":";
	p_Stream << s_Object->m_nBoneId;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << s_Object->m_bAttached;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

void SAccessoryItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAccessoryItemSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_nBoneId = static_cast<uint32>(int64_t(p_Document["m_nBoneId"]));

	s_Object.m_bAttached = bool(p_Document["m_bAttached"]);

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	*reinterpret_cast<SAccessoryItemSaveData*>(p_Target) = s_Object;
}

void SAccessoryItemSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SKeywordSaveData::TypeInfo = ZHMTypeInfo("SKeywordSaveData", sizeof(SKeywordSaveData), alignof(SKeywordSaveData), SKeywordSaveData::WriteJson, SKeywordSaveData::WriteSimpleJson, SKeywordSaveData::FromSimpleJson);

void SKeywordSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKeywordSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_HolderSaveableId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HolderSaveableId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_KeywordID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_KeywordID;
	p_Stream << "}";

	p_Stream << "}";
}

void SKeywordSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SKeywordSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_HolderSaveableId") << ":";
	p_Stream << s_Object->m_HolderSaveableId;
	p_Stream << ",";

	p_Stream << JsonStr("m_KeywordID") << ":";
	p_Stream << s_Object->m_KeywordID;

	p_Stream << "}";
}

void SKeywordSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SKeywordSaveData s_Object;

	s_Object.m_HolderSaveableId = static_cast<uint32>(int64_t(p_Document["m_HolderSaveableId"]));

	s_Object.m_KeywordID = static_cast<int32>(int64_t(p_Document["m_KeywordID"]));

	*reinterpret_cast<SKeywordSaveData*>(p_Target) = s_Object;
}

void SKeywordSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SRenderMaterialSaveData::TypeInfo = ZHMTypeInfo("SRenderMaterialSaveData", sizeof(SRenderMaterialSaveData), alignof(SRenderMaterialSaveData), SRenderMaterialSaveData::WriteJson, SRenderMaterialSaveData::WriteSimpleJson, SRenderMaterialSaveData::FromSimpleJson);

void SRenderMaterialSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRenderMaterialSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicParametersData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDynamicParametersData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aDynamicParametersData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SRenderMaterialSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRenderMaterialSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicParametersData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDynamicParametersData[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_aDynamicParametersData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;

	p_Stream << "}";
}

void SRenderMaterialSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRenderMaterialSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aDynamicParametersData"])
	{
		s_Object.m_aDynamicParametersData.push_back(static_cast<uint8>(int64_t(s_Item)));
	}

	s_Object.m_bActive = bool(p_Document["m_bActive"]);

	*reinterpret_cast<SRenderMaterialSaveData*>(p_Target) = s_Object;
}

void SRenderMaterialSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aDynamicParametersData.Serialize(p_Serializer, p_OwnOffset + offsetof(SRenderMaterialSaveData, m_aDynamicParametersData));}

ZHMTypeInfo SValueBoolDelayedEntitySaveData::TypeInfo = ZHMTypeInfo("SValueBoolDelayedEntitySaveData", sizeof(SValueBoolDelayedEntitySaveData), alignof(SValueBoolDelayedEntitySaveData), SValueBoolDelayedEntitySaveData::WriteJson, SValueBoolDelayedEntitySaveData::WriteSimpleJson, SValueBoolDelayedEntitySaveData::FromSimpleJson);

void SValueBoolDelayedEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueBoolDelayedEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitingValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWaitingValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;
	p_Stream << "}";

	p_Stream << "}";
}

void SValueBoolDelayedEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueBoolDelayedEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitingValue") << ":";
	p_Stream << s_Object->m_bWaitingValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;

	p_Stream << "}";
}

void SValueBoolDelayedEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueBoolDelayedEntitySaveData s_Object;

	s_Object.m_bValue = bool(p_Document["m_bValue"]);

	s_Object.m_bWaitingValue = bool(p_Document["m_bWaitingValue"]);

	s_Object.m_fTimeToNextEvent = static_cast<float32>(double(p_Document["m_fTimeToNextEvent"]));

	*reinterpret_cast<SValueBoolDelayedEntitySaveData*>(p_Target) = s_Object;
}

void SValueBoolDelayedEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IActorProvider::TypeInfo = ZHMTypeInfo("IActorProvider", sizeof(IActorProvider), alignof(IActorProvider), IActorProvider::WriteJson, IActorProvider::WriteSimpleJson, IActorProvider::FromSimpleJson);

void IActorProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IActorProvider::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IActorProvider s_Object;

	*reinterpret_cast<IActorProvider*>(p_Target) = s_Object;
}

void IActorProvider::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCppEntity::TypeInfo = ZHMTypeInfo("SCppEntity", sizeof(SCppEntity), alignof(SCppEntity), SCppEntity::WriteJson, SCppEntity::WriteSimpleJson, SCppEntity::FromSimpleJson);

void SCppEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCppEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->propertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplateProperty::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCppEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCppEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item = s_Object->propertyValues[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCppEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCppEntity s_Object;

	s_Object.blueprintIndexInResourceHeader = static_cast<int32>(int64_t(p_Document["blueprintIndexInResourceHeader"]));

	for (simdjson::ondemand::value s_Item : p_Document["propertyValues"])
	{
		SEntityTemplateProperty s_ArrayItem;
		SEntityTemplateProperty::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.propertyValues.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SCppEntity*>(p_Target) = s_Object;
}

void SCppEntity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	propertyValues.Serialize(p_Serializer, p_OwnOffset + offsetof(SCppEntity, propertyValues));}

ZHMTypeInfo SCrowdPoseBoneSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseBoneSaveData", sizeof(SCrowdPoseBoneSaveData), alignof(SCrowdPoseBoneSaveData), SCrowdPoseBoneSaveData::WriteJson, SCrowdPoseBoneSaveData::WriteSimpleJson, SCrowdPoseBoneSaveData::FromSimpleJson);

void SCrowdPoseBoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseBoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdPoseBoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseBoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

void SCrowdPoseBoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdPoseBoneSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mQuaterion"], &s_Item);
		s_Object.mQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTranslation"], &s_Item);
		s_Object.mTranslation = s_Item;
	}

	*reinterpret_cast<SCrowdPoseBoneSaveData*>(p_Target) = s_Object;
}

void SCrowdPoseBoneSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	mQuaterion.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdPoseBoneSaveData, mQuaterion));	mTranslation.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdPoseBoneSaveData, mTranslation));}

ZHMTypeInfo SGeomScaleSaveData::TypeInfo = ZHMTypeInfo("SGeomScaleSaveData", sizeof(SGeomScaleSaveData), alignof(SGeomScaleSaveData), SGeomScaleSaveData::WriteJson, SGeomScaleSaveData::WriteSimpleJson, SGeomScaleSaveData::FromSimpleJson);

void SGeomScaleSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGeomScaleSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPrimitiveScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vPrimitiveScale, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SGeomScaleSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGeomScaleSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPrimitiveScale") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vPrimitiveScale, p_Stream);

	p_Stream << "}";
}

void SGeomScaleSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGeomScaleSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vPrimitiveScale"], &s_Item);
		s_Object.m_vPrimitiveScale = s_Item;
	}

	*reinterpret_cast<SGeomScaleSaveData*>(p_Target) = s_Object;
}

void SGeomScaleSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vPrimitiveScale.Serialize(p_Serializer, p_OwnOffset + offsetof(SGeomScaleSaveData, m_vPrimitiveScale));}

ZHMTypeInfo IBoneCollidable::TypeInfo = ZHMTypeInfo("IBoneCollidable", sizeof(IBoneCollidable), alignof(IBoneCollidable), IBoneCollidable::WriteJson, IBoneCollidable::WriteSimpleJson, IBoneCollidable::FromSimpleJson);

void IBoneCollidable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneCollidable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneCollidable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneCollidable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBoneCollidable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBoneCollidable s_Object;

	*reinterpret_cast<IBoneCollidable*>(p_Target) = s_Object;
}

void IBoneCollidable::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SWeaponCustomControlSaveData::TypeInfo = ZHMTypeInfo("SWeaponCustomControlSaveData", sizeof(SWeaponCustomControlSaveData), alignof(SWeaponCustomControlSaveData), SWeaponCustomControlSaveData::WriteJson, SWeaponCustomControlSaveData::WriteSimpleJson, SWeaponCustomControlSaveData::FromSimpleJson);

void SWeaponCustomControlSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWeaponCustomControlSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetRegistered;
	p_Stream << "}";

	p_Stream << "}";
}

void SWeaponCustomControlSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWeaponCustomControlSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetRegistered") << ":";
	p_Stream << s_Object->m_bTargetRegistered;

	p_Stream << "}";
}

void SWeaponCustomControlSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWeaponCustomControlSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	s_Object.m_bTargetRegistered = bool(p_Document["m_bTargetRegistered"]);

	*reinterpret_cast<SWeaponCustomControlSaveData*>(p_Target) = s_Object;
}

void SWeaponCustomControlSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SEventSaveData::TypeInfo = ZHMTypeInfo("SEventSaveData", sizeof(SEventSaveData), alignof(SEventSaveData), SEventSaveData::WriteJson, SEventSaveData::WriteSimpleJson, SEventSaveData::FromSimpleJson);

void SEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_nType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nEnd, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_nType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nEnd, p_Stream);

	p_Stream << "}";
}

void SEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEventSaveData s_Object;

	s_Object.m_nType = static_cast<EAISharedEventType>(ZHMEnums::GetEnumValueByName("EAISharedEventType", std::string_view(p_Document["m_nType"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nStart"], &s_Item);
		s_Object.m_nStart = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nEnd"], &s_Item);
		s_Object.m_nEnd = s_Item;
	}

	*reinterpret_cast<SEventSaveData*>(p_Target) = s_Object;
}

void SEventSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_nStart.Serialize(p_Serializer, p_OwnOffset + offsetof(SEventSaveData, m_nStart));	m_nEnd.Serialize(p_Serializer, p_OwnOffset + offsetof(SEventSaveData, m_nEnd));}

ZHMTypeInfo SCrowdPoseSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseSaveData", sizeof(SCrowdPoseSaveData), alignof(SCrowdPoseSaveData), SCrowdPoseSaveData::WriteJson, SCrowdPoseSaveData::WriteSimpleJson, SCrowdPoseSaveData::FromSimpleJson);

void SCrowdPoseSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdPoseBoneSaveData") << "," << JsonStr("$val") << ":";
		SCrowdPoseBoneSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdPoseSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		SCrowdPoseBoneSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdPoseSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdPoseSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aBones"])
	{
		SCrowdPoseBoneSaveData s_ArrayItem;
		SCrowdPoseBoneSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aBones.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SCrowdPoseSaveData*>(p_Target) = s_Object;
}

void SCrowdPoseSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aBones.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdPoseSaveData, m_aBones));}

ZHMTypeInfo SCrowdPoseCollectionSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseCollectionSaveData", sizeof(SCrowdPoseCollectionSaveData), alignof(SCrowdPoseCollectionSaveData), SCrowdPoseCollectionSaveData::WriteJson, SCrowdPoseCollectionSaveData::WriteSimpleJson, SCrowdPoseCollectionSaveData::FromSimpleJson);

void SCrowdPoseCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_id;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPoses") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoses.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPoses[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdPoseSaveData") << "," << JsonStr("$val") << ":";
		SCrowdPoseSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPoses.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdPoseCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdPoseCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_id") << ":";
	p_Stream << s_Object->m_id;
	p_Stream << ",";

	p_Stream << JsonStr("m_aPoses") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoses.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPoses[i];
		SCrowdPoseSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aPoses.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdPoseCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdPoseCollectionSaveData s_Object;

	s_Object.m_id = uint64(p_Document["m_id"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_aPoses"])
	{
		SCrowdPoseSaveData s_ArrayItem;
		SCrowdPoseSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aPoses.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SCrowdPoseCollectionSaveData*>(p_Target) = s_Object;
}

void SCrowdPoseCollectionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aPoses.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdPoseCollectionSaveData, m_aPoses));}

ZHMTypeInfo ZComponentCreator::TypeInfo = ZHMTypeInfo("ZComponentCreator", sizeof(ZComponentCreator), alignof(ZComponentCreator), ZComponentCreator::WriteJson, ZComponentCreator::WriteSimpleJson, ZComponentCreator::FromSimpleJson);

void ZComponentCreator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZComponentCreator*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sComponentName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sComponentName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aArgs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aArgs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aArgs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
		ZVariant::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aArgs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void ZComponentCreator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZComponentCreator*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sComponentName") << ":";
	p_Stream << JsonStr(s_Object->m_sComponentName);
	p_Stream << ",";

	p_Stream << JsonStr("m_aArgs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aArgs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aArgs[i];
		ZVariant::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aArgs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZComponentCreator::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZComponentCreator s_Object;

	s_Object.m_sComponentName = std::string_view(p_Document["m_sComponentName"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_aArgs"])
	{
		ZVariant s_ArrayItem;
		ZVariant::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aArgs.push_back(s_ArrayItem);
	}

	*reinterpret_cast<ZComponentCreator*>(p_Target) = s_Object;
}

void ZComponentCreator::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sComponentName.Serialize(p_Serializer, p_OwnOffset + offsetof(ZComponentCreator, m_sComponentName));	m_aArgs.Serialize(p_Serializer, p_OwnOffset + offsetof(ZComponentCreator, m_aArgs));}

ZHMTypeInfo SMathLerpsSaveData_SColorRGBA::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SColorRGBA", sizeof(SMathLerpsSaveData_SColorRGBA), alignof(SMathLerpsSaveData_SColorRGBA), SMathLerpsSaveData_SColorRGBA::WriteJson, SMathLerpsSaveData_SColorRGBA::WriteSimpleJson, SMathLerpsSaveData_SColorRGBA::FromSimpleJson);

void SMathLerpsSaveData_SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SColorRGBA") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SColorRGBA::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SColorRGBA::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGBA::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SColorRGBA s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathLerpSaveData_SColorRGBA s_ArrayItem;
		SMathLerpSaveData_SColorRGBA::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathLerpsSaveData_SColorRGBA*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SColorRGBA::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SColorRGBA, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SColorRGBA, m_aData));}

ZHMTypeInfo SActorSpreadTransitionOperatorMaterialSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadTransitionOperatorMaterialSaveData", sizeof(SActorSpreadTransitionOperatorMaterialSaveData), alignof(SActorSpreadTransitionOperatorMaterialSaveData), SActorSpreadTransitionOperatorMaterialSaveData::WriteJson, SActorSpreadTransitionOperatorMaterialSaveData::WriteSimpleJson, SActorSpreadTransitionOperatorMaterialSaveData::FromSimpleJson);

void SActorSpreadTransitionOperatorMaterialSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aActorMaterialOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorMaterialOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActorMaterialOverrides[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorSpreadTransitionOperatorMaterialActorSaveData") << "," << JsonStr("$val") << ":";
		SActorSpreadTransitionOperatorMaterialActorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActorMaterialOverrides.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aActorMaterialOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorMaterialOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActorMaterialOverrides[i];
		SActorSpreadTransitionOperatorMaterialActorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aActorMaterialOverrides.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSpreadTransitionOperatorMaterialSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aActorMaterialOverrides"])
	{
		SActorSpreadTransitionOperatorMaterialActorSaveData s_ArrayItem;
		SActorSpreadTransitionOperatorMaterialActorSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aActorMaterialOverrides.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Target) = s_Object;
}

void SActorSpreadTransitionOperatorMaterialSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aActorMaterialOverrides.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorSpreadTransitionOperatorMaterialSaveData, m_aActorMaterialOverrides));}

ZHMTypeInfo SAgitatedBystanderOrderSaveData::TypeInfo = ZHMTypeInfo("SAgitatedBystanderOrderSaveData", sizeof(SAgitatedBystanderOrderSaveData), alignof(SAgitatedBystanderOrderSaveData), SAgitatedBystanderOrderSaveData::WriteJson, SAgitatedBystanderOrderSaveData::WriteSimpleJson, SAgitatedBystanderOrderSaveData::FromSimpleJson);

void SAgitatedBystanderOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAgitatedBystanderOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rBystanderPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBystanderPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vCover, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCoverDir") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vCoverDir, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAgitatedBystanderOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAgitatedBystanderOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rBystanderPoint") << ":";
	p_Stream << s_Object->m_rBystanderPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_vCover") << ":";
	float4::WriteSimpleJson(&s_Object->m_vCover, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vCoverDir") << ":";
	float4::WriteSimpleJson(&s_Object->m_vCoverDir, p_Stream);

	p_Stream << "}";
}

void SAgitatedBystanderOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAgitatedBystanderOrderSaveData s_Object;

	s_Object.m_rBystanderPoint = static_cast<uint32>(int64_t(p_Document["m_rBystanderPoint"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vCover"], &s_Item);
		s_Object.m_vCover = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vCoverDir"], &s_Item);
		s_Object.m_vCoverDir = s_Item;
	}

	*reinterpret_cast<SAgitatedBystanderOrderSaveData*>(p_Target) = s_Object;
}

void SAgitatedBystanderOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vCover.Serialize(p_Serializer, p_OwnOffset + offsetof(SAgitatedBystanderOrderSaveData, m_vCover));	m_vCoverDir.Serialize(p_Serializer, p_OwnOffset + offsetof(SAgitatedBystanderOrderSaveData, m_vCoverDir));}

ZHMTypeInfo SGUIViewPort::TypeInfo = ZHMTypeInfo("SGUIViewPort", sizeof(SGUIViewPort), alignof(SGUIViewPort), SGUIViewPort::WriteJson, SGUIViewPort::WriteSimpleJson, SGUIViewPort::FromSimpleJson);

void SGUIViewPort::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGUIViewPort*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("h") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->h;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->w;
	p_Stream << "}";

	p_Stream << "}";
}

void SGUIViewPort::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGUIViewPort*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("h") << ":";
	p_Stream << s_Object->h;
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << s_Object->w;

	p_Stream << "}";
}

void SGUIViewPort::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGUIViewPort s_Object;

	s_Object.x = static_cast<uint32>(int64_t(p_Document["x"]));

	s_Object.y = static_cast<uint32>(int64_t(p_Document["y"]));

	s_Object.h = static_cast<uint32>(int64_t(p_Document["h"]));

	s_Object.w = static_cast<uint32>(int64_t(p_Document["w"]));

	*reinterpret_cast<SGUIViewPort*>(p_Target) = s_Object;
}

void SGUIViewPort::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorAccessoryItemActionSaveData::TypeInfo = ZHMTypeInfo("SActorAccessoryItemActionSaveData", sizeof(SActorAccessoryItemActionSaveData), alignof(SActorAccessoryItemActionSaveData), SActorAccessoryItemActionSaveData::WriteJson, SActorAccessoryItemActionSaveData::WriteSimpleJson, SActorAccessoryItemActionSaveData::FromSimpleJson);

void SActorAccessoryItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAccessoryItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAccessoryItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAccessoryItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorAccessoryItemActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorAccessoryItemActionSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorAccessoryItemActionSaveData*>(p_Target) = s_Object;
}

void SActorAccessoryItemActionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SSaveGameData::TypeInfo = ZHMTypeInfo("SSaveGameData", sizeof(SSaveGameData), alignof(SSaveGameData), SSaveGameData::WriteJson, SSaveGameData::WriteSimpleJson, SSaveGameData::FromSimpleJson);

void SSaveGameData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nVersion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nVersion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSavableObjectsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSavableObjectsData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSavableObjectsData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSavableData") << "," << JsonStr("$val") << ":";
		SSavableData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aSavableObjectsData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPaths") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPaths.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityPaths[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityPath") << "," << JsonStr("$val") << ":";
		SEntityPath::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityPaths.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSaveGameData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSaveGameData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nVersion") << ":";
	p_Stream << s_Object->m_nVersion;
	p_Stream << ",";

	p_Stream << JsonStr("m_aSavableObjectsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSavableObjectsData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSavableObjectsData[i];
		SSavableData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aSavableObjectsData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPaths") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPaths.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityPaths[i];
		SEntityPath::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEntityPaths.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSaveGameData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSaveGameData s_Object;

	s_Object.m_nVersion = static_cast<uint32>(int64_t(p_Document["m_nVersion"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aSavableObjectsData"])
	{
		SSavableData s_ArrayItem;
		SSavableData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aSavableObjectsData.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntityPaths"])
	{
		SEntityPath s_ArrayItem;
		SEntityPath::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aEntityPaths.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SSaveGameData*>(p_Target) = s_Object;
}

void SSaveGameData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aSavableObjectsData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameData, m_aSavableObjectsData));	m_aEntityPaths.Serialize(p_Serializer, p_OwnOffset + offsetof(SSaveGameData, m_aEntityPaths));}

ZHMTypeInfo SActorInventoryItemSaveData::TypeInfo = ZHMTypeInfo("SActorInventoryItemSaveData", sizeof(SActorInventoryItemSaveData), alignof(SActorInventoryItemSaveData), SActorInventoryItemSaveData::WriteJson, SActorInventoryItemSaveData::WriteSimpleJson, SActorInventoryItemSaveData::FromSimpleJson);

void SActorInventoryItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorInventoryItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAttachLocation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAttachLocation") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAttachLocation) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAttachLocation", static_cast<int>(s_Object->m_eAttachLocation))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eMaxTension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eMaxTension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eMaxTension))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftHand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLeftHand;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeapon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWeapon;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrenade") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGrenade;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorInventoryItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorInventoryItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_eAttachLocation") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAttachLocation", static_cast<int>(s_Object->m_eAttachLocation)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eMaxTension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eMaxTension)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftHand") << ":";
	p_Stream << s_Object->m_bLeftHand;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeapon") << ":";
	p_Stream << s_Object->m_bWeapon;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrenade") << ":";
	p_Stream << s_Object->m_bGrenade;

	p_Stream << "}";
}

void SActorInventoryItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorInventoryItemSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	s_Object.m_eAttachLocation = static_cast<EAttachLocation>(ZHMEnums::GetEnumValueByName("EAttachLocation", std::string_view(p_Document["m_eAttachLocation"])));

	s_Object.m_eMaxTension = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eMaxTension"])));

	s_Object.m_bLeftHand = bool(p_Document["m_bLeftHand"]);

	s_Object.m_bWeapon = bool(p_Document["m_bWeapon"]);

	s_Object.m_bGrenade = bool(p_Document["m_bGrenade"]);

	*reinterpret_cast<SActorInventoryItemSaveData*>(p_Target) = s_Object;
}

void SActorInventoryItemSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SGWaypoint::TypeInfo = ZHMTypeInfo("SGWaypoint", sizeof(SGWaypoint), alignof(SGWaypoint), SGWaypoint::WriteJson, SGWaypoint::WriteSimpleJson, SGWaypoint::FromSimpleJson);

void SGWaypoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGWaypoint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nNeighbor0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor0;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor1;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor2;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor3") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor3;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor4") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor4;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor5") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor5;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor6") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor6;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor7") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor7;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("vPos") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->vPos, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nVisionDataOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nVisionDataOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nLayerIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nLayerIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SGWaypoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGWaypoint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nNeighbor0") << ":";
	p_Stream << s_Object->nNeighbor0;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor1") << ":";
	p_Stream << s_Object->nNeighbor1;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor2") << ":";
	p_Stream << s_Object->nNeighbor2;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor3") << ":";
	p_Stream << s_Object->nNeighbor3;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor4") << ":";
	p_Stream << s_Object->nNeighbor4;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor5") << ":";
	p_Stream << s_Object->nNeighbor5;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor6") << ":";
	p_Stream << s_Object->nNeighbor6;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor7") << ":";
	p_Stream << s_Object->nNeighbor7;
	p_Stream << ",";

	p_Stream << JsonStr("vPos") << ":";
	float4::WriteSimpleJson(&s_Object->vPos, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nVisionDataOffset") << ":";
	p_Stream << s_Object->nVisionDataOffset;
	p_Stream << ",";

	p_Stream << JsonStr("nLayerIndex") << ":";
	p_Stream << s_Object->nLayerIndex;

	p_Stream << "}";
}

void SGWaypoint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGWaypoint s_Object;

	s_Object.nNeighbor0 = static_cast<uint16>(int64_t(p_Document["nNeighbor0"]));

	s_Object.nNeighbor1 = static_cast<uint16>(int64_t(p_Document["nNeighbor1"]));

	s_Object.nNeighbor2 = static_cast<uint16>(int64_t(p_Document["nNeighbor2"]));

	s_Object.nNeighbor3 = static_cast<uint16>(int64_t(p_Document["nNeighbor3"]));

	s_Object.nNeighbor4 = static_cast<uint16>(int64_t(p_Document["nNeighbor4"]));

	s_Object.nNeighbor5 = static_cast<uint16>(int64_t(p_Document["nNeighbor5"]));

	s_Object.nNeighbor6 = static_cast<uint16>(int64_t(p_Document["nNeighbor6"]));

	s_Object.nNeighbor7 = static_cast<uint16>(int64_t(p_Document["nNeighbor7"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["vPos"], &s_Item);
		s_Object.vPos = s_Item;
	}

	s_Object.nVisionDataOffset = static_cast<uint32>(int64_t(p_Document["nVisionDataOffset"]));

	s_Object.nLayerIndex = static_cast<int16>(int64_t(p_Document["nLayerIndex"]));

	*reinterpret_cast<SGWaypoint*>(p_Target) = s_Object;
}

void SGWaypoint::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	vPos.Serialize(p_Serializer, p_OwnOffset + offsetof(SGWaypoint, vPos));}

ZHMTypeInfo ZBitArray::TypeInfo = ZHMTypeInfo("ZBitArray", sizeof(ZBitArray), alignof(ZBitArray), ZBitArray::WriteJson, ZBitArray::WriteSimpleJson, ZBitArray::FromSimpleJson);

void ZBitArray::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZBitArray*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBytes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBytes.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBytes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aBytes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSize;
	p_Stream << "}";

	p_Stream << "}";
}

void ZBitArray::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZBitArray*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBytes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBytes.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBytes[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_aBytes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSize") << ":";
	p_Stream << s_Object->m_nSize;

	p_Stream << "}";
}

void ZBitArray::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZBitArray s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aBytes"])
	{
		s_Object.m_aBytes.push_back(static_cast<uint8>(int64_t(s_Item)));
	}

	s_Object.m_nSize = static_cast<uint32>(int64_t(p_Document["m_nSize"]));

	*reinterpret_cast<ZBitArray*>(p_Target) = s_Object;
}

void ZBitArray::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aBytes.Serialize(p_Serializer, p_OwnOffset + offsetof(ZBitArray, m_aBytes));}

ZHMTypeInfo SGProperties::TypeInfo = ZHMTypeInfo("SGProperties", sizeof(SGProperties), alignof(SGProperties), SGProperties::WriteJson, SGProperties::WriteSimpleJson, SGProperties::FromSimpleJson);

void SGProperties::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGProperties*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("vMin") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->vMin, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("vMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->vMax, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nGridWidth") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nGridWidth;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fGridSpacing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fGridSpacing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nVisibilityRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nVisibilityRange;
	p_Stream << "}";

	p_Stream << "}";
}

void SGProperties::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGProperties*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("vMin") << ":";
	float4::WriteSimpleJson(&s_Object->vMin, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("vMax") << ":";
	float4::WriteSimpleJson(&s_Object->vMax, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nGridWidth") << ":";
	p_Stream << s_Object->nGridWidth;
	p_Stream << ",";

	p_Stream << JsonStr("fGridSpacing") << ":";
	p_Stream << s_Object->fGridSpacing;
	p_Stream << ",";

	p_Stream << JsonStr("nVisibilityRange") << ":";
	p_Stream << s_Object->nVisibilityRange;

	p_Stream << "}";
}

void SGProperties::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGProperties s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["vMin"], &s_Item);
		s_Object.vMin = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["vMax"], &s_Item);
		s_Object.vMax = s_Item;
	}

	s_Object.nGridWidth = static_cast<int32>(int64_t(p_Document["nGridWidth"]));

	s_Object.fGridSpacing = static_cast<float32>(double(p_Document["fGridSpacing"]));

	s_Object.nVisibilityRange = static_cast<int32>(int64_t(p_Document["nVisibilityRange"]));

	*reinterpret_cast<SGProperties*>(p_Target) = s_Object;
}

void SGProperties::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	vMin.Serialize(p_Serializer, p_OwnOffset + offsetof(SGProperties, vMin));	vMax.Serialize(p_Serializer, p_OwnOffset + offsetof(SGProperties, vMax));}

ZHMTypeInfo SReasoningGrid::TypeInfo = ZHMTypeInfo("SReasoningGrid", sizeof(SReasoningGrid), alignof(SReasoningGrid), SReasoningGrid::WriteJson, SReasoningGrid::WriteSimpleJson, SReasoningGrid::FromSimpleJson);

void SReasoningGrid::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SReasoningGrid*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_WaypointList") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_WaypointList.size(); ++i)
	{
		auto& s_Item = s_Object->m_WaypointList[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGWaypoint") << "," << JsonStr("$val") << ":";
		SGWaypoint::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_WaypointList.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_LowVisibilityBits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBitArray") << "," << JsonStr("$val") << ":";
	ZBitArray::WriteJson(&s_Object->m_LowVisibilityBits, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HighVisibilityBits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBitArray") << "," << JsonStr("$val") << ":";
	ZBitArray::WriteJson(&s_Object->m_HighVisibilityBits, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Properties") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGProperties") << "," << JsonStr("$val") << ":";
	SGProperties::WriteJson(&s_Object->m_Properties, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNodeCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNodeCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pVisibilityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_pVisibilityData.size(); ++i)
	{
		auto& s_Item = s_Object->m_pVisibilityData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_pVisibilityData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_deadEndData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBitArray") << "," << JsonStr("$val") << ":";
	ZBitArray::WriteJson(&s_Object->m_deadEndData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SReasoningGrid::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SReasoningGrid*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_WaypointList") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_WaypointList.size(); ++i)
	{
		auto& s_Item = s_Object->m_WaypointList[i];
		SGWaypoint::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_WaypointList.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_LowVisibilityBits") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->m_LowVisibilityBits, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_HighVisibilityBits") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->m_HighVisibilityBits, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Properties") << ":";
	SGProperties::WriteSimpleJson(&s_Object->m_Properties, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nNodeCount") << ":";
	p_Stream << s_Object->m_nNodeCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_pVisibilityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_pVisibilityData.size(); ++i)
	{
		auto& s_Item = s_Object->m_pVisibilityData[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_pVisibilityData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_deadEndData") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->m_deadEndData, p_Stream);

	p_Stream << "}";
}

void SReasoningGrid::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SReasoningGrid s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_WaypointList"])
	{
		SGWaypoint s_ArrayItem;
		SGWaypoint::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_WaypointList.push_back(s_ArrayItem);
	}

	{
		ZBitArray s_Item;
		ZBitArray::FromSimpleJson(p_Document["m_LowVisibilityBits"], &s_Item);
		s_Object.m_LowVisibilityBits = s_Item;
	}

	{
		ZBitArray s_Item;
		ZBitArray::FromSimpleJson(p_Document["m_HighVisibilityBits"], &s_Item);
		s_Object.m_HighVisibilityBits = s_Item;
	}

	{
		SGProperties s_Item;
		SGProperties::FromSimpleJson(p_Document["m_Properties"], &s_Item);
		s_Object.m_Properties = s_Item;
	}

	s_Object.m_nNodeCount = static_cast<uint32>(int64_t(p_Document["m_nNodeCount"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_pVisibilityData"])
	{
		s_Object.m_pVisibilityData.push_back(static_cast<uint8>(int64_t(s_Item)));
	}

	{
		ZBitArray s_Item;
		ZBitArray::FromSimpleJson(p_Document["m_deadEndData"], &s_Item);
		s_Object.m_deadEndData = s_Item;
	}

	*reinterpret_cast<SReasoningGrid*>(p_Target) = s_Object;
}

void SReasoningGrid::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_WaypointList.Serialize(p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_WaypointList));	m_LowVisibilityBits.Serialize(p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_LowVisibilityBits));	m_HighVisibilityBits.Serialize(p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_HighVisibilityBits));	m_Properties.Serialize(p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_Properties));	m_pVisibilityData.Serialize(p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_pVisibilityData));	m_deadEndData.Serialize(p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_deadEndData));}

ZHMTypeInfo IUIDataListener::TypeInfo = ZHMTypeInfo("IUIDataListener", sizeof(IUIDataListener), alignof(IUIDataListener), IUIDataListener::WriteJson, IUIDataListener::WriteSimpleJson, IUIDataListener::FromSimpleJson);

void IUIDataListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIDataListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IUIDataListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IUIDataListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IUIDataListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IUIDataListener s_Object;

	*reinterpret_cast<IUIDataListener*>(p_Target) = s_Object;
}

void IUIDataListener::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDestructibleRuntimeConnnection::TypeInfo = ZHMTypeInfo("SDestructibleRuntimeConnnection", sizeof(SDestructibleRuntimeConnnection), alignof(SDestructibleRuntimeConnnection), SDestructibleRuntimeConnnection::WriteJson, SDestructibleRuntimeConnnection::WriteSimpleJson, SDestructibleRuntimeConnnection::FromSimpleJson);

void SDestructibleRuntimeConnnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleRuntimeConnnection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnections.size(); ++i)
	{
		auto& s_Item = s_Object->m_aConnections[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aConnections.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDestructibleRuntimeConnnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleRuntimeConnnection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnections.size(); ++i)
	{
		auto& s_Item = s_Object->m_aConnections[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aConnections.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDestructibleRuntimeConnnection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructibleRuntimeConnnection s_Object;

	s_Object.m_nPieceIndex = static_cast<uint16>(int64_t(p_Document["m_nPieceIndex"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aConnections"])
	{
		s_Object.m_aConnections.push_back(static_cast<uint16>(int64_t(s_Item)));
	}

	*reinterpret_cast<SDestructibleRuntimeConnnection*>(p_Target) = s_Object;
}

void SDestructibleRuntimeConnnection::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aConnections.Serialize(p_Serializer, p_OwnOffset + offsetof(SDestructibleRuntimeConnnection, m_aConnections));}

ZHMTypeInfo SActorProviderApproachSaveData::TypeInfo = ZHMTypeInfo("SActorProviderApproachSaveData", sizeof(SActorProviderApproachSaveData), alignof(SActorProviderApproachSaveData), SActorProviderApproachSaveData::WriteJson, SActorProviderApproachSaveData::WriteSimpleJson, SActorProviderApproachSaveData::FromSimpleJson);

void SActorProviderApproachSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProviderApproachSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCastActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCastActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProviderApproachSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorProviderApproachSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCastActor") << ":";
	p_Stream << s_Object->m_rCastActor;

	p_Stream << "}";
}

void SActorProviderApproachSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorProviderApproachSaveData s_Object;

	s_Object.m_rCastActor = static_cast<uint32>(int64_t(p_Document["m_rCastActor"]));

	*reinterpret_cast<SActorProviderApproachSaveData*>(p_Target) = s_Object;
}

void SActorProviderApproachSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SItemOnBackUIData::TypeInfo = ZHMTypeInfo("SItemOnBackUIData", sizeof(SItemOnBackUIData), alignof(SItemOnBackUIData), SItemOnBackUIData::WriteJson, SItemOnBackUIData::WriteSimpleJson, SItemOnBackUIData::FromSimpleJson);

void SItemOnBackUIData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemOnBackUIData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemOnBackUIData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemOnBackUIData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << s_Object->bIllegal;

	p_Stream << "}";
}

void SItemOnBackUIData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemOnBackUIData s_Object;

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	s_Object.nItemHUDType = static_cast<int32>(int64_t(p_Document["nItemHUDType"]));

	s_Object.bHasItemToShow = bool(p_Document["bHasItemToShow"]);

	s_Object.bSuspicious = bool(p_Document["bSuspicious"]);

	s_Object.bIllegal = bool(p_Document["bIllegal"]);

	*reinterpret_cast<SItemOnBackUIData*>(p_Target) = s_Object;
}

void SItemOnBackUIData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	icon.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemOnBackUIData, icon));}

ZHMTypeInfo ZAutoNullEntityRef::TypeInfo = ZHMTypeInfo("ZAutoNullEntityRef", sizeof(ZAutoNullEntityRef), alignof(ZAutoNullEntityRef), ZAutoNullEntityRef::WriteJson, ZAutoNullEntityRef::WriteSimpleJson, ZAutoNullEntityRef::FromSimpleJson);

void ZAutoNullEntityRef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAutoNullEntityRef*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZAutoNullEntityRef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZAutoNullEntityRef*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZAutoNullEntityRef::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAutoNullEntityRef s_Object;

	*reinterpret_cast<ZAutoNullEntityRef*>(p_Target) = s_Object;
}

void ZAutoNullEntityRef::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SOnlineSaveData::TypeInfo = ZHMTypeInfo("SOnlineSaveData", sizeof(SOnlineSaveData), alignof(SOnlineSaveData), SOnlineSaveData::WriteJson, SOnlineSaveData::WriteSimpleJson, SOnlineSaveData::FromSimpleJson);

void SOnlineSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOnlineSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeStamp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTimeStamp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOnline;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractSessionId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sContractSessionId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLastEventToken") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sLastEventToken);
	p_Stream << "}";

	p_Stream << "}";
}

void SOnlineSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOnlineSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeStamp") << ":";
	p_Stream << s_Object->m_nTimeStamp;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnline") << ":";
	p_Stream << s_Object->m_bIsOnline;
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractSessionId") << ":";
	p_Stream << JsonStr(s_Object->m_sContractSessionId);
	p_Stream << ",";

	p_Stream << JsonStr("m_sLastEventToken") << ":";
	p_Stream << JsonStr(s_Object->m_sLastEventToken);

	p_Stream << "}";
}

void SOnlineSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SOnlineSaveData s_Object;

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	s_Object.m_nTimeStamp = int64(p_Document["m_nTimeStamp"]);

	s_Object.m_bIsOnline = bool(p_Document["m_bIsOnline"]);

	s_Object.m_sContractSessionId = std::string_view(p_Document["m_sContractSessionId"]);

	s_Object.m_sLastEventToken = std::string_view(p_Document["m_sLastEventToken"]);

	*reinterpret_cast<SOnlineSaveData*>(p_Target) = s_Object;
}

void SOnlineSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SOnlineSaveData, m_sName));	m_sContractSessionId.Serialize(p_Serializer, p_OwnOffset + offsetof(SOnlineSaveData, m_sContractSessionId));	m_sLastEventToken.Serialize(p_Serializer, p_OwnOffset + offsetof(SOnlineSaveData, m_sLastEventToken));}

ZHMTypeInfo SHintManagerSaveData::TypeInfo = ZHMTypeInfo("SHintManagerSaveData", sizeof(SHintManagerSaveData), alignof(SHintManagerSaveData), SHintManagerSaveData::WriteJson, SHintManagerSaveData::WriteSimpleJson, SHintManagerSaveData::FromSimpleJson);

void SHintManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHintManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_activeHint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHintEntrySaveData") << "," << JsonStr("$val") << ":";
	SHintEntrySaveData::WriteJson(&s_Object->m_activeHint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aQueue") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aQueue.size(); ++i)
	{
		auto& s_Item = s_Object->m_aQueue[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHintEntrySaveData") << "," << JsonStr("$val") << ":";
		SHintEntrySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aQueue.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsRunning;
	p_Stream << "}";

	p_Stream << "}";
}

void SHintManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHintManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_activeHint") << ":";
	SHintEntrySaveData::WriteSimpleJson(&s_Object->m_activeHint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aQueue") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aQueue.size(); ++i)
	{
		auto& s_Item = s_Object->m_aQueue[i];
		SHintEntrySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aQueue.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRunning") << ":";
	p_Stream << s_Object->m_bIsRunning;

	p_Stream << "}";
}

void SHintManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHintManagerSaveData s_Object;

	{
		SHintEntrySaveData s_Item;
		SHintEntrySaveData::FromSimpleJson(p_Document["m_activeHint"], &s_Item);
		s_Object.m_activeHint = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aQueue"])
	{
		SHintEntrySaveData s_ArrayItem;
		SHintEntrySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aQueue.push_back(s_ArrayItem);
	}

	s_Object.m_bIsRunning = bool(p_Document["m_bIsRunning"]);

	*reinterpret_cast<SHintManagerSaveData*>(p_Target) = s_Object;
}

void SHintManagerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_activeHint.Serialize(p_Serializer, p_OwnOffset + offsetof(SHintManagerSaveData, m_activeHint));	m_aQueue.Serialize(p_Serializer, p_OwnOffset + offsetof(SHintManagerSaveData, m_aQueue));}

ZHMTypeInfo SCombatOrderSaveData::TypeInfo = ZHMTypeInfo("SCombatOrderSaveData", sizeof(SCombatOrderSaveData), alignof(SCombatOrderSaveData), SCombatOrderSaveData::WriteJson, SCombatOrderSaveData::WriteSimpleJson, SCombatOrderSaveData::FromSimpleJson);

void SCombatOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPos") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPos, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_coverPlane") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_coverPlane;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInteraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInteraction;
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPos") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPos, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_coverPlane") << ":";
	p_Stream << s_Object->m_coverPlane;
	p_Stream << ",";

	p_Stream << JsonStr("m_rInteraction") << ":";
	p_Stream << s_Object->m_rInteraction;

	p_Stream << "}";
}

void SCombatOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCombatOrderSaveData s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPos"], &s_Item);
		s_Object.m_vPos = s_Item;
	}

	s_Object.m_coverPlane = static_cast<uint32>(int64_t(p_Document["m_coverPlane"]));

	s_Object.m_rInteraction = static_cast<uint32>(int64_t(p_Document["m_rInteraction"]));

	*reinterpret_cast<SCombatOrderSaveData*>(p_Target) = s_Object;
}

void SCombatOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vPos.Serialize(p_Serializer, p_OwnOffset + offsetof(SCombatOrderSaveData, m_vPos));}

ZHMTypeInfo SMathLerpsSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector3", sizeof(SMathLerpsSaveData_SVector3), alignof(SMathLerpsSaveData_SVector3), SMathLerpsSaveData_SVector3::WriteJson, SMathLerpsSaveData_SVector3::WriteSimpleJson, SMathLerpsSaveData_SVector3::FromSimpleJson);

void SMathLerpsSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SVector3") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SVector3::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SVector3::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SVector3 s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathLerpSaveData_SVector3 s_ArrayItem;
		SMathLerpSaveData_SVector3::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathLerpsSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SVector3::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector3, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector3, m_aData));}

ZHMTypeInfo SValueFloatSaveData::TypeInfo = ZHMTypeInfo("SValueFloatSaveData", sizeof(SValueFloatSaveData), alignof(SValueFloatSaveData), SValueFloatSaveData::WriteJson, SValueFloatSaveData::WriteSimpleJson, SValueFloatSaveData::FromSimpleJson);

void SValueFloatSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueFloatSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SValueFloatSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueFloatSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SValueFloatSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueFloatSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		s_Object.m_aData.push_back(static_cast<float32>(double(s_Item)));
	}

	*reinterpret_cast<SValueFloatSaveData*>(p_Target) = s_Object;
}

void SValueFloatSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueFloatSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueFloatSaveData, m_aData));}

ZHMTypeInfo SHUDTimerControllerSaveData::TypeInfo = ZHMTypeInfo("SHUDTimerControllerSaveData", sizeof(SHUDTimerControllerSaveData), alignof(SHUDTimerControllerSaveData), SHUDTimerControllerSaveData::WriteJson, SHUDTimerControllerSaveData::WriteSimpleJson, SHUDTimerControllerSaveData::FromSimpleJson);

void SHUDTimerControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDTimerControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pCurrentInstance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pCurrentInstance;
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDTimerControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDTimerControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pCurrentInstance") << ":";
	p_Stream << s_Object->m_pCurrentInstance;

	p_Stream << "}";
}

void SHUDTimerControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHUDTimerControllerSaveData s_Object;

	s_Object.m_pCurrentInstance = static_cast<uint32>(int64_t(p_Document["m_pCurrentInstance"]));

	*reinterpret_cast<SHUDTimerControllerSaveData*>(p_Target) = s_Object;
}

void SHUDTimerControllerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SSituationConversationGroupSaveData::TypeInfo = ZHMTypeInfo("SSituationConversationGroupSaveData", sizeof(SSituationConversationGroupSaveData), alignof(SSituationConversationGroupSaveData), SSituationConversationGroupSaveData::WriteJson, SSituationConversationGroupSaveData::WriteSimpleJson, SSituationConversationGroupSaveData::FromSimpleJson);

void SSituationConversationGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationConversationGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_members") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_members.size(); ++i)
	{
		auto& s_Item = s_Object->m_members[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_members.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSituationConversationGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationConversationGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_members") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_members.size(); ++i)
	{
		auto& s_Item = s_Object->m_members[i];
		p_Stream << s_Item;

		if (i < s_Object->m_members.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSituationConversationGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationConversationGroupSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_members"])
	{
		s_Object.m_members.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SSituationConversationGroupSaveData*>(p_Target) = s_Object;
}

void SSituationConversationGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_members.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationConversationGroupSaveData, m_members));}

ZHMTypeInfo SActivityObjective::TypeInfo = ZHMTypeInfo("SActivityObjective", sizeof(SActivityObjective), alignof(SActivityObjective), SActivityObjective::WriteJson, SActivityObjective::WriteSimpleJson, SActivityObjective::FromSimpleJson);

void SActivityObjective::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityObjective*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("activity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
	SActivity::WriteJson(&s_Object->activity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("opportunities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->opportunities.size(); ++i)
	{
		auto& s_Item = s_Object->opportunities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
		SActivity::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->opportunities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActivityObjective::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityObjective*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("activity") << ":";
	SActivity::WriteSimpleJson(&s_Object->activity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("opportunities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->opportunities.size(); ++i)
	{
		auto& s_Item = s_Object->opportunities[i];
		SActivity::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->opportunities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActivityObjective::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivityObjective s_Object;

	{
		SActivity s_Item;
		SActivity::FromSimpleJson(p_Document["activity"], &s_Item);
		s_Object.activity = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["opportunities"])
	{
		SActivity s_ArrayItem;
		SActivity::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.opportunities.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActivityObjective*>(p_Target) = s_Object;
}

void SActivityObjective::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	activity.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivityObjective, activity));	opportunities.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivityObjective, opportunities));}

ZHMTypeInfo SActivityDefinition::TypeInfo = ZHMTypeInfo("SActivityDefinition", sizeof(SActivityDefinition), alignof(SActivityDefinition), SActivityDefinition::WriteJson, SActivityDefinition::WriteSimpleJson, SActivityDefinition::FromSimpleJson);

void SActivityDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("activity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
	SActivity::WriteJson(&s_Object->activity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectives") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectives.size(); ++i)
	{
		auto& s_Item = s_Object->objectives[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivityObjective") << "," << JsonStr("$val") << ":";
		SActivityObjective::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->objectives.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivityExits") << "," << JsonStr("$val") << ":";
	SActivityExits::WriteJson(&s_Object->exits, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SActivityDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivityDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("activity") << ":";
	SActivity::WriteSimpleJson(&s_Object->activity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("objectives") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectives.size(); ++i)
	{
		auto& s_Item = s_Object->objectives[i];
		SActivityObjective::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->objectives.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	SActivityExits::WriteSimpleJson(&s_Object->exits, p_Stream);

	p_Stream << "}";
}

void SActivityDefinition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivityDefinition s_Object;

	{
		SActivity s_Item;
		SActivity::FromSimpleJson(p_Document["activity"], &s_Item);
		s_Object.activity = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["objectives"])
	{
		SActivityObjective s_ArrayItem;
		SActivityObjective::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.objectives.push_back(s_ArrayItem);
	}

	{
		SActivityExits s_Item;
		SActivityExits::FromSimpleJson(p_Document["exits"], &s_Item);
		s_Object.exits = s_Item;
	}

	*reinterpret_cast<SActivityDefinition*>(p_Target) = s_Object;
}

void SActivityDefinition::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	activity.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivityDefinition, activity));	objectives.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivityDefinition, objectives));	exits.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivityDefinition, exits));}

ZHMTypeInfo ZPostfilterGraphBaseNode::TypeInfo = ZHMTypeInfo("ZPostfilterGraphBaseNode", sizeof(ZPostfilterGraphBaseNode), alignof(ZPostfilterGraphBaseNode), ZPostfilterGraphBaseNode::WriteJson, ZPostfilterGraphBaseNode::WriteSimpleJson, ZPostfilterGraphBaseNode::FromSimpleJson);

void ZPostfilterGraphBaseNode::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPostfilterGraphBaseNode*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPostfilterGraphBaseNode::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZPostfilterGraphBaseNode*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZPostfilterGraphBaseNode::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZPostfilterGraphBaseNode s_Object;

	*reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Target) = s_Object;
}

void ZPostfilterGraphBaseNode::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDangerousAreaSaveData::TypeInfo = ZHMTypeInfo("SDangerousAreaSaveData", sizeof(SDangerousAreaSaveData), alignof(SDangerousAreaSaveData), SDangerousAreaSaveData::WriteJson, SDangerousAreaSaveData::WriteSimpleJson, SDangerousAreaSaveData::FromSimpleJson);

void SDangerousAreaSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDangerousAreaSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bDangerous") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDangerous;
	p_Stream << "}";

	p_Stream << "}";
}

void SDangerousAreaSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDangerousAreaSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bDangerous") << ":";
	p_Stream << s_Object->m_bDangerous;

	p_Stream << "}";
}

void SDangerousAreaSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDangerousAreaSaveData s_Object;

	s_Object.m_bDangerous = bool(p_Document["m_bDangerous"]);

	*reinterpret_cast<SDangerousAreaSaveData*>(p_Target) = s_Object;
}

void SDangerousAreaSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCrowdReactionSaveData::TypeInfo = ZHMTypeInfo("SCrowdReactionSaveData", sizeof(SCrowdReactionSaveData), alignof(SCrowdReactionSaveData), SCrowdReactionSaveData::WriteJson, SCrowdReactionSaveData::WriteSimpleJson, SCrowdReactionSaveData::FromSimpleJson);

void SCrowdReactionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdReactionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nNumPacify") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumPacify;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumShotsFired") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumShotsFired;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumDeaths") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumDeaths;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumScared") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumScared;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarzoneSpawned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWarzoneSpawned;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdReactionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdReactionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nNumPacify") << ":";
	p_Stream << s_Object->m_nNumPacify;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumShotsFired") << ":";
	p_Stream << s_Object->m_nNumShotsFired;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumDeaths") << ":";
	p_Stream << s_Object->m_nNumDeaths;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumScared") << ":";
	p_Stream << s_Object->m_nNumScared;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarzoneSpawned") << ":";
	p_Stream << s_Object->m_bWarzoneSpawned;

	p_Stream << "}";
}

void SCrowdReactionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdReactionSaveData s_Object;

	s_Object.m_nNumPacify = static_cast<uint32>(int64_t(p_Document["m_nNumPacify"]));

	s_Object.m_nNumShotsFired = static_cast<uint32>(int64_t(p_Document["m_nNumShotsFired"]));

	s_Object.m_nNumDeaths = static_cast<uint32>(int64_t(p_Document["m_nNumDeaths"]));

	s_Object.m_nNumScared = static_cast<uint32>(int64_t(p_Document["m_nNumScared"]));

	s_Object.m_bWarzoneSpawned = bool(p_Document["m_bWarzoneSpawned"]);

	*reinterpret_cast<SCrowdReactionSaveData*>(p_Target) = s_Object;
}

void SCrowdReactionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SClothWireEntitySaveData::TypeInfo = ZHMTypeInfo("SClothWireEntitySaveData", sizeof(SClothWireEntitySaveData), alignof(SClothWireEntitySaveData), SClothWireEntitySaveData::WriteJson, SClothWireEntitySaveData::WriteSimpleJson, SClothWireEntitySaveData::FromSimpleJson);

void SClothWireEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothWireEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fWireLength") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fWireLength;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttachToAnchorTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAttachToAnchorTransform;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSimulationEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSimulationEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothWireEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothWireEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fWireLength") << ":";
	p_Stream << s_Object->m_fWireLength;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttachToAnchorTransform") << ":";
	p_Stream << s_Object->m_bAttachToAnchorTransform;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSimulationEnabled") << ":";
	p_Stream << s_Object->m_bSimulationEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

void SClothWireEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SClothWireEntitySaveData s_Object;

	s_Object.m_fWireLength = static_cast<float32>(double(p_Document["m_fWireLength"]));

	s_Object.m_bAttachToAnchorTransform = bool(p_Document["m_bAttachToAnchorTransform"]);

	s_Object.m_bSimulationEnabled = bool(p_Document["m_bSimulationEnabled"]);

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	*reinterpret_cast<SClothWireEntitySaveData*>(p_Target) = s_Object;
}

void SClothWireEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SParticleEmitterSaveData::TypeInfo = ZHMTypeInfo("SParticleEmitterSaveData", sizeof(SParticleEmitterSaveData), alignof(SParticleEmitterSaveData), SParticleEmitterSaveData::WriteJson, SParticleEmitterSaveData::WriteSimpleJson, SParticleEmitterSaveData::FromSimpleJson);

void SParticleEmitterSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SParticleEmitterSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeLeft") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEmissionTimeLeft;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEmissionTimeFraction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionCntLeft") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEmissionCntLeft;
	p_Stream << "}";

	p_Stream << "}";
}

void SParticleEmitterSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SParticleEmitterSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsActivated") << ":";
	p_Stream << s_Object->m_bIsActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeLeft") << ":";
	p_Stream << s_Object->m_fEmissionTimeLeft;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeFraction") << ":";
	p_Stream << s_Object->m_fEmissionTimeFraction;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionCntLeft") << ":";
	p_Stream << s_Object->m_fEmissionCntLeft;

	p_Stream << "}";
}

void SParticleEmitterSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SParticleEmitterSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_bIsActivated = bool(p_Document["m_bIsActivated"]);

	s_Object.m_bIsVisible = bool(p_Document["m_bIsVisible"]);

	s_Object.m_fEmissionTimeLeft = static_cast<float32>(double(p_Document["m_fEmissionTimeLeft"]));

	s_Object.m_fEmissionTimeFraction = static_cast<float32>(double(p_Document["m_fEmissionTimeFraction"]));

	s_Object.m_fEmissionCntLeft = static_cast<float32>(double(p_Document["m_fEmissionCntLeft"]));

	*reinterpret_cast<SParticleEmitterSaveData*>(p_Target) = s_Object;
}

void SParticleEmitterSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SGameplayRenderablesSaveData::TypeInfo = ZHMTypeInfo("SGameplayRenderablesSaveData", sizeof(SGameplayRenderablesSaveData), alignof(SGameplayRenderablesSaveData), SGameplayRenderablesSaveData::WriteJson, SGameplayRenderablesSaveData::WriteSimpleJson, SGameplayRenderablesSaveData::FromSimpleJson);

void SGameplayRenderablesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameplayRenderablesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aLightData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLightData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLightData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLightSaveData") << "," << JsonStr("$val") << ":";
		SLightSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aLightData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMaterialData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMaterialData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aMaterialData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRenderMaterialSaveData") << "," << JsonStr("$val") << ":";
		SRenderMaterialSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aMaterialData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aParticleData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aParticleData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aParticleData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SParticleEmitterSaveData") << "," << JsonStr("$val") << ":";
		SParticleEmitterSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aParticleData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneAttachData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneAttachData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneAttachData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBoneAttachSaveData") << "," << JsonStr("$val") << ":";
		SBoneAttachSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBoneAttachData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPostFilterParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPostFilterParametersData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPostFilterParametersData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SPostfilterParametersSaveData") << "," << JsonStr("$val") << ":";
		SPostfilterParametersSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPostFilterParametersData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGateData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGateData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGateData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGateSaveData") << "," << JsonStr("$val") << ":";
		SGateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGateData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGameplayRenderablesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameplayRenderablesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aLightData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLightData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLightData[i];
		SLightSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aLightData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMaterialData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMaterialData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aMaterialData[i];
		SRenderMaterialSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aMaterialData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aParticleData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aParticleData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aParticleData[i];
		SParticleEmitterSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aParticleData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneAttachData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneAttachData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneAttachData[i];
		SBoneAttachSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBoneAttachData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPostFilterParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPostFilterParametersData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPostFilterParametersData[i];
		SPostfilterParametersSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aPostFilterParametersData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGateData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGateData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGateData[i];
		SGateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGateData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGameplayRenderablesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameplayRenderablesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aLightData"])
	{
		SLightSaveData s_ArrayItem;
		SLightSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aLightData.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aMaterialData"])
	{
		SRenderMaterialSaveData s_ArrayItem;
		SRenderMaterialSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aMaterialData.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aParticleData"])
	{
		SParticleEmitterSaveData s_ArrayItem;
		SParticleEmitterSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aParticleData.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aBoneAttachData"])
	{
		SBoneAttachSaveData s_ArrayItem;
		SBoneAttachSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aBoneAttachData.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aPostFilterParametersData"])
	{
		SPostfilterParametersSaveData s_ArrayItem;
		SPostfilterParametersSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aPostFilterParametersData.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aGateData"])
	{
		SGateSaveData s_ArrayItem;
		SGateSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aGateData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SGameplayRenderablesSaveData*>(p_Target) = s_Object;
}

void SGameplayRenderablesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aLightData.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aLightData));	m_aMaterialData.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aMaterialData));	m_aParticleData.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aParticleData));	m_aBoneAttachData.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aBoneAttachData));	m_aPostFilterParametersData.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aPostFilterParametersData));	m_aGateData.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aGateData));}

ZHMTypeInfo SItsATrapSaveData::TypeInfo = ZHMTypeInfo("SItsATrapSaveData", sizeof(SItsATrapSaveData), alignof(SItsATrapSaveData), SItsATrapSaveData::WriteJson, SItsATrapSaveData::WriteSimpleJson, SItsATrapSaveData::FromSimpleJson);

void SItsATrapSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItsATrapSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimer;
	p_Stream << "}";

	p_Stream << "}";
}

void SItsATrapSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItsATrapSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << s_Object->m_fTimer;

	p_Stream << "}";
}

void SItsATrapSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItsATrapSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_fTimer = static_cast<float32>(double(p_Document["m_fTimer"]));

	*reinterpret_cast<SItsATrapSaveData*>(p_Target) = s_Object;
}

void SItsATrapSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDoorSoundDefs::TypeInfo = ZHMTypeInfo("SDoorSoundDefs", sizeof(SDoorSoundDefs), alignof(SDoorSoundDefs), SDoorSoundDefs::WriteJson, SDoorSoundDefs::WriteSimpleJson, SDoorSoundDefs::FromSimpleJson);

void SDoorSoundDefs::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorSoundDefs*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SDoorSoundDefs::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorSoundDefs*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SDoorSoundDefs::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDoorSoundDefs s_Object;

	*reinterpret_cast<SDoorSoundDefs*>(p_Target) = s_Object;
}

void SDoorSoundDefs::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorBoneSaveData::TypeInfo = ZHMTypeInfo("SActorBoneSaveData", sizeof(SActorBoneSaveData), alignof(SActorBoneSaveData), SActorBoneSaveData::WriteJson, SActorBoneSaveData::WriteSimpleJson, SActorBoneSaveData::FromSimpleJson);

void SActorBoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SActorBoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorBoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

void SActorBoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorBoneSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mQuaterion"], &s_Item);
		s_Object.mQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTranslation"], &s_Item);
		s_Object.mTranslation = s_Item;
	}

	*reinterpret_cast<SActorBoneSaveData*>(p_Target) = s_Object;
}

void SActorBoneSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	mQuaterion.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorBoneSaveData, mQuaterion));	mTranslation.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorBoneSaveData, mTranslation));}

ZHMTypeInfo SGBufferSample::TypeInfo = ZHMTypeInfo("SGBufferSample", sizeof(SGBufferSample), alignof(SGBufferSample), SGBufferSample::WriteJson, SGBufferSample::WriteSimpleJson, SGBufferSample::FromSimpleJson);

void SGBufferSample::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGBufferSample*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("normal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->normal, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("diffuse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->diffuse, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("specular") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->specular, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("accumulatedLight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->accumulatedLight, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("glossiness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->glossiness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("translucency") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->translucency;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ao") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->ao;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("shadingModel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->shadingModel;
	p_Stream << "}";

	p_Stream << "}";
}

void SGBufferSample::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGBufferSample*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("normal") << ":";
	SVector3::WriteSimpleJson(&s_Object->normal, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("diffuse") << ":";
	SVector3::WriteSimpleJson(&s_Object->diffuse, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("specular") << ":";
	SVector3::WriteSimpleJson(&s_Object->specular, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("accumulatedLight") << ":";
	SVector3::WriteSimpleJson(&s_Object->accumulatedLight, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("glossiness") << ":";
	p_Stream << s_Object->glossiness;
	p_Stream << ",";

	p_Stream << JsonStr("translucency") << ":";
	p_Stream << s_Object->translucency;
	p_Stream << ",";

	p_Stream << JsonStr("ao") << ":";
	p_Stream << s_Object->ao;
	p_Stream << ",";

	p_Stream << JsonStr("shadingModel") << ":";
	p_Stream << s_Object->shadingModel;

	p_Stream << "}";
}

void SGBufferSample::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGBufferSample s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["normal"], &s_Item);
		s_Object.normal = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["diffuse"], &s_Item);
		s_Object.diffuse = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["specular"], &s_Item);
		s_Object.specular = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["accumulatedLight"], &s_Item);
		s_Object.accumulatedLight = s_Item;
	}

	s_Object.glossiness = static_cast<float32>(double(p_Document["glossiness"]));

	s_Object.translucency = static_cast<float32>(double(p_Document["translucency"]));

	s_Object.ao = static_cast<float32>(double(p_Document["ao"]));

	s_Object.shadingModel = static_cast<uint32>(int64_t(p_Document["shadingModel"]));

	*reinterpret_cast<SGBufferSample*>(p_Target) = s_Object;
}

void SGBufferSample::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	normal.Serialize(p_Serializer, p_OwnOffset + offsetof(SGBufferSample, normal));	diffuse.Serialize(p_Serializer, p_OwnOffset + offsetof(SGBufferSample, diffuse));	specular.Serialize(p_Serializer, p_OwnOffset + offsetof(SGBufferSample, specular));	accumulatedLight.Serialize(p_Serializer, p_OwnOffset + offsetof(SGBufferSample, accumulatedLight));}

ZHMTypeInfo SRememberActorSaveData::TypeInfo = ZHMTypeInfo("SRememberActorSaveData", sizeof(SRememberActorSaveData), alignof(SRememberActorSaveData), SRememberActorSaveData::WriteJson, SRememberActorSaveData::WriteSimpleJson, SRememberActorSaveData::FromSimpleJson);

void SRememberActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRememberActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Actors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Actors.size(); ++i)
	{
		auto& s_Item = s_Object->m_Actors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_Actors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SRememberActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRememberActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Actors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Actors.size(); ++i)
	{
		auto& s_Item = s_Object->m_Actors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_Actors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SRememberActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRememberActorSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_Actors"])
	{
		s_Object.m_Actors.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SRememberActorSaveData*>(p_Target) = s_Object;
}

void SRememberActorSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_Actors.Serialize(p_Serializer, p_OwnOffset + offsetof(SRememberActorSaveData, m_Actors));}

ZHMTypeInfo SSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SSituationMemberSaveData", sizeof(SSituationMemberSaveData), alignof(SSituationMemberSaveData), SSituationMemberSaveData::WriteJson, SSituationMemberSaveData::WriteSimpleJson, SSituationMemberSaveData::FromSimpleJson);

void SSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eJoinReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationJoinReason") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eJoinReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationJoinReason", static_cast<int>(s_Object->m_eJoinReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOrderValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOrderValid;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_OrderData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_PendingOrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_PendingOrderData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDramaRole") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDramaRole;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_eJoinReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationJoinReason", static_cast<int>(s_Object->m_eJoinReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOrderValid") << ":";
	p_Stream << s_Object->m_bIsOrderValid;
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_OrderData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_PendingOrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_PendingOrderData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rDramaRole") << ":";
	p_Stream << s_Object->m_rDramaRole;
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomData, p_Stream);

	p_Stream << "}";
}

void SSituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationMemberSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_eJoinReason = static_cast<ESituationJoinReason>(ZHMEnums::GetEnumValueByName("ESituationJoinReason", std::string_view(p_Document["m_eJoinReason"])));

	s_Object.m_bIsOrderValid = bool(p_Document["m_bIsOrderValid"]);

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_OrderData"], &s_Item);
		s_Object.m_OrderData = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_PendingOrderData"], &s_Item);
		s_Object.m_PendingOrderData = s_Item;
	}

	s_Object.m_rDramaRole = static_cast<uint32>(int64_t(p_Document["m_rDramaRole"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_CustomData"], &s_Item);
		s_Object.m_CustomData = s_Item;
	}

	*reinterpret_cast<SSituationMemberSaveData*>(p_Target) = s_Object;
}

void SSituationMemberSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_OrderData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationMemberSaveData, m_OrderData));	m_PendingOrderData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationMemberSaveData, m_PendingOrderData));	m_CustomData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationMemberSaveData, m_CustomData));}

ZHMTypeInfo SSituationSaveData::TypeInfo = ZHMTypeInfo("SSituationSaveData", sizeof(SSituationSaveData), alignof(SSituationSaveData), SSituationSaveData::WriteJson, SSituationSaveData::WriteSimpleJson, SSituationSaveData::FromSimpleJson);

void SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetSharedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTargetSharedEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Data, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMemberData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMemberData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aMemberData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSituationMemberSaveData") << "," << JsonStr("$val") << ":";
		SSituationMemberSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aMemberData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGroupData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGroupData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGroupData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSituationGroupSaveData") << "," << JsonStr("$val") << ":";
		SSituationGroupSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGroupData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNextGroupID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNextGroupID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_situationStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_situationStartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationEnded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationEnded;
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetSharedEntity") << ":";
	p_Stream << s_Object->m_nTargetSharedEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Data, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aMemberData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMemberData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aMemberData[i];
		SSituationMemberSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aMemberData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGroupData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGroupData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGroupData[i];
		SSituationGroupSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGroupData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNextGroupID") << ":";
	p_Stream << s_Object->m_nNextGroupID;
	p_Stream << ",";

	p_Stream << JsonStr("m_situationStartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_situationStartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationEnded") << ":";
	p_Stream << s_Object->m_bSituationEnded;

	p_Stream << "}";
}

void SSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationSaveData s_Object;

	s_Object.m_rSituation = static_cast<uint32>(int64_t(p_Document["m_rSituation"]));

	s_Object.m_eType = static_cast<ESituationType>(ZHMEnums::GetEnumValueByName("ESituationType", std::string_view(p_Document["m_eType"])));

	s_Object.m_nTargetSharedEntity = static_cast<int32>(int64_t(p_Document["m_nTargetSharedEntity"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Data"], &s_Item);
		s_Object.m_Data = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aMemberData"])
	{
		SSituationMemberSaveData s_ArrayItem;
		SSituationMemberSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aMemberData.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aGroupData"])
	{
		SSituationGroupSaveData s_ArrayItem;
		SSituationGroupSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aGroupData.push_back(s_ArrayItem);
	}

	s_Object.m_nNextGroupID = static_cast<int32>(int64_t(p_Document["m_nNextGroupID"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_situationStartTime"], &s_Item);
		s_Object.m_situationStartTime = s_Item;
	}

	s_Object.m_bSituationEnded = bool(p_Document["m_bSituationEnded"]);

	*reinterpret_cast<SSituationSaveData*>(p_Target) = s_Object;
}

void SSituationSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_Data.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationSaveData, m_Data));	m_aMemberData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationSaveData, m_aMemberData));	m_aGroupData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationSaveData, m_aGroupData));	m_situationStartTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationSaveData, m_situationStartTime));}

ZHMTypeInfo SMovementLocomotionSaveData::TypeInfo = ZHMTypeInfo("SMovementLocomotionSaveData", sizeof(SMovementLocomotionSaveData), alignof(SMovementLocomotionSaveData), SMovementLocomotionSaveData::WriteJson, SMovementLocomotionSaveData::WriteSimpleJson, SMovementLocomotionSaveData::FromSimpleJson);

void SMovementLocomotionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementLocomotionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsSneaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSneaking;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementLocomotionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementLocomotionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsSneaking") << ":";
	p_Stream << s_Object->m_bIsSneaking;

	p_Stream << "}";
}

void SMovementLocomotionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementLocomotionSaveData s_Object;

	s_Object.m_bIsSneaking = bool(p_Document["m_bIsSneaking"]);

	*reinterpret_cast<SMovementLocomotionSaveData*>(p_Target) = s_Object;
}

void SMovementLocomotionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCautiousSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SCautiousSituationMemberSaveData", sizeof(SCautiousSituationMemberSaveData), alignof(SCautiousSituationMemberSaveData), SCautiousSituationMemberSaveData::WriteJson, SCautiousSituationMemberSaveData::WriteSimpleJson, SCautiousSituationMemberSaveData::FromSimpleJson);

void SCautiousSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tLastDisturbance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastDisturbance, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCalc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastSearchCalc, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInfluenceCalc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastInfluenceCalc, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastSearchCompleted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInvestigationCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastInvestigationCompleted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tTimeIdling") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tTimeIdling, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBulletImpactsHeard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBulletImpactsHeard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBanterCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBanterCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCivOccupant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCivOccupant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRecievingNewHuntTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRecievingNewHuntTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownEnforcer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockdownEnforcer;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tLastDisturbance") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastDisturbance, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCalc") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastSearchCalc, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInfluenceCalc") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastInfluenceCalc, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCompleted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastSearchCompleted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInvestigationCompleted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastInvestigationCompleted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tTimeIdling") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tTimeIdling, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBulletImpactsHeard") << ":";
	p_Stream << s_Object->m_nBulletImpactsHeard;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBanterCandidate") << ":";
	p_Stream << s_Object->m_bBanterCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCivOccupant") << ":";
	p_Stream << s_Object->m_bCivOccupant;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRecievingNewHuntTarget") << ":";
	p_Stream << s_Object->m_bRecievingNewHuntTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownEnforcer") << ":";
	p_Stream << s_Object->m_bLockdownEnforcer;

	p_Stream << "}";
}

void SCautiousSituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousSituationMemberSaveData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastDisturbance"], &s_Item);
		s_Object.m_tLastDisturbance = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastSearchCalc"], &s_Item);
		s_Object.m_tLastSearchCalc = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastInfluenceCalc"], &s_Item);
		s_Object.m_tLastInfluenceCalc = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastSearchCompleted"], &s_Item);
		s_Object.m_tLastSearchCompleted = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastInvestigationCompleted"], &s_Item);
		s_Object.m_tLastInvestigationCompleted = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tTimeIdling"], &s_Item);
		s_Object.m_tTimeIdling = s_Item;
	}

	s_Object.m_pGuardDutyPoint = static_cast<uint32>(int64_t(p_Document["m_pGuardDutyPoint"]));

	s_Object.m_nBulletImpactsHeard = static_cast<int32>(int64_t(p_Document["m_nBulletImpactsHeard"]));

	s_Object.m_nPatrolWaypointIndex = static_cast<int32>(int64_t(p_Document["m_nPatrolWaypointIndex"]));

	s_Object.m_nPatrolWaypointSubIndex = static_cast<uint32>(int64_t(p_Document["m_nPatrolWaypointSubIndex"]));

	s_Object.m_bBanterCandidate = bool(p_Document["m_bBanterCandidate"]);

	s_Object.m_bCivOccupant = bool(p_Document["m_bCivOccupant"]);

	s_Object.m_bRecievingNewHuntTarget = bool(p_Document["m_bRecievingNewHuntTarget"]);

	s_Object.m_bLockdownEnforcer = bool(p_Document["m_bLockdownEnforcer"]);

	*reinterpret_cast<SCautiousSituationMemberSaveData*>(p_Target) = s_Object;
}

void SCautiousSituationMemberSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tLastDisturbance.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastDisturbance));	m_tLastSearchCalc.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastSearchCalc));	m_tLastInfluenceCalc.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastInfluenceCalc));	m_tLastSearchCompleted.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastSearchCompleted));	m_tLastInvestigationCompleted.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastInvestigationCompleted));	m_tTimeIdling.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tTimeIdling));}

ZHMTypeInfo SEntityTemplateEntitySubset::TypeInfo = ZHMTypeInfo("SEntityTemplateEntitySubset", sizeof(SEntityTemplateEntitySubset), alignof(SEntityTemplateEntitySubset), SEntityTemplateEntitySubset::WriteJson, SEntityTemplateEntitySubset::WriteSimpleJson, SEntityTemplateEntitySubset::FromSimpleJson);

void SEntityTemplateEntitySubset::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateEntitySubset*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entities.size(); ++i)
	{
		auto& s_Item = s_Object->entities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->entities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTemplateEntitySubset::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplateEntitySubset*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entities.size(); ++i)
	{
		auto& s_Item = s_Object->entities[i];
		p_Stream << s_Item;

		if (i < s_Object->entities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTemplateEntitySubset::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateEntitySubset s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["entities"])
	{
		s_Object.entities.push_back(static_cast<int32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SEntityTemplateEntitySubset*>(p_Target) = s_Object;
}

void SEntityTemplateEntitySubset::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	entities.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplateEntitySubset, entities));}

ZHMTypeInfo SSniperCombatGroupSaveData::TypeInfo = ZHMTypeInfo("SSniperCombatGroupSaveData", sizeof(SSniperCombatGroupSaveData), alignof(SSniperCombatGroupSaveData), SSniperCombatGroupSaveData::WriteJson, SSniperCombatGroupSaveData::WriteSimpleJson, SSniperCombatGroupSaveData::FromSimpleJson);

void SSniperCombatGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSniperCombatGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscapeTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEscapeTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTauntTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastTauntTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSniperCombatGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSniperCombatGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFailed") << ":";
	p_Stream << s_Object->m_bFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscapeTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEscapeTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTauntTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastTauntTime, p_Stream);

	p_Stream << "}";
}

void SSniperCombatGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSniperCombatGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_target = static_cast<int32>(int64_t(p_Document["m_target"]));

	s_Object.m_bFailed = bool(p_Document["m_bFailed"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tEscapeTime"], &s_Item);
		s_Object.m_tEscapeTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastTauntTime"], &s_Item);
		s_Object.m_tLastTauntTime = s_Item;
	}

	*reinterpret_cast<SSniperCombatGroupSaveData*>(p_Target) = s_Object;
}

void SSniperCombatGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SSniperCombatGroupSaveData, m_fsmState));	m_tEscapeTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SSniperCombatGroupSaveData, m_tEscapeTime));	m_tLastTauntTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SSniperCombatGroupSaveData, m_tLastTauntTime));}

ZHMTypeInfo SMovementCoverSaveData::TypeInfo = ZHMTypeInfo("SMovementCoverSaveData", sizeof(SMovementCoverSaveData), alignof(SMovementCoverSaveData), SMovementCoverSaveData::WriteJson, SMovementCoverSaveData::WriteSimpleJson, SMovementCoverSaveData::FromSimpleJson);

void SMovementCoverSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementCoverSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCoverPlane") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCoverPlane;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCoverAnimNodeID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCoverAnimNodeID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftSideFacing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLeftSideFacing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCrouched") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCrouched;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mPositionInCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mPositionInCover, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementCoverSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementCoverSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCoverPlane") << ":";
	p_Stream << s_Object->m_rCoverPlane;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCoverAnimNodeID") << ":";
	p_Stream << s_Object->m_nCoverAnimNodeID;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftSideFacing") << ":";
	p_Stream << s_Object->m_bLeftSideFacing;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCrouched") << ":";
	p_Stream << s_Object->m_bCrouched;
	p_Stream << ",";

	p_Stream << JsonStr("m_mPositionInCover") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mPositionInCover, p_Stream);

	p_Stream << "}";
}

void SMovementCoverSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementCoverSaveData s_Object;

	s_Object.m_rCoverPlane = static_cast<uint32>(int64_t(p_Document["m_rCoverPlane"]));

	s_Object.m_nCoverAnimNodeID = static_cast<uint32>(int64_t(p_Document["m_nCoverAnimNodeID"]));

	s_Object.m_bLeftSideFacing = bool(p_Document["m_bLeftSideFacing"]);

	s_Object.m_bCrouched = bool(p_Document["m_bCrouched"]);

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_mPositionInCover"], &s_Item);
		s_Object.m_mPositionInCover = s_Item;
	}

	*reinterpret_cast<SMovementCoverSaveData*>(p_Target) = s_Object;
}

void SMovementCoverSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_mPositionInCover.Serialize(p_Serializer, p_OwnOffset + offsetof(SMovementCoverSaveData, m_mPositionInCover));}

ZHMTypeInfo ZEntityID::TypeInfo = ZHMTypeInfo("ZEntityID", sizeof(ZEntityID), alignof(ZEntityID), ZEntityID::WriteJson, ZEntityID::WriteSimpleJson, ZEntityID::FromSimpleJson);

void ZEntityID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sStr") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sStr);
	p_Stream << "}";

	p_Stream << "}";
}

void ZEntityID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sStr") << ":";
	p_Stream << JsonStr(s_Object->m_sStr);

	p_Stream << "}";
}

void ZEntityID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityID s_Object;

	s_Object.m_sStr = std::string_view(p_Document["m_sStr"]);

	*reinterpret_cast<ZEntityID*>(p_Target) = s_Object;
}

void ZEntityID::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sStr.Serialize(p_Serializer, p_OwnOffset + offsetof(ZEntityID, m_sStr));}

ZHMTypeInfo ZGridFloatField::TypeInfo = ZHMTypeInfo("ZGridFloatField", sizeof(ZGridFloatField), alignof(ZGridFloatField), ZGridFloatField::WriteJson, ZGridFloatField::WriteSimpleJson, ZGridFloatField::FromSimpleJson);

void ZGridFloatField::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGridFloatField*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_field") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_field.size(); ++i)
	{
		auto& s_Item = s_Object->m_field[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_field.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void ZGridFloatField::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZGridFloatField*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_field") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_field.size(); ++i)
	{
		auto& s_Item = s_Object->m_field[i];
		p_Stream << s_Item;

		if (i < s_Object->m_field.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZGridFloatField::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGridFloatField s_Object;

	s_Object.m_fInitialValue = static_cast<float32>(double(p_Document["m_fInitialValue"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_field"])
	{
		s_Object.m_field.push_back(static_cast<float32>(double(s_Item)));
	}

	*reinterpret_cast<ZGridFloatField*>(p_Target) = s_Object;
}

void ZGridFloatField::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_field.Serialize(p_Serializer, p_OwnOffset + offsetof(ZGridFloatField, m_field));}

ZHMTypeInfo SCrowdActivitySaveData::TypeInfo = ZHMTypeInfo("SCrowdActivitySaveData", sizeof(SCrowdActivitySaveData), alignof(SCrowdActivitySaveData), SCrowdActivitySaveData::WriteJson, SCrowdActivitySaveData::WriteSimpleJson, SCrowdActivitySaveData::FromSimpleJson);

void SCrowdActivitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdActivitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGait") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGait) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_eGait))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxEnterDelaySec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMaxEnterDelaySec;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxLeaveDelaySec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMaxLeaveDelaySec;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdActivitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdActivitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGait") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_eGait)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxEnterDelaySec") << ":";
	p_Stream << s_Object->m_nMaxEnterDelaySec;
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxLeaveDelaySec") << ":";
	p_Stream << s_Object->m_nMaxLeaveDelaySec;

	p_Stream << "}";
}

void SCrowdActivitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdActivitySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_eGait = static_cast<EGait>(ZHMEnums::GetEnumValueByName("EGait", std::string_view(p_Document["m_eGait"])));

	s_Object.m_nMaxEnterDelaySec = static_cast<float32>(double(p_Document["m_nMaxEnterDelaySec"]));

	s_Object.m_nMaxLeaveDelaySec = static_cast<float32>(double(p_Document["m_nMaxLeaveDelaySec"]));

	*reinterpret_cast<SCrowdActivitySaveData*>(p_Target) = s_Object;
}

void SCrowdActivitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SLoadRuntimeResourceResult::TypeInfo = ZHMTypeInfo("SLoadRuntimeResourceResult", sizeof(SLoadRuntimeResourceResult), alignof(SLoadRuntimeResourceResult), SLoadRuntimeResourceResult::WriteJson, SLoadRuntimeResourceResult::WriteSimpleJson, SLoadRuntimeResourceResult::FromSimpleJson);

void SLoadRuntimeResourceResult::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLoadRuntimeResourceResult*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sFilePath") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFilePath);
	p_Stream << "}";

	p_Stream << "}";
}

void SLoadRuntimeResourceResult::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLoadRuntimeResourceResult*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sFilePath") << ":";
	p_Stream << JsonStr(s_Object->sFilePath);

	p_Stream << "}";
}

void SLoadRuntimeResourceResult::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLoadRuntimeResourceResult s_Object;

	s_Object.sFilePath = std::string_view(p_Document["sFilePath"]);

	*reinterpret_cast<SLoadRuntimeResourceResult*>(p_Target) = s_Object;
}

void SLoadRuntimeResourceResult::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sFilePath.Serialize(p_Serializer, p_OwnOffset + offsetof(SLoadRuntimeResourceResult, sFilePath));}

ZHMTypeInfo SMathLerpSaveData_float32::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_float32", sizeof(SMathLerpSaveData_float32), alignof(SMathLerpSaveData_float32), SMathLerpSaveData_float32::WriteJson, SMathLerpSaveData_float32::WriteSimpleJson, SMathLerpSaveData_float32::FromSimpleJson);

void SMathLerpSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_A;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_B;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	p_Stream << s_Object->m_A;
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << s_Object->m_B;
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_float32::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_float32 s_Object;

	s_Object.m_A = static_cast<float32>(double(p_Document["m_A"]));

	s_Object.m_B = static_cast<float32>(double(p_Document["m_B"]));

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_float32*>(p_Target) = s_Object;
}

void SMathLerpSaveData_float32::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMovementDragBodySaveData::TypeInfo = ZHMTypeInfo("SMovementDragBodySaveData", sizeof(SMovementDragBodySaveData), alignof(SMovementDragBodySaveData), SMovementDragBodySaveData::WriteJson, SMovementDragBodySaveData::WriteSimpleJson, SMovementDragBodySaveData::FromSimpleJson);

void SMovementDragBodySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDragBodySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rDraggedActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDraggedActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGrabBoneID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGrabBoneID;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementDragBodySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDragBodySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rDraggedActor") << ":";
	p_Stream << s_Object->m_rDraggedActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGrabBoneID") << ":";
	p_Stream << s_Object->m_nGrabBoneID;

	p_Stream << "}";
}

void SMovementDragBodySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementDragBodySaveData s_Object;

	s_Object.m_rDraggedActor = static_cast<uint32>(int64_t(p_Document["m_rDraggedActor"]));

	s_Object.m_nGrabBoneID = static_cast<uint32>(int64_t(p_Document["m_nGrabBoneID"]));

	*reinterpret_cast<SMovementDragBodySaveData*>(p_Target) = s_Object;
}

void SMovementDragBodySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SManHuntServiceSaveData::TypeInfo = ZHMTypeInfo("SManHuntServiceSaveData", sizeof(SManHuntServiceSaveData), alignof(SManHuntServiceSaveData), SManHuntServiceSaveData::WriteJson, SManHuntServiceSaveData::WriteSimpleJson, SManHuntServiceSaveData::FromSimpleJson);

void SManHuntServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SManHuntServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rGuardNodes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_rGuardNodes.size(); ++i)
	{
		auto& s_Item = s_Object->m_rGuardNodes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_rGuardNodes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInitialNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGuardSightRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGuardSightRange;
	p_Stream << "}";

	p_Stream << "}";
}

void SManHuntServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SManHuntServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rGuardNodes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_rGuardNodes.size(); ++i)
	{
		auto& s_Item = s_Object->m_rGuardNodes[i];
		p_Stream << s_Item;

		if (i < s_Object->m_rGuardNodes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialNode") << ":";
	p_Stream << s_Object->m_rInitialNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGuardSightRange") << ":";
	p_Stream << s_Object->m_fGuardSightRange;

	p_Stream << "}";
}

void SManHuntServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SManHuntServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_rGuardNodes"])
	{
		s_Object.m_rGuardNodes.push_back(static_cast<uint16>(int64_t(s_Item)));
	}

	s_Object.m_rInitialNode = static_cast<uint16>(int64_t(p_Document["m_rInitialNode"]));

	s_Object.m_fGuardSightRange = static_cast<float32>(double(p_Document["m_fGuardSightRange"]));

	*reinterpret_cast<SManHuntServiceSaveData*>(p_Target) = s_Object;
}

void SManHuntServiceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_rGuardNodes.Serialize(p_Serializer, p_OwnOffset + offsetof(SManHuntServiceSaveData, m_rGuardNodes));}

ZHMTypeInfo SEventChannelSaveData::TypeInfo = ZHMTypeInfo("SEventChannelSaveData", sizeof(SEventChannelSaveData), alignof(SEventChannelSaveData), SEventChannelSaveData::WriteJson, SEventChannelSaveData::WriteSimpleJson, SEventChannelSaveData::FromSimpleJson);

void SEventChannelSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventChannelSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SEventChannelSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEventChannelSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SEventChannelSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEventChannelSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SEventChannelSaveData*>(p_Target) = s_Object;
}

void SEventChannelSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCCEffectSet::TypeInfo = ZHMTypeInfo("SCCEffectSet", sizeof(SCCEffectSet), alignof(SCCEffectSet), SCCEffectSet::WriteJson, SCCEffectSet::WriteSimpleJson, SCCEffectSet::FromSimpleJson);

void SCCEffectSet::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCCEffectSet*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eDecalEffect") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECCDecalEffect") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDecalEffect) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECCDecalEffect", static_cast<int>(s_Object->m_eDecalEffect))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmitterEffect") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECCEmitterEffect") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmitterEffect) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECCEmitterEffect", static_cast<int>(s_Object->m_eEmitterEffect))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCCEffectSet::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCCEffectSet*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eDecalEffect") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECCDecalEffect", static_cast<int>(s_Object->m_eDecalEffect)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmitterEffect") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECCEmitterEffect", static_cast<int>(s_Object->m_eEmitterEffect)));

	p_Stream << "}";
}

void SCCEffectSet::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCCEffectSet s_Object;

	s_Object.m_eDecalEffect = static_cast<ECCDecalEffect>(ZHMEnums::GetEnumValueByName("ECCDecalEffect", std::string_view(p_Document["m_eDecalEffect"])));

	s_Object.m_eEmitterEffect = static_cast<ECCEmitterEffect>(ZHMEnums::GetEnumValueByName("ECCEmitterEffect", std::string_view(p_Document["m_eEmitterEffect"])));

	*reinterpret_cast<SCCEffectSet*>(p_Target) = s_Object;
}

void SCCEffectSet::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SHeroStandInSaveState::TypeInfo = ZHMTypeInfo("SHeroStandInSaveState", sizeof(SHeroStandInSaveState), alignof(SHeroStandInSaveState), SHeroStandInSaveState::WriteJson, SHeroStandInSaveState::WriteSimpleJson, SHeroStandInSaveState::FromSimpleJson);

void SHeroStandInSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroStandInSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroStandInSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroStandInSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;

	p_Stream << "}";
}

void SHeroStandInSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroStandInSaveState s_Object;

	s_Object.m_rHero = static_cast<uint32>(int64_t(p_Document["m_rHero"]));

	s_Object.m_rCurrentSpeakEntity = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpeakEntity"]));

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	*reinterpret_cast<SHeroStandInSaveState*>(p_Target) = s_Object;
}

void SHeroStandInSaveState::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZResourcePtr::TypeInfo = ZHMTypeInfo("ZResourcePtr", sizeof(ZResourcePtr), alignof(ZResourcePtr), ZResourcePtr::WriteJson, ZResourcePtr::WriteSimpleJson, ZResourcePtr::FromSimpleJson);

void ZResourcePtr::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZResourcePtr*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZResourcePtr::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZResourcePtr*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZResourcePtr::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZResourcePtr s_Object;

	*reinterpret_cast<ZResourcePtr*>(p_Target) = s_Object;
}

void ZResourcePtr::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SValueBoolsSaveData::TypeInfo = ZHMTypeInfo("SValueBoolsSaveData", sizeof(SValueBoolsSaveData), alignof(SValueBoolsSaveData), SValueBoolsSaveData::WriteJson, SValueBoolsSaveData::WriteSimpleJson, SValueBoolsSaveData::FromSimpleJson);

void SValueBoolsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueBoolsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SValueBoolsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueBoolsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SValueBoolsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueBoolsSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		s_Object.m_aData.push_back(bool(s_Item));
	}

	*reinterpret_cast<SValueBoolsSaveData*>(p_Target) = s_Object;
}

void SValueBoolsSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueBoolsSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueBoolsSaveData, m_aData));}

ZHMTypeInfo SBodybagBoneSaveData::TypeInfo = ZHMTypeInfo("SBodybagBoneSaveData", sizeof(SBodybagBoneSaveData), alignof(SBodybagBoneSaveData), SBodybagBoneSaveData::WriteJson, SBodybagBoneSaveData::WriteSimpleJson, SBodybagBoneSaveData::FromSimpleJson);

void SBodybagBoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodybagBoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SBodybagBoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodybagBoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

void SBodybagBoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBodybagBoneSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mQuaterion"], &s_Item);
		s_Object.mQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTranslation"], &s_Item);
		s_Object.mTranslation = s_Item;
	}

	*reinterpret_cast<SBodybagBoneSaveData*>(p_Target) = s_Object;
}

void SBodybagBoneSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	mQuaterion.Serialize(p_Serializer, p_OwnOffset + offsetof(SBodybagBoneSaveData, mQuaterion));	mTranslation.Serialize(p_Serializer, p_OwnOffset + offsetof(SBodybagBoneSaveData, mTranslation));}

ZHMTypeInfo SAIPerceptibleEntitySaveData::TypeInfo = ZHMTypeInfo("SAIPerceptibleEntitySaveData", sizeof(SAIPerceptibleEntitySaveData), alignof(SAIPerceptibleEntitySaveData), SAIPerceptibleEntitySaveData::WriteJson, SAIPerceptibleEntitySaveData::WriteSimpleJson, SAIPerceptibleEntitySaveData::FromSimpleJson);

void SAIPerceptibleEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIPerceptibleEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPerceptibleEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPerceptibleEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SAIPerceptibleEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAIPerceptibleEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPerceptibleEnabled") << ":";
	p_Stream << s_Object->m_bPerceptibleEnabled;

	p_Stream << "}";
}

void SAIPerceptibleEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIPerceptibleEntitySaveData s_Object;

	s_Object.m_bPerceptibleEnabled = bool(p_Document["m_bPerceptibleEnabled"]);

	*reinterpret_cast<SAIPerceptibleEntitySaveData*>(p_Target) = s_Object;
}

void SAIPerceptibleEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SBodyPartDamageMultipliers::TypeInfo = ZHMTypeInfo("SBodyPartDamageMultipliers", sizeof(SBodyPartDamageMultipliers), alignof(SBodyPartDamageMultipliers), SBodyPartDamageMultipliers::WriteJson, SBodyPartDamageMultipliers::WriteSimpleJson, SBodyPartDamageMultipliers::FromSimpleJson);

void SBodyPartDamageMultipliers::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodyPartDamageMultipliers*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fHeadDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHeadDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFaceDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fArmDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fArmDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLArmDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLArmDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRArmDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRArmDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHandDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLHandDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLHandDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRHandDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRHandDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLegDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLegDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLLegDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLLegDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRLegDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRLegDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTorsoDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTorsoDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bApplyLeftRightScalars") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bApplyLeftRightScalars;
	p_Stream << "}";

	p_Stream << "}";
}

void SBodyPartDamageMultipliers::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodyPartDamageMultipliers*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fHeadDamageMultiplier") << ":";
	p_Stream << s_Object->m_fHeadDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceDamageMultiplier") << ":";
	p_Stream << s_Object->m_fFaceDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fArmDamageMultiplier") << ":";
	p_Stream << s_Object->m_fArmDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLArmDamageScalar") << ":";
	p_Stream << s_Object->m_fLArmDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRArmDamageScalar") << ":";
	p_Stream << s_Object->m_fRArmDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandDamageMultiplier") << ":";
	p_Stream << s_Object->m_fHandDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLHandDamageScalar") << ":";
	p_Stream << s_Object->m_fLHandDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRHandDamageScalar") << ":";
	p_Stream << s_Object->m_fRHandDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLegDamageMultiplier") << ":";
	p_Stream << s_Object->m_fLegDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLLegDamageScalar") << ":";
	p_Stream << s_Object->m_fLLegDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRLegDamageScalar") << ":";
	p_Stream << s_Object->m_fRLegDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTorsoDamageMultiplier") << ":";
	p_Stream << s_Object->m_fTorsoDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_bApplyLeftRightScalars") << ":";
	p_Stream << s_Object->m_bApplyLeftRightScalars;

	p_Stream << "}";
}

void SBodyPartDamageMultipliers::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBodyPartDamageMultipliers s_Object;

	s_Object.m_fHeadDamageMultiplier = static_cast<float32>(double(p_Document["m_fHeadDamageMultiplier"]));

	s_Object.m_fFaceDamageMultiplier = static_cast<float32>(double(p_Document["m_fFaceDamageMultiplier"]));

	s_Object.m_fArmDamageMultiplier = static_cast<float32>(double(p_Document["m_fArmDamageMultiplier"]));

	s_Object.m_fLArmDamageScalar = static_cast<float32>(double(p_Document["m_fLArmDamageScalar"]));

	s_Object.m_fRArmDamageScalar = static_cast<float32>(double(p_Document["m_fRArmDamageScalar"]));

	s_Object.m_fHandDamageMultiplier = static_cast<float32>(double(p_Document["m_fHandDamageMultiplier"]));

	s_Object.m_fLHandDamageScalar = static_cast<float32>(double(p_Document["m_fLHandDamageScalar"]));

	s_Object.m_fRHandDamageScalar = static_cast<float32>(double(p_Document["m_fRHandDamageScalar"]));

	s_Object.m_fLegDamageMultiplier = static_cast<float32>(double(p_Document["m_fLegDamageMultiplier"]));

	s_Object.m_fLLegDamageScalar = static_cast<float32>(double(p_Document["m_fLLegDamageScalar"]));

	s_Object.m_fRLegDamageScalar = static_cast<float32>(double(p_Document["m_fRLegDamageScalar"]));

	s_Object.m_fTorsoDamageMultiplier = static_cast<float32>(double(p_Document["m_fTorsoDamageMultiplier"]));

	s_Object.m_bApplyLeftRightScalars = bool(p_Document["m_bApplyLeftRightScalars"]);

	*reinterpret_cast<SBodyPartDamageMultipliers*>(p_Target) = s_Object;
}

void SBodyPartDamageMultipliers::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SColorRGBSaveData::TypeInfo = ZHMTypeInfo("SColorRGBSaveData", sizeof(SColorRGBSaveData), alignof(SColorRGBSaveData), SColorRGBSaveData::WriteJson, SColorRGBSaveData::WriteSimpleJson, SColorRGBSaveData::FromSimpleJson);

void SColorRGBSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGBSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
		SColorRGB::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SColorRGBSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SColorRGBSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SColorRGB::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SColorRGBSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SColorRGBSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SColorRGB s_ArrayItem;
		SColorRGB::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SColorRGBSaveData*>(p_Target) = s_Object;
}

void SColorRGBSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SColorRGBSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SColorRGBSaveData, m_aData));}

ZHMTypeInfo SValueIntSaveData::TypeInfo = ZHMTypeInfo("SValueIntSaveData", sizeof(SValueIntSaveData), alignof(SValueIntSaveData), SValueIntSaveData::WriteJson, SValueIntSaveData::WriteSimpleJson, SValueIntSaveData::FromSimpleJson);

void SValueIntSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueIntSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SValueIntSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueIntSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SValueIntSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueIntSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		s_Object.m_aData.push_back(static_cast<int32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SValueIntSaveData*>(p_Target) = s_Object;
}

void SValueIntSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueIntSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueIntSaveData, m_aData));}

ZHMTypeInfo SStateControllerSaveDataStruct::TypeInfo = ZHMTypeInfo("SStateControllerSaveDataStruct", sizeof(SStateControllerSaveDataStruct), alignof(SStateControllerSaveDataStruct), SStateControllerSaveDataStruct::WriteJson, SStateControllerSaveDataStruct::WriteSimpleJson, SStateControllerSaveDataStruct::FromSimpleJson);

void SStateControllerSaveDataStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStateControllerSaveDataStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SStateControllerSaveDataStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStateControllerSaveDataStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SStateControllerSaveDataStruct::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SStateControllerSaveDataStruct s_Object;

	s_Object.m_nIndex = static_cast<int32>(int64_t(p_Document["m_nIndex"]));

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SStateControllerSaveDataStruct*>(p_Target) = s_Object;
}

void SStateControllerSaveDataStruct::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SStateControllerSaveData::TypeInfo = ZHMTypeInfo("SStateControllerSaveData", sizeof(SStateControllerSaveData), alignof(SStateControllerSaveData), SStateControllerSaveData::WriteJson, SStateControllerSaveData::WriteSimpleJson, SStateControllerSaveData::FromSimpleJson);

void SStateControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStateControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SStateControllerSaveDataStruct") << "," << JsonStr("$val") << ":";
		SStateControllerSaveDataStruct::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SStateControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStateControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SStateControllerSaveDataStruct::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SStateControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SStateControllerSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SStateControllerSaveDataStruct s_ArrayItem;
		SStateControllerSaveDataStruct::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SStateControllerSaveData*>(p_Target) = s_Object;
}

void SStateControllerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SStateControllerSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SStateControllerSaveData, m_aData));}

ZHMTypeInfo SValueSaveData::TypeInfo = ZHMTypeInfo("SValueSaveData", sizeof(SValueSaveData), alignof(SValueSaveData), SValueSaveData::WriteJson, SValueSaveData::WriteSimpleJson, SValueSaveData::FromSimpleJson);

void SValueSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_ValueBool") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SValueBoolsSaveData") << "," << JsonStr("$val") << ":";
	SValueBoolsSaveData::WriteJson(&s_Object->m_ValueBool, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueFloat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SValueFloatSaveData") << "," << JsonStr("$val") << ":";
	SValueFloatSaveData::WriteJson(&s_Object->m_ValueFloat, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueInt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SValueIntSaveData") << "," << JsonStr("$val") << ":";
	SValueIntSaveData::WriteJson(&s_Object->m_ValueInt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_StateController") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SStateControllerSaveData") << "," << JsonStr("$val") << ":";
	SStateControllerSaveData::WriteJson(&s_Object->m_StateController, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueColorRGB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGBSaveData") << "," << JsonStr("$val") << ":";
	SColorRGBSaveData::WriteJson(&s_Object->m_ValueColorRGB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SValueSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SValueSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_ValueBool") << ":";
	SValueBoolsSaveData::WriteSimpleJson(&s_Object->m_ValueBool, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueFloat") << ":";
	SValueFloatSaveData::WriteSimpleJson(&s_Object->m_ValueFloat, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueInt") << ":";
	SValueIntSaveData::WriteSimpleJson(&s_Object->m_ValueInt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_StateController") << ":";
	SStateControllerSaveData::WriteSimpleJson(&s_Object->m_StateController, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueColorRGB") << ":";
	SColorRGBSaveData::WriteSimpleJson(&s_Object->m_ValueColorRGB, p_Stream);

	p_Stream << "}";
}

void SValueSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueSaveData s_Object;

	{
		SValueBoolsSaveData s_Item;
		SValueBoolsSaveData::FromSimpleJson(p_Document["m_ValueBool"], &s_Item);
		s_Object.m_ValueBool = s_Item;
	}

	{
		SValueFloatSaveData s_Item;
		SValueFloatSaveData::FromSimpleJson(p_Document["m_ValueFloat"], &s_Item);
		s_Object.m_ValueFloat = s_Item;
	}

	{
		SValueIntSaveData s_Item;
		SValueIntSaveData::FromSimpleJson(p_Document["m_ValueInt"], &s_Item);
		s_Object.m_ValueInt = s_Item;
	}

	{
		SStateControllerSaveData s_Item;
		SStateControllerSaveData::FromSimpleJson(p_Document["m_StateController"], &s_Item);
		s_Object.m_StateController = s_Item;
	}

	{
		SColorRGBSaveData s_Item;
		SColorRGBSaveData::FromSimpleJson(p_Document["m_ValueColorRGB"], &s_Item);
		s_Object.m_ValueColorRGB = s_Item;
	}

	*reinterpret_cast<SValueSaveData*>(p_Target) = s_Object;
}

void SValueSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_ValueBool.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_ValueBool));	m_ValueFloat.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_ValueFloat));	m_ValueInt.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_ValueInt));	m_StateController.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_StateController));	m_ValueColorRGB.Serialize(p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_ValueColorRGB));}

ZHMTypeInfo SHeroItemActionSaveData::TypeInfo = ZHMTypeInfo("SHeroItemActionSaveData", sizeof(SHeroItemActionSaveData), alignof(SHeroItemActionSaveData), SHeroItemActionSaveData::WriteJson, SHeroItemActionSaveData::WriteSimpleJson, SHeroItemActionSaveData::FromSimpleJson);

void SHeroItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SHeroItemActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroItemActionSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SHeroItemActionSaveData*>(p_Target) = s_Object;
}

void SHeroItemActionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SBodybagSaveData::TypeInfo = ZHMTypeInfo("SBodybagSaveData", sizeof(SBodybagSaveData), alignof(SBodybagSaveData), SBodybagSaveData::WriteJson, SBodybagSaveData::WriteSimpleJson, SBodybagSaveData::FromSimpleJson);

void SBodybagSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodybagSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vLinkedPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLinkedPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLinkedQuaternionRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vLinkedQuaternionRotation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBodybagBoneSaveData") << "," << JsonStr("$val") << ":";
		SBodybagBoneSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDeadActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInMorgue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsInMorgue;
	p_Stream << "}";

	p_Stream << "}";
}

void SBodybagSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBodybagSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vLinkedPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLinkedPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vLinkedQuaternionRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vLinkedQuaternionRotation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		SBodybagBoneSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadActor") << ":";
	p_Stream << s_Object->m_rDeadActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInMorgue") << ":";
	p_Stream << s_Object->m_IsInMorgue;

	p_Stream << "}";
}

void SBodybagSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBodybagSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vLinkedPosition"], &s_Item);
		s_Object.m_vLinkedPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vLinkedQuaternionRotation"], &s_Item);
		s_Object.m_vLinkedQuaternionRotation = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aBones"])
	{
		SBodybagBoneSaveData s_ArrayItem;
		SBodybagBoneSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aBones.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aBoneIndices"])
	{
		s_Object.m_aBoneIndices.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	s_Object.m_rDeadActor = static_cast<uint32>(int64_t(p_Document["m_rDeadActor"]));

	s_Object.m_IsInMorgue = bool(p_Document["m_IsInMorgue"]);

	*reinterpret_cast<SBodybagSaveData*>(p_Target) = s_Object;
}

void SBodybagSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vLinkedPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SBodybagSaveData, m_vLinkedPosition));	m_vLinkedQuaternionRotation.Serialize(p_Serializer, p_OwnOffset + offsetof(SBodybagSaveData, m_vLinkedQuaternionRotation));	m_aBones.Serialize(p_Serializer, p_OwnOffset + offsetof(SBodybagSaveData, m_aBones));	m_aBoneIndices.Serialize(p_Serializer, p_OwnOffset + offsetof(SBodybagSaveData, m_aBoneIndices));}

ZHMTypeInfo SAudioEmitterStateSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterStateSaveData", sizeof(SAudioEmitterStateSaveData), alignof(SAudioEmitterStateSaveData), SAudioEmitterStateSaveData::WriteJson, SAudioEmitterStateSaveData::WriteSimpleJson, SAudioEmitterStateSaveData::FromSimpleJson);

void SAudioEmitterStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nStateId;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << s_Object->m_nStateId;

	p_Stream << "}";
}

void SAudioEmitterStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterStateSaveData s_Object;

	s_Object.m_nGroupId = static_cast<uint32>(int64_t(p_Document["m_nGroupId"]));

	s_Object.m_nStateId = static_cast<uint32>(int64_t(p_Document["m_nStateId"]));

	*reinterpret_cast<SAudioEmitterStateSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterStateSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SEntityTemplatePinConnection::TypeInfo = ZHMTypeInfo("SEntityTemplatePinConnection", sizeof(SEntityTemplatePinConnection), alignof(SEntityTemplatePinConnection), SEntityTemplatePinConnection::WriteJson, SEntityTemplatePinConnection::WriteSimpleJson, SEntityTemplatePinConnection::FromSimpleJson);

void SEntityTemplatePinConnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fromID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fromID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->toID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->constantPinValue, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePinConnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fromID") << ":";
	p_Stream << s_Object->fromID;
	p_Stream << ",";

	p_Stream << JsonStr("toID") << ":";
	p_Stream << s_Object->toID;
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	ZVariant::WriteSimpleJson(&s_Object->constantPinValue, p_Stream);

	p_Stream << "}";
}

void SEntityTemplatePinConnection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePinConnection s_Object;

	s_Object.fromID = static_cast<int32>(int64_t(p_Document["fromID"]));

	s_Object.toID = static_cast<int32>(int64_t(p_Document["toID"]));

	s_Object.fromPinName = std::string_view(p_Document["fromPinName"]);

	s_Object.toPinName = std::string_view(p_Document["toPinName"]);

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["constantPinValue"], &s_Item);
		s_Object.constantPinValue = s_Item;
	}

	*reinterpret_cast<SEntityTemplatePinConnection*>(p_Target) = s_Object;
}

void SEntityTemplatePinConnection::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	fromPinName.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePinConnection, fromPinName));	toPinName.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePinConnection, toPinName));	constantPinValue.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePinConnection, constantPinValue));}

ZHMTypeInfo SEnvironmentConfigResourceEntry::TypeInfo = ZHMTypeInfo("SEnvironmentConfigResourceEntry", sizeof(SEnvironmentConfigResourceEntry), alignof(SEnvironmentConfigResourceEntry), SEnvironmentConfigResourceEntry::WriteJson, SEnvironmentConfigResourceEntry::WriteSimpleJson, SEnvironmentConfigResourceEntry::FromSimpleJson);

void SEnvironmentConfigResourceEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEnvironmentConfigResourceEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Name") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->Name);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ContractsDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->ContractsDatastoreRid, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("UnlockablesDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->UnlockablesDatastoreRid, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("BlobsDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->BlobsDatastoreRid, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ActivityDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->ActivityDatastoreRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEnvironmentConfigResourceEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEnvironmentConfigResourceEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Name") << ":";
	p_Stream << JsonStr(s_Object->Name);
	p_Stream << ",";

	p_Stream << JsonStr("ContractsDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->ContractsDatastoreRid, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("UnlockablesDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->UnlockablesDatastoreRid, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("BlobsDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->BlobsDatastoreRid, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ActivityDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->ActivityDatastoreRid, p_Stream);

	p_Stream << "}";
}

void SEnvironmentConfigResourceEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEnvironmentConfigResourceEntry s_Object;

	s_Object.Name = std::string_view(p_Document["Name"]);

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["ContractsDatastoreRid"], &s_Item);
		s_Object.ContractsDatastoreRid = s_Item;
	}

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["UnlockablesDatastoreRid"], &s_Item);
		s_Object.UnlockablesDatastoreRid = s_Item;
	}

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["BlobsDatastoreRid"], &s_Item);
		s_Object.BlobsDatastoreRid = s_Item;
	}

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["ActivityDatastoreRid"], &s_Item);
		s_Object.ActivityDatastoreRid = s_Item;
	}

	*reinterpret_cast<SEnvironmentConfigResourceEntry*>(p_Target) = s_Object;
}

void SEnvironmentConfigResourceEntry::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	Name.Serialize(p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, Name));	ContractsDatastoreRid.Serialize(p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, ContractsDatastoreRid));	UnlockablesDatastoreRid.Serialize(p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, UnlockablesDatastoreRid));	BlobsDatastoreRid.Serialize(p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, BlobsDatastoreRid));	ActivityDatastoreRid.Serialize(p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, ActivityDatastoreRid));}

ZHMTypeInfo SEnvironmentConfigResource::TypeInfo = ZHMTypeInfo("SEnvironmentConfigResource", sizeof(SEnvironmentConfigResource), alignof(SEnvironmentConfigResource), SEnvironmentConfigResource::WriteJson, SEnvironmentConfigResource::WriteSimpleJson, SEnvironmentConfigResource::FromSimpleJson);

void SEnvironmentConfigResource::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEnvironmentConfigResource*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Environments") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Environments.size(); ++i)
	{
		auto& s_Item = s_Object->Environments[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEnvironmentConfigResourceEntry") << "," << JsonStr("$val") << ":";
		SEnvironmentConfigResourceEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->Environments.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEnvironmentConfigResource::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEnvironmentConfigResource*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Environments") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Environments.size(); ++i)
	{
		auto& s_Item = s_Object->Environments[i];
		SEnvironmentConfigResourceEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->Environments.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEnvironmentConfigResource::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEnvironmentConfigResource s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["Environments"])
	{
		SEnvironmentConfigResourceEntry s_ArrayItem;
		SEnvironmentConfigResourceEntry::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.Environments.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SEnvironmentConfigResource*>(p_Target) = s_Object;
}

void SEnvironmentConfigResource::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	Environments.Serialize(p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResource, Environments));}

ZHMTypeInfo SEvacuateVIPGroupSaveData::TypeInfo = ZHMTypeInfo("SEvacuateVIPGroupSaveData", sizeof(SEvacuateVIPGroupSaveData), alignof(SEvacuateVIPGroupSaveData), SEvacuateVIPGroupSaveData::WriteJson, SEvacuateVIPGroupSaveData::WriteSimpleJson, SEvacuateVIPGroupSaveData::FromSimpleJson);

void SEvacuateVIPGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateVIPGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIP") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVIP;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIPActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVIPActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rEvacuationNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEvacuationNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSafeRoomNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSafeRoomNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCompromisedEvacNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCompromisedEvacNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_assignedBodyguards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_assignedBodyguards.size(); ++i)
	{
		auto& s_Item = s_Object->m_assignedBodyguards[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_assignedBodyguards.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEvacuationStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEvacuationStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tCornered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tCornered, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tTacticalPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tTacticalPoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoom") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tSafeRoom, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoomStandDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tSafeRoomStandDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInitialFlee") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInitialFlee;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomVIPSentActingStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_safeRoomVIPSentActingStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_isSetupPhaseComplete") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_isSetupPhaseComplete;
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateVIPGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateVIPGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIP") << ":";
	p_Stream << s_Object->m_rVIP;
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIPActor") << ":";
	p_Stream << s_Object->m_rVIPActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rEvacuationNode") << ":";
	p_Stream << s_Object->m_rEvacuationNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSafeRoomNode") << ":";
	p_Stream << s_Object->m_rSafeRoomNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCompromisedEvacNode") << ":";
	p_Stream << s_Object->m_rCompromisedEvacNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_assignedBodyguards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_assignedBodyguards.size(); ++i)
	{
		auto& s_Item = s_Object->m_assignedBodyguards[i];
		p_Stream << s_Item;

		if (i < s_Object->m_assignedBodyguards.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEvacuationStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEvacuationStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tCornered") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tCornered, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tTacticalPoint") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tTacticalPoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoom") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tSafeRoom, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoomStandDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tSafeRoomStandDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bInitialFlee") << ":";
	p_Stream << s_Object->m_bInitialFlee;
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomVIPSentActingStarted") << ":";
	p_Stream << s_Object->m_safeRoomVIPSentActingStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_isSetupPhaseComplete") << ":";
	p_Stream << s_Object->m_isSetupPhaseComplete;

	p_Stream << "}";
}

void SEvacuateVIPGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEvacuateVIPGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_rVIP = static_cast<uint32>(int64_t(p_Document["m_rVIP"]));

	s_Object.m_rVIPActor = static_cast<uint32>(int64_t(p_Document["m_rVIPActor"]));

	s_Object.m_rEvacuationNode = static_cast<uint32>(int64_t(p_Document["m_rEvacuationNode"]));

	s_Object.m_rSafeRoomNode = static_cast<uint32>(int64_t(p_Document["m_rSafeRoomNode"]));

	s_Object.m_rCompromisedEvacNode = static_cast<uint32>(int64_t(p_Document["m_rCompromisedEvacNode"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_assignedBodyguards"])
	{
		s_Object.m_assignedBodyguards.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tEvacuationStart"], &s_Item);
		s_Object.m_tEvacuationStart = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tCornered"], &s_Item);
		s_Object.m_tCornered = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tTacticalPoint"], &s_Item);
		s_Object.m_tTacticalPoint = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tSafeRoom"], &s_Item);
		s_Object.m_tSafeRoom = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tSafeRoomStandDown"], &s_Item);
		s_Object.m_tSafeRoomStandDown = s_Item;
	}

	s_Object.m_bInitialFlee = bool(p_Document["m_bInitialFlee"]);

	s_Object.m_safeRoomVIPSentActingStarted = bool(p_Document["m_safeRoomVIPSentActingStarted"]);

	s_Object.m_isSetupPhaseComplete = bool(p_Document["m_isSetupPhaseComplete"]);

	*reinterpret_cast<SEvacuateVIPGroupSaveData*>(p_Target) = s_Object;
}

void SEvacuateVIPGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_fsmState));	m_assignedBodyguards.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_assignedBodyguards));	m_tEvacuationStart.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tEvacuationStart));	m_tCornered.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tCornered));	m_tTacticalPoint.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tTacticalPoint));	m_tSafeRoom.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tSafeRoom));	m_tSafeRoomStandDown.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tSafeRoomStandDown));}

ZHMTypeInfo SWorldSpaceSettings::TypeInfo = ZHMTypeInfo("SWorldSpaceSettings", sizeof(SWorldSpaceSettings), alignof(SWorldSpaceSettings), SWorldSpaceSettings::WriteJson, SWorldSpaceSettings::WriteSimpleJson, SWorldSpaceSettings::FromSimpleJson);

void SWorldSpaceSettings::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWorldSpaceSettings*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fCloseupDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fCloseupDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bDynamicScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bDynamicScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDynamicScaleAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleNearDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDynamicScaleNearDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleBlendRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDynamicScaleBlendRange;
	p_Stream << "}";

	p_Stream << "}";
}

void SWorldSpaceSettings::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWorldSpaceSettings*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fCloseupDistance") << ":";
	p_Stream << s_Object->fCloseupDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fScale") << ":";
	p_Stream << s_Object->fScale;
	p_Stream << ",";

	p_Stream << JsonStr("bDynamicScale") << ":";
	p_Stream << s_Object->bDynamicScale;
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleAlpha") << ":";
	p_Stream << s_Object->fDynamicScaleAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleNearDistance") << ":";
	p_Stream << s_Object->fDynamicScaleNearDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleBlendRange") << ":";
	p_Stream << s_Object->fDynamicScaleBlendRange;

	p_Stream << "}";
}

void SWorldSpaceSettings::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWorldSpaceSettings s_Object;

	s_Object.fCloseupDistance = static_cast<float32>(double(p_Document["fCloseupDistance"]));

	s_Object.fScale = static_cast<float32>(double(p_Document["fScale"]));

	s_Object.bDynamicScale = bool(p_Document["bDynamicScale"]);

	s_Object.fDynamicScaleAlpha = static_cast<float32>(double(p_Document["fDynamicScaleAlpha"]));

	s_Object.fDynamicScaleNearDistance = static_cast<float32>(double(p_Document["fDynamicScaleNearDistance"]));

	s_Object.fDynamicScaleBlendRange = static_cast<float32>(double(p_Document["fDynamicScaleBlendRange"]));

	*reinterpret_cast<SWorldSpaceSettings*>(p_Target) = s_Object;
}

void SWorldSpaceSettings::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo S25DProjectionSettings::TypeInfo = ZHMTypeInfo("S25DProjectionSettings", sizeof(S25DProjectionSettings), alignof(S25DProjectionSettings), S25DProjectionSettings::WriteJson, S25DProjectionSettings::WriteSimpleJson, S25DProjectionSettings::FromSimpleJson);

void S25DProjectionSettings::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S25DProjectionSettings*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fNearDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearScaleFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearScaleFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarScaleFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarScaleFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fScaleFactor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAlphaFactor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAlphaFactor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aScaleCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScaleCurve.size(); ++i)
	{
		auto& s_Item = s_Object->aScaleCurve[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("S25DProjectionSettingsCurveEntry") << "," << JsonStr("$val") << ":";
		S25DProjectionSettingsCurveEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aScaleCurve.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAlphaCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAlphaCurve.size(); ++i)
	{
		auto& s_Item = s_Object->aAlphaCurve[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("S25DProjectionSettingsCurveEntry") << "," << JsonStr("$val") << ":";
		S25DProjectionSettingsCurveEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aAlphaCurve.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("eViewportLock") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EViewportLock") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eViewportLock) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EViewportLock", static_cast<int>(s_Object->eViewportLock))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fViewportGutter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fViewportGutter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sWorldSpaceSettings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SWorldSpaceSettings") << "," << JsonStr("$val") << ":";
	SWorldSpaceSettings::WriteJson(&s_Object->sWorldSpaceSettings, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void S25DProjectionSettings::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<S25DProjectionSettings*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fNearDistance") << ":";
	p_Stream << s_Object->fNearDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fFarDistance") << ":";
	p_Stream << s_Object->fFarDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fNearScale") << ":";
	p_Stream << s_Object->fNearScale;
	p_Stream << ",";

	p_Stream << JsonStr("fFarScale") << ":";
	p_Stream << s_Object->fFarScale;
	p_Stream << ",";

	p_Stream << JsonStr("fNearFov") << ":";
	p_Stream << s_Object->fNearFov;
	p_Stream << ",";

	p_Stream << JsonStr("fFarFov") << ":";
	p_Stream << s_Object->fFarFov;
	p_Stream << ",";

	p_Stream << JsonStr("fNearScaleFov") << ":";
	p_Stream << s_Object->fNearScaleFov;
	p_Stream << ",";

	p_Stream << JsonStr("fFarScaleFov") << ":";
	p_Stream << s_Object->fFarScaleFov;
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << s_Object->fScaleFactor;
	p_Stream << ",";

	p_Stream << JsonStr("fNearAlpha") << ":";
	p_Stream << s_Object->fNearAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fFarAlpha") << ":";
	p_Stream << s_Object->fFarAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fAlphaFactor") << ":";
	p_Stream << s_Object->fAlphaFactor;
	p_Stream << ",";

	p_Stream << JsonStr("aScaleCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScaleCurve.size(); ++i)
	{
		auto& s_Item = s_Object->aScaleCurve[i];
		S25DProjectionSettingsCurveEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->aScaleCurve.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAlphaCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAlphaCurve.size(); ++i)
	{
		auto& s_Item = s_Object->aAlphaCurve[i];
		S25DProjectionSettingsCurveEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->aAlphaCurve.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("eViewportLock") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EViewportLock", static_cast<int>(s_Object->eViewportLock)));
	p_Stream << ",";

	p_Stream << JsonStr("fViewportGutter") << ":";
	p_Stream << s_Object->fViewportGutter;
	p_Stream << ",";

	p_Stream << JsonStr("sWorldSpaceSettings") << ":";
	SWorldSpaceSettings::WriteSimpleJson(&s_Object->sWorldSpaceSettings, p_Stream);

	p_Stream << "}";
}

void S25DProjectionSettings::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	S25DProjectionSettings s_Object;

	s_Object.fNearDistance = static_cast<float32>(double(p_Document["fNearDistance"]));

	s_Object.fFarDistance = static_cast<float32>(double(p_Document["fFarDistance"]));

	s_Object.fNearScale = static_cast<float32>(double(p_Document["fNearScale"]));

	s_Object.fFarScale = static_cast<float32>(double(p_Document["fFarScale"]));

	s_Object.fNearFov = static_cast<float32>(double(p_Document["fNearFov"]));

	s_Object.fFarFov = static_cast<float32>(double(p_Document["fFarFov"]));

	s_Object.fNearScaleFov = static_cast<float32>(double(p_Document["fNearScaleFov"]));

	s_Object.fFarScaleFov = static_cast<float32>(double(p_Document["fFarScaleFov"]));

	s_Object.fScaleFactor = static_cast<float32>(double(p_Document["fScaleFactor"]));

	s_Object.fNearAlpha = static_cast<float32>(double(p_Document["fNearAlpha"]));

	s_Object.fFarAlpha = static_cast<float32>(double(p_Document["fFarAlpha"]));

	s_Object.fAlphaFactor = static_cast<float32>(double(p_Document["fAlphaFactor"]));

	for (simdjson::ondemand::value s_Item : p_Document["aScaleCurve"])
	{
		S25DProjectionSettingsCurveEntry s_ArrayItem;
		S25DProjectionSettingsCurveEntry::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.aScaleCurve.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["aAlphaCurve"])
	{
		S25DProjectionSettingsCurveEntry s_ArrayItem;
		S25DProjectionSettingsCurveEntry::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.aAlphaCurve.push_back(s_ArrayItem);
	}

	s_Object.eViewportLock = static_cast<EViewportLock>(ZHMEnums::GetEnumValueByName("EViewportLock", std::string_view(p_Document["eViewportLock"])));

	s_Object.fViewportGutter = static_cast<float32>(double(p_Document["fViewportGutter"]));

	{
		SWorldSpaceSettings s_Item;
		SWorldSpaceSettings::FromSimpleJson(p_Document["sWorldSpaceSettings"], &s_Item);
		s_Object.sWorldSpaceSettings = s_Item;
	}

	*reinterpret_cast<S25DProjectionSettings*>(p_Target) = s_Object;
}

void S25DProjectionSettings::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	aScaleCurve.Serialize(p_Serializer, p_OwnOffset + offsetof(S25DProjectionSettings, aScaleCurve));	aAlphaCurve.Serialize(p_Serializer, p_OwnOffset + offsetof(S25DProjectionSettings, aAlphaCurve));	sWorldSpaceSettings.Serialize(p_Serializer, p_OwnOffset + offsetof(S25DProjectionSettings, sWorldSpaceSettings));}

ZHMTypeInfo SVisibilitySaveData::TypeInfo = ZHMTypeInfo("SVisibilitySaveData", sizeof(SVisibilitySaveData), alignof(SVisibilitySaveData), SVisibilitySaveData::WriteJson, SVisibilitySaveData::WriteSimpleJson, SVisibilitySaveData::FromSimpleJson);

void SVisibilitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVisibilitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SVisibilitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVisibilitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;

	p_Stream << "}";
}

void SVisibilitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVisibilitySaveData s_Object;

	s_Object.m_bIsVisible = bool(p_Document["m_bIsVisible"]);

	*reinterpret_cast<SVisibilitySaveData*>(p_Target) = s_Object;
}

void SVisibilitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCombatZoneEntitySaveData::TypeInfo = ZHMTypeInfo("SCombatZoneEntitySaveData", sizeof(SCombatZoneEntitySaveData), alignof(SCombatZoneEntitySaveData), SCombatZoneEntitySaveData::WriteJson, SCombatZoneEntitySaveData::WriteSimpleJson, SCombatZoneEntitySaveData::FromSimpleJson);

void SCombatZoneEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatZoneEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsInLockdown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsInLockdown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFalseAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFalseAlarm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECombatZoneState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECombatZoneState", static_cast<int>(s_Object->m_nState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLockdownTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLockdownTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tTriggerTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tTriggerTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEngageTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEngageTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatZoneEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatZoneEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsInLockdown") << ":";
	p_Stream << s_Object->m_bIsInLockdown;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFalseAlarm") << ":";
	p_Stream << s_Object->m_bIsFalseAlarm;
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECombatZoneState", static_cast<int>(s_Object->m_nState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tLockdownTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLockdownTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tTriggerTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tTriggerTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tEngageTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEngageTime, p_Stream);

	p_Stream << "}";
}

void SCombatZoneEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCombatZoneEntitySaveData s_Object;

	s_Object.m_bIsInLockdown = bool(p_Document["m_bIsInLockdown"]);

	s_Object.m_bIsFalseAlarm = bool(p_Document["m_bIsFalseAlarm"]);

	s_Object.m_nState = static_cast<ECombatZoneState>(ZHMEnums::GetEnumValueByName("ECombatZoneState", std::string_view(p_Document["m_nState"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLockdownTime"], &s_Item);
		s_Object.m_tLockdownTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tTriggerTime"], &s_Item);
		s_Object.m_tTriggerTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tEngageTime"], &s_Item);
		s_Object.m_tEngageTime = s_Item;
	}

	*reinterpret_cast<SCombatZoneEntitySaveData*>(p_Target) = s_Object;
}

void SCombatZoneEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tLockdownTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SCombatZoneEntitySaveData, m_tLockdownTime));	m_tTriggerTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SCombatZoneEntitySaveData, m_tTriggerTime));	m_tEngageTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SCombatZoneEntitySaveData, m_tEngageTime));}

ZHMTypeInfo SCuriousEventSaveData::TypeInfo = ZHMTypeInfo("SCuriousEventSaveData", sizeof(SCuriousEventSaveData), alignof(SCuriousEventSaveData), SCuriousEventSaveData::WriteJson, SCuriousEventSaveData::WriteSimpleJson, SCuriousEventSaveData::FromSimpleJson);

void SCuriousEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCuriousEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tExpiresAt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiresAt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nKnowledgeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nKnowledgeIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SCuriousEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCuriousEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tExpiresAt") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiresAt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nKnowledgeIndex") << ":";
	p_Stream << s_Object->m_nKnowledgeIndex;

	p_Stream << "}";
}

void SCuriousEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCuriousEventSaveData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tExpiresAt"], &s_Item);
		s_Object.m_tExpiresAt = s_Item;
	}

	s_Object.m_nKnowledgeIndex = static_cast<int32>(int64_t(p_Document["m_nKnowledgeIndex"]));

	*reinterpret_cast<SCuriousEventSaveData*>(p_Target) = s_Object;
}

void SCuriousEventSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tExpiresAt.Serialize(p_Serializer, p_OwnOffset + offsetof(SCuriousEventSaveData, m_tExpiresAt));}

ZHMTypeInfo SCuriousEventServiceSaveData::TypeInfo = ZHMTypeInfo("SCuriousEventServiceSaveData", sizeof(SCuriousEventServiceSaveData), alignof(SCuriousEventServiceSaveData), SCuriousEventServiceSaveData::WriteJson, SCuriousEventServiceSaveData::WriteSimpleJson, SCuriousEventServiceSaveData::FromSimpleJson);

void SCuriousEventServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCuriousEventServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aCuriousEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCuriousEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCuriousEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCuriousEventSaveData") << "," << JsonStr("$val") << ":";
		SCuriousEventSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aCuriousEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCuriousEventServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCuriousEventServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aCuriousEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCuriousEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCuriousEvents[i];
		SCuriousEventSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aCuriousEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCuriousEventServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCuriousEventServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aCuriousEvents"])
	{
		SCuriousEventSaveData s_ArrayItem;
		SCuriousEventSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aCuriousEvents.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SCuriousEventServiceSaveData*>(p_Target) = s_Object;
}

void SCuriousEventServiceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aCuriousEvents.Serialize(p_Serializer, p_OwnOffset + offsetof(SCuriousEventServiceSaveData, m_aCuriousEvents));}

ZHMTypeInfo SMathDistanceSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector4", sizeof(SMathDistanceSaveData_SVector4), alignof(SMathDistanceSaveData_SVector4), SMathDistanceSaveData_SVector4::WriteJson, SMathDistanceSaveData_SVector4::WriteSimpleJson, SMathDistanceSaveData_SVector4::FromSimpleJson);

void SMathDistanceSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathDistanceSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fB, p_Stream);

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathDistanceSaveData_SVector4 s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	*reinterpret_cast<SMathDistanceSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathDistanceSaveData_SVector4::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fA.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector4, m_fA));	m_fB.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector4, m_fB));}

ZHMTypeInfo SGuardBodySituationSaveData::TypeInfo = ZHMTypeInfo("SGuardBodySituationSaveData", sizeof(SGuardBodySituationSaveData), alignof(SGuardBodySituationSaveData), SGuardBodySituationSaveData::WriteJson, SGuardBodySituationSaveData::WriteSimpleJson, SGuardBodySituationSaveData::FromSimpleJson);

void SGuardBodySituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardBodySituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bBystanderFieldsFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBystanderFieldsFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLastGetHelpGroupFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLastGetHelpGroupFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneCanSeeBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSomeoneCanSeeBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneHandledBodybag") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSomeoneHandledBodybag;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pGetHelpGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGetHelpGroup;
	p_Stream << "}";

	p_Stream << "}";
}

void SGuardBodySituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardBodySituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bBystanderFieldsFailed") << ":";
	p_Stream << s_Object->m_bBystanderFieldsFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLastGetHelpGroupFailed") << ":";
	p_Stream << s_Object->m_bLastGetHelpGroupFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneCanSeeBody") << ":";
	p_Stream << s_Object->m_bSomeoneCanSeeBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneHandledBodybag") << ":";
	p_Stream << s_Object->m_bSomeoneHandledBodybag;
	p_Stream << ",";

	p_Stream << JsonStr("m_pGetHelpGroup") << ":";
	p_Stream << s_Object->m_pGetHelpGroup;

	p_Stream << "}";
}

void SGuardBodySituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGuardBodySituationSaveData s_Object;

	s_Object.m_bBystanderFieldsFailed = bool(p_Document["m_bBystanderFieldsFailed"]);

	s_Object.m_bLastGetHelpGroupFailed = bool(p_Document["m_bLastGetHelpGroupFailed"]);

	s_Object.m_bSomeoneCanSeeBody = bool(p_Document["m_bSomeoneCanSeeBody"]);

	s_Object.m_bSomeoneHandledBodybag = bool(p_Document["m_bSomeoneHandledBodybag"]);

	s_Object.m_pGetHelpGroup = static_cast<int32>(int64_t(p_Document["m_pGetHelpGroup"]));

	*reinterpret_cast<SGuardBodySituationSaveData*>(p_Target) = s_Object;
}

void SGuardBodySituationSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo STargetTrackingSaveData::TypeInfo = ZHMTypeInfo("STargetTrackingSaveData", sizeof(STargetTrackingSaveData), alignof(STargetTrackingSaveData), STargetTrackingSaveData::WriteJson, STargetTrackingSaveData::WriteSimpleJson, STargetTrackingSaveData::FromSimpleJson);

void STargetTrackingSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetTrackingSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sharedTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_sharedTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_position") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_position, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_time") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_time, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STargetTrackingSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetTrackingSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sharedTarget") << ":";
	p_Stream << s_Object->m_sharedTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_position") << ":";
	float4::WriteSimpleJson(&s_Object->m_position, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_time") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_time, p_Stream);

	p_Stream << "}";
}

void STargetTrackingSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetTrackingSaveData s_Object;

	s_Object.m_sharedTarget = static_cast<int32>(int64_t(p_Document["m_sharedTarget"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_position"], &s_Item);
		s_Object.m_position = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_time"], &s_Item);
		s_Object.m_time = s_Item;
	}

	*reinterpret_cast<STargetTrackingSaveData*>(p_Target) = s_Object;
}

void STargetTrackingSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_position.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetTrackingSaveData, m_position));	m_time.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetTrackingSaveData, m_time));}

ZHMTypeInfo STargetTrackingServiceSaveData::TypeInfo = ZHMTypeInfo("STargetTrackingServiceSaveData", sizeof(STargetTrackingServiceSaveData), alignof(STargetTrackingServiceSaveData), STargetTrackingServiceSaveData::WriteJson, STargetTrackingServiceSaveData::WriteSimpleJson, STargetTrackingServiceSaveData::FromSimpleJson);

void STargetTrackingServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetTrackingServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aTrackedTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackedTargets.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTrackedTargets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STargetTrackingSaveData") << "," << JsonStr("$val") << ":";
		STargetTrackingSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTrackedTargets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STargetTrackingServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STargetTrackingServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aTrackedTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackedTargets.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTrackedTargets[i];
		STargetTrackingSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aTrackedTargets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STargetTrackingServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetTrackingServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aTrackedTargets"])
	{
		STargetTrackingSaveData s_ArrayItem;
		STargetTrackingSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aTrackedTargets.push_back(s_ArrayItem);
	}

	*reinterpret_cast<STargetTrackingServiceSaveData*>(p_Target) = s_Object;
}

void STargetTrackingServiceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aTrackedTargets.Serialize(p_Serializer, p_OwnOffset + offsetof(STargetTrackingServiceSaveData, m_aTrackedTargets));}

ZHMTypeInfo SCollisionControllerAspectSaveData::TypeInfo = ZHMTypeInfo("SCollisionControllerAspectSaveData", sizeof(SCollisionControllerAspectSaveData), alignof(SCollisionControllerAspectSaveData), SCollisionControllerAspectSaveData::WriteJson, SCollisionControllerAspectSaveData::WriteSimpleJson, SCollisionControllerAspectSaveData::FromSimpleJson);

void SCollisionControllerAspectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollisionControllerAspectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bCollideHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCollideHitman;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollideCamera") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCollideCamera;
	p_Stream << "}";

	p_Stream << "}";
}

void SCollisionControllerAspectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollisionControllerAspectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bCollideHitman") << ":";
	p_Stream << s_Object->m_bCollideHitman;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollideCamera") << ":";
	p_Stream << s_Object->m_bCollideCamera;

	p_Stream << "}";
}

void SCollisionControllerAspectSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCollisionControllerAspectSaveData s_Object;

	s_Object.m_bCollideHitman = bool(p_Document["m_bCollideHitman"]);

	s_Object.m_bCollideCamera = bool(p_Document["m_bCollideCamera"]);

	*reinterpret_cast<SCollisionControllerAspectSaveData*>(p_Target) = s_Object;
}

void SCollisionControllerAspectSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCollisionControllerAspectsSaveData::TypeInfo = ZHMTypeInfo("SCollisionControllerAspectsSaveData", sizeof(SCollisionControllerAspectsSaveData), alignof(SCollisionControllerAspectsSaveData), SCollisionControllerAspectsSaveData::WriteJson, SCollisionControllerAspectsSaveData::WriteSimpleJson, SCollisionControllerAspectsSaveData::FromSimpleJson);

void SCollisionControllerAspectsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollisionControllerAspectsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCollisionControllerAspectSaveData") << "," << JsonStr("$val") << ":";
		SCollisionControllerAspectSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCollisionControllerAspectsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCollisionControllerAspectsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SCollisionControllerAspectSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCollisionControllerAspectsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCollisionControllerAspectsSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SCollisionControllerAspectSaveData s_ArrayItem;
		SCollisionControllerAspectSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SCollisionControllerAspectsSaveData*>(p_Target) = s_Object;
}

void SCollisionControllerAspectsSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SCollisionControllerAspectsSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SCollisionControllerAspectsSaveData, m_aData));}

ZHMTypeInfo SActOrderSaveData::TypeInfo = ZHMTypeInfo("SActOrderSaveData", sizeof(SActOrderSaveData), alignof(SActOrderSaveData), SActOrderSaveData::WriteJson, SActOrderSaveData::WriteSimpleJson, SActOrderSaveData::FromSimpleJson);

void SActOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_faceTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_faceTarget, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendOutImmediatelyUponTimeout") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBlendOutImmediatelyUponTimeout;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopCurrentActFast") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopCurrentActFast;
	p_Stream << "}";

	p_Stream << "}";
}

void SActOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_faceTarget") << ":";
	float4::WriteSimpleJson(&s_Object->m_faceTarget, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendOutImmediatelyUponTimeout") << ":";
	p_Stream << s_Object->m_bBlendOutImmediatelyUponTimeout;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopCurrentActFast") << ":";
	p_Stream << s_Object->m_bStopCurrentActFast;

	p_Stream << "}";
}

void SActOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActOrderSaveData s_Object;

	s_Object.m_sAct = std::string_view(p_Document["m_sAct"]);

	s_Object.m_fDuration = static_cast<float32>(double(p_Document["m_fDuration"]));

	s_Object.m_rChildNetworkEntity = static_cast<uint32>(int64_t(p_Document["m_rChildNetworkEntity"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_faceTarget"], &s_Item);
		s_Object.m_faceTarget = s_Item;
	}

	s_Object.m_bBlendOutImmediatelyUponTimeout = bool(p_Document["m_bBlendOutImmediatelyUponTimeout"]);

	s_Object.m_bDropCarriedItems = bool(p_Document["m_bDropCarriedItems"]);

	s_Object.m_bStopCurrentActFast = bool(p_Document["m_bStopCurrentActFast"]);

	*reinterpret_cast<SActOrderSaveData*>(p_Target) = s_Object;
}

void SActOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sAct.Serialize(p_Serializer, p_OwnOffset + offsetof(SActOrderSaveData, m_sAct));	m_faceTarget.Serialize(p_Serializer, p_OwnOffset + offsetof(SActOrderSaveData, m_faceTarget));}

ZHMTypeInfo SContractObjectiveHudHintEntitySaveData::TypeInfo = ZHMTypeInfo("SContractObjectiveHudHintEntitySaveData", sizeof(SContractObjectiveHudHintEntitySaveData), alignof(SContractObjectiveHudHintEntitySaveData), SContractObjectiveHudHintEntitySaveData::WriteJson, SContractObjectiveHudHintEntitySaveData::WriteSimpleJson, SContractObjectiveHudHintEntitySaveData::FromSimpleJson);

void SContractObjectiveHudHintEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContractObjectiveHudHintEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SContractObjectiveHudHintEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SContractObjectiveHudHintEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

void SContractObjectiveHudHintEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContractObjectiveHudHintEntitySaveData s_Object;

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	*reinterpret_cast<SContractObjectiveHudHintEntitySaveData*>(p_Target) = s_Object;
}

void SContractObjectiveHudHintEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMapMarkerData::TypeInfo = ZHMTypeInfo("SMapMarkerData", sizeof(SMapMarkerData), alignof(SMapMarkerData), SMapMarkerData::WriteJson, SMapMarkerData::WriteSimpleJson, SMapMarkerData::FromSimpleJson);

void SMapMarkerData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMapMarkerData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("pathPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pathPoints.size(); ++i)
	{
		auto& s_Item = s_Object->pathPoints[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
		SVector2::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pathPoints.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMapMarkerData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMapMarkerData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("pathPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pathPoints.size(); ++i)
	{
		auto& s_Item = s_Object->pathPoints[i];
		SVector2::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->pathPoints.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMapMarkerData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMapMarkerData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["pathPoints"])
	{
		SVector2 s_ArrayItem;
		SVector2::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.pathPoints.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMapMarkerData*>(p_Target) = s_Object;
}

void SMapMarkerData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	pathPoints.Serialize(p_Serializer, p_OwnOffset + offsetof(SMapMarkerData, pathPoints));}

ZHMTypeInfo SEscortOutBehaviorSaveData::TypeInfo = ZHMTypeInfo("SEscortOutBehaviorSaveData", sizeof(SEscortOutBehaviorSaveData), alignof(SEscortOutBehaviorSaveData), SEscortOutBehaviorSaveData::WriteJson, SEscortOutBehaviorSaveData::WriteSimpleJson, SEscortOutBehaviorSaveData::FromSimpleJson);

void SEscortOutBehaviorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortOutBehaviorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bConversationHelperPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bConversationHelperPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsm, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vExitPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vExitPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWarningTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWarningTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHardWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHardWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscortStateSilenceTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEscortStateSilenceTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyWarningTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWaitHitmanToComplyWarningTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyStateTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWaitHitmanToComplyStateTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastLookBack") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastLookBack, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReachedExitPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReachedExitPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowExitWarningEnded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowExitWarningEnded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bJustShowExit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bJustShowExit;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortOutBehaviorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortOutBehaviorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bConversationHelperPaused") << ":";
	p_Stream << s_Object->m_bConversationHelperPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsm") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsm, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vExitPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vExitPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tWarningTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWarningTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bHardWarning") << ":";
	p_Stream << s_Object->m_bHardWarning;
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscortStateSilenceTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEscortStateSilenceTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyWarningTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWaitHitmanToComplyWarningTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyStateTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWaitHitmanToComplyStateTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastLookBack") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastLookBack, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bReachedExitPosition") << ":";
	p_Stream << s_Object->m_bReachedExitPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowExitWarningEnded") << ":";
	p_Stream << s_Object->m_bShowExitWarningEnded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bJustShowExit") << ":";
	p_Stream << s_Object->m_bJustShowExit;

	p_Stream << "}";
}

void SEscortOutBehaviorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortOutBehaviorSaveData s_Object;

	s_Object.m_nSituation = static_cast<int32>(int64_t(p_Document["m_nSituation"]));

	s_Object.m_bConversationHelperPaused = bool(p_Document["m_bConversationHelperPaused"]);

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsm"], &s_Item);
		s_Object.m_fsm = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vExitPosition"], &s_Item);
		s_Object.m_vExitPosition = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tWarningTime"], &s_Item);
		s_Object.m_tWarningTime = s_Item;
	}

	s_Object.m_bHardWarning = bool(p_Document["m_bHardWarning"]);

	s_Object.m_nWarningCount = static_cast<int32>(int64_t(p_Document["m_nWarningCount"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tEscortStateSilenceTime"], &s_Item);
		s_Object.m_tEscortStateSilenceTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tWaitHitmanToComplyWarningTime"], &s_Item);
		s_Object.m_tWaitHitmanToComplyWarningTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tWaitHitmanToComplyStateTime"], &s_Item);
		s_Object.m_tWaitHitmanToComplyStateTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastLookBack"], &s_Item);
		s_Object.m_tLastLookBack = s_Item;
	}

	s_Object.m_bReachedExitPosition = bool(p_Document["m_bReachedExitPosition"]);

	s_Object.m_bShowExitWarningEnded = bool(p_Document["m_bShowExitWarningEnded"]);

	s_Object.m_bJustShowExit = bool(p_Document["m_bJustShowExit"]);

	*reinterpret_cast<SEscortOutBehaviorSaveData*>(p_Target) = s_Object;
}

void SEscortOutBehaviorSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsm.Serialize(p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_fsm));	m_vExitPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_vExitPosition));	m_tWarningTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tWarningTime));	m_tEscortStateSilenceTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tEscortStateSilenceTime));	m_tWaitHitmanToComplyWarningTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tWaitHitmanToComplyWarningTime));	m_tWaitHitmanToComplyStateTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tWaitHitmanToComplyStateTime));	m_tLastLookBack.Serialize(p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tLastLookBack));}

ZHMTypeInfo SCompressedGridFloatField::TypeInfo = ZHMTypeInfo("SCompressedGridFloatField", sizeof(SCompressedGridFloatField), alignof(SCompressedGridFloatField), SCompressedGridFloatField::WriteJson, SCompressedGridFloatField::WriteSimpleJson, SCompressedGridFloatField::FromSimpleJson);

void SCompressedGridFloatField::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCompressedGridFloatField*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsSparse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSparse;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_aValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCompressedGridFloatField::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCompressedGridFloatField*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsSparse") << ":";
	p_Stream << s_Object->m_bIsSparse;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item = s_Object->m_aValues[i];
		p_Stream << static_cast<int>(s_Item);

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCompressedGridFloatField::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCompressedGridFloatField s_Object;

	s_Object.m_bIsSparse = bool(p_Document["m_bIsSparse"]);

	s_Object.m_nFieldSize = static_cast<uint32>(int64_t(p_Document["m_nFieldSize"]));

	s_Object.m_fInitialValue = static_cast<float32>(double(p_Document["m_fInitialValue"]));

	s_Object.m_nGridCRC = static_cast<uint32>(int64_t(p_Document["m_nGridCRC"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aIndices"])
	{
		s_Object.m_aIndices.push_back(static_cast<uint16>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aValues"])
	{
		s_Object.m_aValues.push_back(static_cast<uint8>(int64_t(s_Item)));
	}

	*reinterpret_cast<SCompressedGridFloatField*>(p_Target) = s_Object;
}

void SCompressedGridFloatField::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aIndices.Serialize(p_Serializer, p_OwnOffset + offsetof(SCompressedGridFloatField, m_aIndices));	m_aValues.Serialize(p_Serializer, p_OwnOffset + offsetof(SCompressedGridFloatField, m_aValues));}

ZHMTypeInfo SRecoverUnconsciousGroupSaveData::TypeInfo = ZHMTypeInfo("SRecoverUnconsciousGroupSaveData", sizeof(SRecoverUnconsciousGroupSaveData), alignof(SRecoverUnconsciousGroupSaveData), SRecoverUnconsciousGroupSaveData::WriteJson, SRecoverUnconsciousGroupSaveData::WriteSimpleJson, SRecoverUnconsciousGroupSaveData::FromSimpleJson);

void SRecoverUnconsciousGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRecoverUnconsciousGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rVictim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVictim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rWaker") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rWaker;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEscalate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWokenUpInTheGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWokenUpInTheGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWakeUp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFastWakeUp;
	p_Stream << "}";

	p_Stream << "}";
}

void SRecoverUnconsciousGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRecoverUnconsciousGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rVictim") << ":";
	p_Stream << s_Object->m_rVictim;
	p_Stream << ",";

	p_Stream << JsonStr("m_rWaker") << ":";
	p_Stream << s_Object->m_rWaker;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << s_Object->m_fTimer;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalate") << ":";
	p_Stream << s_Object->m_bEscalate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWokenUpInTheGroup") << ":";
	p_Stream << s_Object->m_bWokenUpInTheGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWakeUp") << ":";
	p_Stream << s_Object->m_bFastWakeUp;

	p_Stream << "}";
}

void SRecoverUnconsciousGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRecoverUnconsciousGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_rVictim = static_cast<uint32>(int64_t(p_Document["m_rVictim"]));

	s_Object.m_rWaker = static_cast<uint32>(int64_t(p_Document["m_rWaker"]));

	s_Object.m_fTimer = static_cast<float32>(double(p_Document["m_fTimer"]));

	s_Object.m_bEscalate = bool(p_Document["m_bEscalate"]);

	s_Object.m_bWokenUpInTheGroup = bool(p_Document["m_bWokenUpInTheGroup"]);

	s_Object.m_bFastWakeUp = bool(p_Document["m_bFastWakeUp"]);

	*reinterpret_cast<SRecoverUnconsciousGroupSaveData*>(p_Target) = s_Object;
}

void SRecoverUnconsciousGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SRecoverUnconsciousGroupSaveData, m_fsmState));}

ZHMTypeInfo SAccidentObserversGroupSaveData::TypeInfo = ZHMTypeInfo("SAccidentObserversGroupSaveData", sizeof(SAccidentObserversGroupSaveData), alignof(SAccidentObserversGroupSaveData), SAccidentObserversGroupSaveData::WriteJson, SAccidentObserversGroupSaveData::WriteSimpleJson, SAccidentObserversGroupSaveData::FromSimpleJson);

void SAccidentObserversGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAccidentObserversGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aWaitingObservers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_accidentScaleContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAccidentScaleContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_accidentScaleContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAccidentScaleContext", static_cast<int>(s_Object->m_accidentScaleContext))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SAccidentObserversGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAccidentObserversGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aWaitingObservers[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_accidentScaleContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAccidentScaleContext", static_cast<int>(s_Object->m_accidentScaleContext)));

	p_Stream << "}";
}

void SAccidentObserversGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAccidentObserversGroupSaveData s_Object;

	s_Object.m_target = static_cast<uint32>(int64_t(p_Document["m_target"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aWaitingObservers"])
	{
		s_Object.m_aWaitingObservers.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	s_Object.m_accidentScaleContext = static_cast<EAccidentScaleContext>(ZHMEnums::GetEnumValueByName("EAccidentScaleContext", std::string_view(p_Document["m_accidentScaleContext"])));

	*reinterpret_cast<SAccidentObserversGroupSaveData*>(p_Target) = s_Object;
}

void SAccidentObserversGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aWaitingObservers.Serialize(p_Serializer, p_OwnOffset + offsetof(SAccidentObserversGroupSaveData, m_aWaitingObservers));}

ZHMTypeInfo SGaitTransitionEntry::TypeInfo = ZHMTypeInfo("SGaitTransitionEntry", sizeof(SGaitTransitionEntry), alignof(SGaitTransitionEntry), SGaitTransitionEntry::WriteJson, SGaitTransitionEntry::WriteSimpleJson, SGaitTransitionEntry::FromSimpleJson);

void SGaitTransitionEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGaitTransitionEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_gait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGait") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_gait) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_gait))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_speed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESpeed") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_speed) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESpeed", static_cast<int>(s_Object->m_speed))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SGaitTransitionEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGaitTransitionEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_gait") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_gait)));
	p_Stream << ",";

	p_Stream << JsonStr("m_speed") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESpeed", static_cast<int>(s_Object->m_speed)));

	p_Stream << "}";
}

void SGaitTransitionEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGaitTransitionEntry s_Object;

	s_Object.m_gait = static_cast<EGait>(ZHMEnums::GetEnumValueByName("EGait", std::string_view(p_Document["m_gait"])));

	s_Object.m_speed = static_cast<ESpeed>(ZHMEnums::GetEnumValueByName("ESpeed", std::string_view(p_Document["m_speed"])));

	*reinterpret_cast<SGaitTransitionEntry*>(p_Target) = s_Object;
}

void SGaitTransitionEntry::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZTime::TypeInfo = ZHMTypeInfo("ZTime", sizeof(ZTime), alignof(ZTime), ZTime::WriteJson, ZTime::WriteSimpleJson, ZTime::FromSimpleJson);

void ZTime::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZTime*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nValue;
	p_Stream << "}";

	p_Stream << "}";
}

void ZTime::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZTime*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nValue") << ":";
	p_Stream << s_Object->m_nValue;

	p_Stream << "}";
}

void ZTime::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZTime s_Object;

	s_Object.m_nValue = uint64(p_Document["m_nValue"]);

	*reinterpret_cast<ZTime*>(p_Target) = s_Object;
}

void ZTime::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo STemplateBlueprintSubEntity::TypeInfo = ZHMTypeInfo("STemplateBlueprintSubEntity", sizeof(STemplateBlueprintSubEntity), alignof(STemplateBlueprintSubEntity), STemplateBlueprintSubEntity::WriteJson, STemplateBlueprintSubEntity::WriteSimpleJson, STemplateBlueprintSubEntity::FromSimpleJson);

void STemplateBlueprintSubEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateBlueprintSubEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("logicalParent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->logicalParent, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("editorOnly") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->editorOnly;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->entityName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyAliases") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyAliases.size(); ++i)
	{
		auto& s_Item = s_Object->propertyAliases[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePropertyAlias") << "," << JsonStr("$val") << ":";
		SEntityTemplatePropertyAlias::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyAliases.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntities.size(); ++i)
	{
		auto& s_Item = s_Object->exposedEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateExposedEntity") << "," << JsonStr("$val") << ":";
		SEntityTemplateExposedEntity::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->exposedEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedInterfaces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedInterfaces.size(); ++i)
	{
		auto& s_Item = s_Object->exposedInterfaces[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TPair<ZString,int32>") << "," << JsonStr("$val") << ":";
		TPair<ZString,int32>::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->exposedInterfaces.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("entitySubsets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entitySubsets.size(); ++i)
	{
		auto& s_Item = s_Object->entitySubsets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TPair<ZString,SEntityTemplateEntitySubset>") << "," << JsonStr("$val") << ":";
		TPair<ZString,SEntityTemplateEntitySubset>::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->entitySubsets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STemplateBlueprintSubEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateBlueprintSubEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("logicalParent") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->logicalParent, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("entityId") << ":";
	p_Stream << s_Object->entityId;
	p_Stream << ",";

	p_Stream << JsonStr("editorOnly") << ":";
	p_Stream << s_Object->editorOnly;
	p_Stream << ",";

	p_Stream << JsonStr("entityName") << ":";
	p_Stream << JsonStr(s_Object->entityName);
	p_Stream << ",";

	p_Stream << JsonStr("propertyAliases") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyAliases.size(); ++i)
	{
		auto& s_Item = s_Object->propertyAliases[i];
		SEntityTemplatePropertyAlias::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->propertyAliases.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntities.size(); ++i)
	{
		auto& s_Item = s_Object->exposedEntities[i];
		SEntityTemplateExposedEntity::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->exposedEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedInterfaces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedInterfaces.size(); ++i)
	{
		auto& s_Item = s_Object->exposedInterfaces[i];
		TPair<ZString,int32>::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->exposedInterfaces.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("entitySubsets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entitySubsets.size(); ++i)
	{
		auto& s_Item = s_Object->entitySubsets[i];
		TPair<ZString,SEntityTemplateEntitySubset>::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->entitySubsets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateBlueprintSubEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateBlueprintSubEntity s_Object;

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["logicalParent"], &s_Item);
		s_Object.logicalParent = s_Item;
	}

	s_Object.entityTypeResourceIndex = static_cast<int32>(int64_t(p_Document["entityTypeResourceIndex"]));

	s_Object.entityId = uint64(p_Document["entityId"]);

	s_Object.editorOnly = bool(p_Document["editorOnly"]);

	s_Object.entityName = std::string_view(p_Document["entityName"]);

	for (simdjson::ondemand::value s_Item : p_Document["propertyAliases"])
	{
		SEntityTemplatePropertyAlias s_ArrayItem;
		SEntityTemplatePropertyAlias::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.propertyAliases.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["exposedEntities"])
	{
		SEntityTemplateExposedEntity s_ArrayItem;
		SEntityTemplateExposedEntity::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.exposedEntities.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["exposedInterfaces"])
	{
		TPair<ZString,int32> s_ArrayItem;
		TPair<ZString,int32>::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.exposedInterfaces.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["entitySubsets"])
	{
		TPair<ZString,SEntityTemplateEntitySubset> s_ArrayItem;
		TPair<ZString,SEntityTemplateEntitySubset>::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.entitySubsets.push_back(s_ArrayItem);
	}

	*reinterpret_cast<STemplateBlueprintSubEntity*>(p_Target) = s_Object;
}

void STemplateBlueprintSubEntity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	logicalParent.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, logicalParent));	entityName.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, entityName));	propertyAliases.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, propertyAliases));	exposedEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, exposedEntities));	exposedInterfaces.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, exposedInterfaces));	entitySubsets.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, entitySubsets));}

ZHMTypeInfo SSpaceCollectionBehaviorConfiguration::TypeInfo = ZHMTypeInfo("SSpaceCollectionBehaviorConfiguration", sizeof(SSpaceCollectionBehaviorConfiguration), alignof(SSpaceCollectionBehaviorConfiguration), SSpaceCollectionBehaviorConfiguration::WriteJson, SSpaceCollectionBehaviorConfiguration::WriteSimpleJson, SSpaceCollectionBehaviorConfiguration::FromSimpleJson);

void SSpaceCollectionBehaviorConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpaceCollectionBehaviorConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bInclusive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInclusive;
	p_Stream << "}";

	p_Stream << "}";
}

void SSpaceCollectionBehaviorConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSpaceCollectionBehaviorConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bInclusive") << ":";
	p_Stream << s_Object->m_bInclusive;

	p_Stream << "}";
}

void SSpaceCollectionBehaviorConfiguration::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSpaceCollectionBehaviorConfiguration s_Object;

	s_Object.m_bInclusive = bool(p_Document["m_bInclusive"]);

	*reinterpret_cast<SSpaceCollectionBehaviorConfiguration*>(p_Target) = s_Object;
}

void SSpaceCollectionBehaviorConfiguration::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDramaControllerSaveData::TypeInfo = ZHMTypeInfo("SDramaControllerSaveData", sizeof(SDramaControllerSaveData), alignof(SDramaControllerSaveData), SDramaControllerSaveData::WriteJson, SDramaControllerSaveData::WriteSimpleJson, SDramaControllerSaveData::FromSimpleJson);

void SDramaControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsStartCondValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsStartCondValid;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnableCondValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnableCondValid;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDramaControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsStartCondValid") << ":";
	p_Stream << s_Object->m_bIsStartCondValid;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnableCondValid") << ":";
	p_Stream << s_Object->m_bIsEnableCondValid;

	p_Stream << "}";
}

void SDramaControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaControllerSaveData s_Object;

	s_Object.m_bIsStartCondValid = bool(p_Document["m_bIsStartCondValid"]);

	s_Object.m_bIsEnableCondValid = bool(p_Document["m_bIsEnableCondValid"]);

	*reinterpret_cast<SDramaControllerSaveData*>(p_Target) = s_Object;
}

void SDramaControllerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IEscortOutSituation::TypeInfo = ZHMTypeInfo("IEscortOutSituation", sizeof(IEscortOutSituation), alignof(IEscortOutSituation), IEscortOutSituation::WriteJson, IEscortOutSituation::WriteSimpleJson, IEscortOutSituation::FromSimpleJson);

void IEscortOutSituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEscortOutSituation*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEscortOutSituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEscortOutSituation*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IEscortOutSituation::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IEscortOutSituation s_Object;

	*reinterpret_cast<IEscortOutSituation*>(p_Target) = s_Object;
}

void IEscortOutSituation::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SBlobsConfigResourceEntry::TypeInfo = ZHMTypeInfo("SBlobsConfigResourceEntry", sizeof(SBlobsConfigResourceEntry), alignof(SBlobsConfigResourceEntry), SBlobsConfigResourceEntry::WriteJson, SBlobsConfigResourceEntry::WriteSimpleJson, SBlobsConfigResourceEntry::FromSimpleJson);

void SBlobsConfigResourceEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBlobsConfigResourceEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("BlobRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->BlobRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SBlobsConfigResourceEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SBlobsConfigResourceEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Id") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << ",";

	p_Stream << JsonStr("BlobRid") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->BlobRid, p_Stream);

	p_Stream << "}";
}

void SBlobsConfigResourceEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBlobsConfigResourceEntry s_Object;

	s_Object.Id = std::string_view(p_Document["Id"]);

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["BlobRid"], &s_Item);
		s_Object.BlobRid = s_Item;
	}

	*reinterpret_cast<SBlobsConfigResourceEntry*>(p_Target) = s_Object;
}

void SBlobsConfigResourceEntry::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	Id.Serialize(p_Serializer, p_OwnOffset + offsetof(SBlobsConfigResourceEntry, Id));	BlobRid.Serialize(p_Serializer, p_OwnOffset + offsetof(SBlobsConfigResourceEntry, BlobRid));}

ZHMTypeInfo SGuardBodySituationMemberSaveData::TypeInfo = ZHMTypeInfo("SGuardBodySituationMemberSaveData", sizeof(SGuardBodySituationMemberSaveData), alignof(SGuardBodySituationMemberSaveData), SGuardBodySituationMemberSaveData::WriteJson, SGuardBodySituationMemberSaveData::WriteSimpleJson, SGuardBodySituationMemberSaveData::FromSimpleJson);

void SGuardBodySituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardBodySituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSearchingForMorgue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSearchingForMorgue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsExitingSuccessfulBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsExitingSuccessfulBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDeadBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodybag") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBodybag;
	p_Stream << "}";

	p_Stream << "}";
}

void SGuardBodySituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGuardBodySituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSearchingForMorgue") << ":";
	p_Stream << s_Object->m_bSearchingForMorgue;
	p_Stream << ",";

	p_Stream << JsonStr("m_IsExitingSuccessfulBehavior") << ":";
	p_Stream << s_Object->m_IsExitingSuccessfulBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadBody") << ":";
	p_Stream << s_Object->m_rDeadBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodybag") << ":";
	p_Stream << s_Object->m_rBodybag;

	p_Stream << "}";
}

void SGuardBodySituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGuardBodySituationMemberSaveData s_Object;

	s_Object.m_bSearchingForMorgue = bool(p_Document["m_bSearchingForMorgue"]);

	s_Object.m_IsExitingSuccessfulBehavior = bool(p_Document["m_IsExitingSuccessfulBehavior"]);

	s_Object.m_rDeadBody = static_cast<uint32>(int64_t(p_Document["m_rDeadBody"]));

	s_Object.m_rBodybag = static_cast<uint32>(int64_t(p_Document["m_rBodybag"]));

	*reinterpret_cast<SGuardBodySituationMemberSaveData*>(p_Target) = s_Object;
}

void SGuardBodySituationMemberSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo INetRelevancy::TypeInfo = ZHMTypeInfo("INetRelevancy", sizeof(INetRelevancy), alignof(INetRelevancy), INetRelevancy::WriteJson, INetRelevancy::WriteSimpleJson, INetRelevancy::FromSimpleJson);

void INetRelevancy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<INetRelevancy*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void INetRelevancy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<INetRelevancy*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void INetRelevancy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	INetRelevancy s_Object;

	*reinterpret_cast<INetRelevancy*>(p_Target) = s_Object;
}

void INetRelevancy::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMathMultiplyDivideSaveData_float32::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_float32", sizeof(SMathMultiplyDivideSaveData_float32), alignof(SMathMultiplyDivideSaveData_float32), SMathMultiplyDivideSaveData_float32::WriteJson, SMathMultiplyDivideSaveData_float32::WriteSimpleJson, SMathMultiplyDivideSaveData_float32::FromSimpleJson);

void SMathMultiplyDivideSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fA;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fB;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultiplyDivideSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << s_Object->m_fA;
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << s_Object->m_fB;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_float32::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultiplyDivideSaveData_float32 s_Object;

	s_Object.m_fA = static_cast<float32>(double(p_Document["m_fA"]));

	s_Object.m_fB = static_cast<float32>(double(p_Document["m_fB"]));

	s_Object.m_bDivide = bool(p_Document["m_bDivide"]);

	*reinterpret_cast<SMathMultiplyDivideSaveData_float32*>(p_Target) = s_Object;
}

void SMathMultiplyDivideSaveData_float32::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorAnimSetVariationIndexSaveData::TypeInfo = ZHMTypeInfo("SActorAnimSetVariationIndexSaveData", sizeof(SActorAnimSetVariationIndexSaveData), alignof(SActorAnimSetVariationIndexSaveData), SActorAnimSetVariationIndexSaveData::WriteJson, SActorAnimSetVariationIndexSaveData::WriteSimpleJson, SActorAnimSetVariationIndexSaveData::FromSimpleJson);

void SActorAnimSetVariationIndexSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAnimSetVariationIndexSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rAnimationSetDefinition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rAnimationSetDefinition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAnimSetVariationIndexSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAnimSetVariationIndexSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rAnimationSetDefinition") << ":";
	p_Stream << s_Object->m_rAnimationSetDefinition;
	p_Stream << ",";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;

	p_Stream << "}";
}

void SActorAnimSetVariationIndexSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorAnimSetVariationIndexSaveData s_Object;

	s_Object.m_rAnimationSetDefinition = static_cast<uint32>(int64_t(p_Document["m_rAnimationSetDefinition"]));

	s_Object.m_nIndex = static_cast<int32>(int64_t(p_Document["m_nIndex"]));

	*reinterpret_cast<SActorAnimSetVariationIndexSaveData*>(p_Target) = s_Object;
}

void SActorAnimSetVariationIndexSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAnimPlayerSaveData::TypeInfo = ZHMTypeInfo("SAnimPlayerSaveData", sizeof(SAnimPlayerSaveData), alignof(SAnimPlayerSaveData), SAnimPlayerSaveData::WriteJson, SAnimPlayerSaveData::WriteSimpleJson, SAnimPlayerSaveData::FromSimpleJson);

void SAnimPlayerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimPlayerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mTrajectoryQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTrajectoryQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTrajectoryTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTrajectoryTranslation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBoneTransformSaveData") << "," << JsonStr("$val") << ":";
		SBoneTransformSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAnimPlayerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimPlayerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mTrajectoryQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTrajectoryQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTrajectoryTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTrajectoryTranslation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		SBoneTransformSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAnimPlayerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimPlayerSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTrajectoryQuaterion"], &s_Item);
		s_Object.mTrajectoryQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTrajectoryTranslation"], &s_Item);
		s_Object.mTrajectoryTranslation = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aBones"])
	{
		SBoneTransformSaveData s_ArrayItem;
		SBoneTransformSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aBones.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SAnimPlayerSaveData*>(p_Target) = s_Object;
}

void SAnimPlayerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	mTrajectoryQuaterion.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimPlayerSaveData, mTrajectoryQuaterion));	mTrajectoryTranslation.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimPlayerSaveData, mTrajectoryTranslation));	m_aBones.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimPlayerSaveData, m_aBones));}

ZHMTypeInfo SActorKeywordProxySaveData::TypeInfo = ZHMTypeInfo("SActorKeywordProxySaveData", sizeof(SActorKeywordProxySaveData), alignof(SActorKeywordProxySaveData), SActorKeywordProxySaveData::WriteJson, SActorKeywordProxySaveData::WriteSimpleJson, SActorKeywordProxySaveData::FromSimpleJson);

void SActorKeywordProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorKeywordProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorKeywordProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorKeywordProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorKeywordProxySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorKeywordProxySaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorKeywordProxySaveData*>(p_Target) = s_Object;
}

void SActorKeywordProxySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorKeywordProxiesSaveData::TypeInfo = ZHMTypeInfo("SActorKeywordProxiesSaveData", sizeof(SActorKeywordProxiesSaveData), alignof(SActorKeywordProxiesSaveData), SActorKeywordProxiesSaveData::WriteJson, SActorKeywordProxiesSaveData::WriteSimpleJson, SActorKeywordProxiesSaveData::FromSimpleJson);

void SActorKeywordProxiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorKeywordProxySaveData") << "," << JsonStr("$val") << ":";
		SActorKeywordProxySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorKeywordProxiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SActorKeywordProxySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorKeywordProxiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorKeywordProxiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SActorKeywordProxySaveData s_ArrayItem;
		SActorKeywordProxySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActorKeywordProxiesSaveData*>(p_Target) = s_Object;
}

void SActorKeywordProxiesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorKeywordProxiesSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorKeywordProxiesSaveData, m_aData));}

ZHMTypeInfo SAnimatedActorActOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorActOrderSaveData", sizeof(SAnimatedActorActOrderSaveData), alignof(SAnimatedActorActOrderSaveData), SAnimatedActorActOrderSaveData::WriteJson, SAnimatedActorActOrderSaveData::WriteSimpleJson, SAnimatedActorActOrderSaveData::FromSimpleJson);

void SAnimatedActorActOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorActOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bOverrideExistingAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOverrideExistingAct;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nForcedAnimationNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nForcedAnimationNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rChildNetworkAct;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rListener") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rListener;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vOriginPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginQuaternion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vOriginQuaternion, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorActOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorActOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bOverrideExistingAct") << ":";
	p_Stream << s_Object->m_bOverrideExistingAct;
	p_Stream << ",";

	p_Stream << JsonStr("m_nForcedAnimationNode") << ":";
	p_Stream << s_Object->m_nForcedAnimationNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkAct") << ":";
	p_Stream << s_Object->m_rChildNetworkAct;
	p_Stream << ",";

	p_Stream << JsonStr("m_rListener") << ":";
	p_Stream << s_Object->m_rListener;
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vOriginPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginQuaternion") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vOriginQuaternion, p_Stream);

	p_Stream << "}";
}

void SAnimatedActorActOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorActOrderSaveData s_Object;

	s_Object.m_bOverrideExistingAct = bool(p_Document["m_bOverrideExistingAct"]);

	s_Object.m_nForcedAnimationNode = static_cast<uint32>(int64_t(p_Document["m_nForcedAnimationNode"]));

	s_Object.m_rChildNetworkAct = static_cast<uint32>(int64_t(p_Document["m_rChildNetworkAct"]));

	s_Object.m_rListener = static_cast<uint32>(int64_t(p_Document["m_rListener"]));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vOriginPosition"], &s_Item);
		s_Object.m_vOriginPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vOriginQuaternion"], &s_Item);
		s_Object.m_vOriginQuaternion = s_Item;
	}

	*reinterpret_cast<SAnimatedActorActOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorActOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vOriginPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorActOrderSaveData, m_vOriginPosition));	m_vOriginQuaternion.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorActOrderSaveData, m_vOriginQuaternion));}

ZHMTypeInfo SMatrix43::TypeInfo = ZHMTypeInfo("SMatrix43", sizeof(SMatrix43), alignof(SMatrix43), SMatrix43::WriteJson, SMatrix43::WriteSimpleJson, SMatrix43::FromSimpleJson);

void SMatrix43::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix43*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("XAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->XAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->YAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->ZAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->Trans, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix43::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix43*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("XAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->XAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->YAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->ZAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	SVector3::WriteSimpleJson(&s_Object->Trans, p_Stream);

	p_Stream << "}";
}

void SMatrix43::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix43 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["XAxis"], &s_Item);
		s_Object.XAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["YAxis"], &s_Item);
		s_Object.YAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["ZAxis"], &s_Item);
		s_Object.ZAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["Trans"], &s_Item);
		s_Object.Trans = s_Item;
	}

	*reinterpret_cast<SMatrix43*>(p_Target) = s_Object;
}

void SMatrix43::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	XAxis.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix43, XAxis));	YAxis.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix43, YAxis));	ZAxis.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix43, ZAxis));	Trans.Serialize(p_Serializer, p_OwnOffset + offsetof(SMatrix43, Trans));}

ZHMTypeInfo SEvacuateSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SEvacuateSituationMemberSaveData", sizeof(SEvacuateSituationMemberSaveData), alignof(SEvacuateSituationMemberSaveData), SEvacuateSituationMemberSaveData::WriteJson, SEvacuateSituationMemberSaveData::WriteSimpleJson, SEvacuateSituationMemberSaveData::FromSimpleJson);

void SEvacuateSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;

	p_Stream << "}";
}

void SEvacuateSituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEvacuateSituationMemberSaveData s_Object;

	s_Object.m_pGuardDutyPoint = static_cast<uint32>(int64_t(p_Document["m_pGuardDutyPoint"]));

	s_Object.m_nPatrolWaypointIndex = static_cast<int32>(int64_t(p_Document["m_nPatrolWaypointIndex"]));

	s_Object.m_nPatrolWaypointSubIndex = static_cast<uint32>(int64_t(p_Document["m_nPatrolWaypointSubIndex"]));

	*reinterpret_cast<SEvacuateSituationMemberSaveData*>(p_Target) = s_Object;
}

void SEvacuateSituationMemberSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SOnlineEvent::TypeInfo = ZHMTypeInfo("SOnlineEvent", sizeof(SOnlineEvent), alignof(SOnlineEvent), SOnlineEvent::WriteJson, SOnlineEvent::WriteSimpleJson, SOnlineEvent::FromSimpleJson);

void SOnlineEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOnlineEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->data, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SOnlineEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SOnlineEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("data") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->data, p_Stream);

	p_Stream << "}";
}

void SOnlineEvent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SOnlineEvent s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["data"], &s_Item);
		s_Object.data = s_Item;
	}

	*reinterpret_cast<SOnlineEvent*>(p_Target) = s_Object;
}

void SOnlineEvent::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SOnlineEvent, sName));	data.Serialize(p_Serializer, p_OwnOffset + offsetof(SOnlineEvent, data));}

ZHMTypeInfo SFleeOrderSaveData::TypeInfo = ZHMTypeInfo("SFleeOrderSaveData", sizeof(SFleeOrderSaveData), alignof(SFleeOrderSaveData), SFleeOrderSaveData::WriteJson, SFleeOrderSaveData::WriteSimpleJson, SFleeOrderSaveData::FromSimpleJson);

void SFleeOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFleeOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eHelpReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eHelpReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eHelpReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridNodeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridNodeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFleeForHelp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFleeForHelp;
	p_Stream << "}";

	p_Stream << "}";
}

void SFleeOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFleeOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eHelpReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eHelpReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridNodeIndex") << ":";
	p_Stream << s_Object->m_nGridNodeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFleeForHelp") << ":";
	p_Stream << s_Object->m_bFleeForHelp;

	p_Stream << "}";
}

void SFleeOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFleeOrderSaveData s_Object;

	s_Object.m_eHelpReason = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_eHelpReason"])));

	s_Object.m_nGridNodeIndex = static_cast<uint16>(int64_t(p_Document["m_nGridNodeIndex"]));

	s_Object.m_bFleeForHelp = bool(p_Document["m_bFleeForHelp"]);

	*reinterpret_cast<SFleeOrderSaveData*>(p_Target) = s_Object;
}

void SFleeOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SExternalEntityTemplatePinConnection::TypeInfo = ZHMTypeInfo("SExternalEntityTemplatePinConnection", sizeof(SExternalEntityTemplatePinConnection), alignof(SExternalEntityTemplatePinConnection), SExternalEntityTemplatePinConnection::WriteJson, SExternalEntityTemplatePinConnection::WriteSimpleJson, SExternalEntityTemplatePinConnection::FromSimpleJson);

void SExternalEntityTemplatePinConnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExternalEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fromEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->fromEntity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->toEntity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->constantPinValue, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SExternalEntityTemplatePinConnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExternalEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fromEntity") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->fromEntity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("toEntity") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->toEntity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	ZVariant::WriteSimpleJson(&s_Object->constantPinValue, p_Stream);

	p_Stream << "}";
}

void SExternalEntityTemplatePinConnection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExternalEntityTemplatePinConnection s_Object;

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["fromEntity"], &s_Item);
		s_Object.fromEntity = s_Item;
	}

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["toEntity"], &s_Item);
		s_Object.toEntity = s_Item;
	}

	s_Object.fromPinName = std::string_view(p_Document["fromPinName"]);

	s_Object.toPinName = std::string_view(p_Document["toPinName"]);

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["constantPinValue"], &s_Item);
		s_Object.constantPinValue = s_Item;
	}

	*reinterpret_cast<SExternalEntityTemplatePinConnection*>(p_Target) = s_Object;
}

void SExternalEntityTemplatePinConnection::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	fromEntity.Serialize(p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, fromEntity));	toEntity.Serialize(p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, toEntity));	fromPinName.Serialize(p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, fromPinName));	toPinName.Serialize(p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, toPinName));	constantPinValue.Serialize(p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, constantPinValue));}

ZHMTypeInfo STemplateEntityBlueprint::TypeInfo = ZHMTypeInfo("STemplateEntityBlueprint", sizeof(STemplateEntityBlueprint), alignof(STemplateEntityBlueprint), STemplateEntityBlueprint::WriteJson, STemplateEntityBlueprint::WriteSimpleJson, STemplateEntityBlueprint::FromSimpleJson);

void STemplateEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("subType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->subType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item = s_Object->subEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STemplateBlueprintSubEntity") << "," << JsonStr("$val") << ":";
		STemplateBlueprintSubEntity::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnections.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnections[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pinConnections.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("inputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->inputPinForwardings.size(); ++i)
	{
		auto& s_Item = s_Object->inputPinForwardings[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->inputPinForwardings.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("outputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->outputPinForwardings.size(); ++i)
	{
		auto& s_Item = s_Object->outputPinForwardings[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->outputPinForwardings.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("overrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->overrideDeletes.size(); ++i)
	{
		auto& s_Item = s_Object->overrideDeletes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
		SEntityTemplateReference::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->overrideDeletes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnectionOverrides[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExternalEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SExternalEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pinConnectionOverrides.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrideDeletes.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnectionOverrideDeletes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExternalEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SExternalEntityTemplatePinConnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pinConnectionOverrideDeletes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STemplateEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("subType") << ":";
	p_Stream << s_Object->subType;
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item = s_Object->subEntities[i];
		STemplateBlueprintSubEntity::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << s_Item;

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnections.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnections[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->pinConnections.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("inputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->inputPinForwardings.size(); ++i)
	{
		auto& s_Item = s_Object->inputPinForwardings[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->inputPinForwardings.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("outputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->outputPinForwardings.size(); ++i)
	{
		auto& s_Item = s_Object->outputPinForwardings[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->outputPinForwardings.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("overrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->overrideDeletes.size(); ++i)
	{
		auto& s_Item = s_Object->overrideDeletes[i];
		SEntityTemplateReference::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->overrideDeletes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrides.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnectionOverrides[i];
		SExternalEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->pinConnectionOverrides.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrideDeletes.size(); ++i)
	{
		auto& s_Item = s_Object->pinConnectionOverrideDeletes[i];
		SExternalEntityTemplatePinConnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->pinConnectionOverrideDeletes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntityBlueprint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateEntityBlueprint s_Object;

	s_Object.subType = static_cast<int32>(int64_t(p_Document["subType"]));

	s_Object.rootEntityIndex = static_cast<int32>(int64_t(p_Document["rootEntityIndex"]));

	for (simdjson::ondemand::value s_Item : p_Document["subEntities"])
	{
		STemplateBlueprintSubEntity s_ArrayItem;
		STemplateBlueprintSubEntity::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.subEntities.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["externalSceneTypeIndicesInResourceHeader"])
	{
		s_Object.externalSceneTypeIndicesInResourceHeader.push_back(static_cast<int32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["pinConnections"])
	{
		SEntityTemplatePinConnection s_ArrayItem;
		SEntityTemplatePinConnection::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.pinConnections.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["inputPinForwardings"])
	{
		SEntityTemplatePinConnection s_ArrayItem;
		SEntityTemplatePinConnection::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.inputPinForwardings.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["outputPinForwardings"])
	{
		SEntityTemplatePinConnection s_ArrayItem;
		SEntityTemplatePinConnection::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.outputPinForwardings.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["overrideDeletes"])
	{
		SEntityTemplateReference s_ArrayItem;
		SEntityTemplateReference::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.overrideDeletes.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["pinConnectionOverrides"])
	{
		SExternalEntityTemplatePinConnection s_ArrayItem;
		SExternalEntityTemplatePinConnection::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.pinConnectionOverrides.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["pinConnectionOverrideDeletes"])
	{
		SExternalEntityTemplatePinConnection s_ArrayItem;
		SExternalEntityTemplatePinConnection::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.pinConnectionOverrideDeletes.push_back(s_ArrayItem);
	}

	*reinterpret_cast<STemplateEntityBlueprint*>(p_Target) = s_Object;
}

void STemplateEntityBlueprint::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	subEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, subEntities));	externalSceneTypeIndicesInResourceHeader.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, externalSceneTypeIndicesInResourceHeader));	pinConnections.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, pinConnections));	inputPinForwardings.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, inputPinForwardings));	outputPinForwardings.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, outputPinForwardings));	overrideDeletes.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, overrideDeletes));	pinConnectionOverrides.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, pinConnectionOverrides));	pinConnectionOverrideDeletes.Serialize(p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, pinConnectionOverrideDeletes));}

ZHMTypeInfo SRenderVideoPlayerSaveData::TypeInfo = ZHMTypeInfo("SRenderVideoPlayerSaveData", sizeof(SRenderVideoPlayerSaveData), alignof(SRenderVideoPlayerSaveData), SRenderVideoPlayerSaveData::WriteJson, SRenderVideoPlayerSaveData::WriteSimpleJson, SRenderVideoPlayerSaveData::FromSimpleJson);

void SRenderVideoPlayerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRenderVideoPlayerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPlaying") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlaying;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLooping") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLooping;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUseAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstFrame") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirstFrame;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVideoError") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVideoError;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldBeStopped") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShouldBeStopped;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_LastVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_LastVisible, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_StartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_StartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RunTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_RunTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SRenderVideoPlayerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRenderVideoPlayerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPlaying") << ":";
	p_Stream << s_Object->m_bPlaying;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLooping") << ":";
	p_Stream << s_Object->m_bLooping;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseAlpha") << ":";
	p_Stream << s_Object->m_bUseAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstFrame") << ":";
	p_Stream << s_Object->m_bFirstFrame;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << s_Object->m_bRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVideoError") << ":";
	p_Stream << s_Object->m_bVideoError;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldBeStopped") << ":";
	p_Stream << s_Object->m_bShouldBeStopped;
	p_Stream << ",";

	p_Stream << JsonStr("m_LastVisible") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_LastVisible, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_StartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_StartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_RunTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_RunTime, p_Stream);

	p_Stream << "}";
}

void SRenderVideoPlayerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRenderVideoPlayerSaveData s_Object;

	s_Object.m_bPlaying = bool(p_Document["m_bPlaying"]);

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	s_Object.m_bLooping = bool(p_Document["m_bLooping"]);

	s_Object.m_bUseAlpha = bool(p_Document["m_bUseAlpha"]);

	s_Object.m_bFirstFrame = bool(p_Document["m_bFirstFrame"]);

	s_Object.m_bRunning = bool(p_Document["m_bRunning"]);

	s_Object.m_bVideoError = bool(p_Document["m_bVideoError"]);

	s_Object.m_bShouldBeStopped = bool(p_Document["m_bShouldBeStopped"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_LastVisible"], &s_Item);
		s_Object.m_LastVisible = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_StartTime"], &s_Item);
		s_Object.m_StartTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_RunTime"], &s_Item);
		s_Object.m_RunTime = s_Item;
	}

	*reinterpret_cast<SRenderVideoPlayerSaveData*>(p_Target) = s_Object;
}

void SRenderVideoPlayerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_LastVisible.Serialize(p_Serializer, p_OwnOffset + offsetof(SRenderVideoPlayerSaveData, m_LastVisible));	m_StartTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SRenderVideoPlayerSaveData, m_StartTime));	m_RunTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SRenderVideoPlayerSaveData, m_RunTime));}

ZHMTypeInfo SConditionalTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SConditionalTimerEntitySaveData", sizeof(SConditionalTimerEntitySaveData), alignof(SConditionalTimerEntitySaveData), SConditionalTimerEntitySaveData::WriteJson, SConditionalTimerEntitySaveData::WriteSimpleJson, SConditionalTimerEntitySaveData::FromSimpleJson);

void SConditionalTimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConditionalTimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SConditionalTimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConditionalTimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << s_Object->m_bValue;

	p_Stream << "}";
}

void SConditionalTimerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SConditionalTimerEntitySaveData s_Object;

	s_Object.m_nInterval = static_cast<int32>(int64_t(p_Document["m_nInterval"]));

	s_Object.m_nRemaining = static_cast<int32>(int64_t(p_Document["m_nRemaining"]));

	s_Object.m_bActive = bool(p_Document["m_bActive"]);

	s_Object.m_bValue = bool(p_Document["m_bValue"]);

	*reinterpret_cast<SConditionalTimerEntitySaveData*>(p_Target) = s_Object;
}

void SConditionalTimerEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorDynamicTemplateHandlerSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateHandlerSaveData", sizeof(SActorDynamicTemplateHandlerSaveData), alignof(SActorDynamicTemplateHandlerSaveData), SActorDynamicTemplateHandlerSaveData::WriteJson, SActorDynamicTemplateHandlerSaveData::WriteSimpleJson, SActorDynamicTemplateHandlerSaveData::FromSimpleJson);

void SActorDynamicTemplateHandlerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateHandlerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSetpiece") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSetpiece;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDynamicTemplateHandlerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateHandlerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSetpiece") << ":";
	p_Stream << s_Object->m_rSetpiece;

	p_Stream << "}";
}

void SActorDynamicTemplateHandlerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorDynamicTemplateHandlerSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	s_Object.m_rSetpiece = static_cast<uint32>(int64_t(p_Document["m_rSetpiece"]));

	*reinterpret_cast<SActorDynamicTemplateHandlerSaveData*>(p_Target) = s_Object;
}

void SActorDynamicTemplateHandlerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAimAssistObjectSaveData::TypeInfo = ZHMTypeInfo("SAimAssistObjectSaveData", sizeof(SAimAssistObjectSaveData), alignof(SAimAssistObjectSaveData), SAimAssistObjectSaveData::WriteJson, SAimAssistObjectSaveData::WriteSimpleJson, SAimAssistObjectSaveData::FromSimpleJson);

void SAimAssistObjectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAimAssistObjectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bHasBeenStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasBeenStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasAimAssistActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasAimAssistActivated;
	p_Stream << "}";

	p_Stream << "}";
}

void SAimAssistObjectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAimAssistObjectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bHasBeenStarted") << ":";
	p_Stream << s_Object->m_bHasBeenStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasAimAssistActivated") << ":";
	p_Stream << s_Object->m_bWasAimAssistActivated;

	p_Stream << "}";
}

void SAimAssistObjectSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAimAssistObjectSaveData s_Object;

	s_Object.m_bHasBeenStarted = bool(p_Document["m_bHasBeenStarted"]);

	s_Object.m_bWasAimAssistActivated = bool(p_Document["m_bWasAimAssistActivated"]);

	*reinterpret_cast<SAimAssistObjectSaveData*>(p_Target) = s_Object;
}

void SAimAssistObjectSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SExposedEntityTypeDescriptor::TypeInfo = ZHMTypeInfo("SExposedEntityTypeDescriptor", sizeof(SExposedEntityTypeDescriptor), alignof(SExposedEntityTypeDescriptor), SExposedEntityTypeDescriptor::WriteJson, SExposedEntityTypeDescriptor::WriteSimpleJson, SExposedEntityTypeDescriptor::FromSimpleJson);

void SExposedEntityTypeDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedEntityTypeDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("types") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->types.size(); ++i)
	{
		auto& s_Item = s_Object->types[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->types.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aSupportedTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aSupportedTypes.size(); ++i)
	{
		auto& s_Item = s_Object->aSupportedTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->aSupportedTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SExposedEntityTypeDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedEntityTypeDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("types") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->types.size(); ++i)
	{
		auto& s_Item = s_Object->types[i];
		ZResourceID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->types.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aSupportedTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aSupportedTypes.size(); ++i)
	{
		auto& s_Item = s_Object->aSupportedTypes[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->aSupportedTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SExposedEntityTypeDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExposedEntityTypeDescriptor s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	for (simdjson::ondemand::value s_Item : p_Document["types"])
	{
		ZResourceID s_ArrayItem;
		ZResourceID::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.types.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["aSupportedTypes"])
	{
		s_Object.aSupportedTypes.push_back(std::string_view(s_Item));
	}

	*reinterpret_cast<SExposedEntityTypeDescriptor*>(p_Target) = s_Object;
}

void SExposedEntityTypeDescriptor::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedEntityTypeDescriptor, sName));	types.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedEntityTypeDescriptor, types));	aSupportedTypes.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedEntityTypeDescriptor, aSupportedTypes));}

ZHMTypeInfo IHumanBody::TypeInfo = ZHMTypeInfo("IHumanBody", sizeof(IHumanBody), alignof(IHumanBody), IHumanBody::WriteJson, IHumanBody::WriteSimpleJson, IHumanBody::FromSimpleJson);

void IHumanBody::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHumanBody*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHumanBody::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHumanBody*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IHumanBody::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IHumanBody s_Object;

	*reinterpret_cast<IHumanBody*>(p_Target) = s_Object;
}

void IHumanBody::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SObserversGroupSaveData::TypeInfo = ZHMTypeInfo("SObserversGroupSaveData", sizeof(SObserversGroupSaveData), alignof(SObserversGroupSaveData), SObserversGroupSaveData::WriteJson, SObserversGroupSaveData::WriteSimpleJson, SObserversGroupSaveData::FromSimpleJson);

void SObserversGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SObserversGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aWaitingObservers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_observerDistanceMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_observerDistanceMax;
	p_Stream << "}";

	p_Stream << "}";
}

void SObserversGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SObserversGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item = s_Object->m_aWaitingObservers[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_observerDistanceMax") << ":";
	p_Stream << s_Object->m_observerDistanceMax;

	p_Stream << "}";
}

void SObserversGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SObserversGroupSaveData s_Object;

	s_Object.m_target = static_cast<uint32>(int64_t(p_Document["m_target"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_aWaitingObservers"])
	{
		s_Object.m_aWaitingObservers.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	s_Object.m_observerDistanceMax = static_cast<float32>(double(p_Document["m_observerDistanceMax"]));

	*reinterpret_cast<SObserversGroupSaveData*>(p_Target) = s_Object;
}

void SObserversGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aWaitingObservers.Serialize(p_Serializer, p_OwnOffset + offsetof(SObserversGroupSaveData, m_aWaitingObservers));}

ZHMTypeInfo SLockdownManagerAIZoneSaveData::TypeInfo = ZHMTypeInfo("SLockdownManagerAIZoneSaveData", sizeof(SLockdownManagerAIZoneSaveData), alignof(SLockdownManagerAIZoneSaveData), SLockdownManagerAIZoneSaveData::WriteJson, SLockdownManagerAIZoneSaveData::WriteSimpleJson, SLockdownManagerAIZoneSaveData::FromSimpleJson);

void SLockdownManagerAIZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLockdownManagerAIZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tExpiry") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiry, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiryHeroOutside") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiryHeroOutside, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rZone;
	p_Stream << "}";

	p_Stream << "}";
}

void SLockdownManagerAIZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLockdownManagerAIZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tExpiry") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiry, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiryHeroOutside") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiryHeroOutside, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rZone") << ":";
	p_Stream << s_Object->m_rZone;

	p_Stream << "}";
}

void SLockdownManagerAIZoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLockdownManagerAIZoneSaveData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tExpiry"], &s_Item);
		s_Object.m_tExpiry = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tExpiryHeroOutside"], &s_Item);
		s_Object.m_tExpiryHeroOutside = s_Item;
	}

	s_Object.m_rZone = static_cast<uint32>(int64_t(p_Document["m_rZone"]));

	*reinterpret_cast<SLockdownManagerAIZoneSaveData*>(p_Target) = s_Object;
}

void SLockdownManagerAIZoneSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tExpiry.Serialize(p_Serializer, p_OwnOffset + offsetof(SLockdownManagerAIZoneSaveData, m_tExpiry));	m_tExpiryHeroOutside.Serialize(p_Serializer, p_OwnOffset + offsetof(SLockdownManagerAIZoneSaveData, m_tExpiryHeroOutside));}

ZHMTypeInfo SCrowdServiceSaveData::TypeInfo = ZHMTypeInfo("SCrowdServiceSaveData", sizeof(SCrowdServiceSaveData), alignof(SCrowdServiceSaveData), SCrowdServiceSaveData::WriteJson, SCrowdServiceSaveData::WriteSimpleJson, SCrowdServiceSaveData::FromSimpleJson);

void SCrowdServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aDeadBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDeadBodies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdBodySaveData") << "," << JsonStr("$val") << ":";
		SCrowdBodySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDeadBodies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptiblePool") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptiblePool.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPerceptiblePool[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aPerceptiblePool.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptibleActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptibleActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPerceptibleActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aPerceptibleActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aDeadBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDeadBodies[i];
		SCrowdBodySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aDeadBodies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptiblePool") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptiblePool.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPerceptiblePool[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aPerceptiblePool.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptibleActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptibleActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPerceptibleActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aPerceptibleActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aDeadBodies"])
	{
		SCrowdBodySaveData s_ArrayItem;
		SCrowdBodySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aDeadBodies.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aPerceptiblePool"])
	{
		s_Object.m_aPerceptiblePool.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aPerceptibleActors"])
	{
		s_Object.m_aPerceptibleActors.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SCrowdServiceSaveData*>(p_Target) = s_Object;
}

void SCrowdServiceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aDeadBodies.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdServiceSaveData, m_aDeadBodies));	m_aPerceptiblePool.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdServiceSaveData, m_aPerceptiblePool));	m_aPerceptibleActors.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdServiceSaveData, m_aPerceptibleActors));}

ZHMTypeInfo SEvacuateSituationSaveData::TypeInfo = ZHMTypeInfo("SEvacuateSituationSaveData", sizeof(SEvacuateSituationSaveData), alignof(SEvacuateSituationSaveData), SEvacuateSituationSaveData::WriteJson, SEvacuateSituationSaveData::WriteSimpleJson, SEvacuateSituationSaveData::FromSimpleJson);

void SEvacuateSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSeriousSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastSeriousSituation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastThreat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastThreat, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tresspassGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_tresspassGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_evacuateGroups") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_evacuateGroups.size(); ++i)
	{
		auto& s_Item = s_Object->m_evacuateGroups[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_evacuateGroups.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_activeSafeRooms") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_activeSafeRooms.size(); ++i)
	{
		auto& s_Item = s_Object->m_activeSafeRooms[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_activeSafeRooms.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_vipsUnderFire") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_vipsUnderFire.size(); ++i)
	{
		auto& s_Item = s_Object->m_vipsUnderFire[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_vipsUnderFire.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEvacuateSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSeriousSituation") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastSeriousSituation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastThreat") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastThreat, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tresspassGroup") << ":";
	p_Stream << s_Object->m_tresspassGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_evacuateGroups") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_evacuateGroups.size(); ++i)
	{
		auto& s_Item = s_Object->m_evacuateGroups[i];
		p_Stream << s_Item;

		if (i < s_Object->m_evacuateGroups.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_activeSafeRooms") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_activeSafeRooms.size(); ++i)
	{
		auto& s_Item = s_Object->m_activeSafeRooms[i];
		p_Stream << s_Item;

		if (i < s_Object->m_activeSafeRooms.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_vipsUnderFire") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_vipsUnderFire.size(); ++i)
	{
		auto& s_Item = s_Object->m_vipsUnderFire[i];
		p_Stream << s_Item;

		if (i < s_Object->m_vipsUnderFire.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEvacuateSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEvacuateSituationSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastSeriousSituation"], &s_Item);
		s_Object.m_tLastSeriousSituation = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastThreat"], &s_Item);
		s_Object.m_tLastThreat = s_Item;
	}

	s_Object.m_tresspassGroup = static_cast<int32>(int64_t(p_Document["m_tresspassGroup"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_evacuateGroups"])
	{
		s_Object.m_evacuateGroups.push_back(static_cast<int32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_activeSafeRooms"])
	{
		s_Object.m_activeSafeRooms.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_vipsUnderFire"])
	{
		s_Object.m_vipsUnderFire.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SEvacuateSituationSaveData*>(p_Target) = s_Object;
}

void SEvacuateSituationSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_fsmState));	m_tLastSeriousSituation.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_tLastSeriousSituation));	m_tLastThreat.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_tLastThreat));	m_evacuateGroups.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_evacuateGroups));	m_activeSafeRooms.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_activeSafeRooms));	m_vipsUnderFire.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_vipsUnderFire));}

ZHMTypeInfo SProgressTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SProgressTimerEntitySaveData", sizeof(SProgressTimerEntitySaveData), alignof(SProgressTimerEntitySaveData), SProgressTimerEntitySaveData::WriteJson, SProgressTimerEntitySaveData::WriteSimpleJson, SProgressTimerEntitySaveData::FromSimpleJson);

void SProgressTimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SProgressTimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SProgressTimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SProgressTimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << s_Object->m_bValue;

	p_Stream << "}";
}

void SProgressTimerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SProgressTimerEntitySaveData s_Object;

	s_Object.m_nInterval = static_cast<int32>(int64_t(p_Document["m_nInterval"]));

	s_Object.m_nRemaining = static_cast<int32>(int64_t(p_Document["m_nRemaining"]));

	s_Object.m_bValue = bool(p_Document["m_bValue"]);

	*reinterpret_cast<SProgressTimerEntitySaveData*>(p_Target) = s_Object;
}

void SProgressTimerEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAudioEmitterRTPCSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterRTPCSaveData", sizeof(SAudioEmitterRTPCSaveData), alignof(SAudioEmitterRTPCSaveData), SAudioEmitterRTPCSaveData::WriteJson, SAudioEmitterRTPCSaveData::WriteSimpleJson, SAudioEmitterRTPCSaveData::FromSimpleJson);

void SAudioEmitterRTPCSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterRTPCSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nParamId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nParamId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterRTPCSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterRTPCSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nParamId") << ":";
	p_Stream << s_Object->m_nParamId;
	p_Stream << ",";

	p_Stream << JsonStr("m_fValue") << ":";
	p_Stream << s_Object->m_fValue;

	p_Stream << "}";
}

void SAudioEmitterRTPCSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterRTPCSaveData s_Object;

	s_Object.m_nParamId = static_cast<uint32>(int64_t(p_Document["m_nParamId"]));

	s_Object.m_fValue = static_cast<float32>(double(p_Document["m_fValue"]));

	*reinterpret_cast<SAudioEmitterRTPCSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterRTPCSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SLocalizedVideoData::TypeInfo = ZHMTypeInfo("SLocalizedVideoData", sizeof(SLocalizedVideoData), alignof(SLocalizedVideoData), SLocalizedVideoData::WriteJson, SLocalizedVideoData::WriteSimpleJson, SLocalizedVideoData::FromSimpleJson);

void SLocalizedVideoData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLocalizedVideoData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("AudioLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->AudioLanguages.size(); ++i)
	{
		auto& s_Item = s_Object->AudioLanguages[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->AudioLanguages.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("VideoRidsPerAudioLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->VideoRidsPerAudioLanguage.size(); ++i)
	{
		auto& s_Item = s_Object->VideoRidsPerAudioLanguage[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
		ZRuntimeResourceID::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->VideoRidsPerAudioLanguage.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleLanguages.size(); ++i)
	{
		auto& s_Item = s_Object->SubtitleLanguages[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->SubtitleLanguages.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleMarkupsPerLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleMarkupsPerLanguage.size(); ++i)
	{
		auto& s_Item = s_Object->SubtitleMarkupsPerLanguage[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->SubtitleMarkupsPerLanguage.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SLocalizedVideoData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLocalizedVideoData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("AudioLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->AudioLanguages.size(); ++i)
	{
		auto& s_Item = s_Object->AudioLanguages[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->AudioLanguages.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("VideoRidsPerAudioLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->VideoRidsPerAudioLanguage.size(); ++i)
	{
		auto& s_Item = s_Object->VideoRidsPerAudioLanguage[i];
		ZRuntimeResourceID::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->VideoRidsPerAudioLanguage.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleLanguages.size(); ++i)
	{
		auto& s_Item = s_Object->SubtitleLanguages[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->SubtitleLanguages.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleMarkupsPerLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleMarkupsPerLanguage.size(); ++i)
	{
		auto& s_Item = s_Object->SubtitleMarkupsPerLanguage[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->SubtitleMarkupsPerLanguage.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLocalizedVideoData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLocalizedVideoData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["AudioLanguages"])
	{
		s_Object.AudioLanguages.push_back(std::string_view(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["VideoRidsPerAudioLanguage"])
	{
		ZRuntimeResourceID s_ArrayItem;
		ZRuntimeResourceID::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.VideoRidsPerAudioLanguage.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["SubtitleLanguages"])
	{
		s_Object.SubtitleLanguages.push_back(std::string_view(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["SubtitleMarkupsPerLanguage"])
	{
		s_Object.SubtitleMarkupsPerLanguage.push_back(std::string_view(s_Item));
	}

	*reinterpret_cast<SLocalizedVideoData*>(p_Target) = s_Object;
}

void SLocalizedVideoData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	AudioLanguages.Serialize(p_Serializer, p_OwnOffset + offsetof(SLocalizedVideoData, AudioLanguages));	VideoRidsPerAudioLanguage.Serialize(p_Serializer, p_OwnOffset + offsetof(SLocalizedVideoData, VideoRidsPerAudioLanguage));	SubtitleLanguages.Serialize(p_Serializer, p_OwnOffset + offsetof(SLocalizedVideoData, SubtitleLanguages));	SubtitleMarkupsPerLanguage.Serialize(p_Serializer, p_OwnOffset + offsetof(SLocalizedVideoData, SubtitleMarkupsPerLanguage));}

ZHMTypeInfo SPerceptibleCrowdBodySaveData::TypeInfo = ZHMTypeInfo("SPerceptibleCrowdBodySaveData", sizeof(SPerceptibleCrowdBodySaveData), alignof(SPerceptibleCrowdBodySaveData), SPerceptibleCrowdBodySaveData::WriteJson, SPerceptibleCrowdBodySaveData::WriteSimpleJson, SPerceptibleCrowdBodySaveData::FromSimpleJson);

void SPerceptibleCrowdBodySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPerceptibleCrowdBodySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCombatZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCombatZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSharedKnowledge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSharedKnowledge;
	p_Stream << "}";

	p_Stream << "}";
}

void SPerceptibleCrowdBodySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPerceptibleCrowdBodySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCombatZone") << ":";
	p_Stream << s_Object->m_rCombatZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSharedKnowledge") << ":";
	p_Stream << s_Object->m_rSharedKnowledge;

	p_Stream << "}";
}

void SPerceptibleCrowdBodySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPerceptibleCrowdBodySaveData s_Object;

	s_Object.m_rCombatZone = static_cast<uint32>(int64_t(p_Document["m_rCombatZone"]));

	s_Object.m_rSharedKnowledge = static_cast<int32>(int64_t(p_Document["m_rSharedKnowledge"]));

	*reinterpret_cast<SPerceptibleCrowdBodySaveData*>(p_Target) = s_Object;
}

void SPerceptibleCrowdBodySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SSituationOrderSaveData::TypeInfo = ZHMTypeInfo("SSituationOrderSaveData", sizeof(SSituationOrderSaveData), alignof(SSituationOrderSaveData), SSituationOrderSaveData::WriteJson, SSituationOrderSaveData::WriteSimpleJson, SSituationOrderSaveData::FromSimpleJson);

void SSituationOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSituationOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTarget") << ":";
	p_Stream << s_Object->m_nTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasPosition") << ":";
	p_Stream << s_Object->m_bHasPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomData, p_Stream);

	p_Stream << "}";
}

void SSituationOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationOrderSaveData s_Object;

	s_Object.m_sClassTypeName = std::string_view(p_Document["m_sClassTypeName"]);

	s_Object.m_eType = static_cast<EAISharedEventType>(ZHMEnums::GetEnumValueByName("EAISharedEventType", std::string_view(p_Document["m_eType"])));

	s_Object.m_nTarget = static_cast<int32>(int64_t(p_Document["m_nTarget"]));

	s_Object.m_bHasPosition = bool(p_Document["m_bHasPosition"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_CustomData"], &s_Item);
		s_Object.m_CustomData = s_Item;
	}

	*reinterpret_cast<SSituationOrderSaveData*>(p_Target) = s_Object;
}

void SSituationOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sClassTypeName.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationOrderSaveData, m_sClassTypeName));	m_vPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationOrderSaveData, m_vPosition));	m_CustomData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSituationOrderSaveData, m_CustomData));}

ZHMTypeInfo SDoorSaveData::TypeInfo = ZHMTypeInfo("SDoorSaveData", sizeof(SDoorSaveData), alignof(SDoorSaveData), SDoorSaveData::WriteJson, SDoorSaveData::WriteSimpleJson, SDoorSaveData::FromSimpleJson);

void SDoorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nDoorState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDoorState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnimPercent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAnimPercent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAnimPercent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetAnimPercent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tOpenTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tOpenTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDoorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nDoorState") << ":";
	p_Stream << s_Object->m_nDoorState;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnimPercent") << ":";
	p_Stream << s_Object->m_fAnimPercent;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAnimPercent") << ":";
	p_Stream << s_Object->m_fTargetAnimPercent;
	p_Stream << ",";

	p_Stream << JsonStr("m_tOpenTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tOpenTime, p_Stream);

	p_Stream << "}";
}

void SDoorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDoorSaveData s_Object;

	s_Object.m_nDoorState = static_cast<int32>(int64_t(p_Document["m_nDoorState"]));

	s_Object.m_fAnimPercent = static_cast<float32>(double(p_Document["m_fAnimPercent"]));

	s_Object.m_fTargetAnimPercent = static_cast<float32>(double(p_Document["m_fTargetAnimPercent"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tOpenTime"], &s_Item);
		s_Object.m_tOpenTime = s_Item;
	}

	*reinterpret_cast<SDoorSaveData*>(p_Target) = s_Object;
}

void SDoorSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tOpenTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SDoorSaveData, m_tOpenTime));}

ZHMTypeInfo SDetectedInPrivateGroupSaveData::TypeInfo = ZHMTypeInfo("SDetectedInPrivateGroupSaveData", sizeof(SDetectedInPrivateGroupSaveData), alignof(SDetectedInPrivateGroupSaveData), SDetectedInPrivateGroupSaveData::WriteJson, SDetectedInPrivateGroupSaveData::WriteSimpleJson, SDetectedInPrivateGroupSaveData::FromSimpleJson);

void SDetectedInPrivateGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDetectedInPrivateGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeWaiting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeWaiting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rLead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rLead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDisbanded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDisbanded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstWait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirstWait;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";

	p_Stream << "}";
}

void SDetectedInPrivateGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDetectedInPrivateGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeWaiting") << ":";
	p_Stream << s_Object->m_fTimeWaiting;
	p_Stream << ",";

	p_Stream << JsonStr("m_rLead") << ":";
	p_Stream << s_Object->m_rLead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDisbanded") << ":";
	p_Stream << s_Object->m_bDisbanded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstWait") << ":";
	p_Stream << s_Object->m_bFirstWait;
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;

	p_Stream << "}";
}

void SDetectedInPrivateGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDetectedInPrivateGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_fTimeWaiting = static_cast<float32>(double(p_Document["m_fTimeWaiting"]));

	s_Object.m_rLead = static_cast<uint32>(int64_t(p_Document["m_rLead"]));

	s_Object.m_bDisbanded = bool(p_Document["m_bDisbanded"]);

	s_Object.m_bFirstWait = bool(p_Document["m_bFirstWait"]);

	s_Object.m_target = static_cast<int32>(int64_t(p_Document["m_target"]));

	*reinterpret_cast<SDetectedInPrivateGroupSaveData*>(p_Target) = s_Object;
}

void SDetectedInPrivateGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SDetectedInPrivateGroupSaveData, m_fsmState));}

ZHMTypeInfo ISituation::TypeInfo = ZHMTypeInfo("ISituation", sizeof(ISituation), alignof(ISituation), ISituation::WriteJson, ISituation::WriteSimpleJson, ISituation::FromSimpleJson);

void ISituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISituation*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISituation*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISituation::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISituation s_Object;

	*reinterpret_cast<ISituation*>(p_Target) = s_Object;
}

void ISituation::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SItemSaveData::TypeInfo = ZHMTypeInfo("SItemSaveData", sizeof(SItemSaveData), alignof(SItemSaveData), SItemSaveData::WriteJson, SItemSaveData::WriteSimpleJson, SItemSaveData::FromSimpleJson);

void SItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnablePickup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnablePickup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bKinematic") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bKinematic;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSleeping") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSleeping;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPerceptible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPerceptible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rTransformParent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTransformParent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSpawner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSpawner;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rOwner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rOwner;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rHoldingContainer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHoldingContainer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreviousOwner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pPreviousOwner;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurnedOn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTurnedOn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEverOwnedByHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEverOwnedByHitman;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasPlacedAndAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasPlacedAndAttached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bObjectInPhysicsWorld") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bObjectInPhysicsWorld;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nQuantity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nQuantity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGlowType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ERenderGlowTypes") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGlowType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ERenderGlowTypes", static_cast<int>(s_Object->m_eGlowType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowItem") << ":";
	p_Stream << s_Object->m_bShowItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnablePickup") << ":";
	p_Stream << s_Object->m_bEnablePickup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bKinematic") << ":";
	p_Stream << s_Object->m_bKinematic;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSleeping") << ":";
	p_Stream << s_Object->m_bSleeping;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPerceptible") << ":";
	p_Stream << s_Object->m_bIsPerceptible;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rTransformParent") << ":";
	p_Stream << s_Object->m_rTransformParent;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSpawner") << ":";
	p_Stream << s_Object->m_rSpawner;
	p_Stream << ",";

	p_Stream << JsonStr("m_rOwner") << ":";
	p_Stream << s_Object->m_rOwner;
	p_Stream << ",";

	p_Stream << JsonStr("m_rHoldingContainer") << ":";
	p_Stream << s_Object->m_rHoldingContainer;
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreviousOwner") << ":";
	p_Stream << s_Object->m_pPreviousOwner;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurnedOn") << ":";
	p_Stream << s_Object->m_bTurnedOn;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEverOwnedByHitman") << ":";
	p_Stream << s_Object->m_bEverOwnedByHitman;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasPlacedAndAttached") << ":";
	p_Stream << s_Object->m_bWasPlacedAndAttached;
	p_Stream << ",";

	p_Stream << JsonStr("m_bObjectInPhysicsWorld") << ":";
	p_Stream << s_Object->m_bObjectInPhysicsWorld;
	p_Stream << ",";

	p_Stream << JsonStr("m_nQuantity") << ":";
	p_Stream << s_Object->m_nQuantity;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGlowType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ERenderGlowTypes", static_cast<int>(s_Object->m_eGlowType)));

	p_Stream << "}";
}

void SItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vRotation"], &s_Item);
		s_Object.m_vRotation = s_Item;
	}

	s_Object.m_bShowItem = bool(p_Document["m_bShowItem"]);

	s_Object.m_bEnablePickup = bool(p_Document["m_bEnablePickup"]);

	s_Object.m_bKinematic = bool(p_Document["m_bKinematic"]);

	s_Object.m_bSleeping = bool(p_Document["m_bSleeping"]);

	s_Object.m_bIsPerceptible = bool(p_Document["m_bIsPerceptible"]);

	s_Object.m_bDestroyed = bool(p_Document["m_bDestroyed"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vVelocity"], &s_Item);
		s_Object.m_vVelocity = s_Item;
	}

	s_Object.m_rTransformParent = static_cast<uint32>(int64_t(p_Document["m_rTransformParent"]));

	s_Object.m_rSpawner = static_cast<uint32>(int64_t(p_Document["m_rSpawner"]));

	s_Object.m_rOwner = static_cast<uint32>(int64_t(p_Document["m_rOwner"]));

	s_Object.m_rHoldingContainer = static_cast<uint32>(int64_t(p_Document["m_rHoldingContainer"]));

	s_Object.m_pPreviousOwner = static_cast<uint32>(int64_t(p_Document["m_pPreviousOwner"]));

	s_Object.m_bTurnedOn = bool(p_Document["m_bTurnedOn"]);

	s_Object.m_bEverOwnedByHitman = bool(p_Document["m_bEverOwnedByHitman"]);

	s_Object.m_bWasPlacedAndAttached = bool(p_Document["m_bWasPlacedAndAttached"]);

	s_Object.m_bObjectInPhysicsWorld = bool(p_Document["m_bObjectInPhysicsWorld"]);

	s_Object.m_nQuantity = static_cast<int32>(int64_t(p_Document["m_nQuantity"]));

	s_Object.m_eGlowType = static_cast<ERenderGlowTypes>(ZHMEnums::GetEnumValueByName("ERenderGlowTypes", std::string_view(p_Document["m_eGlowType"])));

	*reinterpret_cast<SItemSaveData*>(p_Target) = s_Object;
}

void SItemSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemSaveData, m_vPosition));	m_vRotation.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemSaveData, m_vRotation));	m_vVelocity.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemSaveData, m_vVelocity));}

ZHMTypeInfo SSavableEntitiesSaveData::TypeInfo = ZHMTypeInfo("SSavableEntitiesSaveData", sizeof(SSavableEntitiesSaveData), alignof(SSavableEntitiesSaveData), SSavableEntitiesSaveData::WriteJson, SSavableEntitiesSaveData::WriteSimpleJson, SSavableEntitiesSaveData::FromSimpleJson);

void SSavableEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSavableEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVariantStruct") << "," << JsonStr("$val") << ":";
		SVariantStruct::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSavableEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSavableEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityData[i];
		SVariantStruct::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEntityData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSavableEntitiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSavableEntitiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntityData"])
	{
		SVariantStruct s_ArrayItem;
		SVariantStruct::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aEntityData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SSavableEntitiesSaveData*>(p_Target) = s_Object;
}

void SSavableEntitiesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SSavableEntitiesSaveData, m_aEntities));	m_aEntityData.Serialize(p_Serializer, p_OwnOffset + offsetof(SSavableEntitiesSaveData, m_aEntityData));}

ZHMTypeInfo STrackerEntitySaveData::TypeInfo = ZHMTypeInfo("STrackerEntitySaveData", sizeof(STrackerEntitySaveData), alignof(STrackerEntitySaveData), STrackerEntitySaveData::WriteJson, STrackerEntitySaveData::WriteSimpleJson, STrackerEntitySaveData::FromSimpleJson);

void STrackerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTracker") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTracker;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialVisibility") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSpatialVisibility;
	p_Stream << "}";

	p_Stream << "}";
}

void STrackerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTracker") << ":";
	p_Stream << s_Object->m_rTracker;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialVisibility") << ":";
	p_Stream << s_Object->m_bSpatialVisibility;

	p_Stream << "}";
}

void STrackerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrackerEntitySaveData s_Object;

	s_Object.m_rTracker = static_cast<uint32>(int64_t(p_Document["m_rTracker"]));

	s_Object.m_bIsVisible = bool(p_Document["m_bIsVisible"]);

	s_Object.m_bIsEnabled = bool(p_Document["m_bIsEnabled"]);

	s_Object.m_bSpatialVisibility = bool(p_Document["m_bSpatialVisibility"]);

	*reinterpret_cast<STrackerEntitySaveData*>(p_Target) = s_Object;
}

void STrackerEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo STrackerManagerSaveData::TypeInfo = ZHMTypeInfo("STrackerManagerSaveData", sizeof(STrackerManagerSaveData), alignof(STrackerManagerSaveData), STrackerManagerSaveData::WriteJson, STrackerManagerSaveData::WriteSimpleJson, STrackerManagerSaveData::FromSimpleJson);

void STrackerManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackerManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aTrackerData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackerData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTrackerData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STrackerEntitySaveData") << "," << JsonStr("$val") << ":";
		STrackerEntitySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTrackerData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STrackerManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackerManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aTrackerData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackerData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aTrackerData[i];
		STrackerEntitySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aTrackerData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STrackerManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrackerManagerSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aTrackerData"])
	{
		STrackerEntitySaveData s_ArrayItem;
		STrackerEntitySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aTrackerData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<STrackerManagerSaveData*>(p_Target) = s_Object;
}

void STrackerManagerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aTrackerData.Serialize(p_Serializer, p_OwnOffset + offsetof(STrackerManagerSaveData, m_aTrackerData));}

ZHMTypeInfo SHandleDistractionSituationSaveData::TypeInfo = ZHMTypeInfo("SHandleDistractionSituationSaveData", sizeof(SHandleDistractionSituationSaveData), alignof(SHandleDistractionSituationSaveData), SHandleDistractionSituationSaveData::WriteJson, SHandleDistractionSituationSaveData::WriteSimpleJson, SHandleDistractionSituationSaveData::FromSimpleJson);

void SHandleDistractionSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHandleDistractionSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreliminaryLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pPreliminaryLeader;
	p_Stream << "}";

	p_Stream << "}";
}

void SHandleDistractionSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHandleDistractionSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreliminaryLeader") << ":";
	p_Stream << s_Object->m_pPreliminaryLeader;

	p_Stream << "}";
}

void SHandleDistractionSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHandleDistractionSituationSaveData s_Object;

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_pAssistant = static_cast<uint32>(int64_t(p_Document["m_pAssistant"]));

	s_Object.m_pPreliminaryLeader = static_cast<uint32>(int64_t(p_Document["m_pPreliminaryLeader"]));

	*reinterpret_cast<SHandleDistractionSituationSaveData*>(p_Target) = s_Object;
}

void SHandleDistractionSituationSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCautiousHuntSaveData::TypeInfo = ZHMTypeInfo("SCautiousHuntSaveData", sizeof(SCautiousHuntSaveData), alignof(SCautiousHuntSaveData), SCautiousHuntSaveData::WriteJson, SCautiousHuntSaveData::WriteSimpleJson, SCautiousHuntSaveData::FromSimpleJson);

void SCautiousHuntSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousHuntSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnounceHuntCoolDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tAnnounceHuntCoolDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnouncedHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tAnnouncedHunt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tShareHuntTargetCoolDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tShareHuntTargetCoolDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnounceHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAnnounceHunt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnouncedHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAnnouncedHunt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayAnnouncementDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayAnnouncementDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHuntTargetKnownKiller") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHuntTargetKnownKiller;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSharedHuntTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSharedHuntTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetBlamed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetBlamed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRuleActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRuleActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousHuntSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCautiousHuntSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnounceHuntCoolDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tAnnounceHuntCoolDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnouncedHunt") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tAnnouncedHunt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tShareHuntTargetCoolDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tShareHuntTargetCoolDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnounceHunt") << ":";
	p_Stream << s_Object->m_bAnnounceHunt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnouncedHunt") << ":";
	p_Stream << s_Object->m_bAnnouncedHunt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayAnnouncementDialog") << ":";
	p_Stream << s_Object->m_bPlayAnnouncementDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHuntTargetKnownKiller") << ":";
	p_Stream << s_Object->m_bHuntTargetKnownKiller;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSharedHuntTarget") << ":";
	p_Stream << s_Object->m_bSharedHuntTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetBlamed") << ":";
	p_Stream << s_Object->m_bTargetBlamed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRuleActive") << ":";
	p_Stream << s_Object->m_bRuleActive;

	p_Stream << "}";
}

void SCautiousHuntSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousHuntSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tAnnounceHuntCoolDown"], &s_Item);
		s_Object.m_tAnnounceHuntCoolDown = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tAnnouncedHunt"], &s_Item);
		s_Object.m_tAnnouncedHunt = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tShareHuntTargetCoolDown"], &s_Item);
		s_Object.m_tShareHuntTargetCoolDown = s_Item;
	}

	s_Object.m_bAnnounceHunt = bool(p_Document["m_bAnnounceHunt"]);

	s_Object.m_bAnnouncedHunt = bool(p_Document["m_bAnnouncedHunt"]);

	s_Object.m_bPlayAnnouncementDialog = bool(p_Document["m_bPlayAnnouncementDialog"]);

	s_Object.m_bHuntTargetKnownKiller = bool(p_Document["m_bHuntTargetKnownKiller"]);

	s_Object.m_bSharedHuntTarget = bool(p_Document["m_bSharedHuntTarget"]);

	s_Object.m_bTargetBlamed = bool(p_Document["m_bTargetBlamed"]);

	s_Object.m_bRuleActive = bool(p_Document["m_bRuleActive"]);

	*reinterpret_cast<SCautiousHuntSaveData*>(p_Target) = s_Object;
}

void SCautiousHuntSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousHuntSaveData, m_fsmState));	m_tAnnounceHuntCoolDown.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousHuntSaveData, m_tAnnounceHuntCoolDown));	m_tAnnouncedHunt.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousHuntSaveData, m_tAnnouncedHunt));	m_tShareHuntTargetCoolDown.Serialize(p_Serializer, p_OwnOffset + offsetof(SCautiousHuntSaveData, m_tShareHuntTargetCoolDown));}

ZHMTypeInfo SHelpingActorSaveData::TypeInfo = ZHMTypeInfo("SHelpingActorSaveData", sizeof(SHelpingActorSaveData), alignof(SHelpingActorSaveData), SHelpingActorSaveData::WriteJson, SHelpingActorSaveData::WriteSimpleJson, SHelpingActorSaveData::FromSimpleJson);

void SHelpingActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHelpingActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_HelpTargetKnowledgeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HelpTargetKnowledgeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SHelpingActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHelpingActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_HelpTargetKnowledgeIndex") << ":";
	p_Stream << s_Object->m_HelpTargetKnowledgeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SHelpingActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHelpingActorSaveData s_Object;

	s_Object.m_HelpTargetKnowledgeIndex = static_cast<int32>(int64_t(p_Document["m_HelpTargetKnowledgeIndex"]));

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SHelpingActorSaveData*>(p_Target) = s_Object;
}

void SHelpingActorSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDecalSpawnSaveData::TypeInfo = ZHMTypeInfo("SDecalSpawnSaveData", sizeof(SDecalSpawnSaveData), alignof(SDecalSpawnSaveData), SDecalSpawnSaveData::WriteJson, SDecalSpawnSaveData::WriteSimpleJson, SDecalSpawnSaveData::FromSimpleJson);

void SDecalSpawnSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDecalSpawnSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bWasSpawned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasSpawned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vNormal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vNormal, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vDirection, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vSize, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Color") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_Color, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vUVOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vUVOffset, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vTiling") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vTiling, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBlockingSpatialEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBlockingSpatialEntity;
	p_Stream << "}";

	p_Stream << "}";
}

void SDecalSpawnSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDecalSpawnSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bWasSpawned") << ":";
	p_Stream << s_Object->m_bWasSpawned;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vNormal") << ":";
	float4::WriteSimpleJson(&s_Object->m_vNormal, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vDirection") << ":";
	float4::WriteSimpleJson(&s_Object->m_vDirection, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vSize") << ":";
	float4::WriteSimpleJson(&s_Object->m_vSize, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Color") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_Color, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fAlpha") << ":";
	p_Stream << s_Object->m_fAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngle") << ":";
	p_Stream << s_Object->m_fAngle;
	p_Stream << ",";

	p_Stream << JsonStr("m_vUVOffset") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vUVOffset, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vTiling") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vTiling, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rBlockingSpatialEntity") << ":";
	p_Stream << s_Object->m_rBlockingSpatialEntity;

	p_Stream << "}";
}

void SDecalSpawnSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDecalSpawnSaveData s_Object;

	s_Object.m_bWasSpawned = bool(p_Document["m_bWasSpawned"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vNormal"], &s_Item);
		s_Object.m_vNormal = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vDirection"], &s_Item);
		s_Object.m_vDirection = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vSize"], &s_Item);
		s_Object.m_vSize = s_Item;
	}

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_Color"], &s_Item);
		s_Object.m_Color = s_Item;
	}

	s_Object.m_fAlpha = static_cast<float32>(double(p_Document["m_fAlpha"]));

	s_Object.m_fAngle = static_cast<float32>(double(p_Document["m_fAngle"]));

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vUVOffset"], &s_Item);
		s_Object.m_vUVOffset = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vTiling"], &s_Item);
		s_Object.m_vTiling = s_Item;
	}

	s_Object.m_rBlockingSpatialEntity = static_cast<uint32>(int64_t(p_Document["m_rBlockingSpatialEntity"]));

	*reinterpret_cast<SDecalSpawnSaveData*>(p_Target) = s_Object;
}

void SDecalSpawnSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vPosition));	m_vNormal.Serialize(p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vNormal));	m_vDirection.Serialize(p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vDirection));	m_vSize.Serialize(p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vSize));	m_Color.Serialize(p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_Color));	m_vUVOffset.Serialize(p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vUVOffset));	m_vTiling.Serialize(p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vTiling));}

ZHMTypeInfo SRunningCrowdAIEventSaveData::TypeInfo = ZHMTypeInfo("SRunningCrowdAIEventSaveData", sizeof(SRunningCrowdAIEventSaveData), alignof(SRunningCrowdAIEventSaveData), SRunningCrowdAIEventSaveData::WriteJson, SRunningCrowdAIEventSaveData::WriteSimpleJson, SRunningCrowdAIEventSaveData::FromSimpleJson);

void SRunningCrowdAIEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRunningCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_ReactionEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_ReactionEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CrowdEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HitmanToBlame") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HitmanToBlame;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdCoreIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CrowdCoreIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeLeft") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_TimeLeft;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeToPulse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_TimeToPulse;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Position") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_Position, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsInvestigated;
	p_Stream << "}";

	p_Stream << "}";
}

void SRunningCrowdAIEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRunningCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_ReactionEntity") << ":";
	p_Stream << s_Object->m_ReactionEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdEntity") << ":";
	p_Stream << s_Object->m_CrowdEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_HitmanToBlame") << ":";
	p_Stream << s_Object->m_HitmanToBlame;
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdCoreIndex") << ":";
	p_Stream << s_Object->m_CrowdCoreIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeLeft") << ":";
	p_Stream << s_Object->m_TimeLeft;
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeToPulse") << ":";
	p_Stream << s_Object->m_TimeToPulse;
	p_Stream << ",";

	p_Stream << JsonStr("m_Position") << ":";
	float4::WriteSimpleJson(&s_Object->m_Position, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInvestigated") << ":";
	p_Stream << s_Object->m_IsInvestigated;

	p_Stream << "}";
}

void SRunningCrowdAIEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRunningCrowdAIEventSaveData s_Object;

	s_Object.m_ReactionEntity = static_cast<uint32>(int64_t(p_Document["m_ReactionEntity"]));

	s_Object.m_CrowdEntity = static_cast<uint32>(int64_t(p_Document["m_CrowdEntity"]));

	s_Object.m_HitmanToBlame = static_cast<uint32>(int64_t(p_Document["m_HitmanToBlame"]));

	s_Object.m_CrowdCoreIndex = static_cast<int32>(int64_t(p_Document["m_CrowdCoreIndex"]));

	s_Object.m_TimeLeft = static_cast<float32>(double(p_Document["m_TimeLeft"]));

	s_Object.m_TimeToPulse = static_cast<float32>(double(p_Document["m_TimeToPulse"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_Position"], &s_Item);
		s_Object.m_Position = s_Item;
	}

	s_Object.m_IsInvestigated = bool(p_Document["m_IsInvestigated"]);

	*reinterpret_cast<SRunningCrowdAIEventSaveData*>(p_Target) = s_Object;
}

void SRunningCrowdAIEventSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_Position.Serialize(p_Serializer, p_OwnOffset + offsetof(SRunningCrowdAIEventSaveData, m_Position));}

ZHMTypeInfo IBodybagEntity::TypeInfo = ZHMTypeInfo("IBodybagEntity", sizeof(IBodybagEntity), alignof(IBodybagEntity), IBodybagEntity::WriteJson, IBodybagEntity::WriteSimpleJson, IBodybagEntity::FromSimpleJson);

void IBodybagEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBodybagEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBodybagEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBodybagEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBodybagEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBodybagEntity s_Object;

	*reinterpret_cast<IBodybagEntity*>(p_Target) = s_Object;
}

void IBodybagEntity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMathMultipliesSaveData_float32::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_float32", sizeof(SMathMultipliesSaveData_float32), alignof(SMathMultipliesSaveData_float32), SMathMultipliesSaveData_float32::WriteJson, SMathMultipliesSaveData_float32::WriteSimpleJson, SMathMultipliesSaveData_float32::FromSimpleJson);

void SMathMultipliesSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_float32") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_float32::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathMultipliesSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_float32::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_float32::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultipliesSaveData_float32 s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathMultiplyDivideSaveData_float32 s_ArrayItem;
		SMathMultiplyDivideSaveData_float32::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathMultipliesSaveData_float32*>(p_Target) = s_Object;
}

void SMathMultipliesSaveData_float32::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_float32, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_float32, m_aData));}

ZHMTypeInfo SInventoryControllerItemSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerItemSaveData", sizeof(SInventoryControllerItemSaveData), alignof(SInventoryControllerItemSaveData), SInventoryControllerItemSaveData::WriteJson, SInventoryControllerItemSaveData::WriteSimpleJson, SInventoryControllerItemSaveData::FromSimpleJson);

void SInventoryControllerItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItemEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItemEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmo;
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryControllerItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItemEntity") << ":";
	p_Stream << s_Object->m_rItemEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmo") << ":";
	p_Stream << s_Object->m_nAmmo;

	p_Stream << "}";
}

void SInventoryControllerItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryControllerItemSaveData s_Object;

	s_Object.m_rItemEntity = static_cast<uint32>(int64_t(p_Document["m_rItemEntity"]));

	s_Object.m_nAmmo = static_cast<uint32>(int64_t(p_Document["m_nAmmo"]));

	*reinterpret_cast<SInventoryControllerItemSaveData*>(p_Target) = s_Object;
}

void SInventoryControllerItemSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDoorsSaveData::TypeInfo = ZHMTypeInfo("SDoorsSaveData", sizeof(SDoorsSaveData), alignof(SDoorsSaveData), SDoorsSaveData::WriteJson, SDoorsSaveData::WriteSimpleJson, SDoorsSaveData::FromSimpleJson);

void SDoorsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDoorSaveData") << "," << JsonStr("$val") << ":";
		SDoorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SDoorsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDoorsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SDoorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDoorsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDoorsSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SDoorSaveData s_ArrayItem;
		SDoorSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SDoorsSaveData*>(p_Target) = s_Object;
}

void SDoorsSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SDoorsSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SDoorsSaveData, m_aData));}

ZHMTypeInfo SPrivateAreaSaveData::TypeInfo = ZHMTypeInfo("SPrivateAreaSaveData", sizeof(SPrivateAreaSaveData), alignof(SPrivateAreaSaveData), SPrivateAreaSaveData::WriteJson, SPrivateAreaSaveData::WriteSimpleJson, SPrivateAreaSaveData::FromSimpleJson);

void SPrivateAreaSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPrivateAreaSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsInside") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsInside;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nHasEntered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nHasEntered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasExited") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasExited;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpotted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSpotted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanEnterPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vHitmanEnterPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanExitPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vHitmanExitPosition, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SPrivateAreaSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPrivateAreaSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsInside") << ":";
	p_Stream << s_Object->m_bIsInside;
	p_Stream << ",";

	p_Stream << JsonStr("m_nHasEntered") << ":";
	p_Stream << s_Object->m_nHasEntered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasExited") << ":";
	p_Stream << s_Object->m_bHasExited;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpotted") << ":";
	p_Stream << s_Object->m_bSpotted;
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanEnterPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vHitmanEnterPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanExitPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vHitmanExitPosition, p_Stream);

	p_Stream << "}";
}

void SPrivateAreaSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPrivateAreaSaveData s_Object;

	s_Object.m_bIsInside = bool(p_Document["m_bIsInside"]);

	s_Object.m_nHasEntered = bool(p_Document["m_nHasEntered"]);

	s_Object.m_bHasExited = bool(p_Document["m_bHasExited"]);

	s_Object.m_bSpotted = bool(p_Document["m_bSpotted"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vHitmanEnterPosition"], &s_Item);
		s_Object.m_vHitmanEnterPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vHitmanExitPosition"], &s_Item);
		s_Object.m_vHitmanExitPosition = s_Item;
	}

	*reinterpret_cast<SPrivateAreaSaveData*>(p_Target) = s_Object;
}

void SPrivateAreaSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vHitmanEnterPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SPrivateAreaSaveData, m_vHitmanEnterPosition));	m_vHitmanExitPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SPrivateAreaSaveData, m_vHitmanExitPosition));}

ZHMTypeInfo SPatrolGroupSaveData::TypeInfo = ZHMTypeInfo("SPatrolGroupSaveData", sizeof(SPatrolGroupSaveData), alignof(SPatrolGroupSaveData), SPatrolGroupSaveData::WriteJson, SPatrolGroupSaveData::WriteSimpleJson, SPatrolGroupSaveData::FromSimpleJson);

void SPatrolGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPatrolGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nRouteID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRouteID;
	p_Stream << "}";

	p_Stream << "}";
}

void SPatrolGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPatrolGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nRouteID") << ":";
	p_Stream << s_Object->m_nRouteID;

	p_Stream << "}";
}

void SPatrolGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPatrolGroupSaveData s_Object;

	s_Object.m_nRouteID = static_cast<int32>(int64_t(p_Document["m_nRouteID"]));

	*reinterpret_cast<SPatrolGroupSaveData*>(p_Target) = s_Object;
}

void SPatrolGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IOnlineConfigurationListener::TypeInfo = ZHMTypeInfo("IOnlineConfigurationListener", sizeof(IOnlineConfigurationListener), alignof(IOnlineConfigurationListener), IOnlineConfigurationListener::WriteJson, IOnlineConfigurationListener::WriteSimpleJson, IOnlineConfigurationListener::FromSimpleJson);

void IOnlineConfigurationListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IOnlineConfigurationListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IOnlineConfigurationListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IOnlineConfigurationListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IOnlineConfigurationListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IOnlineConfigurationListener s_Object;

	*reinterpret_cast<IOnlineConfigurationListener*>(p_Target) = s_Object;
}

void IOnlineConfigurationListener::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SPatrolOrderSaveData::TypeInfo = ZHMTypeInfo("SPatrolOrderSaveData", sizeof(SPatrolOrderSaveData), alignof(SPatrolOrderSaveData), SPatrolOrderSaveData::WriteJson, SPatrolOrderSaveData::WriteSimpleJson, SPatrolOrderSaveData::FromSimpleJson);

void SPatrolOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPatrolOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SPatrolOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPatrolOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SPatrolOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPatrolOrderSaveData s_Object;

	*reinterpret_cast<SPatrolOrderSaveData*>(p_Target) = s_Object;
}

void SPatrolOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorTagSaveData::TypeInfo = ZHMTypeInfo("SActorTagSaveData", sizeof(SActorTagSaveData), alignof(SActorTagSaveData), SActorTagSaveData::WriteJson, SActorTagSaveData::WriteSimpleJson, SActorTagSaveData::FromSimpleJson);

void SActorTagSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorTagSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSeen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSeen;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTagged") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTagged;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActorRef;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorTagSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorTagSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSeen") << ":";
	p_Stream << s_Object->m_bSeen;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTagged") << ":";
	p_Stream << s_Object->m_bTagged;
	p_Stream << ",";

	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << s_Object->m_rActorRef;

	p_Stream << "}";
}

void SActorTagSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorTagSaveData s_Object;

	s_Object.m_bSeen = bool(p_Document["m_bSeen"]);

	s_Object.m_bTagged = bool(p_Document["m_bTagged"]);

	s_Object.m_rActorRef = static_cast<uint32>(int64_t(p_Document["m_rActorRef"]));

	*reinterpret_cast<SActorTagSaveData*>(p_Target) = s_Object;
}

void SActorTagSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorTagManagerSaveData::TypeInfo = ZHMTypeInfo("SActorTagManagerSaveData", sizeof(SActorTagManagerSaveData), alignof(SActorTagManagerSaveData), SActorTagManagerSaveData::WriteJson, SActorTagManagerSaveData::WriteSimpleJson, SActorTagManagerSaveData::FromSimpleJson);

void SActorTagManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorTagManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bContractsCreationMode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bContractsCreationMode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTagCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTagCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxTagCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMaxTagCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTaggingEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTaggingEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActorTagData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorTagData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActorTagData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorTagSaveData") << "," << JsonStr("$val") << ":";
		SActorTagSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActorTagData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorTagManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorTagManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bContractsCreationMode") << ":";
	p_Stream << s_Object->m_bContractsCreationMode;
	p_Stream << ",";

	p_Stream << JsonStr("m_nTagCount") << ":";
	p_Stream << s_Object->m_nTagCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxTagCount") << ":";
	p_Stream << s_Object->m_nMaxTagCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTaggingEnabled") << ":";
	p_Stream << s_Object->m_bTaggingEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActorTagData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorTagData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aActorTagData[i];
		SActorTagSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aActorTagData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorTagManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorTagManagerSaveData s_Object;

	s_Object.m_bContractsCreationMode = bool(p_Document["m_bContractsCreationMode"]);

	s_Object.m_nTagCount = static_cast<int32>(int64_t(p_Document["m_nTagCount"]));

	s_Object.m_nMaxTagCount = static_cast<int32>(int64_t(p_Document["m_nMaxTagCount"]));

	s_Object.m_bTaggingEnabled = bool(p_Document["m_bTaggingEnabled"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_aActorTagData"])
	{
		SActorTagSaveData s_ArrayItem;
		SActorTagSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aActorTagData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActorTagManagerSaveData*>(p_Target) = s_Object;
}

void SActorTagManagerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aActorTagData.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorTagManagerSaveData, m_aActorTagData));}

ZHMTypeInfo SSCCuriousConfiguration::TypeInfo = ZHMTypeInfo("SSCCuriousConfiguration", sizeof(SSCCuriousConfiguration), alignof(SSCCuriousConfiguration), SSCCuriousConfiguration::WriteJson, SSCCuriousConfiguration::WriteSimpleJson, SSCCuriousConfiguration::FromSimpleJson);

void SSCCuriousConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSCCuriousConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CanGuardsInvestigate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CanGuardsInvestigate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CanCiviliansInvestigate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CanCiviliansInvestigate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CanVIPsInvestigate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CanVIPsInvestigate;
	p_Stream << "}";

	p_Stream << "}";
}

void SSCCuriousConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSCCuriousConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CanGuardsInvestigate") << ":";
	p_Stream << s_Object->m_CanGuardsInvestigate;
	p_Stream << ",";

	p_Stream << JsonStr("m_CanCiviliansInvestigate") << ":";
	p_Stream << s_Object->m_CanCiviliansInvestigate;
	p_Stream << ",";

	p_Stream << JsonStr("m_CanVIPsInvestigate") << ":";
	p_Stream << s_Object->m_CanVIPsInvestigate;

	p_Stream << "}";
}

void SSCCuriousConfiguration::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSCCuriousConfiguration s_Object;

	s_Object.m_CanGuardsInvestigate = bool(p_Document["m_CanGuardsInvestigate"]);

	s_Object.m_CanCiviliansInvestigate = bool(p_Document["m_CanCiviliansInvestigate"]);

	s_Object.m_CanVIPsInvestigate = bool(p_Document["m_CanVIPsInvestigate"]);

	*reinterpret_cast<SSCCuriousConfiguration*>(p_Target) = s_Object;
}

void SSCCuriousConfiguration::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorDynamicTemplateManipulatorSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateManipulatorSaveData", sizeof(SActorDynamicTemplateManipulatorSaveData), alignof(SActorDynamicTemplateManipulatorSaveData), SActorDynamicTemplateManipulatorSaveData::WriteJson, SActorDynamicTemplateManipulatorSaveData::WriteSimpleJson, SActorDynamicTemplateManipulatorSaveData::FromSimpleJson);

void SActorDynamicTemplateManipulatorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDynamicTemplateManipulatorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorDynamicTemplateManipulatorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorDynamicTemplateManipulatorSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Target) = s_Object;
}

void SActorDynamicTemplateManipulatorSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SIntelDataArray_dummy::TypeInfo = ZHMTypeInfo("SIntelDataArray_dummy", sizeof(SIntelDataArray_dummy), alignof(SIntelDataArray_dummy), SIntelDataArray_dummy::WriteJson, SIntelDataArray_dummy::WriteSimpleJson, SIntelDataArray_dummy::FromSimpleJson);

void SIntelDataArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDataArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SIntelData") << "," << JsonStr("$val") << ":";
		SIntelData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SIntelDataArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDataArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SIntelData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SIntelDataArray_dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelDataArray_dummy s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["dummy"])
	{
		SIntelData s_ArrayItem;
		SIntelData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.dummy.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SIntelDataArray_dummy*>(p_Target) = s_Object;
}

void SIntelDataArray_dummy::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	dummy.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelDataArray_dummy, dummy));}

ZHMTypeInfo SIntelSaveData::TypeInfo = ZHMTypeInfo("SIntelSaveData", sizeof(SIntelSaveData), alignof(SIntelSaveData), SIntelSaveData::WriteJson, SIntelSaveData::WriteSimpleJson, SIntelSaveData::FromSimpleJson);

void SIntelSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCurrentStage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentStage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandlerAudioPlayPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHandlerAudioPlayPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTracked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTracked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUnlocked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUnlocked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsLastTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsLastTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsHandlerAudioPlaying") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsHandlerAudioPlaying;
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCurrentStage") << ":";
	p_Stream << s_Object->m_rCurrentStage;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandlerAudioPlayPosition") << ":";
	p_Stream << s_Object->m_fHandlerAudioPlayPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTracked") << ":";
	p_Stream << s_Object->m_bTracked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUnlocked") << ":";
	p_Stream << s_Object->m_bUnlocked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsLastTriggered") << ":";
	p_Stream << s_Object->m_bIsLastTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsHandlerAudioPlaying") << ":";
	p_Stream << s_Object->m_bIsHandlerAudioPlaying;

	p_Stream << "}";
}

void SIntelSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelSaveData s_Object;

	s_Object.m_rCurrentStage = static_cast<uint32>(int64_t(p_Document["m_rCurrentStage"]));

	s_Object.m_fHandlerAudioPlayPosition = static_cast<float32>(double(p_Document["m_fHandlerAudioPlayPosition"]));

	s_Object.m_bTracked = bool(p_Document["m_bTracked"]);

	s_Object.m_bUnlocked = bool(p_Document["m_bUnlocked"]);

	s_Object.m_bRegistered = bool(p_Document["m_bRegistered"]);

	s_Object.m_bIsLastTriggered = bool(p_Document["m_bIsLastTriggered"]);

	s_Object.m_bIsHandlerAudioPlaying = bool(p_Document["m_bIsHandlerAudioPlaying"]);

	*reinterpret_cast<SIntelSaveData*>(p_Target) = s_Object;
}

void SIntelSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActivities::TypeInfo = ZHMTypeInfo("SActivities", sizeof(SActivities), alignof(SActivities), SActivities::WriteJson, SActivities::WriteSimpleJson, SActivities::FromSimpleJson);

void SActivities::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivities*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Activities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Activities.size(); ++i)
	{
		auto& s_Item = s_Object->Activities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivityDefinition") << "," << JsonStr("$val") << ":";
		SActivityDefinition::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->Activities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActivities::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActivities*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Activities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Activities.size(); ++i)
	{
		auto& s_Item = s_Object->Activities[i];
		SActivityDefinition::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->Activities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActivities::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivities s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["Activities"])
	{
		SActivityDefinition s_ArrayItem;
		SActivityDefinition::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.Activities.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActivities*>(p_Target) = s_Object;
}

void SActivities::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	Activities.Serialize(p_Serializer, p_OwnOffset + offsetof(SActivities, Activities));}

ZHMTypeInfo SPFObstactleSaveData::TypeInfo = ZHMTypeInfo("SPFObstactleSaveData", sizeof(SPFObstactleSaveData), alignof(SPFObstactleSaveData), SPFObstactleSaveData::WriteJson, SPFObstactleSaveData::WriteSimpleJson, SPFObstactleSaveData::FromSimpleJson);

void SPFObstactleSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPFObstactleSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SPFObstactleSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPFObstactleSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SPFObstactleSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPFObstactleSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SPFObstactleSaveData*>(p_Target) = s_Object;
}

void SPFObstactleSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SPhysicsListSaveData::TypeInfo = ZHMTypeInfo("SPhysicsListSaveData", sizeof(SPhysicsListSaveData), alignof(SPhysicsListSaveData), SPhysicsListSaveData::WriteJson, SPhysicsListSaveData::WriteSimpleJson, SPhysicsListSaveData::FromSimpleJson);

void SPhysicsListSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPhysicsListSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntityRefs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityRefs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityRefs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntityRefs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityDatas[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SPhysicsSaveData") << "," << JsonStr("$val") << ":";
		SPhysicsSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SPhysicsListSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPhysicsListSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntityRefs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityRefs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityRefs[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntityRefs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntityDatas[i];
		SPhysicsSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SPhysicsListSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPhysicsListSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntityRefs"])
	{
		s_Object.m_aEntityRefs.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntityDatas"])
	{
		SPhysicsSaveData s_ArrayItem;
		SPhysicsSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aEntityDatas.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SPhysicsListSaveData*>(p_Target) = s_Object;
}

void SPhysicsListSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntityRefs.Serialize(p_Serializer, p_OwnOffset + offsetof(SPhysicsListSaveData, m_aEntityRefs));	m_aEntityDatas.Serialize(p_Serializer, p_OwnOffset + offsetof(SPhysicsListSaveData, m_aEntityDatas));}

ZHMTypeInfo SIntelDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SIntelDisplayInfoArray_dummy", sizeof(SIntelDisplayInfoArray_dummy), alignof(SIntelDisplayInfoArray_dummy), SIntelDisplayInfoArray_dummy::WriteJson, SIntelDisplayInfoArray_dummy::WriteSimpleJson, SIntelDisplayInfoArray_dummy::FromSimpleJson);

void SIntelDisplayInfoArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SIntelDisplayInfo") << "," << JsonStr("$val") << ":";
		SIntelDisplayInfo::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SIntelDisplayInfoArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SIntelDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SIntelDisplayInfo::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SIntelDisplayInfoArray_dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelDisplayInfoArray_dummy s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["dummy"])
	{
		SIntelDisplayInfo s_ArrayItem;
		SIntelDisplayInfo::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.dummy.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SIntelDisplayInfoArray_dummy*>(p_Target) = s_Object;
}

void SIntelDisplayInfoArray_dummy::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	dummy.Serialize(p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfoArray_dummy, dummy));}

ZHMTypeInfo SDestructiblePieceSaveData::TypeInfo = ZHMTypeInfo("SDestructiblePieceSaveData", sizeof(SDestructiblePieceSaveData), alignof(SDestructiblePieceSaveData), SDestructiblePieceSaveData::WriteJson, SDestructiblePieceSaveData::WriteSimpleJson, SDestructiblePieceSaveData::FromSimpleJson);

void SDestructiblePieceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructiblePieceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_mTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mTransform, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMass") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMass;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePhysicsType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EPhysicsObjectType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePhysicsType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_ePhysicsType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAwake") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsAwake;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLinearVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_fLinearVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngularVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_fAngularVelocity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructiblePieceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructiblePieceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_mTransform") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mTransform, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMass") << ":";
	p_Stream << s_Object->m_fMass;
	p_Stream << ",";

	p_Stream << JsonStr("m_ePhysicsType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_ePhysicsType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAwake") << ":";
	p_Stream << s_Object->m_bIsAwake;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLinearVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_fLinearVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngularVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_fAngularVelocity, p_Stream);

	p_Stream << "}";
}

void SDestructiblePieceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructiblePieceSaveData s_Object;

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_mTransform"], &s_Item);
		s_Object.m_mTransform = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aIndices"])
	{
		s_Object.m_aIndices.push_back(static_cast<uint16>(int64_t(s_Item)));
	}

	s_Object.m_fMass = static_cast<float32>(double(p_Document["m_fMass"]));

	s_Object.m_ePhysicsType = static_cast<EPhysicsObjectType>(ZHMEnums::GetEnumValueByName("EPhysicsObjectType", std::string_view(p_Document["m_ePhysicsType"])));

	s_Object.m_bIsAwake = bool(p_Document["m_bIsAwake"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_fLinearVelocity"], &s_Item);
		s_Object.m_fLinearVelocity = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_fAngularVelocity"], &s_Item);
		s_Object.m_fAngularVelocity = s_Item;
	}

	*reinterpret_cast<SDestructiblePieceSaveData*>(p_Target) = s_Object;
}

void SDestructiblePieceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_mTransform.Serialize(p_Serializer, p_OwnOffset + offsetof(SDestructiblePieceSaveData, m_mTransform));	m_aIndices.Serialize(p_Serializer, p_OwnOffset + offsetof(SDestructiblePieceSaveData, m_aIndices));	m_fLinearVelocity.Serialize(p_Serializer, p_OwnOffset + offsetof(SDestructiblePieceSaveData, m_fLinearVelocity));	m_fAngularVelocity.Serialize(p_Serializer, p_OwnOffset + offsetof(SDestructiblePieceSaveData, m_fAngularVelocity));}

ZHMTypeInfo SDestructibleRuntimeDamage::TypeInfo = ZHMTypeInfo("SDestructibleRuntimeDamage", sizeof(SDestructibleRuntimeDamage), alignof(SDestructibleRuntimeDamage), SDestructibleRuntimeDamage::WriteJson, SDestructibleRuntimeDamage::WriteSimpleJson, SDestructibleRuntimeDamage::FromSimpleJson);

void SDestructibleRuntimeDamage::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleRuntimeDamage*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDamage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDamage;
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleRuntimeDamage::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleRuntimeDamage*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDamage") << ":";
	p_Stream << s_Object->m_fDamage;

	p_Stream << "}";
}

void SDestructibleRuntimeDamage::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructibleRuntimeDamage s_Object;

	s_Object.m_nPieceIndex = static_cast<uint16>(int64_t(p_Document["m_nPieceIndex"]));

	s_Object.m_fDamage = static_cast<float32>(double(p_Document["m_fDamage"]));

	*reinterpret_cast<SDestructibleRuntimeDamage*>(p_Target) = s_Object;
}

void SDestructibleRuntimeDamage::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDestructibleObjectSaveData::TypeInfo = ZHMTypeInfo("SDestructibleObjectSaveData", sizeof(SDestructibleObjectSaveData), alignof(SDestructibleObjectSaveData), SDestructibleObjectSaveData::WriteJson, SDestructibleObjectSaveData::WriteSimpleJson, SDestructibleObjectSaveData::FromSimpleJson);

void SDestructibleObjectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleObjectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_interactionData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructibleInteractionHandlerData") << "," << JsonStr("$val") << ":";
	SDestructibleInteractionHandlerData::WriteJson(&s_Object->m_interactionData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDestructiblePieces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDestructiblePieces.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDestructiblePieces[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructiblePieceSaveData") << "," << JsonStr("$val") << ":";
		SDestructiblePieceSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDestructiblePieces.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnectionData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnectionData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aConnectionData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructibleRuntimeConnnection") << "," << JsonStr("$val") << ":";
		SDestructibleRuntimeConnnection::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aConnectionData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDamageData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDamageData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDamageData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructibleRuntimeDamage") << "," << JsonStr("$val") << ":";
		SDestructibleRuntimeDamage::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDamageData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumAnchors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumAnchors;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eRuntimeMemoryAllocationState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ERuntimeMemoryAllocationState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ERuntimeMemoryAllocationState", static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eSystemPhysicsType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EPhysicsObjectType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eSystemPhysicsType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_eSystemPhysicsType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenDetached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasSystemBeenDetached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenFractured") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasSystemBeenFractured;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPhysicsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPhysicsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestructionEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestructionEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleObjectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDestructibleObjectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_interactionData") << ":";
	SDestructibleInteractionHandlerData::WriteSimpleJson(&s_Object->m_interactionData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aDestructiblePieces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDestructiblePieces.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDestructiblePieces[i];
		SDestructiblePieceSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aDestructiblePieces.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnectionData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnectionData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aConnectionData[i];
		SDestructibleRuntimeConnnection::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aConnectionData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDamageData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDamageData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDamageData[i];
		SDestructibleRuntimeDamage::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aDamageData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumAnchors") << ":";
	p_Stream << s_Object->m_nNumAnchors;
	p_Stream << ",";

	p_Stream << JsonStr("m_eRuntimeMemoryAllocationState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ERuntimeMemoryAllocationState", static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eSystemPhysicsType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_eSystemPhysicsType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenDetached") << ":";
	p_Stream << s_Object->m_bHasSystemBeenDetached;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenFractured") << ":";
	p_Stream << s_Object->m_bHasSystemBeenFractured;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPhysicsEnabled") << ":";
	p_Stream << s_Object->m_bPhysicsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestructionEnabled") << ":";
	p_Stream << s_Object->m_bDestructionEnabled;

	p_Stream << "}";
}

void SDestructibleObjectSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructibleObjectSaveData s_Object;

	{
		SDestructibleInteractionHandlerData s_Item;
		SDestructibleInteractionHandlerData::FromSimpleJson(p_Document["m_interactionData"], &s_Item);
		s_Object.m_interactionData = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aDestructiblePieces"])
	{
		SDestructiblePieceSaveData s_ArrayItem;
		SDestructiblePieceSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aDestructiblePieces.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aConnectionData"])
	{
		SDestructibleRuntimeConnnection s_ArrayItem;
		SDestructibleRuntimeConnnection::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aConnectionData.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aDamageData"])
	{
		SDestructibleRuntimeDamage s_ArrayItem;
		SDestructibleRuntimeDamage::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aDamageData.push_back(s_ArrayItem);
	}

	s_Object.m_nNumAnchors = static_cast<uint16>(int64_t(p_Document["m_nNumAnchors"]));

	s_Object.m_eRuntimeMemoryAllocationState = static_cast<ERuntimeMemoryAllocationState>(ZHMEnums::GetEnumValueByName("ERuntimeMemoryAllocationState", std::string_view(p_Document["m_eRuntimeMemoryAllocationState"])));

	s_Object.m_eSystemPhysicsType = static_cast<EPhysicsObjectType>(ZHMEnums::GetEnumValueByName("EPhysicsObjectType", std::string_view(p_Document["m_eSystemPhysicsType"])));

	s_Object.m_bHasSystemBeenDetached = bool(p_Document["m_bHasSystemBeenDetached"]);

	s_Object.m_bHasSystemBeenFractured = bool(p_Document["m_bHasSystemBeenFractured"]);

	s_Object.m_bPhysicsEnabled = bool(p_Document["m_bPhysicsEnabled"]);

	s_Object.m_bDestructionEnabled = bool(p_Document["m_bDestructionEnabled"]);

	*reinterpret_cast<SDestructibleObjectSaveData*>(p_Target) = s_Object;
}

void SDestructibleObjectSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_interactionData.Serialize(p_Serializer, p_OwnOffset + offsetof(SDestructibleObjectSaveData, m_interactionData));	m_aDestructiblePieces.Serialize(p_Serializer, p_OwnOffset + offsetof(SDestructibleObjectSaveData, m_aDestructiblePieces));	m_aConnectionData.Serialize(p_Serializer, p_OwnOffset + offsetof(SDestructibleObjectSaveData, m_aConnectionData));	m_aDamageData.Serialize(p_Serializer, p_OwnOffset + offsetof(SDestructibleObjectSaveData, m_aDamageData));}

ZHMTypeInfo SHUDPromptDisplayInfoArray_Dummy::TypeInfo = ZHMTypeInfo("SHUDPromptDisplayInfoArray_Dummy", sizeof(SHUDPromptDisplayInfoArray_Dummy), alignof(SHUDPromptDisplayInfoArray_Dummy), SHUDPromptDisplayInfoArray_Dummy::WriteJson, SHUDPromptDisplayInfoArray_Dummy::WriteSimpleJson, SHUDPromptDisplayInfoArray_Dummy::FromSimpleJson);

void SHUDPromptDisplayInfoArray_Dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHUDPromptDisplayInfo") << "," << JsonStr("$val") << ":";
		SHUDPromptDisplayInfo::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SHUDPromptDisplayInfoArray_Dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SHUDPromptDisplayInfo::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SHUDPromptDisplayInfoArray_Dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHUDPromptDisplayInfoArray_Dummy s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["dummy"])
	{
		SHUDPromptDisplayInfo s_ArrayItem;
		SHUDPromptDisplayInfo::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.dummy.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Target) = s_Object;
}

void SHUDPromptDisplayInfoArray_Dummy::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	dummy.Serialize(p_Serializer, p_OwnOffset + offsetof(SHUDPromptDisplayInfoArray_Dummy, dummy));}

ZHMTypeInfo SCombatSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SCombatSituationMemberSaveData", sizeof(SCombatSituationMemberSaveData), alignof(SCombatSituationMemberSaveData), SCombatSituationMemberSaveData::WriteJson, SCombatSituationMemberSaveData::WriteSimpleJson, SCombatSituationMemberSaveData::FromSimpleJson);

void SCombatSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceFieldValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceFieldValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_civilianJoinReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_civilianJoinReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_civilianJoinReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPreferredToFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPreferredToFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDialogPreventShooting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDialogPreventShooting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanFlee") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCanFlee;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCantFleeNoPath") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCantFleeNoPath;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportedToGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReportedToGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandAndShoot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandAndShoot;
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceFieldValue") << ":";
	p_Stream << s_Object->m_fDistanceFieldValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_civilianJoinReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_civilianJoinReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPreferredToFire") << ":";
	p_Stream << s_Object->m_bIsPreferredToFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDialogPreventShooting") << ":";
	p_Stream << s_Object->m_bDialogPreventShooting;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanFlee") << ":";
	p_Stream << s_Object->m_bCanFlee;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCantFleeNoPath") << ":";
	p_Stream << s_Object->m_bCantFleeNoPath;
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportedToGuard") << ":";
	p_Stream << s_Object->m_bReportedToGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandAndShoot") << ":";
	p_Stream << s_Object->m_bStandAndShoot;

	p_Stream << "}";
}

void SCombatSituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCombatSituationMemberSaveData s_Object;

	s_Object.m_fDistanceToTarget = static_cast<float32>(double(p_Document["m_fDistanceToTarget"]));

	s_Object.m_fDistanceFieldValue = static_cast<float32>(double(p_Document["m_fDistanceFieldValue"]));

	s_Object.m_civilianJoinReason = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_civilianJoinReason"])));

	s_Object.m_bIsPreferredToFire = bool(p_Document["m_bIsPreferredToFire"]);

	s_Object.m_bDialogPreventShooting = bool(p_Document["m_bDialogPreventShooting"]);

	s_Object.m_bCanFlee = bool(p_Document["m_bCanFlee"]);

	s_Object.m_bCantFleeNoPath = bool(p_Document["m_bCantFleeNoPath"]);

	s_Object.m_bReportedToGuard = bool(p_Document["m_bReportedToGuard"]);

	s_Object.m_bStandAndShoot = bool(p_Document["m_bStandAndShoot"]);

	*reinterpret_cast<SCombatSituationMemberSaveData*>(p_Target) = s_Object;
}

void SCombatSituationMemberSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IMorphemeCutSequenceAnimationEntity::TypeInfo = ZHMTypeInfo("IMorphemeCutSequenceAnimationEntity", sizeof(IMorphemeCutSequenceAnimationEntity), alignof(IMorphemeCutSequenceAnimationEntity), IMorphemeCutSequenceAnimationEntity::WriteJson, IMorphemeCutSequenceAnimationEntity::WriteSimpleJson, IMorphemeCutSequenceAnimationEntity::FromSimpleJson);

void IMorphemeCutSequenceAnimationEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeCutSequenceAnimationEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeCutSequenceAnimationEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IMorphemeCutSequenceAnimationEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMorphemeCutSequenceAnimationEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMorphemeCutSequenceAnimationEntity s_Object;

	*reinterpret_cast<IMorphemeCutSequenceAnimationEntity*>(p_Target) = s_Object;
}

void IMorphemeCutSequenceAnimationEntity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SExitsActiveSaveData::TypeInfo = ZHMTypeInfo("SExitsActiveSaveData", sizeof(SExitsActiveSaveData), alignof(SExitsActiveSaveData), SExitsActiveSaveData::WriteJson, SExitsActiveSaveData::WriteSimpleJson, SExitsActiveSaveData::FromSimpleJson);

void SExitsActiveSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExitsActiveSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SExitsActiveSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExitsActiveSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsActive") << ":";
	p_Stream << s_Object->m_bIsActive;

	p_Stream << "}";
}

void SExitsActiveSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExitsActiveSaveData s_Object;

	s_Object.m_bIsActive = bool(p_Document["m_bIsActive"]);

	*reinterpret_cast<SExitsActiveSaveData*>(p_Target) = s_Object;
}

void SExitsActiveSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SEscortSituation2Actors::TypeInfo = ZHMTypeInfo("SEscortSituation2Actors", sizeof(SEscortSituation2Actors), alignof(SEscortSituation2Actors), SEscortSituation2Actors::WriteJson, SEscortSituation2Actors::WriteSimpleJson, SEscortSituation2Actors::FromSimpleJson);

void SEscortSituation2Actors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortSituation2Actors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituation2Actors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortSituation2Actors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SEscortSituation2Actors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortSituation2Actors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SEscortSituation2Actors*>(p_Target) = s_Object;
}

void SEscortSituation2Actors::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMathLerpsSaveData_float32::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_float32", sizeof(SMathLerpsSaveData_float32), alignof(SMathLerpsSaveData_float32), SMathLerpsSaveData_float32::WriteJson, SMathLerpsSaveData_float32::WriteSimpleJson, SMathLerpsSaveData_float32::FromSimpleJson);

void SMathLerpsSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_float32") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_float32::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_float32::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_float32::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_float32 s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathLerpSaveData_float32 s_ArrayItem;
		SMathLerpSaveData_float32::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathLerpsSaveData_float32*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_float32::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_float32, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_float32, m_aData));}

ZHMTypeInfo IAnimPlayerEntity::TypeInfo = ZHMTypeInfo("IAnimPlayerEntity", sizeof(IAnimPlayerEntity), alignof(IAnimPlayerEntity), IAnimPlayerEntity::WriteJson, IAnimPlayerEntity::WriteSimpleJson, IAnimPlayerEntity::FromSimpleJson);

void IAnimPlayerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAnimPlayerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAnimPlayerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IAnimPlayerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IAnimPlayerEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IAnimPlayerEntity s_Object;

	*reinterpret_cast<IAnimPlayerEntity*>(p_Target) = s_Object;
}

void IAnimPlayerEntity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IValueEntity::TypeInfo = ZHMTypeInfo("IValueEntity", sizeof(IValueEntity), alignof(IValueEntity), IValueEntity::WriteJson, IValueEntity::WriteSimpleJson, IValueEntity::FromSimpleJson);

void IValueEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IValueEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IValueEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IValueEntity s_Object;

	*reinterpret_cast<IValueEntity*>(p_Target) = s_Object;
}

void IValueEntity::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAnimatedActorOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorOrderSaveData", sizeof(SAnimatedActorOrderSaveData), alignof(SAnimatedActorOrderSaveData), SAnimatedActorOrderSaveData::WriteJson, SAnimatedActorOrderSaveData::WriteSimpleJson, SAnimatedActorOrderSaveData::FromSimpleJson);

void SAnimatedActorOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eOrderType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorAnimationOrder") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eOrderType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorAnimationOrder", static_cast<int>(s_Object->m_eOrderType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_OrderData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eOrderType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorAnimationOrder", static_cast<int>(s_Object->m_eOrderType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_OrderData, p_Stream);

	p_Stream << "}";
}

void SAnimatedActorOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorOrderSaveData s_Object;

	s_Object.m_eOrderType = static_cast<EActorAnimationOrder>(ZHMEnums::GetEnumValueByName("EActorAnimationOrder", std::string_view(p_Document["m_eOrderType"])));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_OrderData"], &s_Item);
		s_Object.m_OrderData = s_Item;
	}

	*reinterpret_cast<SAnimatedActorOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_OrderData.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorOrderSaveData, m_OrderData));}

ZHMTypeInfo SGameKeywordManagerSaveData::TypeInfo = ZHMTypeInfo("SGameKeywordManagerSaveData", sizeof(SGameKeywordManagerSaveData), alignof(SGameKeywordManagerSaveData), SGameKeywordManagerSaveData::WriteJson, SGameKeywordManagerSaveData::WriteSimpleJson, SGameKeywordManagerSaveData::FromSimpleJson);

void SGameKeywordManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameKeywordManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aKeywordsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordsData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKeywordsData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SKeywordSaveData") << "," << JsonStr("$val") << ":";
		SKeywordSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aKeywordsData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aKeywordStringData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordStringData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKeywordStringData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aKeywordStringData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGameKeywordManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGameKeywordManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aKeywordsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordsData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKeywordsData[i];
		SKeywordSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aKeywordsData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aKeywordStringData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordStringData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aKeywordStringData[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->m_aKeywordStringData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGameKeywordManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameKeywordManagerSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aKeywordsData"])
	{
		SKeywordSaveData s_ArrayItem;
		SKeywordSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aKeywordsData.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aKeywordStringData"])
	{
		s_Object.m_aKeywordStringData.push_back(std::string_view(s_Item));
	}

	*reinterpret_cast<SGameKeywordManagerSaveData*>(p_Target) = s_Object;
}

void SGameKeywordManagerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aKeywordsData.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameKeywordManagerSaveData, m_aKeywordsData));	m_aKeywordStringData.Serialize(p_Serializer, p_OwnOffset + offsetof(SGameKeywordManagerSaveData, m_aKeywordStringData));}

ZHMTypeInfo SUIGridCellPosition::TypeInfo = ZHMTypeInfo("SUIGridCellPosition", sizeof(SUIGridCellPosition), alignof(SUIGridCellPosition), SUIGridCellPosition::WriteJson, SUIGridCellPosition::WriteSimpleJson, SUIGridCellPosition::FromSimpleJson);

void SUIGridCellPosition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SUIGridCellPosition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nColumnIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nColumnIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nRowIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nRowIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nColumnSpan") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nColumnSpan;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nRowSpan") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nRowSpan;
	p_Stream << "}";

	p_Stream << "}";
}

void SUIGridCellPosition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SUIGridCellPosition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nColumnIndex") << ":";
	p_Stream << s_Object->nColumnIndex;
	p_Stream << ",";

	p_Stream << JsonStr("nRowIndex") << ":";
	p_Stream << s_Object->nRowIndex;
	p_Stream << ",";

	p_Stream << JsonStr("nColumnSpan") << ":";
	p_Stream << s_Object->nColumnSpan;
	p_Stream << ",";

	p_Stream << JsonStr("nRowSpan") << ":";
	p_Stream << s_Object->nRowSpan;

	p_Stream << "}";
}

void SUIGridCellPosition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SUIGridCellPosition s_Object;

	s_Object.nColumnIndex = static_cast<int32>(int64_t(p_Document["nColumnIndex"]));

	s_Object.nRowIndex = static_cast<int32>(int64_t(p_Document["nRowIndex"]));

	s_Object.nColumnSpan = static_cast<int32>(int64_t(p_Document["nColumnSpan"]));

	s_Object.nRowSpan = static_cast<int32>(int64_t(p_Document["nRowSpan"]));

	*reinterpret_cast<SUIGridCellPosition*>(p_Target) = s_Object;
}

void SUIGridCellPosition::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SRegionSaveData::TypeInfo = ZHMTypeInfo("SRegionSaveData", sizeof(SRegionSaveData), alignof(SRegionSaveData), SRegionSaveData::WriteJson, SRegionSaveData::WriteSimpleJson, SRegionSaveData::FromSimpleJson);

void SRegionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRegionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("CrowdRegionType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("CrowdRegionType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCenter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vCenter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDirection;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRadius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRadius;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLifetime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLifetime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAge;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_nGroupID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleActorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nObstacleActorIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SRegionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SRegionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("CrowdRegionType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_vCenter") << ":";
	float4::WriteSimpleJson(&s_Object->m_vCenter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nDirection") << ":";
	p_Stream << s_Object->m_nDirection;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRadius") << ":";
	p_Stream << s_Object->m_nRadius;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAngle") << ":";
	p_Stream << s_Object->m_nAngle;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLifetime") << ":";
	p_Stream << s_Object->m_nLifetime;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAge") << ":";
	p_Stream << s_Object->m_nAge;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << static_cast<int>(s_Object->m_nGroupID);
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleActorIndex") << ":";
	p_Stream << s_Object->m_nObstacleActorIndex;

	p_Stream << "}";
}

void SRegionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRegionSaveData s_Object;

	s_Object.m_nIndex = static_cast<uint32>(int64_t(p_Document["m_nIndex"]));

	s_Object.m_eType = static_cast<CrowdRegionType>(ZHMEnums::GetEnumValueByName("CrowdRegionType", std::string_view(p_Document["m_eType"])));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vCenter"], &s_Item);
		s_Object.m_vCenter = s_Item;
	}

	s_Object.m_nDirection = static_cast<float32>(double(p_Document["m_nDirection"]));

	s_Object.m_nRadius = static_cast<float32>(double(p_Document["m_nRadius"]));

	s_Object.m_nAngle = static_cast<uint32>(int64_t(p_Document["m_nAngle"]));

	s_Object.m_nLifetime = static_cast<float32>(double(p_Document["m_nLifetime"]));

	s_Object.m_nAge = static_cast<float32>(double(p_Document["m_nAge"]));

	s_Object.m_nGroupID = static_cast<uint8>(int64_t(p_Document["m_nGroupID"]));

	s_Object.m_nObstacleActorIndex = static_cast<int16>(int64_t(p_Document["m_nObstacleActorIndex"]));

	*reinterpret_cast<SRegionSaveData*>(p_Target) = s_Object;
}

void SRegionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vCenter.Serialize(p_Serializer, p_OwnOffset + offsetof(SRegionSaveData, m_vCenter));}

ZHMTypeInfo SItemsSaveData::TypeInfo = ZHMTypeInfo("SItemsSaveData", sizeof(SItemsSaveData), alignof(SItemsSaveData), SItemsSaveData::WriteJson, SItemsSaveData::WriteSimpleJson, SItemsSaveData::FromSimpleJson);

void SItemsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemSaveData") << "," << JsonStr("$val") << ":";
		SItemSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SItemsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SItemSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SItemsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemsSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SItemSaveData s_ArrayItem;
		SItemSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SItemsSaveData*>(p_Target) = s_Object;
}

void SItemsSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemsSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemsSaveData, m_aData));}

ZHMTypeInfo SEscortOutOrderSaveData::TypeInfo = ZHMTypeInfo("SEscortOutOrderSaveData", sizeof(SEscortOutOrderSaveData), alignof(SEscortOutOrderSaveData), SEscortOutOrderSaveData::WriteJson, SEscortOutOrderSaveData::WriteSimpleJson, SEscortOutOrderSaveData::FromSimpleJson);

void SEscortOutOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortOutOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aExitPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aExitPoints.size(); ++i)
	{
		auto& s_Item = s_Object->m_aExitPoints[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
		float4::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aExitPoints.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SEscortOutOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortOutOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aExitPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aExitPoints.size(); ++i)
	{
		auto& s_Item = s_Object->m_aExitPoints[i];
		float4::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aExitPoints.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEscortOutOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortOutOrderSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aExitPoints"])
	{
		float4 s_ArrayItem;
		float4::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aExitPoints.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SEscortOutOrderSaveData*>(p_Target) = s_Object;
}

void SEscortOutOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aExitPoints.Serialize(p_Serializer, p_OwnOffset + offsetof(SEscortOutOrderSaveData, m_aExitPoints));}

ZHMTypeInfo ZContractEvaluationContext::TypeInfo = ZHMTypeInfo("ZContractEvaluationContext", sizeof(ZContractEvaluationContext), alignof(ZContractEvaluationContext), ZContractEvaluationContext::WriteJson, ZContractEvaluationContext::WriteSimpleJson, ZContractEvaluationContext::FromSimpleJson);

void ZContractEvaluationContext::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZContractEvaluationContext*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZContractEvaluationContext::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZContractEvaluationContext*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZContractEvaluationContext::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZContractEvaluationContext s_Object;

	*reinterpret_cast<ZContractEvaluationContext*>(p_Target) = s_Object;
}

void ZContractEvaluationContext::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SEscortSituationActors::TypeInfo = ZHMTypeInfo("SEscortSituationActors", sizeof(SEscortSituationActors), alignof(SEscortSituationActors), SEscortSituationActors::WriteJson, SEscortSituationActors::WriteSimpleJson, SEscortSituationActors::FromSimpleJson);

void SEscortSituationActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortSituationActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituationActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEscortSituationActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SEscortSituationActors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortSituationActors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SEscortSituationActors*>(p_Target) = s_Object;
}

void SEscortSituationActors::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SLockdownManagerSaveData::TypeInfo = ZHMTypeInfo("SLockdownManagerSaveData", sizeof(SLockdownManagerSaveData), alignof(SLockdownManagerSaveData), SLockdownManagerSaveData::WriteJson, SLockdownManagerSaveData::WriteSimpleJson, SLockdownManagerSaveData::FromSimpleJson);

void SLockdownManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLockdownManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aAIZones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAIZones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAIZones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLockdownManagerAIZoneSaveData") << "," << JsonStr("$val") << ":";
		SLockdownManagerAIZoneSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAIZones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SLockdownManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLockdownManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aAIZones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAIZones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAIZones[i];
		SLockdownManagerAIZoneSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aAIZones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLockdownManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLockdownManagerSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aAIZones"])
	{
		SLockdownManagerAIZoneSaveData s_ArrayItem;
		SLockdownManagerAIZoneSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aAIZones.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SLockdownManagerSaveData*>(p_Target) = s_Object;
}

void SLockdownManagerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aAIZones.Serialize(p_Serializer, p_OwnOffset + offsetof(SLockdownManagerSaveData, m_aAIZones));}

ZHMTypeInfo SAudioEmitterSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterSaveData", sizeof(SAudioEmitterSaveData), alignof(SAudioEmitterSaveData), SAudioEmitterSaveData::WriteJson, SAudioEmitterSaveData::WriteSimpleJson, SAudioEmitterSaveData::FromSimpleJson);

void SAudioEmitterSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEmitter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEmitter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfEvents;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfRTPCs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfRTPCs;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfSwitches") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfSwitches;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEmitter") << ":";
	p_Stream << s_Object->m_rEmitter;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfEvents") << ":";
	p_Stream << s_Object->m_nNumberOfEvents;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfRTPCs") << ":";
	p_Stream << s_Object->m_nNumberOfRTPCs;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfSwitches") << ":";
	p_Stream << s_Object->m_nNumberOfSwitches;

	p_Stream << "}";
}

void SAudioEmitterSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterSaveData s_Object;

	s_Object.m_rEmitter = static_cast<uint32>(int64_t(p_Document["m_rEmitter"]));

	s_Object.m_nNumberOfEvents = static_cast<uint32>(int64_t(p_Document["m_nNumberOfEvents"]));

	s_Object.m_nNumberOfRTPCs = static_cast<uint32>(int64_t(p_Document["m_nNumberOfRTPCs"]));

	s_Object.m_nNumberOfSwitches = static_cast<uint32>(int64_t(p_Document["m_nNumberOfSwitches"]));

	*reinterpret_cast<SAudioEmitterSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAudioEmitterEventSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterEventSaveData", sizeof(SAudioEmitterEventSaveData), alignof(SAudioEmitterEventSaveData), SAudioEmitterEventSaveData::WriteJson, SAudioEmitterEventSaveData::WriteSimpleJson, SAudioEmitterEventSaveData::FromSimpleJson);

void SAudioEmitterEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEventId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEventId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFlags;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rEventSender") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEventSender;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSeekPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSeekPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPlayState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_nPlayState);
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioEmitterEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEventId") << ":";
	p_Stream << s_Object->m_nEventId;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFlags") << ":";
	p_Stream << s_Object->m_nFlags;
	p_Stream << ",";

	p_Stream << JsonStr("m_rEventSender") << ":";
	p_Stream << s_Object->m_rEventSender;
	p_Stream << ",";

	p_Stream << JsonStr("m_nSeekPosition") << ":";
	p_Stream << s_Object->m_nSeekPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPlayState") << ":";
	p_Stream << static_cast<int>(s_Object->m_nPlayState);

	p_Stream << "}";
}

void SAudioEmitterEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterEventSaveData s_Object;

	s_Object.m_nEventId = static_cast<uint32>(int64_t(p_Document["m_nEventId"]));

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	s_Object.m_nFlags = static_cast<uint32>(int64_t(p_Document["m_nFlags"]));

	s_Object.m_rEventSender = static_cast<uint32>(int64_t(p_Document["m_rEventSender"]));

	s_Object.m_nSeekPosition = static_cast<int32>(int64_t(p_Document["m_nSeekPosition"]));

	s_Object.m_nPlayState = static_cast<uint8>(int64_t(p_Document["m_nPlayState"]));

	*reinterpret_cast<SAudioEmitterEventSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterEventSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAudioSaveData::TypeInfo = ZHMTypeInfo("SAudioSaveData", sizeof(SAudioSaveData), alignof(SAudioSaveData), SAudioSaveData::WriteJson, SAudioSaveData::WriteSimpleJson, SAudioSaveData::FromSimpleJson);

void SAudioSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEmitters") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitters.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitters[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitters.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterEventSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterEventSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitterEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterRTPCs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterRTPCs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterRTPCSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterRTPCSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitterRTPCs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterSwitches") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterSwitches.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterSwitches[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterSwitchSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterSwitchSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitterSwitches.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGlobalStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterStateSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterStateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGlobalStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalRTPCs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGlobalRTPCs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterRTPCSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterRTPCSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGlobalRTPCs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEventsEnabledAfterInit") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEventsEnabledAfterInit.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEventsEnabledAfterInit[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEventsEnabledAfterInit.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAudioSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAudioSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEmitters") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitters.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitters[i];
		SAudioEmitterSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEmitters.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterEvents[i];
		SAudioEmitterEventSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEmitterEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterRTPCs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterRTPCs[i];
		SAudioEmitterRTPCSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEmitterRTPCs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterSwitches") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterSwitches.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEmitterSwitches[i];
		SAudioEmitterSwitchSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aEmitterSwitches.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalStates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGlobalStates[i];
		SAudioEmitterStateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGlobalStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalRTPCs.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGlobalRTPCs[i];
		SAudioEmitterRTPCSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGlobalRTPCs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEventsEnabledAfterInit") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEventsEnabledAfterInit.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEventsEnabledAfterInit[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEventsEnabledAfterInit.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAudioSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEmitters"])
	{
		SAudioEmitterSaveData s_ArrayItem;
		SAudioEmitterSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aEmitters.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aEmitterEvents"])
	{
		SAudioEmitterEventSaveData s_ArrayItem;
		SAudioEmitterEventSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aEmitterEvents.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aEmitterRTPCs"])
	{
		SAudioEmitterRTPCSaveData s_ArrayItem;
		SAudioEmitterRTPCSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aEmitterRTPCs.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aEmitterSwitches"])
	{
		SAudioEmitterSwitchSaveData s_ArrayItem;
		SAudioEmitterSwitchSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aEmitterSwitches.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aGlobalStates"])
	{
		SAudioEmitterStateSaveData s_ArrayItem;
		SAudioEmitterStateSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aGlobalStates.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aGlobalRTPCs"])
	{
		SAudioEmitterRTPCSaveData s_ArrayItem;
		SAudioEmitterRTPCSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aGlobalRTPCs.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aEventsEnabledAfterInit"])
	{
		s_Object.m_aEventsEnabledAfterInit.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SAudioSaveData*>(p_Target) = s_Object;
}

void SAudioSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEmitters.Serialize(p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEmitters));	m_aEmitterEvents.Serialize(p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEmitterEvents));	m_aEmitterRTPCs.Serialize(p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEmitterRTPCs));	m_aEmitterSwitches.Serialize(p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEmitterSwitches));	m_aGlobalStates.Serialize(p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aGlobalStates));	m_aGlobalRTPCs.Serialize(p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aGlobalRTPCs));	m_aEventsEnabledAfterInit.Serialize(p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEventsEnabledAfterInit));}

ZHMTypeInfo SEvacuateTrespassGroupSaveData::TypeInfo = ZHMTypeInfo("SEvacuateTrespassGroupSaveData", sizeof(SEvacuateTrespassGroupSaveData), alignof(SEvacuateTrespassGroupSaveData), SEvacuateTrespassGroupSaveData::WriteJson, SEvacuateTrespassGroupSaveData::WriteSimpleJson, SEvacuateTrespassGroupSaveData::FromSimpleJson);

void SEvacuateTrespassGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateTrespassGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_safeRoomNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_leader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_leader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_assistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_assistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_escalate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_escalate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_completed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_completed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_standDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_standDown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_warningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_warningCount;
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateTrespassGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEvacuateTrespassGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomNode") << ":";
	p_Stream << s_Object->m_safeRoomNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_leader") << ":";
	p_Stream << s_Object->m_leader;
	p_Stream << ",";

	p_Stream << JsonStr("m_assistant") << ":";
	p_Stream << s_Object->m_assistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_escalate") << ":";
	p_Stream << s_Object->m_escalate;
	p_Stream << ",";

	p_Stream << JsonStr("m_completed") << ":";
	p_Stream << s_Object->m_completed;
	p_Stream << ",";

	p_Stream << JsonStr("m_standDown") << ":";
	p_Stream << s_Object->m_standDown;
	p_Stream << ",";

	p_Stream << JsonStr("m_warningCount") << ":";
	p_Stream << s_Object->m_warningCount;

	p_Stream << "}";
}

void SEvacuateTrespassGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEvacuateTrespassGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_target = static_cast<int32>(int64_t(p_Document["m_target"]));

	s_Object.m_safeRoomNode = static_cast<uint32>(int64_t(p_Document["m_safeRoomNode"]));

	s_Object.m_leader = static_cast<uint32>(int64_t(p_Document["m_leader"]));

	s_Object.m_assistant = static_cast<uint32>(int64_t(p_Document["m_assistant"]));

	s_Object.m_escalate = bool(p_Document["m_escalate"]);

	s_Object.m_completed = bool(p_Document["m_completed"]);

	s_Object.m_standDown = bool(p_Document["m_standDown"]);

	s_Object.m_warningCount = static_cast<int32>(int64_t(p_Document["m_warningCount"]));

	*reinterpret_cast<SEvacuateTrespassGroupSaveData*>(p_Target) = s_Object;
}

void SEvacuateTrespassGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SEvacuateTrespassGroupSaveData, m_fsmState));}

ZHMTypeInfo SSentryZoneSaveData::TypeInfo = ZHMTypeInfo("SSentryZoneSaveData", sizeof(SSentryZoneSaveData), alignof(SSentryZoneSaveData), SSentryZoneSaveData::WriteJson, SSentryZoneSaveData::WriteSimpleJson, SSentryZoneSaveData::FromSimpleJson);

void SSentryZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tGreetingCooldown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tGreetingCooldown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLoiteringCooldown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLoiteringCooldown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowingWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bLeftThroughWarningZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bLeftThroughWarningZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bEnteredThroughEntranceZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bEnteredThroughEntranceZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInEntranceZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInEntranceZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInWarningZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInWarningZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInGreetingZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInGreetingZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInReFriskZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInReFriskZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInRequiredDisguise") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInRequiredDisguise;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskExemptDisguise") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInFriskExemptDisguise;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasRequiredItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasRequiredItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanShowActionPrompt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCanShowActionPrompt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInAnyZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetInAnyZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrisked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFrisked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemChecked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItemChecked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreeted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreeted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedInstruction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreetedInstruction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedLoitering") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreetedLoitering;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedUnexpected") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreetedUnexpected;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskWarningZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInFriskWarningZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesAllowedDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesAllowedDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesAllowedDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aDisguisesAllowedDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesFriskExemptDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesFriskExemptDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesFriskExemptDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aDisguisesFriskExemptDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesDontEscalateOnLineCrossingDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemsDroppedInZone") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ItemsDroppedInZone.size(); ++i)
	{
		auto& s_Item = s_Object->m_ItemsDroppedInZone[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_ItemsDroppedInZone.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SSentryZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tGreetingCooldown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tGreetingCooldown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLoiteringCooldown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLoiteringCooldown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << s_Object->m_bShowingWarning;
	p_Stream << ",";

	p_Stream << JsonStr("bLeftThroughWarningZone") << ":";
	p_Stream << s_Object->bLeftThroughWarningZone;
	p_Stream << ",";

	p_Stream << JsonStr("bEnteredThroughEntranceZone") << ":";
	p_Stream << s_Object->bEnteredThroughEntranceZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInEntranceZone") << ":";
	p_Stream << s_Object->bInEntranceZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInWarningZone") << ":";
	p_Stream << s_Object->bInWarningZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInGreetingZone") << ":";
	p_Stream << s_Object->bInGreetingZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInReFriskZone") << ":";
	p_Stream << s_Object->bInReFriskZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInRequiredDisguise") << ":";
	p_Stream << s_Object->m_bInRequiredDisguise;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskExemptDisguise") << ":";
	p_Stream << s_Object->m_bInFriskExemptDisguise;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasRequiredItem") << ":";
	p_Stream << s_Object->m_bHasRequiredItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanShowActionPrompt") << ":";
	p_Stream << s_Object->m_bCanShowActionPrompt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInAnyZone") << ":";
	p_Stream << s_Object->m_bTargetInAnyZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationActive") << ":";
	p_Stream << s_Object->m_bSituationActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrisked") << ":";
	p_Stream << s_Object->m_bFrisked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemChecked") << ":";
	p_Stream << s_Object->m_bItemChecked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreeted") << ":";
	p_Stream << s_Object->m_bGreeted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedInstruction") << ":";
	p_Stream << s_Object->m_bGreetedInstruction;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedLoitering") << ":";
	p_Stream << s_Object->m_bGreetedLoitering;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedUnexpected") << ":";
	p_Stream << s_Object->m_bGreetedUnexpected;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskWarningZone") << ":";
	p_Stream << s_Object->m_bInFriskWarningZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesAllowedDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesAllowedDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesAllowedDisabled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aDisguisesAllowedDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesFriskExemptDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesFriskExemptDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesFriskExemptDisabled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aDisguisesFriskExemptDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesDontEscalateOnLineCrossingDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemsDroppedInZone") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ItemsDroppedInZone.size(); ++i)
	{
		auto& s_Item = s_Object->m_ItemsDroppedInZone[i];
		p_Stream << s_Item;

		if (i < s_Object->m_ItemsDroppedInZone.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSentryZoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSentryZoneSaveData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tGreetingCooldown"], &s_Item);
		s_Object.m_tGreetingCooldown = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLoiteringCooldown"], &s_Item);
		s_Object.m_tLoiteringCooldown = s_Item;
	}

	s_Object.m_nWarningCount = static_cast<int32>(int64_t(p_Document["m_nWarningCount"]));

	s_Object.m_bShowingWarning = bool(p_Document["m_bShowingWarning"]);

	s_Object.bLeftThroughWarningZone = bool(p_Document["bLeftThroughWarningZone"]);

	s_Object.bEnteredThroughEntranceZone = bool(p_Document["bEnteredThroughEntranceZone"]);

	s_Object.bInEntranceZone = bool(p_Document["bInEntranceZone"]);

	s_Object.bInWarningZone = bool(p_Document["bInWarningZone"]);

	s_Object.bInGreetingZone = bool(p_Document["bInGreetingZone"]);

	s_Object.bInReFriskZone = bool(p_Document["bInReFriskZone"]);

	s_Object.m_bInRequiredDisguise = bool(p_Document["m_bInRequiredDisguise"]);

	s_Object.m_bInFriskExemptDisguise = bool(p_Document["m_bInFriskExemptDisguise"]);

	s_Object.m_bHasRequiredItem = bool(p_Document["m_bHasRequiredItem"]);

	s_Object.m_bCanShowActionPrompt = bool(p_Document["m_bCanShowActionPrompt"]);

	s_Object.m_bTargetInAnyZone = bool(p_Document["m_bTargetInAnyZone"]);

	s_Object.m_bSituationActive = bool(p_Document["m_bSituationActive"]);

	s_Object.m_bFrisked = bool(p_Document["m_bFrisked"]);

	s_Object.m_bItemChecked = bool(p_Document["m_bItemChecked"]);

	s_Object.m_bGreeted = bool(p_Document["m_bGreeted"]);

	s_Object.m_bGreetedInstruction = bool(p_Document["m_bGreetedInstruction"]);

	s_Object.m_bGreetedLoitering = bool(p_Document["m_bGreetedLoitering"]);

	s_Object.m_bGreetedUnexpected = bool(p_Document["m_bGreetedUnexpected"]);

	s_Object.m_bInFriskWarningZone = bool(p_Document["m_bInFriskWarningZone"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_aDisguisesAllowedDisabled"])
	{
		s_Object.m_aDisguisesAllowedDisabled.push_back(bool(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aDisguisesFriskExemptDisabled"])
	{
		s_Object.m_aDisguisesFriskExemptDisabled.push_back(bool(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aDisguisesDontEscalateOnLineCrossingDisabled"])
	{
		s_Object.m_aDisguisesDontEscalateOnLineCrossingDisabled.push_back(bool(s_Item));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_ItemsDroppedInZone"])
	{
		s_Object.m_ItemsDroppedInZone.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SSentryZoneSaveData*>(p_Target) = s_Object;
}

void SSentryZoneSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tGreetingCooldown.Serialize(p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_tGreetingCooldown));	m_tLoiteringCooldown.Serialize(p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_tLoiteringCooldown));	m_aDisguisesAllowedDisabled.Serialize(p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_aDisguisesAllowedDisabled));	m_aDisguisesFriskExemptDisabled.Serialize(p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_aDisguisesFriskExemptDisabled));	m_aDisguisesDontEscalateOnLineCrossingDisabled.Serialize(p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_aDisguisesDontEscalateOnLineCrossingDisabled));	m_ItemsDroppedInZone.Serialize(p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_ItemsDroppedInZone));}

ZHMTypeInfo ZUIDataProvider::TypeInfo = ZHMTypeInfo("ZUIDataProvider", sizeof(ZUIDataProvider), alignof(ZUIDataProvider), ZUIDataProvider::WriteJson, ZUIDataProvider::WriteSimpleJson, ZUIDataProvider::FromSimpleJson);

void ZUIDataProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZUIDataProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZUIDataProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZUIDataProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZUIDataProvider::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZUIDataProvider s_Object;

	*reinterpret_cast<ZUIDataProvider*>(p_Target) = s_Object;
}

void ZUIDataProvider::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZWorldMapMetaData::TypeInfo = ZHMTypeInfo("ZWorldMapMetaData", sizeof(ZWorldMapMetaData), alignof(ZWorldMapMetaData), ZWorldMapMetaData::WriteJson, ZWorldMapMetaData::WriteSimpleJson, ZWorldMapMetaData::FromSimpleJson);

void ZWorldMapMetaData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZWorldMapMetaData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZWorldMapMetaData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZWorldMapMetaData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZWorldMapMetaData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZWorldMapMetaData s_Object;

	*reinterpret_cast<ZWorldMapMetaData*>(p_Target) = s_Object;
}

void ZWorldMapMetaData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorItemActionSaveData::TypeInfo = ZHMTypeInfo("SActorItemActionSaveData", sizeof(SActorItemActionSaveData), alignof(SActorItemActionSaveData), SActorItemActionSaveData::WriteJson, SActorItemActionSaveData::WriteSimpleJson, SActorItemActionSaveData::FromSimpleJson);

void SActorItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SActorItemActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorItemActionSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SActorItemActionSaveData*>(p_Target) = s_Object;
}

void SActorItemActionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SInventoryControllerSlotSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerSlotSaveData", sizeof(SInventoryControllerSlotSaveData), alignof(SInventoryControllerSlotSaveData), SInventoryControllerSlotSaveData::WriteJson, SInventoryControllerSlotSaveData::WriteSimpleJson, SInventoryControllerSlotSaveData::FromSimpleJson);

void SInventoryControllerSlotSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerSlotSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryControllerItemSaveData") << "," << JsonStr("$val") << ":";
		SInventoryControllerItemSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStorageType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryStorageType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStorageType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryStorageType", static_cast<int>(s_Object->m_eStorageType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryControllerSlotSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryControllerSlotSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		SInventoryControllerItemSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStorageType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryStorageType", static_cast<int>(s_Object->m_eStorageType)));

	p_Stream << "}";
}

void SInventoryControllerSlotSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryControllerSlotSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aItems"])
	{
		SInventoryControllerItemSaveData s_ArrayItem;
		SInventoryControllerItemSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aItems.push_back(s_ArrayItem);
	}

	s_Object.m_eStorageType = static_cast<EInventoryStorageType>(ZHMEnums::GetEnumValueByName("EInventoryStorageType", std::string_view(p_Document["m_eStorageType"])));

	*reinterpret_cast<SInventoryControllerSlotSaveData*>(p_Target) = s_Object;
}

void SInventoryControllerSlotSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aItems.Serialize(p_Serializer, p_OwnOffset + offsetof(SInventoryControllerSlotSaveData, m_aItems));}

ZHMTypeInfo STriggerAlarmGroupSaveData::TypeInfo = ZHMTypeInfo("STriggerAlarmGroupSaveData", sizeof(STriggerAlarmGroupSaveData), alignof(STriggerAlarmGroupSaveData), STriggerAlarmGroupSaveData::WriteJson, STriggerAlarmGroupSaveData::WriteSimpleJson, STriggerAlarmGroupSaveData::FromSimpleJson);

void STriggerAlarmGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STriggerAlarmGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rAlarm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggeredAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTriggeredAlarm;
	p_Stream << "}";

	p_Stream << "}";
}

void STriggerAlarmGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STriggerAlarmGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rAlarm") << ":";
	p_Stream << s_Object->m_rAlarm;
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggeredAlarm") << ":";
	p_Stream << s_Object->m_bTriggeredAlarm;

	p_Stream << "}";
}

void STriggerAlarmGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STriggerAlarmGroupSaveData s_Object;

	s_Object.m_rTarget = static_cast<uint32>(int64_t(p_Document["m_rTarget"]));

	s_Object.m_rAlarm = static_cast<uint32>(int64_t(p_Document["m_rAlarm"]));

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_bTriggeredAlarm = bool(p_Document["m_bTriggeredAlarm"]);

	*reinterpret_cast<STriggerAlarmGroupSaveData*>(p_Target) = s_Object;
}

void STriggerAlarmGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(STriggerAlarmGroupSaveData, m_fsmState));}

ZHMTypeInfo SActorAnimSetSaveData::TypeInfo = ZHMTypeInfo("SActorAnimSetSaveData", sizeof(SActorAnimSetSaveData), alignof(SActorAnimSetSaveData), SActorAnimSetSaveData::WriteJson, SActorAnimSetSaveData::WriteSimpleJson, SActorAnimSetSaveData::FromSimpleJson);

void SActorAnimSetSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAnimSetSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eAnimSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAnimSetType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAnimSet) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_eAnimSet))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCustomAnimationSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCustomAnimationSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxTension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eVariationResourceMaxTension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eVariationResourceMaxTension))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAnimSetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAnimSetState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAnimSetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetState", static_cast<int>(s_Object->m_eAnimSetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePreCustomAnimSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAnimSetType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePreCustomAnimSet) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_ePreCustomAnimSet))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aLocoVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLocoVariationIndecies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLocoVariationIndecies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorAnimSetVariationIndexSaveData") << "," << JsonStr("$val") << ":";
		SActorAnimSetVariationIndexSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aLocoVariationIndecies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aReactVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aReactVariationIndecies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aReactVariationIndecies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorAnimSetVariationIndexSaveData") << "," << JsonStr("$val") << ":";
		SActorAnimSetVariationIndexSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aReactVariationIndecies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorAnimSetSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAnimSetSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eAnimSet") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_eAnimSet)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rCustomAnimationSet") << ":";
	p_Stream << s_Object->m_rCustomAnimationSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxTension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eVariationResourceMaxTension)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eAnimSetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetState", static_cast<int>(s_Object->m_eAnimSetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_ePreCustomAnimSet") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_ePreCustomAnimSet)));
	p_Stream << ",";

	p_Stream << JsonStr("m_aLocoVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLocoVariationIndecies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aLocoVariationIndecies[i];
		SActorAnimSetVariationIndexSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aLocoVariationIndecies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aReactVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aReactVariationIndecies.size(); ++i)
	{
		auto& s_Item = s_Object->m_aReactVariationIndecies[i];
		SActorAnimSetVariationIndexSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aReactVariationIndecies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorAnimSetSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorAnimSetSaveData s_Object;

	s_Object.m_eAnimSet = static_cast<EAnimSetType>(ZHMEnums::GetEnumValueByName("EAnimSetType", std::string_view(p_Document["m_eAnimSet"])));

	s_Object.m_rCustomAnimationSet = static_cast<uint32>(int64_t(p_Document["m_rCustomAnimationSet"]));

	s_Object.m_eVariationResourceMaxTension = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eVariationResourceMaxTension"])));

	s_Object.m_eVariationResourceMaxEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eVariationResourceMaxEmotionState"])));

	s_Object.m_eAnimSetEmotionState = static_cast<EAnimSetState>(ZHMEnums::GetEnumValueByName("EAnimSetState", std::string_view(p_Document["m_eAnimSetEmotionState"])));

	s_Object.m_ePreCustomAnimSet = static_cast<EAnimSetType>(ZHMEnums::GetEnumValueByName("EAnimSetType", std::string_view(p_Document["m_ePreCustomAnimSet"])));

	for (simdjson::ondemand::value s_Item : p_Document["m_aLocoVariationIndecies"])
	{
		SActorAnimSetVariationIndexSaveData s_ArrayItem;
		SActorAnimSetVariationIndexSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aLocoVariationIndecies.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aReactVariationIndecies"])
	{
		SActorAnimSetVariationIndexSaveData s_ArrayItem;
		SActorAnimSetVariationIndexSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aReactVariationIndecies.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActorAnimSetSaveData*>(p_Target) = s_Object;
}

void SActorAnimSetSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aLocoVariationIndecies.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorAnimSetSaveData, m_aLocoVariationIndecies));	m_aReactVariationIndecies.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorAnimSetSaveData, m_aReactVariationIndecies));}

ZHMTypeInfo SActorInventorySaveData::TypeInfo = ZHMTypeInfo("SActorInventorySaveData", sizeof(SActorInventorySaveData), alignof(SActorInventorySaveData), SActorInventorySaveData::WriteJson, SActorInventorySaveData::WriteSimpleJson, SActorInventorySaveData::FromSimpleJson);

void SActorInventorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorInventorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorInventoryItemSaveData") << "," << JsonStr("$val") << ":";
		SActorInventoryItemSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorInventorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorInventorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item = s_Object->m_aItems[i];
		SActorInventoryItemSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorInventorySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorInventorySaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aItems"])
	{
		SActorInventoryItemSaveData s_ArrayItem;
		SActorInventoryItemSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aItems.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActorInventorySaveData*>(p_Target) = s_Object;
}

void SActorInventorySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aItems.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorInventorySaveData, m_aItems));}

ZHMTypeInfo SActorSpreadControllerSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadControllerSaveData", sizeof(SActorSpreadControllerSaveData), alignof(SActorSpreadControllerSaveData), SActorSpreadControllerSaveData::WriteJson, SActorSpreadControllerSaveData::WriteSimpleJson, SActorSpreadControllerSaveData::FromSimpleJson);

void SActorSpreadControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSpreadingActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aSpreadingActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDeadSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadSpreadingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDeadSpreadingActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aDeadSpreadingActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSpreadingActorsAddedTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActorsAddedTime.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSpreadingActorsAddedTime[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
		ZGameTime::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aSpreadingActorsAddedTime.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aNewCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aNewCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aNewCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aNewCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorSpreadControllerCandidateSaveData") << "," << JsonStr("$val") << ":";
		SActorSpreadControllerCandidateSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpreadingActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpreadingActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentActorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentActorIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerCheckEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerCheckEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerSpreading") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerSpreading;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsValidCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerIsValidCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerIsCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_PlayerCandidateTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_PlayerCandidateTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorSpreadControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSpreadingActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aSpreadingActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDeadSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadSpreadingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aDeadSpreadingActors[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aDeadSpreadingActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSpreadingActorsAddedTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActorsAddedTime.size(); ++i)
	{
		auto& s_Item = s_Object->m_aSpreadingActorsAddedTime[i];
		ZGameTime::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aSpreadingActorsAddedTime.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aNewCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aNewCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aNewCandidates[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aNewCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item = s_Object->m_aCandidates[i];
		SActorSpreadControllerCandidateSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpreadingActor") << ":";
	p_Stream << s_Object->m_rCurrentSpreadingActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentActorIndex") << ":";
	p_Stream << s_Object->m_nCurrentActorIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerCheckEnabled") << ":";
	p_Stream << s_Object->m_bPlayerCheckEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerSpreading") << ":";
	p_Stream << s_Object->m_bPlayerSpreading;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsValidCandidate") << ":";
	p_Stream << s_Object->m_bPlayerIsValidCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsCandidate") << ":";
	p_Stream << s_Object->m_bPlayerIsCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_PlayerCandidateTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_PlayerCandidateTime, p_Stream);

	p_Stream << "}";
}

void SActorSpreadControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSpreadControllerSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aSpreadingActors"])
	{
		s_Object.m_aSpreadingActors.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aDeadSpreadingActors"])
	{
		s_Object.m_aDeadSpreadingActors.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aSpreadingActorsAddedTime"])
	{
		ZGameTime s_ArrayItem;
		ZGameTime::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aSpreadingActorsAddedTime.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aNewCandidates"])
	{
		s_Object.m_aNewCandidates.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aCandidates"])
	{
		SActorSpreadControllerCandidateSaveData s_ArrayItem;
		SActorSpreadControllerCandidateSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aCandidates.push_back(s_ArrayItem);
	}

	s_Object.m_rCurrentSpreadingActor = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpreadingActor"]));

	s_Object.m_nCurrentActorIndex = static_cast<uint32>(int64_t(p_Document["m_nCurrentActorIndex"]));

	s_Object.m_bPlayerCheckEnabled = bool(p_Document["m_bPlayerCheckEnabled"]);

	s_Object.m_bPlayerSpreading = bool(p_Document["m_bPlayerSpreading"]);

	s_Object.m_bPlayerIsValidCandidate = bool(p_Document["m_bPlayerIsValidCandidate"]);

	s_Object.m_bPlayerIsCandidate = bool(p_Document["m_bPlayerIsCandidate"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_PlayerCandidateTime"], &s_Item);
		s_Object.m_PlayerCandidateTime = s_Item;
	}

	*reinterpret_cast<SActorSpreadControllerSaveData*>(p_Target) = s_Object;
}

void SActorSpreadControllerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aSpreadingActors.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aSpreadingActors));	m_aDeadSpreadingActors.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aDeadSpreadingActors));	m_aSpreadingActorsAddedTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aSpreadingActorsAddedTime));	m_aNewCandidates.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aNewCandidates));	m_aCandidates.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aCandidates));	m_PlayerCandidateTime.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_PlayerCandidateTime));}

ZHMTypeInfo SAnimatedActorMoveOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorMoveOrderSaveData", sizeof(SAnimatedActorMoveOrderSaveData), alignof(SAnimatedActorMoveOrderSaveData), SAnimatedActorMoveOrderSaveData::WriteJson, SAnimatedActorMoveOrderSaveData::WriteSimpleJson, SAnimatedActorMoveOrderSaveData::FromSimpleJson);

void SAnimatedActorMoveOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorMoveOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPrecisePositioning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPrecisePositioning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPreciseOrientation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPreciseOrientation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreEndCollision") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIgnoreEndCollision;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForcedEnpointSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForcedEnpointSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStopMoveDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStopMoveDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vWaypoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vWaypoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vForcedEndpoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vForcedEndpoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vFacingDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vFacingDirection, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorMoveOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAnimatedActorMoveOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPrecisePositioning") << ":";
	p_Stream << s_Object->m_bPrecisePositioning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPreciseOrientation") << ":";
	p_Stream << s_Object->m_bPreciseOrientation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreEndCollision") << ":";
	p_Stream << s_Object->m_bIgnoreEndCollision;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForcedEnpointSet") << ":";
	p_Stream << s_Object->m_bForcedEnpointSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStopMoveDistance") << ":";
	p_Stream << s_Object->m_fStopMoveDistance;
	p_Stream << ",";

	p_Stream << JsonStr("m_vWaypoint") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vWaypoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vForcedEndpoint") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vForcedEndpoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vFacingDirection") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vFacingDirection, p_Stream);

	p_Stream << "}";
}

void SAnimatedActorMoveOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorMoveOrderSaveData s_Object;

	s_Object.m_bPrecisePositioning = bool(p_Document["m_bPrecisePositioning"]);

	s_Object.m_bPreciseOrientation = bool(p_Document["m_bPreciseOrientation"]);

	s_Object.m_bIgnoreEndCollision = bool(p_Document["m_bIgnoreEndCollision"]);

	s_Object.m_bForcedEnpointSet = bool(p_Document["m_bForcedEnpointSet"]);

	s_Object.m_fStopMoveDistance = static_cast<float32>(double(p_Document["m_fStopMoveDistance"]));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vWaypoint"], &s_Item);
		s_Object.m_vWaypoint = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vForcedEndpoint"], &s_Item);
		s_Object.m_vForcedEndpoint = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vFacingDirection"], &s_Item);
		s_Object.m_vFacingDirection = s_Item;
	}

	*reinterpret_cast<SAnimatedActorMoveOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorMoveOrderSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vWaypoint.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorMoveOrderSaveData, m_vWaypoint));	m_vForcedEndpoint.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorMoveOrderSaveData, m_vForcedEndpoint));	m_vFacingDirection.Serialize(p_Serializer, p_OwnOffset + offsetof(SAnimatedActorMoveOrderSaveData, m_vFacingDirection));}

ZHMTypeInfo SScreenplayRole2HeroSaveState::TypeInfo = ZHMTypeInfo("SScreenplayRole2HeroSaveState", sizeof(SScreenplayRole2HeroSaveState), alignof(SScreenplayRole2HeroSaveState), SScreenplayRole2HeroSaveState::WriteJson, SScreenplayRole2HeroSaveState::WriteSimpleJson, SScreenplayRole2HeroSaveState::FromSimpleJson);

void SScreenplayRole2HeroSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SScreenplayRole2HeroSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";

	p_Stream << "}";
}

void SScreenplayRole2HeroSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SScreenplayRole2HeroSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;

	p_Stream << "}";
}

void SScreenplayRole2HeroSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SScreenplayRole2HeroSaveState s_Object;

	s_Object.m_rCurrentSpeakEntity = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpeakEntity"]));

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	*reinterpret_cast<SScreenplayRole2HeroSaveState*>(p_Target) = s_Object;
}

void SScreenplayRole2HeroSaveState::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SHM5CrippleBoxSaveData::TypeInfo = ZHMTypeInfo("SHM5CrippleBoxSaveData", sizeof(SHM5CrippleBoxSaveData), alignof(SHM5CrippleBoxSaveData), SHM5CrippleBoxSaveData::WriteJson, SHM5CrippleBoxSaveData::WriteSimpleJson, SHM5CrippleBoxSaveData::FromSimpleJson);

void SHM5CrippleBoxSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHM5CrippleBoxSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bInSequence") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInSequence;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllowBaseMovements") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllowBaseMovements;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSequenceAllowCamera") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSequenceAllowCamera;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLedges") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLedges;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCover;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTakeClothes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTakeClothes;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLadder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLadder;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPullVictimFromWindow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPullVictimFromWindow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFiberWireKill") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFiberWireKill;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bClimbWindow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bClimbWindow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowBodyOverRail") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bThrowBodyOverRail;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDumpBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDumpBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOperateCPDoor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOperateCPDoor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHideInCloset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHideInCloset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombat;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrabVictim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGrabVictim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPushVictimThroughWindowAndRail") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPushVictimThroughWindowAndRail;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bKickVictimOverLedge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bKickVictimOverLedge;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPickupItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPickupItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDragBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDragBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bThrowItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlaceItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlaceItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseDeathAnimation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUseDeathAnimation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLimitedAmmo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLimitedAmmo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRun") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRun;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTurn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSneak") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSneak;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoSnapSneak") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNoSnapSneak;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandUp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandUp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWalk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFastWalk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMovementAllowed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMovementAllowed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIdleAnimationsAllowed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIdleAnimationsAllowed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanHolsterItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCanHolsterItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverTakedown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCoverTakedown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCoverScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverToCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCoverToCover;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatSnapNeck") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatSnapNeck;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatChoke") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatChoke;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatPistolFinish") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatPistolFinish;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatProps") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatProps;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatStandart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatStandart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatFakeSwing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatFakeSwing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGameCameraAutoAlign") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGameCameraAutoAlign;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCameraSide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCameraSide;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInstinct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInstinct;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlindFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBlindFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHairTrigger") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHairTrigger;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenLogbook") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOpenLogbook;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenPauseMenu") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOpenPauseMenu;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActivatedByPinSignal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActivatedByPinSignal;
	p_Stream << "}";

	p_Stream << "}";
}

void SHM5CrippleBoxSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHM5CrippleBoxSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bInSequence") << ":";
	p_Stream << s_Object->m_bInSequence;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllowBaseMovements") << ":";
	p_Stream << s_Object->m_bAllowBaseMovements;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSequenceAllowCamera") << ":";
	p_Stream << s_Object->m_bSequenceAllowCamera;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLedges") << ":";
	p_Stream << s_Object->m_bLedges;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCover") << ":";
	p_Stream << s_Object->m_bCover;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTakeClothes") << ":";
	p_Stream << s_Object->m_bTakeClothes;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLadder") << ":";
	p_Stream << s_Object->m_bLadder;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPullVictimFromWindow") << ":";
	p_Stream << s_Object->m_bPullVictimFromWindow;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFiberWireKill") << ":";
	p_Stream << s_Object->m_bFiberWireKill;
	p_Stream << ",";

	p_Stream << JsonStr("m_bClimbWindow") << ":";
	p_Stream << s_Object->m_bClimbWindow;
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowBodyOverRail") << ":";
	p_Stream << s_Object->m_bThrowBodyOverRail;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDumpBody") << ":";
	p_Stream << s_Object->m_bDumpBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOperateCPDoor") << ":";
	p_Stream << s_Object->m_bOperateCPDoor;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHideInCloset") << ":";
	p_Stream << s_Object->m_bHideInCloset;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombat") << ":";
	p_Stream << s_Object->m_bCloseCombat;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrabVictim") << ":";
	p_Stream << s_Object->m_bGrabVictim;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPushVictimThroughWindowAndRail") << ":";
	p_Stream << s_Object->m_bPushVictimThroughWindowAndRail;
	p_Stream << ",";

	p_Stream << JsonStr("m_bKickVictimOverLedge") << ":";
	p_Stream << s_Object->m_bKickVictimOverLedge;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPickupItem") << ":";
	p_Stream << s_Object->m_bPickupItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropItem") << ":";
	p_Stream << s_Object->m_bDropItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDragBody") << ":";
	p_Stream << s_Object->m_bDragBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowItem") << ":";
	p_Stream << s_Object->m_bThrowItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlaceItem") << ":";
	p_Stream << s_Object->m_bPlaceItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseDeathAnimation") << ":";
	p_Stream << s_Object->m_bUseDeathAnimation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLimitedAmmo") << ":";
	p_Stream << s_Object->m_bLimitedAmmo;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRun") << ":";
	p_Stream << s_Object->m_bRun;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurn") << ":";
	p_Stream << s_Object->m_bTurn;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSneak") << ":";
	p_Stream << s_Object->m_bSneak;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoSnapSneak") << ":";
	p_Stream << s_Object->m_bNoSnapSneak;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandUp") << ":";
	p_Stream << s_Object->m_bStandUp;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWalk") << ":";
	p_Stream << s_Object->m_bFastWalk;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMovementAllowed") << ":";
	p_Stream << s_Object->m_bMovementAllowed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIdleAnimationsAllowed") << ":";
	p_Stream << s_Object->m_bIdleAnimationsAllowed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bItems") << ":";
	p_Stream << s_Object->m_bItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanHolsterItems") << ":";
	p_Stream << s_Object->m_bCanHolsterItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverTakedown") << ":";
	p_Stream << s_Object->m_bCoverTakedown;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverScale") << ":";
	p_Stream << s_Object->m_bCoverScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverToCover") << ":";
	p_Stream << s_Object->m_bCoverToCover;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatSnapNeck") << ":";
	p_Stream << s_Object->m_bCloseCombatSnapNeck;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatChoke") << ":";
	p_Stream << s_Object->m_bCloseCombatChoke;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatPistolFinish") << ":";
	p_Stream << s_Object->m_bCloseCombatPistolFinish;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatProps") << ":";
	p_Stream << s_Object->m_bCloseCombatProps;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatStandart") << ":";
	p_Stream << s_Object->m_bCloseCombatStandart;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatFakeSwing") << ":";
	p_Stream << s_Object->m_bCloseCombatFakeSwing;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGameCameraAutoAlign") << ":";
	p_Stream << s_Object->m_bGameCameraAutoAlign;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCameraSide") << ":";
	p_Stream << s_Object->m_bCameraSide;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInstinct") << ":";
	p_Stream << s_Object->m_bInstinct;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlindFire") << ":";
	p_Stream << s_Object->m_bBlindFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAim") << ":";
	p_Stream << s_Object->m_bAim;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHairTrigger") << ":";
	p_Stream << s_Object->m_bHairTrigger;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFire") << ":";
	p_Stream << s_Object->m_bFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenLogbook") << ":";
	p_Stream << s_Object->m_bOpenLogbook;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenPauseMenu") << ":";
	p_Stream << s_Object->m_bOpenPauseMenu;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActivatedByPinSignal") << ":";
	p_Stream << s_Object->m_bActivatedByPinSignal;

	p_Stream << "}";
}

void SHM5CrippleBoxSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHM5CrippleBoxSaveData s_Object;

	s_Object.m_bInSequence = bool(p_Document["m_bInSequence"]);

	s_Object.m_bAllowBaseMovements = bool(p_Document["m_bAllowBaseMovements"]);

	s_Object.m_bSequenceAllowCamera = bool(p_Document["m_bSequenceAllowCamera"]);

	s_Object.m_bLedges = bool(p_Document["m_bLedges"]);

	s_Object.m_bCover = bool(p_Document["m_bCover"]);

	s_Object.m_bTakeClothes = bool(p_Document["m_bTakeClothes"]);

	s_Object.m_bLadder = bool(p_Document["m_bLadder"]);

	s_Object.m_bPullVictimFromWindow = bool(p_Document["m_bPullVictimFromWindow"]);

	s_Object.m_bFiberWireKill = bool(p_Document["m_bFiberWireKill"]);

	s_Object.m_bClimbWindow = bool(p_Document["m_bClimbWindow"]);

	s_Object.m_bThrowBodyOverRail = bool(p_Document["m_bThrowBodyOverRail"]);

	s_Object.m_bDumpBody = bool(p_Document["m_bDumpBody"]);

	s_Object.m_bOperateCPDoor = bool(p_Document["m_bOperateCPDoor"]);

	s_Object.m_bHideInCloset = bool(p_Document["m_bHideInCloset"]);

	s_Object.m_bCloseCombat = bool(p_Document["m_bCloseCombat"]);

	s_Object.m_bGrabVictim = bool(p_Document["m_bGrabVictim"]);

	s_Object.m_bPushVictimThroughWindowAndRail = bool(p_Document["m_bPushVictimThroughWindowAndRail"]);

	s_Object.m_bKickVictimOverLedge = bool(p_Document["m_bKickVictimOverLedge"]);

	s_Object.m_bPickupItem = bool(p_Document["m_bPickupItem"]);

	s_Object.m_bDropItem = bool(p_Document["m_bDropItem"]);

	s_Object.m_bDragBody = bool(p_Document["m_bDragBody"]);

	s_Object.m_bThrowItem = bool(p_Document["m_bThrowItem"]);

	s_Object.m_bPlaceItem = bool(p_Document["m_bPlaceItem"]);

	s_Object.m_bUseDeathAnimation = bool(p_Document["m_bUseDeathAnimation"]);

	s_Object.m_bLimitedAmmo = bool(p_Document["m_bLimitedAmmo"]);

	s_Object.m_bRun = bool(p_Document["m_bRun"]);

	s_Object.m_bTurn = bool(p_Document["m_bTurn"]);

	s_Object.m_bSneak = bool(p_Document["m_bSneak"]);

	s_Object.m_bNoSnapSneak = bool(p_Document["m_bNoSnapSneak"]);

	s_Object.m_bStandUp = bool(p_Document["m_bStandUp"]);

	s_Object.m_bFastWalk = bool(p_Document["m_bFastWalk"]);

	s_Object.m_bMovementAllowed = bool(p_Document["m_bMovementAllowed"]);

	s_Object.m_bIdleAnimationsAllowed = bool(p_Document["m_bIdleAnimationsAllowed"]);

	s_Object.m_bItems = bool(p_Document["m_bItems"]);

	s_Object.m_bCanHolsterItems = bool(p_Document["m_bCanHolsterItems"]);

	s_Object.m_bCoverTakedown = bool(p_Document["m_bCoverTakedown"]);

	s_Object.m_bCoverScale = bool(p_Document["m_bCoverScale"]);

	s_Object.m_bCoverToCover = bool(p_Document["m_bCoverToCover"]);

	s_Object.m_bCloseCombatSnapNeck = bool(p_Document["m_bCloseCombatSnapNeck"]);

	s_Object.m_bCloseCombatChoke = bool(p_Document["m_bCloseCombatChoke"]);

	s_Object.m_bCloseCombatPistolFinish = bool(p_Document["m_bCloseCombatPistolFinish"]);

	s_Object.m_bCloseCombatProps = bool(p_Document["m_bCloseCombatProps"]);

	s_Object.m_bCloseCombatStandart = bool(p_Document["m_bCloseCombatStandart"]);

	s_Object.m_bCloseCombatFakeSwing = bool(p_Document["m_bCloseCombatFakeSwing"]);

	s_Object.m_bGameCameraAutoAlign = bool(p_Document["m_bGameCameraAutoAlign"]);

	s_Object.m_bCameraSide = bool(p_Document["m_bCameraSide"]);

	s_Object.m_bInstinct = bool(p_Document["m_bInstinct"]);

	s_Object.m_bBlindFire = bool(p_Document["m_bBlindFire"]);

	s_Object.m_bAim = bool(p_Document["m_bAim"]);

	s_Object.m_bHairTrigger = bool(p_Document["m_bHairTrigger"]);

	s_Object.m_bFire = bool(p_Document["m_bFire"]);

	s_Object.m_bOpenLogbook = bool(p_Document["m_bOpenLogbook"]);

	s_Object.m_bOpenPauseMenu = bool(p_Document["m_bOpenPauseMenu"]);

	s_Object.m_bActivatedByPinSignal = bool(p_Document["m_bActivatedByPinSignal"]);

	*reinterpret_cast<SHM5CrippleBoxSaveData*>(p_Target) = s_Object;
}

void SHM5CrippleBoxSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorRagdollPoseSaveData::TypeInfo = ZHMTypeInfo("SActorRagdollPoseSaveData", sizeof(SActorRagdollPoseSaveData), alignof(SActorRagdollPoseSaveData), SActorRagdollPoseSaveData::WriteJson, SActorRagdollPoseSaveData::WriteSimpleJson, SActorRagdollPoseSaveData::FromSimpleJson);

void SActorRagdollPoseSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorRagdollPoseSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vBodyVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vBodyVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorBoneSaveData") << "," << JsonStr("$val") << ":";
		SActorBoneSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorRagdollPoseSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorRagdollPoseSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vBodyVelocity") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vBodyVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBones[i];
		SActorBoneSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item = s_Object->m_aBoneIndices[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorRagdollPoseSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorRagdollPoseSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vBodyVelocity"], &s_Item);
		s_Object.m_vBodyVelocity = s_Item;
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aBones"])
	{
		SActorBoneSaveData s_ArrayItem;
		SActorBoneSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aBones.push_back(s_ArrayItem);
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aBoneIndices"])
	{
		s_Object.m_aBoneIndices.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SActorRagdollPoseSaveData*>(p_Target) = s_Object;
}

void SActorRagdollPoseSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vBodyVelocity.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorRagdollPoseSaveData, m_vBodyVelocity));	m_aBones.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorRagdollPoseSaveData, m_aBones));	m_aBoneIndices.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorRagdollPoseSaveData, m_aBoneIndices));}

ZHMTypeInfo IActorProviderFilter::TypeInfo = ZHMTypeInfo("IActorProviderFilter", sizeof(IActorProviderFilter), alignof(IActorProviderFilter), IActorProviderFilter::WriteJson, IActorProviderFilter::WriteSimpleJson, IActorProviderFilter::FromSimpleJson);

void IActorProviderFilter::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProviderFilter*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorProviderFilter::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActorProviderFilter*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IActorProviderFilter::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IActorProviderFilter s_Object;

	*reinterpret_cast<IActorProviderFilter*>(p_Target) = s_Object;
}

void IActorProviderFilter::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SGetHelpServiceSaveData::TypeInfo = ZHMTypeInfo("SGetHelpServiceSaveData", sizeof(SGetHelpServiceSaveData), alignof(SGetHelpServiceSaveData), SGetHelpServiceSaveData::WriteJson, SGetHelpServiceSaveData::WriteSimpleJson, SGetHelpServiceSaveData::FromSimpleJson);

void SGetHelpServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aHelpingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHelpingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aHelpingActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHelpingActorSaveData") << "," << JsonStr("$val") << ":";
		SHelpingActorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aHelpingActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SGetHelpServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetHelpServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aHelpingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHelpingActors.size(); ++i)
	{
		auto& s_Item = s_Object->m_aHelpingActors[i];
		SHelpingActorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aHelpingActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGetHelpServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGetHelpServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aHelpingActors"])
	{
		SHelpingActorSaveData s_ArrayItem;
		SHelpingActorSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aHelpingActors.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SGetHelpServiceSaveData*>(p_Target) = s_Object;
}

void SGetHelpServiceSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aHelpingActors.Serialize(p_Serializer, p_OwnOffset + offsetof(SGetHelpServiceSaveData, m_aHelpingActors));}

ZHMTypeInfo SActionRadialArcDisplayInfo::TypeInfo = ZHMTypeInfo("SActionRadialArcDisplayInfo", sizeof(SActionRadialArcDisplayInfo), alignof(SActionRadialArcDisplayInfo), SActionRadialArcDisplayInfo::WriteJson, SActionRadialArcDisplayInfo::WriteSimpleJson, SActionRadialArcDisplayInfo::FromSimpleJson);

void SActionRadialArcDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActionRadialArcDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("hidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->hidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("locked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->locked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->active;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->icon;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";

	p_Stream << "}";
}

void SActionRadialArcDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActionRadialArcDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("hidden") << ":";
	p_Stream << s_Object->hidden;
	p_Stream << ",";

	p_Stream << JsonStr("locked") << ":";
	p_Stream << s_Object->locked;
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << s_Object->active;
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << s_Object->icon;
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);

	p_Stream << "}";
}

void SActionRadialArcDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActionRadialArcDisplayInfo s_Object;

	s_Object.hidden = bool(p_Document["hidden"]);

	s_Object.locked = bool(p_Document["locked"]);

	s_Object.active = bool(p_Document["active"]);

	s_Object.illegal = bool(p_Document["illegal"]);

	s_Object.icon = static_cast<int32>(int64_t(p_Document["icon"]));

	s_Object.label = std::string_view(p_Document["label"]);

	*reinterpret_cast<SActionRadialArcDisplayInfo*>(p_Target) = s_Object;
}

void SActionRadialArcDisplayInfo::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	label.Serialize(p_Serializer, p_OwnOffset + offsetof(SActionRadialArcDisplayInfo, label));}

ZHMTypeInfo SExposedEntityDescriptor::TypeInfo = ZHMTypeInfo("SExposedEntityDescriptor", sizeof(SExposedEntityDescriptor), alignof(SExposedEntityDescriptor), SExposedEntityDescriptor::WriteJson, SExposedEntityDescriptor::WriteSimpleJson, SExposedEntityDescriptor::FromSimpleJson);

void SExposedEntityDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedEntityDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsHidden;
	p_Stream << "}";

	p_Stream << "}";
}

void SExposedEntityDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExposedEntityDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << s_Object->bIsHidden;

	p_Stream << "}";
}

void SExposedEntityDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExposedEntityDescriptor s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	s_Object.sDisplayName = std::string_view(p_Document["sDisplayName"]);

	s_Object.sHelpText = std::string_view(p_Document["sHelpText"]);

	s_Object.bIsArray = bool(p_Document["bIsArray"]);

	s_Object.bIsHidden = bool(p_Document["bIsHidden"]);

	*reinterpret_cast<SExposedEntityDescriptor*>(p_Target) = s_Object;
}

void SExposedEntityDescriptor::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, sName));	sDisplayName.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, sDisplayName));	sHelpText.Serialize(p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, sHelpText));}

ZHMTypeInfo SLevelReferenceableEntitieSaveData::TypeInfo = ZHMTypeInfo("SLevelReferenceableEntitieSaveData", sizeof(SLevelReferenceableEntitieSaveData), alignof(SLevelReferenceableEntitieSaveData), SLevelReferenceableEntitieSaveData::WriteJson, SLevelReferenceableEntitieSaveData::WriteSimpleJson, SLevelReferenceableEntitieSaveData::FromSimpleJson);

void SLevelReferenceableEntitieSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLevelReferenceableEntitieSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sSceneResource") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sSceneResource);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAdditionalBrickResources") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAdditionalBrickResources.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAdditionalBrickResources[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item);
		p_Stream << "}";

		if (i < s_Object->m_aAdditionalBrickResources.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SLevelReferenceableEntitieSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLevelReferenceableEntitieSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sSceneResource") << ":";
	p_Stream << JsonStr(s_Object->m_sSceneResource);
	p_Stream << ",";

	p_Stream << JsonStr("m_aAdditionalBrickResources") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAdditionalBrickResources.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAdditionalBrickResources[i];
		p_Stream << JsonStr(s_Item);

		if (i < s_Object->m_aAdditionalBrickResources.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLevelReferenceableEntitieSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLevelReferenceableEntitieSaveData s_Object;

	s_Object.m_sSceneResource = std::string_view(p_Document["m_sSceneResource"]);

	for (simdjson::ondemand::value s_Item : p_Document["m_aAdditionalBrickResources"])
	{
		s_Object.m_aAdditionalBrickResources.push_back(std::string_view(s_Item));
	}

	*reinterpret_cast<SLevelReferenceableEntitieSaveData*>(p_Target) = s_Object;
}

void SLevelReferenceableEntitieSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sSceneResource.Serialize(p_Serializer, p_OwnOffset + offsetof(SLevelReferenceableEntitieSaveData, m_sSceneResource));	m_aAdditionalBrickResources.Serialize(p_Serializer, p_OwnOffset + offsetof(SLevelReferenceableEntitieSaveData, m_aAdditionalBrickResources));}

ZHMTypeInfo IContractObjective::TypeInfo = ZHMTypeInfo("IContractObjective", sizeof(IContractObjective), alignof(IContractObjective), IContractObjective::WriteJson, IContractObjective::WriteSimpleJson, IContractObjective::FromSimpleJson);

void IContractObjective::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractObjective*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContractObjective::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractObjective*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IContractObjective::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IContractObjective s_Object;

	*reinterpret_cast<IContractObjective*>(p_Target) = s_Object;
}

void IContractObjective::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SLeadEscortSituationActors::TypeInfo = ZHMTypeInfo("SLeadEscortSituationActors", sizeof(SLeadEscortSituationActors), alignof(SLeadEscortSituationActors), SLeadEscortSituationActors::WriteJson, SLeadEscortSituationActors::WriteSimpleJson, SLeadEscortSituationActors::FromSimpleJson);

void SLeadEscortSituationActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLeadEscortSituationActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SLeadEscortSituationActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLeadEscortSituationActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SLeadEscortSituationActors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLeadEscortSituationActors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SLeadEscortSituationActors*>(p_Target) = s_Object;
}

void SLeadEscortSituationActors::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IEventConsumerCollection::TypeInfo = ZHMTypeInfo("IEventConsumerCollection", sizeof(IEventConsumerCollection), alignof(IEventConsumerCollection), IEventConsumerCollection::WriteJson, IEventConsumerCollection::WriteSimpleJson, IEventConsumerCollection::FromSimpleJson);

void IEventConsumerCollection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEventConsumerCollection*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEventConsumerCollection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IEventConsumerCollection*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IEventConsumerCollection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IEventConsumerCollection s_Object;

	*reinterpret_cast<IEventConsumerCollection*>(p_Target) = s_Object;
}

void IEventConsumerCollection::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SWaveformGeneratorManagerSaveData::TypeInfo = ZHMTypeInfo("SWaveformGeneratorManagerSaveData", sizeof(SWaveformGeneratorManagerSaveData), alignof(SWaveformGeneratorManagerSaveData), SWaveformGeneratorManagerSaveData::WriteJson, SWaveformGeneratorManagerSaveData::WriteSimpleJson, SWaveformGeneratorManagerSaveData::FromSimpleJson);

void SWaveformGeneratorManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWaveformGeneratorManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aGenerators") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGenerators.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGenerators[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aGenerators.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGeneratorData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGeneratorData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGeneratorData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SWaveformGeneratorSaveData") << "," << JsonStr("$val") << ":";
		SWaveformGeneratorSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGeneratorData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SWaveformGeneratorManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SWaveformGeneratorManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aGenerators") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGenerators.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGenerators[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aGenerators.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGeneratorData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGeneratorData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aGeneratorData[i];
		SWaveformGeneratorSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aGeneratorData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SWaveformGeneratorManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWaveformGeneratorManagerSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aGenerators"])
	{
		s_Object.m_aGenerators.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aGeneratorData"])
	{
		SWaveformGeneratorSaveData s_ArrayItem;
		SWaveformGeneratorSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aGeneratorData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SWaveformGeneratorManagerSaveData*>(p_Target) = s_Object;
}

void SWaveformGeneratorManagerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aGenerators.Serialize(p_Serializer, p_OwnOffset + offsetof(SWaveformGeneratorManagerSaveData, m_aGenerators));	m_aGeneratorData.Serialize(p_Serializer, p_OwnOffset + offsetof(SWaveformGeneratorManagerSaveData, m_aGeneratorData));}

ZHMTypeInfo SMathLerpsSaveData_SColorRGB::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SColorRGB", sizeof(SMathLerpsSaveData_SColorRGB), alignof(SMathLerpsSaveData_SColorRGB), SMathLerpsSaveData_SColorRGB::WriteJson, SMathLerpsSaveData_SColorRGB::WriteSimpleJson, SMathLerpsSaveData_SColorRGB::FromSimpleJson);

void SMathLerpsSaveData_SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SColorRGB") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SColorRGB::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMathLerpsSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SMathLerpSaveData_SColorRGB::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGB::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SColorRGB s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SMathLerpSaveData_SColorRGB s_ArrayItem;
		SMathLerpSaveData_SColorRGB::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SMathLerpsSaveData_SColorRGB*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SColorRGB::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SColorRGB, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SColorRGB, m_aData));}

ZHMTypeInfo SVideoDatabaseEntry::TypeInfo = ZHMTypeInfo("SVideoDatabaseEntry", sizeof(SVideoDatabaseEntry), alignof(SVideoDatabaseEntry), SVideoDatabaseEntry::WriteJson, SVideoDatabaseEntry::WriteSimpleJson, SVideoDatabaseEntry::FromSimpleJson);

void SVideoDatabaseEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVideoDatabaseEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("VideoId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->VideoId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("RuntimeLocalizedVideoRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->RuntimeLocalizedVideoRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SVideoDatabaseEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVideoDatabaseEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("VideoId") << ":";
	p_Stream << JsonStr(s_Object->VideoId);
	p_Stream << ",";

	p_Stream << JsonStr("RuntimeLocalizedVideoRid") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->RuntimeLocalizedVideoRid, p_Stream);

	p_Stream << "}";
}

void SVideoDatabaseEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVideoDatabaseEntry s_Object;

	s_Object.VideoId = std::string_view(p_Document["VideoId"]);

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["RuntimeLocalizedVideoRid"], &s_Item);
		s_Object.RuntimeLocalizedVideoRid = s_Item;
	}

	*reinterpret_cast<SVideoDatabaseEntry*>(p_Target) = s_Object;
}

void SVideoDatabaseEntry::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	VideoId.Serialize(p_Serializer, p_OwnOffset + offsetof(SVideoDatabaseEntry, VideoId));	RuntimeLocalizedVideoRid.Serialize(p_Serializer, p_OwnOffset + offsetof(SVideoDatabaseEntry, RuntimeLocalizedVideoRid));}

ZHMTypeInfo SVideoDatabaseData::TypeInfo = ZHMTypeInfo("SVideoDatabaseData", sizeof(SVideoDatabaseData), alignof(SVideoDatabaseData), SVideoDatabaseData::WriteJson, SVideoDatabaseData::WriteSimpleJson, SVideoDatabaseData::FromSimpleJson);

void SVideoDatabaseData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVideoDatabaseData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Videos") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Videos.size(); ++i)
	{
		auto& s_Item = s_Object->Videos[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVideoDatabaseEntry") << "," << JsonStr("$val") << ":";
		SVideoDatabaseEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->Videos.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SVideoDatabaseData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SVideoDatabaseData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Videos") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Videos.size(); ++i)
	{
		auto& s_Item = s_Object->Videos[i];
		SVideoDatabaseEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->Videos.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SVideoDatabaseData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVideoDatabaseData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["Videos"])
	{
		SVideoDatabaseEntry s_ArrayItem;
		SVideoDatabaseEntry::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.Videos.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SVideoDatabaseData*>(p_Target) = s_Object;
}

void SVideoDatabaseData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	Videos.Serialize(p_Serializer, p_OwnOffset + offsetof(SVideoDatabaseData, Videos));}

ZHMTypeInfo SAvoidDangerousAreaGroupSaveData::TypeInfo = ZHMTypeInfo("SAvoidDangerousAreaGroupSaveData", sizeof(SAvoidDangerousAreaGroupSaveData), alignof(SAvoidDangerousAreaGroupSaveData), SAvoidDangerousAreaGroupSaveData::WriteJson, SAvoidDangerousAreaGroupSaveData::WriteSimpleJson, SAvoidDangerousAreaGroupSaveData::FromSimpleJson);

void SAvoidDangerousAreaGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAvoidDangerousAreaGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDangerousArea") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDangerousArea;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDestinationPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vDestinationPoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iGridId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iGridId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitUntilDangerEnds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWaitUntilDangerEnds;
	p_Stream << "}";

	p_Stream << "}";
}

void SAvoidDangerousAreaGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAvoidDangerousAreaGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rDangerousArea") << ":";
	p_Stream << s_Object->m_rDangerousArea;
	p_Stream << ",";

	p_Stream << JsonStr("m_vDestinationPoint") << ":";
	float4::WriteSimpleJson(&s_Object->m_vDestinationPoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_iGridId") << ":";
	p_Stream << s_Object->m_iGridId;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitUntilDangerEnds") << ":";
	p_Stream << s_Object->m_bWaitUntilDangerEnds;

	p_Stream << "}";
}

void SAvoidDangerousAreaGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAvoidDangerousAreaGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_rDangerousArea = static_cast<uint32>(int64_t(p_Document["m_rDangerousArea"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vDestinationPoint"], &s_Item);
		s_Object.m_vDestinationPoint = s_Item;
	}

	s_Object.m_iGridId = static_cast<int32>(int64_t(p_Document["m_iGridId"]));

	s_Object.m_bWaitUntilDangerEnds = bool(p_Document["m_bWaitUntilDangerEnds"]);

	*reinterpret_cast<SAvoidDangerousAreaGroupSaveData*>(p_Target) = s_Object;
}

void SAvoidDangerousAreaGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SAvoidDangerousAreaGroupSaveData, m_fsmState));	m_vDestinationPoint.Serialize(p_Serializer, p_OwnOffset + offsetof(SAvoidDangerousAreaGroupSaveData, m_vDestinationPoint));}

ZHMTypeInfo SGetIActorPositionSaveData::TypeInfo = ZHMTypeInfo("SGetIActorPositionSaveData", sizeof(SGetIActorPositionSaveData), alignof(SGetIActorPositionSaveData), SGetIActorPositionSaveData::WriteJson, SGetIActorPositionSaveData::WriteSimpleJson, SGetIActorPositionSaveData::FromSimpleJson);

void SGetIActorPositionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetIActorPositionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_StoredActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_StoredActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SGetIActorPositionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SGetIActorPositionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_StoredActor") << ":";
	p_Stream << s_Object->m_StoredActor;

	p_Stream << "}";
}

void SGetIActorPositionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGetIActorPositionSaveData s_Object;

	s_Object.m_StoredActor = static_cast<uint32>(int64_t(p_Document["m_StoredActor"]));

	*reinterpret_cast<SGetIActorPositionSaveData*>(p_Target) = s_Object;
}

void SGetIActorPositionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SMatrix44::TypeInfo = ZHMTypeInfo("SMatrix44", sizeof(SMatrix44), alignof(SMatrix44), SMatrix44::WriteJson, SMatrix44::WriteSimpleJson, SMatrix44::FromSimpleJson);

void SMatrix44::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix44*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m11") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m11;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m12") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m12;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m13") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m13;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m14") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m14;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m21") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m21;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m22") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m22;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m23") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m23;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m24") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m24;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m31") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m31;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m32") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m32;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m33") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m33;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m34") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m34;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m41") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m41;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m42") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m42;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m43") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m43;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m44") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m44;
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix44::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMatrix44*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m11") << ":";
	p_Stream << s_Object->m11;
	p_Stream << ",";

	p_Stream << JsonStr("m12") << ":";
	p_Stream << s_Object->m12;
	p_Stream << ",";

	p_Stream << JsonStr("m13") << ":";
	p_Stream << s_Object->m13;
	p_Stream << ",";

	p_Stream << JsonStr("m14") << ":";
	p_Stream << s_Object->m14;
	p_Stream << ",";

	p_Stream << JsonStr("m21") << ":";
	p_Stream << s_Object->m21;
	p_Stream << ",";

	p_Stream << JsonStr("m22") << ":";
	p_Stream << s_Object->m22;
	p_Stream << ",";

	p_Stream << JsonStr("m23") << ":";
	p_Stream << s_Object->m23;
	p_Stream << ",";

	p_Stream << JsonStr("m24") << ":";
	p_Stream << s_Object->m24;
	p_Stream << ",";

	p_Stream << JsonStr("m31") << ":";
	p_Stream << s_Object->m31;
	p_Stream << ",";

	p_Stream << JsonStr("m32") << ":";
	p_Stream << s_Object->m32;
	p_Stream << ",";

	p_Stream << JsonStr("m33") << ":";
	p_Stream << s_Object->m33;
	p_Stream << ",";

	p_Stream << JsonStr("m34") << ":";
	p_Stream << s_Object->m34;
	p_Stream << ",";

	p_Stream << JsonStr("m41") << ":";
	p_Stream << s_Object->m41;
	p_Stream << ",";

	p_Stream << JsonStr("m42") << ":";
	p_Stream << s_Object->m42;
	p_Stream << ",";

	p_Stream << JsonStr("m43") << ":";
	p_Stream << s_Object->m43;
	p_Stream << ",";

	p_Stream << JsonStr("m44") << ":";
	p_Stream << s_Object->m44;

	p_Stream << "}";
}

void SMatrix44::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix44 s_Object;

	s_Object.m11 = static_cast<float32>(double(p_Document["m11"]));

	s_Object.m12 = static_cast<float32>(double(p_Document["m12"]));

	s_Object.m13 = static_cast<float32>(double(p_Document["m13"]));

	s_Object.m14 = static_cast<float32>(double(p_Document["m14"]));

	s_Object.m21 = static_cast<float32>(double(p_Document["m21"]));

	s_Object.m22 = static_cast<float32>(double(p_Document["m22"]));

	s_Object.m23 = static_cast<float32>(double(p_Document["m23"]));

	s_Object.m24 = static_cast<float32>(double(p_Document["m24"]));

	s_Object.m31 = static_cast<float32>(double(p_Document["m31"]));

	s_Object.m32 = static_cast<float32>(double(p_Document["m32"]));

	s_Object.m33 = static_cast<float32>(double(p_Document["m33"]));

	s_Object.m34 = static_cast<float32>(double(p_Document["m34"]));

	s_Object.m41 = static_cast<float32>(double(p_Document["m41"]));

	s_Object.m42 = static_cast<float32>(double(p_Document["m42"]));

	s_Object.m43 = static_cast<float32>(double(p_Document["m43"]));

	s_Object.m44 = static_cast<float32>(double(p_Document["m44"]));

	*reinterpret_cast<SMatrix44*>(p_Target) = s_Object;
}

void SMatrix44::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SDisguiseZoneSaveData::TypeInfo = ZHMTypeInfo("SDisguiseZoneSaveData", sizeof(SDisguiseZoneSaveData), alignof(SDisguiseZoneSaveData), SDisguiseZoneSaveData::WriteJson, SDisguiseZoneSaveData::WriteSimpleJson, SDisguiseZoneSaveData::FromSimpleJson);

void SDisguiseZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDisguiseZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SDisguiseZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDisguiseZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SDisguiseZoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDisguiseZoneSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SDisguiseZoneSaveData*>(p_Target) = s_Object;
}

void SDisguiseZoneSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo STimerManagerSaveData::TypeInfo = ZHMTypeInfo("STimerManagerSaveData", sizeof(STimerManagerSaveData), alignof(STimerManagerSaveData), STimerManagerSaveData::WriteJson, STimerManagerSaveData::WriteSimpleJson, STimerManagerSaveData::FromSimpleJson);

void STimerManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_TimersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntitiesSaveData") << "," << JsonStr("$val") << ":";
	STimerEntitiesSaveData::WriteJson(&s_Object->m_TimersData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RandomTimersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRandomTimerEntitiesSaveData") << "," << JsonStr("$val") << ":";
	SRandomTimerEntitiesSaveData::WriteJson(&s_Object->m_RandomTimersData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_GameTimersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGameTimersSaveData") << "," << JsonStr("$val") << ":";
	SGameTimersSaveData::WriteJson(&s_Object->m_GameTimersData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STimerManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STimerManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_TimersData") << ":";
	STimerEntitiesSaveData::WriteSimpleJson(&s_Object->m_TimersData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_RandomTimersData") << ":";
	SRandomTimerEntitiesSaveData::WriteSimpleJson(&s_Object->m_RandomTimersData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_GameTimersData") << ":";
	SGameTimersSaveData::WriteSimpleJson(&s_Object->m_GameTimersData, p_Stream);

	p_Stream << "}";
}

void STimerManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerManagerSaveData s_Object;

	{
		STimerEntitiesSaveData s_Item;
		STimerEntitiesSaveData::FromSimpleJson(p_Document["m_TimersData"], &s_Item);
		s_Object.m_TimersData = s_Item;
	}

	{
		SRandomTimerEntitiesSaveData s_Item;
		SRandomTimerEntitiesSaveData::FromSimpleJson(p_Document["m_RandomTimersData"], &s_Item);
		s_Object.m_RandomTimersData = s_Item;
	}

	{
		SGameTimersSaveData s_Item;
		SGameTimersSaveData::FromSimpleJson(p_Document["m_GameTimersData"], &s_Item);
		s_Object.m_GameTimersData = s_Item;
	}

	*reinterpret_cast<STimerManagerSaveData*>(p_Target) = s_Object;
}

void STimerManagerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_TimersData.Serialize(p_Serializer, p_OwnOffset + offsetof(STimerManagerSaveData, m_TimersData));	m_RandomTimersData.Serialize(p_Serializer, p_OwnOffset + offsetof(STimerManagerSaveData, m_RandomTimersData));	m_GameTimersData.Serialize(p_Serializer, p_OwnOffset + offsetof(STimerManagerSaveData, m_GameTimersData));}

ZHMTypeInfo SExitSaveData::TypeInfo = ZHMTypeInfo("SExitSaveData", sizeof(SExitSaveData), alignof(SExitSaveData), SExitSaveData::WriteJson, SExitSaveData::WriteSimpleJson, SExitSaveData::FromSimpleJson);

void SExitSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExitSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SExitSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SExitSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SExitSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExitSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SExitSaveData*>(p_Target) = s_Object;
}

void SExitSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SConditionBase::TypeInfo = ZHMTypeInfo("SConditionBase", sizeof(SConditionBase), alignof(SConditionBase), SConditionBase::WriteJson, SConditionBase::WriteSimpleJson, SConditionBase::FromSimpleJson);

void SConditionBase::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConditionBase*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("eConditionType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECompiledConditionType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eConditionType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECompiledConditionType", static_cast<int>(s_Object->eConditionType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nConditionModifiers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nConditionModifiers;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("assignTo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->assignTo, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SConditionBase::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConditionBase*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("eConditionType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECompiledConditionType", static_cast<int>(s_Object->eConditionType)));
	p_Stream << ",";

	p_Stream << JsonStr("nConditionModifiers") << ":";
	p_Stream << s_Object->nConditionModifiers;
	p_Stream << ",";

	p_Stream << JsonStr("assignTo") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->assignTo, p_Stream);

	p_Stream << "}";
}

void SConditionBase::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SConditionBase s_Object;

	s_Object.eConditionType = static_cast<ECompiledConditionType>(ZHMEnums::GetEnumValueByName("ECompiledConditionType", std::string_view(p_Document["eConditionType"])));

	s_Object.nConditionModifiers = static_cast<uint32>(int64_t(p_Document["nConditionModifiers"]));

	{
		ZBehaviorTreeVariable s_Item;
		ZBehaviorTreeVariable::FromSimpleJson(p_Document["assignTo"], &s_Item);
		s_Object.assignTo = s_Item;
	}

	*reinterpret_cast<SConditionBase*>(p_Target) = s_Object;
}

void SConditionBase::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	assignTo.Serialize(p_Serializer, p_OwnOffset + offsetof(SConditionBase, assignTo));}

ZHMTypeInfo SEntityPinDescriptor::TypeInfo = ZHMTypeInfo("SEntityPinDescriptor", sizeof(SEntityPinDescriptor), alignof(SEntityPinDescriptor), SEntityPinDescriptor::WriteJson, SEntityPinDescriptor::WriteSimpleJson, SEntityPinDescriptor::FromSimpleJson);

void SEntityPinDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPinDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->type, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsPlaceholder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsPlaceholder;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsHidden;
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityPinDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SEntityPinDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->type, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << ",";

	p_Stream << JsonStr("bIsPlaceholder") << ":";
	p_Stream << s_Object->bIsPlaceholder;
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << s_Object->bIsHidden;

	p_Stream << "}";
}

void SEntityPinDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityPinDescriptor s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	s_Object.sDisplayName = std::string_view(p_Document["sDisplayName"]);

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["type"], &s_Item);
		s_Object.type = s_Item;
	}

	s_Object.sHelpText = std::string_view(p_Document["sHelpText"]);

	s_Object.bIsPlaceholder = bool(p_Document["bIsPlaceholder"]);

	s_Object.bIsHidden = bool(p_Document["bIsHidden"]);

	*reinterpret_cast<SEntityPinDescriptor*>(p_Target) = s_Object;
}

void SEntityPinDescriptor::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, sName));	sDisplayName.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, sDisplayName));	type.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, type));	sHelpText.Serialize(p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, sHelpText));}

ZHMTypeInfo SCrowdAIEventSaveData::TypeInfo = ZHMTypeInfo("SCrowdAIEventSaveData", sizeof(SCrowdAIEventSaveData), alignof(SCrowdAIEventSaveData), SCrowdAIEventSaveData::WriteJson, SCrowdAIEventSaveData::WriteSimpleJson, SCrowdAIEventSaveData::FromSimpleJson);

void SCrowdAIEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_RunningEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_RunningEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_RunningEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRunningCrowdAIEventSaveData") << "," << JsonStr("$val") << ":";
		SRunningCrowdAIEventSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_RunningEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdAIEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_RunningEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_RunningEvents.size(); ++i)
	{
		auto& s_Item = s_Object->m_RunningEvents[i];
		SRunningCrowdAIEventSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_RunningEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdAIEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdAIEventSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_RunningEvents"])
	{
		SRunningCrowdAIEventSaveData s_ArrayItem;
		SRunningCrowdAIEventSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_RunningEvents.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SCrowdAIEventSaveData*>(p_Target) = s_Object;
}

void SCrowdAIEventSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_RunningEvents.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdAIEventSaveData, m_RunningEvents));}

ZHMTypeInfo SItemKeywordProxySaveData::TypeInfo = ZHMTypeInfo("SItemKeywordProxySaveData", sizeof(SItemKeywordProxySaveData), alignof(SItemKeywordProxySaveData), SItemKeywordProxySaveData::WriteJson, SItemKeywordProxySaveData::WriteSimpleJson, SItemKeywordProxySaveData::FromSimpleJson);

void SItemKeywordProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemKeywordProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemKeywordProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemKeywordProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SItemKeywordProxySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemKeywordProxySaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SItemKeywordProxySaveData*>(p_Target) = s_Object;
}

void SItemKeywordProxySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SAttentionHUDUIElementArray_Dummy::TypeInfo = ZHMTypeInfo("SAttentionHUDUIElementArray_Dummy", sizeof(SAttentionHUDUIElementArray_Dummy), alignof(SAttentionHUDUIElementArray_Dummy), SAttentionHUDUIElementArray_Dummy::WriteJson, SAttentionHUDUIElementArray_Dummy::WriteSimpleJson, SAttentionHUDUIElementArray_Dummy::FromSimpleJson);

void SAttentionHUDUIElementArray_Dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAttentionHUDUIElementArray_Dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAttentionHUDUIElement") << "," << JsonStr("$val") << ":";
		SAttentionHUDUIElement::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SAttentionHUDUIElementArray_Dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SAttentionHUDUIElementArray_Dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SAttentionHUDUIElement::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAttentionHUDUIElementArray_Dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAttentionHUDUIElementArray_Dummy s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["dummy"])
	{
		SAttentionHUDUIElement s_ArrayItem;
		SAttentionHUDUIElement::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.dummy.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SAttentionHUDUIElementArray_Dummy*>(p_Target) = s_Object;
}

void SAttentionHUDUIElementArray_Dummy::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	dummy.Serialize(p_Serializer, p_OwnOffset + offsetof(SAttentionHUDUIElementArray_Dummy, dummy));}

ZHMTypeInfo STrespassingRuleEntitySaveData::TypeInfo = ZHMTypeInfo("STrespassingRuleEntitySaveData", sizeof(STrespassingRuleEntitySaveData), alignof(STrespassingRuleEntitySaveData), STrespassingRuleEntitySaveData::WriteJson, STrespassingRuleEntitySaveData::WriteSimpleJson, STrespassingRuleEntitySaveData::FromSimpleJson);

void STrespassingRuleEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrespassingRuleEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aAllowedProfessionsDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAllowedProfessionsDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAllowedProfessionsDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aAllowedProfessionsDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STrespassingRuleEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrespassingRuleEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aAllowedProfessionsDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAllowedProfessionsDisabled.size(); ++i)
	{
		auto& s_Item = s_Object->m_aAllowedProfessionsDisabled[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aAllowedProfessionsDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STrespassingRuleEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrespassingRuleEntitySaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aAllowedProfessionsDisabled"])
	{
		s_Object.m_aAllowedProfessionsDisabled.push_back(bool(s_Item));
	}

	*reinterpret_cast<STrespassingRuleEntitySaveData*>(p_Target) = s_Object;
}

void STrespassingRuleEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aAllowedProfessionsDisabled.Serialize(p_Serializer, p_OwnOffset + offsetof(STrespassingRuleEntitySaveData, m_aAllowedProfessionsDisabled));}

ZHMTypeInfo ISequenceTarget::TypeInfo = ZHMTypeInfo("ISequenceTarget", sizeof(ISequenceTarget), alignof(ISequenceTarget), ISequenceTarget::WriteJson, ISequenceTarget::WriteSimpleJson, ISequenceTarget::FromSimpleJson);

void ISequenceTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISequenceTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ISequenceTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISequenceTarget::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISequenceTarget s_Object;

	*reinterpret_cast<ISequenceTarget*>(p_Target) = s_Object;
}

void ISequenceTarget::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IComponentInterface::TypeInfo = ZHMTypeInfo("IComponentInterface", sizeof(IComponentInterface), alignof(IComponentInterface), IComponentInterface::WriteJson, IComponentInterface::WriteSimpleJson, IComponentInterface::FromSimpleJson);

void IComponentInterface::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IComponentInterface*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IComponentInterface::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IComponentInterface*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IComponentInterface::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IComponentInterface s_Object;

	*reinterpret_cast<IComponentInterface*>(p_Target) = s_Object;
}

void IComponentInterface::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IHM5WeaponInventory::TypeInfo = ZHMTypeInfo("IHM5WeaponInventory", sizeof(IHM5WeaponInventory), alignof(IHM5WeaponInventory), IHM5WeaponInventory::WriteJson, IHM5WeaponInventory::WriteSimpleJson, IHM5WeaponInventory::FromSimpleJson);

void IHM5WeaponInventory::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5WeaponInventory*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5WeaponInventory::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IHM5WeaponInventory*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IHM5WeaponInventory::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IHM5WeaponInventory s_Object;

	*reinterpret_cast<IHM5WeaponInventory*>(p_Target) = s_Object;
}

void IHM5WeaponInventory::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZSituationGroup::TypeInfo = ZHMTypeInfo("ZSituationGroup", sizeof(ZSituationGroup), alignof(ZSituationGroup), ZSituationGroup::WriteJson, ZSituationGroup::WriteSimpleJson, ZSituationGroup::FromSimpleJson);

void ZSituationGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSituationGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSituationGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZSituationGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZSituationGroup::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSituationGroup s_Object;

	*reinterpret_cast<ZSituationGroup*>(p_Target) = s_Object;
}

void ZSituationGroup::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCppEntitySubsetInfo::TypeInfo = ZHMTypeInfo("SCppEntitySubsetInfo", sizeof(SCppEntitySubsetInfo), alignof(SCppEntitySubsetInfo), SCppEntitySubsetInfo::WriteJson, SCppEntitySubsetInfo::WriteSimpleJson, SCppEntitySubsetInfo::FromSimpleJson);

void SCppEntitySubsetInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCppEntitySubsetInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("name") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->name);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("flags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->flags;
	p_Stream << "}";

	p_Stream << "}";
}

void SCppEntitySubsetInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCppEntitySubsetInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("name") << ":";
	p_Stream << JsonStr(s_Object->name);
	p_Stream << ",";

	p_Stream << JsonStr("flags") << ":";
	p_Stream << s_Object->flags;

	p_Stream << "}";
}

void SCppEntitySubsetInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCppEntitySubsetInfo s_Object;

	s_Object.name = std::string_view(p_Document["name"]);

	s_Object.flags = static_cast<uint32>(int64_t(p_Document["flags"]));

	*reinterpret_cast<SCppEntitySubsetInfo*>(p_Target) = s_Object;
}

void SCppEntitySubsetInfo::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	name.Serialize(p_Serializer, p_OwnOffset + offsetof(SCppEntitySubsetInfo, name));}

ZHMTypeInfo STrackDollyControllerSaveData::TypeInfo = ZHMTypeInfo("STrackDollyControllerSaveData", sizeof(STrackDollyControllerSaveData), alignof(STrackDollyControllerSaveData), STrackDollyControllerSaveData::WriteJson, STrackDollyControllerSaveData::WriteSimpleJson, STrackDollyControllerSaveData::FromSimpleJson);

void STrackDollyControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackDollyControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTrackPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTrackPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDollyAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsDollyAttached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vDollyPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vDollyRotation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STrackDollyControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrackDollyControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTrackPosition") << ":";
	p_Stream << s_Object->m_fTrackPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDollyAttached") << ":";
	p_Stream << s_Object->m_bIsDollyAttached;
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vDollyPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vDollyRotation, p_Stream);

	p_Stream << "}";
}

void STrackDollyControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrackDollyControllerSaveData s_Object;

	s_Object.m_rTrackEntity = static_cast<uint32>(int64_t(p_Document["m_rTrackEntity"]));

	s_Object.m_fTrackPosition = static_cast<float32>(double(p_Document["m_fTrackPosition"]));

	s_Object.m_bIsDollyAttached = bool(p_Document["m_bIsDollyAttached"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vDollyPosition"], &s_Item);
		s_Object.m_vDollyPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vDollyRotation"], &s_Item);
		s_Object.m_vDollyRotation = s_Item;
	}

	*reinterpret_cast<STrackDollyControllerSaveData*>(p_Target) = s_Object;
}

void STrackDollyControllerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vDollyPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(STrackDollyControllerSaveData, m_vDollyPosition));	m_vDollyRotation.Serialize(p_Serializer, p_OwnOffset + offsetof(STrackDollyControllerSaveData, m_vDollyRotation));}

ZHMTypeInfo SPIPMessageManagerProxySaveData::TypeInfo = ZHMTypeInfo("SPIPMessageManagerProxySaveData", sizeof(SPIPMessageManagerProxySaveData), alignof(SPIPMessageManagerProxySaveData), SPIPMessageManagerProxySaveData::WriteJson, SPIPMessageManagerProxySaveData::WriteSimpleJson, SPIPMessageManagerProxySaveData::FromSimpleJson);

void SPIPMessageManagerProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPIPMessageManagerProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SPIPMessageManagerProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SPIPMessageManagerProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SPIPMessageManagerProxySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPIPMessageManagerProxySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SPIPMessageManagerProxySaveData*>(p_Target) = s_Object;
}

void SPIPMessageManagerProxySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorAliveConditionSaveData::TypeInfo = ZHMTypeInfo("SActorAliveConditionSaveData", sizeof(SActorAliveConditionSaveData), alignof(SActorAliveConditionSaveData), SActorAliveConditionSaveData::WriteJson, SActorAliveConditionSaveData::WriteSimpleJson, SActorAliveConditionSaveData::FromSimpleJson);

void SActorAliveConditionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAliveConditionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAliveConditionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorAliveConditionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorAliveConditionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorAliveConditionSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorAliveConditionSaveData*>(p_Target) = s_Object;
}

void SActorAliveConditionSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo STokenID::TypeInfo = ZHMTypeInfo("STokenID", sizeof(STokenID), alignof(STokenID), STokenID::WriteJson, STokenID::WriteSimpleJson, STokenID::FromSimpleJson);

void STokenID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STokenID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_iValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValid;
	p_Stream << "}";

	p_Stream << "}";
}

void STokenID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STokenID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_iValue") << ":";
	p_Stream << s_Object->m_iValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValid") << ":";
	p_Stream << s_Object->m_bValid;

	p_Stream << "}";
}

void STokenID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STokenID s_Object;

	s_Object.m_iValue = static_cast<uint32>(int64_t(p_Document["m_iValue"]));

	s_Object.m_bValid = bool(p_Document["m_bValid"]);

	*reinterpret_cast<STokenID*>(p_Target) = s_Object;
}

void STokenID::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SConversationEntry::TypeInfo = ZHMTypeInfo("SConversationEntry", sizeof(SConversationEntry), alignof(SConversationEntry), SConversationEntry::WriteJson, SConversationEntry::WriteSimpleJson, SConversationEntry::FromSimpleJson);

void SConversationEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConversationEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_role") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EConversationRole") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_role) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EConversationRole", static_cast<int>(s_Object->m_role))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sound") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorSoundDefs") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_sound) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_sound))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SConversationEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConversationEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_role") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EConversationRole", static_cast<int>(s_Object->m_role)));
	p_Stream << ",";

	p_Stream << JsonStr("m_sound") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_sound)));

	p_Stream << "}";
}

void SConversationEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SConversationEntry s_Object;

	s_Object.m_role = static_cast<EConversationRole>(ZHMEnums::GetEnumValueByName("EConversationRole", std::string_view(p_Document["m_role"])));

	s_Object.m_sound = static_cast<EActorSoundDefs>(ZHMEnums::GetEnumValueByName("EActorSoundDefs", std::string_view(p_Document["m_sound"])));

	*reinterpret_cast<SConversationEntry*>(p_Target) = s_Object;
}

void SConversationEntry::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ITriggerListener::TypeInfo = ZHMTypeInfo("ITriggerListener", sizeof(ITriggerListener), alignof(ITriggerListener), ITriggerListener::WriteJson, ITriggerListener::WriteSimpleJson, ITriggerListener::FromSimpleJson);

void ITriggerListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITriggerListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITriggerListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ITriggerListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ITriggerListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ITriggerListener s_Object;

	*reinterpret_cast<ITriggerListener*>(p_Target) = s_Object;
}

void ITriggerListener::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SItemLeftHandUIData::TypeInfo = ZHMTypeInfo("SItemLeftHandUIData", sizeof(SItemLeftHandUIData), alignof(SItemLeftHandUIData), SItemLeftHandUIData::WriteJson, SItemLeftHandUIData::WriteSimpleJson, SItemLeftHandUIData::FromSimpleJson);

void SItemLeftHandUIData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemLeftHandUIData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemLeftHandUIData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemLeftHandUIData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << s_Object->bIllegal;

	p_Stream << "}";
}

void SItemLeftHandUIData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemLeftHandUIData s_Object;

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	s_Object.nItemHUDType = static_cast<int32>(int64_t(p_Document["nItemHUDType"]));

	s_Object.bHasItemToShow = bool(p_Document["bHasItemToShow"]);

	s_Object.bSuspicious = bool(p_Document["bSuspicious"]);

	s_Object.bIllegal = bool(p_Document["bIllegal"]);

	*reinterpret_cast<SItemLeftHandUIData*>(p_Target) = s_Object;
}

void SItemLeftHandUIData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	icon.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemLeftHandUIData, icon));}

ZHMTypeInfo SFooStruct::TypeInfo = ZHMTypeInfo("SFooStruct", sizeof(SFooStruct), alignof(SFooStruct), SFooStruct::WriteJson, SFooStruct::WriteSimpleJson, SFooStruct::FromSimpleJson);

void SFooStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFooStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eTest") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_eTest;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sOther") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sOther);
	p_Stream << "}";

	p_Stream << "}";
}

void SFooStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SFooStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eTest") << ":";
	p_Stream << s_Object->m_eTest;
	p_Stream << ",";

	p_Stream << JsonStr("m_sOther") << ":";
	p_Stream << JsonStr(s_Object->m_sOther);

	p_Stream << "}";
}

void SFooStruct::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFooStruct s_Object;

	s_Object.m_eTest = static_cast<uint32>(int64_t(p_Document["m_eTest"]));

	s_Object.m_sOther = std::string_view(p_Document["m_sOther"]);

	*reinterpret_cast<SFooStruct*>(p_Target) = s_Object;
}

void SFooStruct::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sOther.Serialize(p_Serializer, p_OwnOffset + offsetof(SFooStruct, m_sOther));}

ZHMTypeInfo SChairSaveData::TypeInfo = ZHMTypeInfo("SChairSaveData", sizeof(SChairSaveData), alignof(SChairSaveData), SChairSaveData::WriteJson, SChairSaveData::WriteSimpleJson, SChairSaveData::FromSimpleJson);

void SChairSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChairSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAttached;
	p_Stream << "}";

	p_Stream << "}";
}

void SChairSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SChairSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << s_Object->m_bAttached;

	p_Stream << "}";
}

void SChairSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SChairSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_bAttached = bool(p_Document["m_bAttached"]);

	*reinterpret_cast<SChairSaveData*>(p_Target) = s_Object;
}

void SChairSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCombatMetricsSaveData::TypeInfo = ZHMTypeInfo("SCombatMetricsSaveData", sizeof(SCombatMetricsSaveData), alignof(SCombatMetricsSaveData), SCombatMetricsSaveData::WriteJson, SCombatMetricsSaveData::WriteSimpleJson, SCombatMetricsSaveData::FromSimpleJson);

void SCombatMetricsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatMetricsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CombatProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DeadVIPsOrContractTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DeadVIPsOrContractTargets.size(); ++i)
	{
		auto& s_Item = s_Object->m_DeadVIPsOrContractTargets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_DeadVIPsOrContractTargets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_DiscoveredVIPOrContractTargetBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_DiscoveredVIPOrContractTargetBodies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCombatMetricsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCombatMetricsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatProgress") << ":";
	p_Stream << s_Object->m_CombatProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_DeadVIPsOrContractTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DeadVIPsOrContractTargets.size(); ++i)
	{
		auto& s_Item = s_Object->m_DeadVIPsOrContractTargets[i];
		p_Stream << s_Item;

		if (i < s_Object->m_DeadVIPsOrContractTargets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_DiscoveredVIPOrContractTargetBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size(); ++i)
	{
		auto& s_Item = s_Object->m_DiscoveredVIPOrContractTargetBodies[i];
		p_Stream << s_Item;

		if (i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCombatMetricsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCombatMetricsSaveData s_Object;

	s_Object.m_CombatProgress = static_cast<float32>(double(p_Document["m_CombatProgress"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_DeadVIPsOrContractTargets"])
	{
		s_Object.m_DeadVIPsOrContractTargets.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_DiscoveredVIPOrContractTargetBodies"])
	{
		s_Object.m_DiscoveredVIPOrContractTargetBodies.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	*reinterpret_cast<SCombatMetricsSaveData*>(p_Target) = s_Object;
}

void SCombatMetricsSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_DeadVIPsOrContractTargets.Serialize(p_Serializer, p_OwnOffset + offsetof(SCombatMetricsSaveData, m_DeadVIPsOrContractTargets));	m_DiscoveredVIPOrContractTargetBodies.Serialize(p_Serializer, p_OwnOffset + offsetof(SCombatMetricsSaveData, m_DiscoveredVIPOrContractTargetBodies));}

ZHMTypeInfo SMovementDrainPipeSaveData::TypeInfo = ZHMTypeInfo("SMovementDrainPipeSaveData", sizeof(SMovementDrainPipeSaveData), alignof(SMovementDrainPipeSaveData), SMovementDrainPipeSaveData::WriteJson, SMovementDrainPipeSaveData::WriteSimpleJson, SMovementDrainPipeSaveData::FromSimpleJson);

void SMovementDrainPipeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDrainPipeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rDrainPipe") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDrainPipe;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementDrainPipeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SMovementDrainPipeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rDrainPipe") << ":";
	p_Stream << s_Object->m_rDrainPipe;

	p_Stream << "}";
}

void SMovementDrainPipeSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementDrainPipeSaveData s_Object;

	s_Object.m_rDrainPipe = static_cast<uint32>(int64_t(p_Document["m_rDrainPipe"]));

	*reinterpret_cast<SMovementDrainPipeSaveData*>(p_Target) = s_Object;
}

void SMovementDrainPipeSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SLightFlickerEntitySaveData::TypeInfo = ZHMTypeInfo("SLightFlickerEntitySaveData", sizeof(SLightFlickerEntitySaveData), alignof(SLightFlickerEntitySaveData), SLightFlickerEntitySaveData::WriteJson, SLightFlickerEntitySaveData::WriteSimpleJson, SLightFlickerEntitySaveData::FromSimpleJson);

void SLightFlickerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLightFlickerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bLightOn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLightOn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFlickerOn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFlickerOn;
	p_Stream << "}";

	p_Stream << "}";
}

void SLightFlickerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SLightFlickerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bLightOn") << ":";
	p_Stream << s_Object->m_bLightOn;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFlickerOn") << ":";
	p_Stream << s_Object->m_bFlickerOn;

	p_Stream << "}";
}

void SLightFlickerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLightFlickerEntitySaveData s_Object;

	s_Object.m_bLightOn = bool(p_Document["m_bLightOn"]);

	s_Object.m_bFlickerOn = bool(p_Document["m_bFlickerOn"]);

	*reinterpret_cast<SLightFlickerEntitySaveData*>(p_Target) = s_Object;
}

void SLightFlickerEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorStandInEntitiesSaveData::TypeInfo = ZHMTypeInfo("SActorStandInEntitiesSaveData", sizeof(SActorStandInEntitiesSaveData), alignof(SActorStandInEntitiesSaveData), SActorStandInEntitiesSaveData::WriteJson, SActorStandInEntitiesSaveData::WriteSimpleJson, SActorStandInEntitiesSaveData::FromSimpleJson);

void SActorStandInEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorStandInEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorStandInSaveData") << "," << JsonStr("$val") << ":";
		SActorStandInSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActorStandInEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorStandInEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SActorStandInSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorStandInEntitiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorStandInEntitiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SActorStandInSaveData s_ArrayItem;
		SActorStandInSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActorStandInEntitiesSaveData*>(p_Target) = s_Object;
}

void SActorStandInEntitiesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorStandInEntitiesSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorStandInEntitiesSaveData, m_aData));}

ZHMTypeInfo SDynamicObjectKeyValuePair::TypeInfo = ZHMTypeInfo("SDynamicObjectKeyValuePair", sizeof(SDynamicObjectKeyValuePair), alignof(SDynamicObjectKeyValuePair), SDynamicObjectKeyValuePair::WriteJson, SDynamicObjectKeyValuePair::WriteSimpleJson, SDynamicObjectKeyValuePair::FromSimpleJson);

void SDynamicObjectKeyValuePair::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicObjectKeyValuePair*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sKey") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sKey);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicObjectKeyValuePair::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SDynamicObjectKeyValuePair*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sKey") << ":";
	p_Stream << JsonStr(s_Object->sKey);
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->value, p_Stream);

	p_Stream << "}";
}

void SDynamicObjectKeyValuePair::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDynamicObjectKeyValuePair s_Object;

	s_Object.sKey = std::string_view(p_Document["sKey"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["value"], &s_Item);
		s_Object.value = s_Item;
	}

	*reinterpret_cast<SDynamicObjectKeyValuePair*>(p_Target) = s_Object;
}

void SDynamicObjectKeyValuePair::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	sKey.Serialize(p_Serializer, p_OwnOffset + offsetof(SDynamicObjectKeyValuePair, sKey));	value.Serialize(p_Serializer, p_OwnOffset + offsetof(SDynamicObjectKeyValuePair, value));}

ZHMTypeInfo SItemKeywordProxiesSaveData::TypeInfo = ZHMTypeInfo("SItemKeywordProxiesSaveData", sizeof(SItemKeywordProxiesSaveData), alignof(SItemKeywordProxiesSaveData), SItemKeywordProxiesSaveData::WriteJson, SItemKeywordProxiesSaveData::WriteSimpleJson, SItemKeywordProxiesSaveData::FromSimpleJson);

void SItemKeywordProxiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemKeywordProxySaveData") << "," << JsonStr("$val") << ":";
		SItemKeywordProxySaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SItemKeywordProxiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SItemKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SItemKeywordProxySaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SItemKeywordProxiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemKeywordProxiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SItemKeywordProxySaveData s_ArrayItem;
		SItemKeywordProxySaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SItemKeywordProxiesSaveData*>(p_Target) = s_Object;
}

void SItemKeywordProxiesSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemKeywordProxiesSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(SItemKeywordProxiesSaveData, m_aData));}

ZHMTypeInfo STrapsSaveData::TypeInfo = ZHMTypeInfo("STrapsSaveData", sizeof(STrapsSaveData), alignof(STrapsSaveData), STrapsSaveData::WriteJson, STrapsSaveData::WriteSimpleJson, STrapsSaveData::FromSimpleJson);

void STrapsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrapsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItsATrapSaveData") << "," << JsonStr("$val") << ":";
		SItsATrapSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void STrapsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrapsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item = s_Object->m_aEntities[i];
		p_Stream << s_Item;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item = s_Object->m_aData[i];
		SItsATrapSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STrapsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrapsSaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item)));
	}

	for (simdjson::ondemand::value s_Item : p_Document["m_aData"])
	{
		SItsATrapSaveData s_ArrayItem;
		SItsATrapSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aData.push_back(s_ArrayItem);
	}

	*reinterpret_cast<STrapsSaveData*>(p_Target) = s_Object;
}

void STrapsSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aEntities.Serialize(p_Serializer, p_OwnOffset + offsetof(STrapsSaveData, m_aEntities));	m_aData.Serialize(p_Serializer, p_OwnOffset + offsetof(STrapsSaveData, m_aData));}

ZHMTypeInfo SConversationPart::TypeInfo = ZHMTypeInfo("SConversationPart", sizeof(SConversationPart), alignof(SConversationPart), SConversationPart::WriteJson, SConversationPart::WriteSimpleJson, SConversationPart::FromSimpleJson);

void SConversationPart::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConversationPart*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_chance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_chance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_entries.size(); ++i)
	{
		auto& s_Item = s_Object->m_entries[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SConversationEntry") << "," << JsonStr("$val") << ":";
		SConversationEntry::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_entries.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SConversationPart::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SConversationPart*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_chance") << ":";
	p_Stream << s_Object->m_chance;
	p_Stream << ",";

	p_Stream << JsonStr("m_entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_entries.size(); ++i)
	{
		auto& s_Item = s_Object->m_entries[i];
		SConversationEntry::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_entries.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SConversationPart::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SConversationPart s_Object;

	s_Object.m_chance = static_cast<float32>(double(p_Document["m_chance"]));

	for (simdjson::ondemand::value s_Item : p_Document["m_entries"])
	{
		SConversationEntry s_ArrayItem;
		SConversationEntry::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_entries.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SConversationPart*>(p_Target) = s_Object;
}

void SConversationPart::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_entries.Serialize(p_Serializer, p_OwnOffset + offsetof(SConversationPart, m_entries));}

ZHMTypeInfo SHeroEscortSituationActors::TypeInfo = ZHMTypeInfo("SHeroEscortSituationActors", sizeof(SHeroEscortSituationActors), alignof(SHeroEscortSituationActors), SHeroEscortSituationActors::WriteJson, SHeroEscortSituationActors::WriteSimpleJson, SHeroEscortSituationActors::FromSimpleJson);

void SHeroEscortSituationActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroEscortSituationActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituationActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroEscortSituationActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SHeroEscortSituationActors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroEscortSituationActors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SHeroEscortSituationActors*>(p_Target) = s_Object;
}

void SHeroEscortSituationActors::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SCharacterSpeakEntitySaveData::TypeInfo = ZHMTypeInfo("SCharacterSpeakEntitySaveData", sizeof(SCharacterSpeakEntitySaveData), alignof(SCharacterSpeakEntitySaveData), SCharacterSpeakEntitySaveData::WriteJson, SCharacterSpeakEntitySaveData::WriteSimpleJson, SCharacterSpeakEntitySaveData::FromSimpleJson);

void SCharacterSpeakEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCharacterSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSeekPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRandomSelectionSeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRandomSelectionSeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWereSubtitlesSeen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWereSubtitlesSeen;
	p_Stream << "}";

	p_Stream << "}";
}

void SCharacterSpeakEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCharacterSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << s_Object->m_fSeekPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRandomSelectionSeed") << ":";
	p_Stream << s_Object->m_nRandomSelectionSeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWereSubtitlesSeen") << ":";
	p_Stream << s_Object->m_bWereSubtitlesSeen;

	p_Stream << "}";
}

void SCharacterSpeakEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCharacterSpeakEntitySaveData s_Object;

	s_Object.m_fSeekPosition = static_cast<float32>(double(p_Document["m_fSeekPosition"]));

	s_Object.m_nRandomSelectionSeed = static_cast<uint32>(int64_t(p_Document["m_nRandomSelectionSeed"]));

	s_Object.m_bWereSubtitlesSeen = bool(p_Document["m_bWereSubtitlesSeen"]);

	*reinterpret_cast<SCharacterSpeakEntitySaveData*>(p_Target) = s_Object;
}

void SCharacterSpeakEntitySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActorDynamicTemplateSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateSaveData", sizeof(SActorDynamicTemplateSaveData), alignof(SActorDynamicTemplateSaveData), SActorDynamicTemplateSaveData::WriteJson, SActorDynamicTemplateSaveData::WriteSimpleJson, SActorDynamicTemplateSaveData::FromSimpleJson);

void SActorDynamicTemplateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTensionLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmotionLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nTimeLimit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionRemoveLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTensionRemoveLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionRemoveLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionRemoveLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmotionRemoveLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionRemoveLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeRemoveLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nTimeRemoveLimit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_resourceID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_resourceID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInstance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInstance;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDynamicTemplateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActorDynamicTemplateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeLimit") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nTimeLimit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionRemoveLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionRemoveLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionRemoveLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionRemoveLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeRemoveLimit") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nTimeRemoveLimit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_resourceID") << ":";
	p_Stream << s_Object->m_resourceID;
	p_Stream << ",";

	p_Stream << JsonStr("m_rInstance") << ":";
	p_Stream << s_Object->m_rInstance;

	p_Stream << "}";
}

void SActorDynamicTemplateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorDynamicTemplateSaveData s_Object;

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	s_Object.m_eTensionLimit = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eTensionLimit"])));

	s_Object.m_eEmotionLimit = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eEmotionLimit"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nTimeLimit"], &s_Item);
		s_Object.m_nTimeLimit = s_Item;
	}

	s_Object.m_eTensionRemoveLimit = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eTensionRemoveLimit"])));

	s_Object.m_eEmotionRemoveLimit = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eEmotionRemoveLimit"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nTimeRemoveLimit"], &s_Item);
		s_Object.m_nTimeRemoveLimit = s_Item;
	}

	s_Object.m_resourceID = int64(p_Document["m_resourceID"]);

	s_Object.m_rInstance = static_cast<uint32>(int64_t(p_Document["m_rInstance"]));

	*reinterpret_cast<SActorDynamicTemplateSaveData*>(p_Target) = s_Object;
}

void SActorDynamicTemplateSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_sName.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorDynamicTemplateSaveData, m_sName));	m_nTimeLimit.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorDynamicTemplateSaveData, m_nTimeLimit));	m_nTimeRemoveLimit.Serialize(p_Serializer, p_OwnOffset + offsetof(SActorDynamicTemplateSaveData, m_nTimeRemoveLimit));}

ZHMTypeInfo IWorldMapMarker::TypeInfo = ZHMTypeInfo("IWorldMapMarker", sizeof(IWorldMapMarker), alignof(IWorldMapMarker), IWorldMapMarker::WriteJson, IWorldMapMarker::WriteSimpleJson, IWorldMapMarker::FromSimpleJson);

void IWorldMapMarker::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IWorldMapMarker*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IWorldMapMarker::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IWorldMapMarker*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IWorldMapMarker::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IWorldMapMarker s_Object;

	*reinterpret_cast<IWorldMapMarker*>(p_Target) = s_Object;
}

void IWorldMapMarker::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SHeroCameraStandInSaveState::TypeInfo = ZHMTypeInfo("SHeroCameraStandInSaveState", sizeof(SHeroCameraStandInSaveState), alignof(SHeroCameraStandInSaveState), SHeroCameraStandInSaveState::WriteJson, SHeroCameraStandInSaveState::WriteSimpleJson, SHeroCameraStandInSaveState::FromSimpleJson);

void SHeroCameraStandInSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroCameraStandInSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroCameraStandInSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroCameraStandInSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;

	p_Stream << "}";
}

void SHeroCameraStandInSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroCameraStandInSaveState s_Object;

	s_Object.m_rHero = static_cast<uint32>(int64_t(p_Document["m_rHero"]));

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	*reinterpret_cast<SHeroCameraStandInSaveState*>(p_Target) = s_Object;
}

void SHeroCameraStandInSaveState::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SStoredSlotSaveData::TypeInfo = ZHMTypeInfo("SStoredSlotSaveData", sizeof(SStoredSlotSaveData), alignof(SStoredSlotSaveData), SStoredSlotSaveData::WriteJson, SStoredSlotSaveData::WriteSimpleJson, SStoredSlotSaveData::FromSimpleJson);

void SStoredSlotSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStoredSlotSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_iStoredInventorySlotIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iStoredInventorySlotIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iStoreReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_iStoreReason);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemsStored") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItemsStored;
	p_Stream << "}";

	p_Stream << "}";
}

void SStoredSlotSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SStoredSlotSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_iStoredInventorySlotIndex") << ":";
	p_Stream << s_Object->m_iStoredInventorySlotIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_iStoreReason") << ":";
	p_Stream << static_cast<int>(s_Object->m_iStoreReason);
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemsStored") << ":";
	p_Stream << s_Object->m_bItemsStored;

	p_Stream << "}";
}

void SStoredSlotSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SStoredSlotSaveData s_Object;

	s_Object.m_iStoredInventorySlotIndex = static_cast<uint32>(int64_t(p_Document["m_iStoredInventorySlotIndex"]));

	s_Object.m_iStoreReason = static_cast<uint8>(int64_t(p_Document["m_iStoreReason"]));

	s_Object.m_bItemsStored = bool(p_Document["m_bItemsStored"]);

	*reinterpret_cast<SStoredSlotSaveData*>(p_Target) = s_Object;
}

void SStoredSlotSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SSentryGroupSaveData::TypeInfo = ZHMTypeInfo("SSentryGroupSaveData", sizeof(SSentryGroupSaveData), alignof(SSentryGroupSaveData), SSentryGroupSaveData::WriteJson, SSentryGroupSaveData::WriteSimpleJson, SSentryGroupSaveData::FromSimpleJson);

void SSentryGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSentryZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastEscalateOrder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastEscalateOrder, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eActionPrompt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESentryActionPrompt") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eActionPrompt) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESentryActionPrompt", static_cast<int>(s_Object->m_eActionPrompt))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequestedAction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRequestedAction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowingWarning;
	p_Stream << "}";

	p_Stream << "}";
}

void SSentryGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SSentryGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << s_Object->m_rSentryZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastEscalateOrder") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastEscalateOrder, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eActionPrompt") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESentryActionPrompt", static_cast<int>(s_Object->m_eActionPrompt)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequestedAction") << ":";
	p_Stream << s_Object->m_bRequestedAction;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << s_Object->m_bShowingWarning;

	p_Stream << "}";
}

void SSentryGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSentryGroupSaveData s_Object;

	s_Object.m_rTarget = static_cast<uint32>(int64_t(p_Document["m_rTarget"]));

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_rSentryZone = static_cast<uint32>(int64_t(p_Document["m_rSentryZone"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastEscalateOrder"], &s_Item);
		s_Object.m_tLastEscalateOrder = s_Item;
	}

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_eActionPrompt = static_cast<ESentryActionPrompt>(ZHMEnums::GetEnumValueByName("ESentryActionPrompt", std::string_view(p_Document["m_eActionPrompt"])));

	s_Object.m_bRequestedAction = bool(p_Document["m_bRequestedAction"]);

	s_Object.m_bShowingWarning = bool(p_Document["m_bShowingWarning"]);

	*reinterpret_cast<SSentryGroupSaveData*>(p_Target) = s_Object;
}

void SSentryGroupSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_tLastEscalateOrder.Serialize(p_Serializer, p_OwnOffset + offsetof(SSentryGroupSaveData, m_tLastEscalateOrder));	m_fsmState.Serialize(p_Serializer, p_OwnOffset + offsetof(SSentryGroupSaveData, m_fsmState));}

ZHMTypeInfo IBoneAnimator::TypeInfo = ZHMTypeInfo("IBoneAnimator", sizeof(IBoneAnimator), alignof(IBoneAnimator), IBoneAnimator::WriteJson, IBoneAnimator::WriteSimpleJson, IBoneAnimator::FromSimpleJson);

void IBoneAnimator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneAnimator*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneAnimator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBoneAnimator*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBoneAnimator::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBoneAnimator s_Object;

	*reinterpret_cast<IBoneAnimator*>(p_Target) = s_Object;
}

void IBoneAnimator::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IActor::TypeInfo = ZHMTypeInfo("IActor", sizeof(IActor), alignof(IActor), IActor::WriteJson, IActor::WriteSimpleJson, IActor::FromSimpleJson);

void IActor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IActor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IActor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IActor s_Object;

	*reinterpret_cast<IActor*>(p_Target) = s_Object;
}

void IActor::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SActionRadialArcDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SActionRadialArcDisplayInfoArray_dummy", sizeof(SActionRadialArcDisplayInfoArray_dummy), alignof(SActionRadialArcDisplayInfoArray_dummy), SActionRadialArcDisplayInfoArray_dummy::WriteJson, SActionRadialArcDisplayInfoArray_dummy::WriteSimpleJson, SActionRadialArcDisplayInfoArray_dummy::FromSimpleJson);

void SActionRadialArcDisplayInfoArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActionRadialArcDisplayInfo") << "," << JsonStr("$val") << ":";
		SActionRadialArcDisplayInfo::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SActionRadialArcDisplayInfoArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item = s_Object->dummy[i];
		SActionRadialArcDisplayInfo::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActionRadialArcDisplayInfoArray_dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActionRadialArcDisplayInfoArray_dummy s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["dummy"])
	{
		SActionRadialArcDisplayInfo s_ArrayItem;
		SActionRadialArcDisplayInfo::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.dummy.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Target) = s_Object;
}

void SActionRadialArcDisplayInfoArray_dummy::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	dummy.Serialize(p_Serializer, p_OwnOffset + offsetof(SActionRadialArcDisplayInfoArray_dummy, dummy));}

ZHMTypeInfo SInventoryMovementConfig::TypeInfo = ZHMTypeInfo("SInventoryMovementConfig", sizeof(SInventoryMovementConfig), alignof(SInventoryMovementConfig), SInventoryMovementConfig::WriteJson, SInventoryMovementConfig::WriteSimpleJson, SInventoryMovementConfig::FromSimpleJson);

void SInventoryMovementConfig::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryMovementConfig*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eItemHandlingRightHand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigItemHandling") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eItemHandlingRightHand) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingRightHand))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemHandlingLeftHand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigItemHandling") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eItemHandlingLeftHand) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingLeftHand))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eFormerEquippedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigFormerEquippedItems") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eFormerEquippedItems) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigFormerEquippedItems", static_cast<int>(s_Object->m_eFormerEquippedItems))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eCustomRule") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigCustomRule") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eCustomRule) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigCustomRule", static_cast<int>(s_Object->m_eCustomRule))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropBackHolsteredItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropBackHolsteredItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSlowAnimation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSlowAnimation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInstantInventoryChange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceInstantInventoryChange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCancelIfInventoryInUse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCancelIfInventoryInUse;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSafeDrop") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSafeDrop;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vSafeDropPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vSafeDropPosition, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryMovementConfig::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SInventoryMovementConfig*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eItemHandlingRightHand") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingRightHand)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemHandlingLeftHand") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingLeftHand)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eFormerEquippedItems") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigFormerEquippedItems", static_cast<int>(s_Object->m_eFormerEquippedItems)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eCustomRule") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigCustomRule", static_cast<int>(s_Object->m_eCustomRule)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropBackHolsteredItem") << ":";
	p_Stream << s_Object->m_bDropBackHolsteredItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSlowAnimation") << ":";
	p_Stream << s_Object->m_bSlowAnimation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInstantInventoryChange") << ":";
	p_Stream << s_Object->m_bForceInstantInventoryChange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCancelIfInventoryInUse") << ":";
	p_Stream << s_Object->m_bCancelIfInventoryInUse;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSafeDrop") << ":";
	p_Stream << s_Object->m_bSafeDrop;
	p_Stream << ",";

	p_Stream << JsonStr("m_vSafeDropPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vSafeDropPosition, p_Stream);

	p_Stream << "}";
}

void SInventoryMovementConfig::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryMovementConfig s_Object;

	s_Object.m_eItemHandlingRightHand = static_cast<EInventoryConfigItemHandling>(ZHMEnums::GetEnumValueByName("EInventoryConfigItemHandling", std::string_view(p_Document["m_eItemHandlingRightHand"])));

	s_Object.m_eItemHandlingLeftHand = static_cast<EInventoryConfigItemHandling>(ZHMEnums::GetEnumValueByName("EInventoryConfigItemHandling", std::string_view(p_Document["m_eItemHandlingLeftHand"])));

	s_Object.m_eFormerEquippedItems = static_cast<EInventoryConfigFormerEquippedItems>(ZHMEnums::GetEnumValueByName("EInventoryConfigFormerEquippedItems", std::string_view(p_Document["m_eFormerEquippedItems"])));

	s_Object.m_eCustomRule = static_cast<EInventoryConfigCustomRule>(ZHMEnums::GetEnumValueByName("EInventoryConfigCustomRule", std::string_view(p_Document["m_eCustomRule"])));

	s_Object.m_bDropBackHolsteredItem = bool(p_Document["m_bDropBackHolsteredItem"]);

	s_Object.m_bSlowAnimation = bool(p_Document["m_bSlowAnimation"]);

	s_Object.m_bForceInstantInventoryChange = bool(p_Document["m_bForceInstantInventoryChange"]);

	s_Object.m_bCancelIfInventoryInUse = bool(p_Document["m_bCancelIfInventoryInUse"]);

	s_Object.m_bSafeDrop = bool(p_Document["m_bSafeDrop"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vSafeDropPosition"], &s_Item);
		s_Object.m_vSafeDropPosition = s_Item;
	}

	*reinterpret_cast<SInventoryMovementConfig*>(p_Target) = s_Object;
}

void SInventoryMovementConfig::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vSafeDropPosition.Serialize(p_Serializer, p_OwnOffset + offsetof(SInventoryMovementConfig, m_vSafeDropPosition));}

ZHMTypeInfo ZInteractionGuideData::TypeInfo = ZHMTypeInfo("ZInteractionGuideData", sizeof(ZInteractionGuideData), alignof(ZInteractionGuideData), ZInteractionGuideData::WriteJson, ZInteractionGuideData::WriteSimpleJson, ZInteractionGuideData::FromSimpleJson);

void ZInteractionGuideData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInteractionGuideData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZInteractionGuideData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZInteractionGuideData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZInteractionGuideData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInteractionGuideData s_Object;

	*reinterpret_cast<ZInteractionGuideData*>(p_Target) = s_Object;
}

void ZInteractionGuideData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo SClothBundleSpawnSaveData::TypeInfo = ZHMTypeInfo("SClothBundleSpawnSaveData", sizeof(SClothBundleSpawnSaveData), alignof(SClothBundleSpawnSaveData), SClothBundleSpawnSaveData::WriteJson, SClothBundleSpawnSaveData::WriteSimpleJson, SClothBundleSpawnSaveData::FromSimpleJson);

void SClothBundleSpawnSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothBundleSpawnSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rClothbundle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rClothbundle;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothBundleSpawnSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SClothBundleSpawnSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rClothbundle") << ":";
	p_Stream << s_Object->m_rClothbundle;

	p_Stream << "}";
}

void SClothBundleSpawnSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SClothBundleSpawnSaveData s_Object;

	s_Object.m_rClothbundle = static_cast<uint32>(int64_t(p_Document["m_rClothbundle"]));

	*reinterpret_cast<SClothBundleSpawnSaveData*>(p_Target) = s_Object;
}

void SClothBundleSpawnSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IBulletImpactListener::TypeInfo = ZHMTypeInfo("IBulletImpactListener", sizeof(IBulletImpactListener), alignof(IBulletImpactListener), IBulletImpactListener::WriteJson, IBulletImpactListener::WriteSimpleJson, IBulletImpactListener::FromSimpleJson);

void IBulletImpactListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBulletImpactListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBulletImpactListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IBulletImpactListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBulletImpactListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBulletImpactListener s_Object;

	*reinterpret_cast<IBulletImpactListener*>(p_Target) = s_Object;
}

void IBulletImpactListener::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo ZEntityReference::TypeInfo = ZHMTypeInfo("ZEntityReference", sizeof(ZEntityReference), alignof(ZEntityReference), ZEntityReference::WriteJson, ZEntityReference::WriteSimpleJson, ZEntityReference::FromSimpleJson);

void ZEntityReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_EntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZEntityID") << "," << JsonStr("$val") << ":";
	ZEntityID::WriteJson(&s_Object->m_EntityID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);
	p_Stream << "}";

	p_Stream << "}";
}

void ZEntityReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<ZEntityReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_EntityID") << ":";
	ZEntityID::WriteSimpleJson(&s_Object->m_EntityID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);

	p_Stream << "}";
}

void ZEntityReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityReference s_Object;

	{
		ZEntityID s_Item;
		ZEntityID::FromSimpleJson(p_Document["m_EntityID"], &s_Item);
		s_Object.m_EntityID = s_Item;
	}

	s_Object.m_sExposedEntity = std::string_view(p_Document["m_sExposedEntity"]);

	*reinterpret_cast<ZEntityReference*>(p_Target) = s_Object;
}

void ZEntityReference::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_EntityID.Serialize(p_Serializer, p_OwnOffset + offsetof(ZEntityReference, m_EntityID));	m_sExposedEntity.Serialize(p_Serializer, p_OwnOffset + offsetof(ZEntityReference, m_sExposedEntity));}

ZHMTypeInfo SHudMissionTimerControllerData::TypeInfo = ZHMTypeInfo("SHudMissionTimerControllerData", sizeof(SHudMissionTimerControllerData), alignof(SHudMissionTimerControllerData), SHudMissionTimerControllerData::WriteJson, SHudMissionTimerControllerData::WriteSimpleJson, SHudMissionTimerControllerData::FromSimpleJson);

void SHudMissionTimerControllerData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHudMissionTimerControllerData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fScoreGameTimeStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_fScoreGameTimeStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasIntroCutFired") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasIntroCutFired;
	p_Stream << "}";

	p_Stream << "}";
}

void SHudMissionTimerControllerData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHudMissionTimerControllerData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fScoreGameTimeStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_fScoreGameTimeStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasIntroCutFired") << ":";
	p_Stream << s_Object->m_bWasIntroCutFired;

	p_Stream << "}";
}

void SHudMissionTimerControllerData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHudMissionTimerControllerData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_fScoreGameTimeStart"], &s_Item);
		s_Object.m_fScoreGameTimeStart = s_Item;
	}

	s_Object.m_bWasIntroCutFired = bool(p_Document["m_bWasIntroCutFired"]);

	*reinterpret_cast<SHudMissionTimerControllerData*>(p_Target) = s_Object;
}

void SHudMissionTimerControllerData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_fScoreGameTimeStart.Serialize(p_Serializer, p_OwnOffset + offsetof(SHudMissionTimerControllerData, m_fScoreGameTimeStart));}

ZHMTypeInfo SHUDPIPControllerSaveData::TypeInfo = ZHMTypeInfo("SHUDPIPControllerSaveData", sizeof(SHUDPIPControllerSaveData), alignof(SHUDPIPControllerSaveData), SHUDPIPControllerSaveData::WriteJson, SHUDPIPControllerSaveData::WriteSimpleJson, SHUDPIPControllerSaveData::FromSimpleJson);

void SHUDPIPControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPIPControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPiPEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPiPEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDPIPControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHUDPIPControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPiPEnabled") << ":";
	p_Stream << s_Object->m_bPiPEnabled;

	p_Stream << "}";
}

void SHUDPIPControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHUDPIPControllerSaveData s_Object;

	s_Object.m_bPiPEnabled = bool(p_Document["m_bPiPEnabled"]);

	*reinterpret_cast<SHUDPIPControllerSaveData*>(p_Target) = s_Object;
}

void SHUDPIPControllerSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo IContractEvaluationContextListener::TypeInfo = ZHMTypeInfo("IContractEvaluationContextListener", sizeof(IContractEvaluationContextListener), alignof(IContractEvaluationContextListener), IContractEvaluationContextListener::WriteJson, IContractEvaluationContextListener::WriteSimpleJson, IContractEvaluationContextListener::FromSimpleJson);

void IContractEvaluationContextListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractEvaluationContextListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContractEvaluationContextListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<IContractEvaluationContextListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IContractEvaluationContextListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IContractEvaluationContextListener s_Object;

	*reinterpret_cast<IContractEvaluationContextListener*>(p_Target) = s_Object;
}

void IContractEvaluationContextListener::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

ZHMTypeInfo STrajectoryTrackSaveData::TypeInfo = ZHMTypeInfo("STrajectoryTrackSaveData", sizeof(STrajectoryTrackSaveData), alignof(STrajectoryTrackSaveData), STrajectoryTrackSaveData::WriteJson, STrajectoryTrackSaveData::WriteSimpleJson, STrajectoryTrackSaveData::FromSimpleJson);

void STrajectoryTrackSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrajectoryTrackSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vOriginalEntityTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_vOriginalEntityTransform, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vTargetStartTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_vTargetStartTransform, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STrajectoryTrackSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<STrajectoryTrackSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vOriginalEntityTransform") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_vOriginalEntityTransform, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vTargetStartTransform") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_vTargetStartTransform, p_Stream);

	p_Stream << "}";
}

void STrajectoryTrackSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrajectoryTrackSaveData s_Object;

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_vOriginalEntityTransform"], &s_Item);
		s_Object.m_vOriginalEntityTransform = s_Item;
	}

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_vTargetStartTransform"], &s_Item);
		s_Object.m_vTargetStartTransform = s_Item;
	}

	*reinterpret_cast<STrajectoryTrackSaveData*>(p_Target) = s_Object;
}

void STrajectoryTrackSaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_vOriginalEntityTransform.Serialize(p_Serializer, p_OwnOffset + offsetof(STrajectoryTrackSaveData, m_vOriginalEntityTransform));	m_vTargetStartTransform.Serialize(p_Serializer, p_OwnOffset + offsetof(STrajectoryTrackSaveData, m_vTargetStartTransform));}

ZHMTypeInfo SCrowdDeadPoseRepositorySaveData::TypeInfo = ZHMTypeInfo("SCrowdDeadPoseRepositorySaveData", sizeof(SCrowdDeadPoseRepositorySaveData), alignof(SCrowdDeadPoseRepositorySaveData), SCrowdDeadPoseRepositorySaveData::WriteJson, SCrowdDeadPoseRepositorySaveData::WriteSimpleJson, SCrowdDeadPoseRepositorySaveData::FromSimpleJson);

void SCrowdDeadPoseRepositorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdDeadPoseRepositorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aPoseCollections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoseCollections.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPoseCollections[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdPoseCollectionSaveData") << "," << JsonStr("$val") << ":";
		SCrowdPoseCollectionSaveData::WriteJson(&s_Item, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPoseCollections.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdDeadPoseRepositorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SCrowdDeadPoseRepositorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aPoseCollections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoseCollections.size(); ++i)
	{
		auto& s_Item = s_Object->m_aPoseCollections[i];
		SCrowdPoseCollectionSaveData::WriteSimpleJson(&s_Item, p_Stream);

		if (i < s_Object->m_aPoseCollections.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdDeadPoseRepositorySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdDeadPoseRepositorySaveData s_Object;

	for (simdjson::ondemand::value s_Item : p_Document["m_aPoseCollections"])
	{
		SCrowdPoseCollectionSaveData s_ArrayItem;
		SCrowdPoseCollectionSaveData::FromSimpleJson(s_Item, &s_ArrayItem);
		s_Object.m_aPoseCollections.push_back(s_ArrayItem);
	}

	*reinterpret_cast<SCrowdDeadPoseRepositorySaveData*>(p_Target) = s_Object;
}

void SCrowdDeadPoseRepositorySaveData::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	m_aPoseCollections.Serialize(p_Serializer, p_OwnOffset + offsetof(SCrowdDeadPoseRepositorySaveData, m_aPoseCollections));}

ZHMTypeInfo SHeroEscortSituation2Actors::TypeInfo = ZHMTypeInfo("SHeroEscortSituation2Actors", sizeof(SHeroEscortSituation2Actors), alignof(SHeroEscortSituation2Actors), SHeroEscortSituation2Actors::WriteJson, SHeroEscortSituation2Actors::WriteSimpleJson, SHeroEscortSituation2Actors::FromSimpleJson);

void SHeroEscortSituation2Actors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroEscortSituation2Actors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituation2Actors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto s_Object = static_cast<SHeroEscortSituation2Actors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SHeroEscortSituation2Actors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroEscortSituation2Actors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SHeroEscortSituation2Actors*>(p_Target) = s_Object;
}

void SHeroEscortSituation2Actors::Serialize(ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
}

