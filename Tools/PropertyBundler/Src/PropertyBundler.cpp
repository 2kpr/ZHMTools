#include <cstdio>
#include <filesystem>
#include <unordered_map>
#include <unordered_set>
#include <fstream>

#include <External/Hash.h>
#include <BinaryStreamWriter.h>

#if _WIN32
#define EXECUTABLE "PropertyBundler.exe"
#define SAMPLE_PATH "C:\\path\\to\\"
#else
#define EXECUTABLE "./PropertyBundler"
#define SAMPLE_PATH "/path/to/"
#endif

void PrintHelp()
{
	printf("Usage: " EXECUTABLE " <zhmtools-dir>\n");
}

static std::unordered_set<std::string> g_PropertyNames;
static std::unordered_map<std::string, std::unordered_map<std::string, std::string>> g_Enums;

void ProcessFile(const std::filesystem::path& p_Path, bool p_CustomProperties)
{
	std::ifstream s_SourceFile(p_Path);

	BinaryStreamWriter s_DataWriter;

	size_t s_PropertyCount = 0;
	std::string s_Property;
	while (std::getline(s_SourceFile, s_Property)) 
	{
		if (s_Property.empty())
			continue;

		// Data is serialized as CRC32, String
		s_DataWriter.Write(Hash::Crc32(s_Property));
		s_DataWriter.WriteShortString(s_Property);

		++s_PropertyCount;
	}

	const auto s_OutputPath = p_CustomProperties
		? p_Path.parent_path() / "ZHMCustomProperties.cpp"
		: p_Path.parent_path() / "ZHMPropertyData.cpp";

	std::ofstream s_OutputFile;
	s_OutputFile.open(s_OutputPath, std::ofstream::out);
	s_OutputFile << "/*" << std::endl;
	s_OutputFile << " * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing." << std::endl;
	s_OutputFile << " *" << std::endl;
	s_OutputFile << " * If you wish to regenerate this file because of a game update use the ZHMTools PropertyBundler tool:" << std::endl;
	s_OutputFile << " * https://github.com/OrfeasZ/ZHMTools/releases" << std::endl;
	s_OutputFile << " */" << std::endl;
	s_OutputFile << std::endl;
	s_OutputFile << "#include \"";

	if (p_CustomProperties)
		s_OutputFile << "ZHMCustomProperties.h";
	else
		s_OutputFile << "ZHMProperties.h";

	s_OutputFile << "\"" << std::endl;
	s_OutputFile << std::endl;
	s_OutputFile << "const uint8_t ZHMProperties::g_";

	if (p_CustomProperties)
		s_OutputFile << "CustomPropertiesData";
	else
		s_OutputFile << "PropertiesData";

	s_OutputFile << "[] = {";

	for (size_t i = 0; i < s_DataWriter.WrittenBytes(); ++i)
	{
		const auto s_Byte = static_cast<int>(reinterpret_cast<uint8_t*>(s_DataWriter.Buffer())[i]);
		s_OutputFile << "0x" << std::hex << s_Byte << std::dec << ",";
	}

	s_OutputFile << "};" << std::endl;

	s_OutputFile << "const size_t ZHMProperties::g_";

	if (p_CustomProperties)
		s_OutputFile << "CustomPropertiesDataSize";
	else
		s_OutputFile << "PropertiesDataSize";

	s_OutputFile << " = " << s_DataWriter.WrittenBytes() << ";" << std::endl;

	s_OutputFile << "const size_t ZHMProperties::g_";

	if (p_CustomProperties)
		s_OutputFile << "CustomPropertiesCount";
	else
		s_OutputFile << "PropertiesCount";

	s_OutputFile << " = " << s_PropertyCount << ";" << std::endl;
}

int main(int argc, char** argv)
{
	if (argc != 2)
	{
		PrintHelp();
		return 1;
	}

	const std::filesystem::path s_ToolsDir(argv[1]);

	if (!is_directory(s_ToolsDir))
	{
		PrintHelp();
		return 1;
	}

	const std::filesystem::path s_CustomPropertiesPath = s_ToolsDir / "Libraries" / "ResourceLib" / "Src" / "ZHM" / "ZHMCustomProperties.txt";
	const std::filesystem::path s_HM3PropertiesPath = s_ToolsDir / "Libraries" / "ResourceLib" / "Src" / "Generated" / "HM3" / "ZHMProperties.txt";
	const std::filesystem::path s_HM2PropertiesPath = s_ToolsDir / "Libraries" / "ResourceLib" / "Src" / "Generated" / "HM2" / "ZHMProperties.txt";
	const std::filesystem::path s_HM2016PropertiesPath = s_ToolsDir / "Libraries" / "ResourceLib" / "Src" / "Generated" / "HM2016" / "ZHMProperties.txt";
	const std::filesystem::path s_HMAPropertiesPath = s_ToolsDir / "Libraries" / "ResourceLib" / "Src" / "Generated" / "HMA" / "ZHMProperties.txt";

	if (!is_regular_file(s_CustomPropertiesPath))
	{
		fprintf(stderr, "[ERROR] Could not find ZHMCustomProperties file.\n");
		return 1;
	}

	if (!is_regular_file(s_HM3PropertiesPath))
	{
		fprintf(stderr, "[ERROR] Could not find HM3 ZHMProperties file.\n");
		return 1;
	}

	if (!is_regular_file(s_HM2PropertiesPath))
	{
		fprintf(stderr, "[ERROR] Could not find HM2 ZHMProperties file.\n");
		return 1;
	}

	if (!is_regular_file(s_HM2016PropertiesPath))
	{
		fprintf(stderr, "[ERROR] Could not find HM2016 ZHMProperties file.\n");
		return 1;
	}

	if (!is_regular_file(s_HMAPropertiesPath))
	{
		fprintf(stderr, "[ERROR] Could not find HMA ZHMProperties file.\n");
		return 1;
	}

	ProcessFile(s_CustomPropertiesPath, true);
	ProcessFile(s_HM3PropertiesPath, false);
	ProcessFile(s_HM2PropertiesPath, false);
	ProcessFile(s_HM2016PropertiesPath, false);
	ProcessFile(s_HMAPropertiesPath, false);

	return 0;
}
