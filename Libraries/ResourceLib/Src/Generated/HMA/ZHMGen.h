/*
 * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing.
 *
 * If you wish to regenerate this file because of a game update use the ZHMTools CodeGen tool:
 * https://github.com/OrfeasZ/ZHMTools/releases
 */

#pragma once

#include <ZHM/ZHMPrimitives.h>
#include <ZHM/ZHMTypeInfo.h>

class ZHMTypeInfo;

#pragma pack(push, 1)

// Size: 0x1
class /*alignas(1)*/ BoneId
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const BoneId& p_Other) const;
	bool operator!=(const BoneId& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x4
enum class BoneId_Enum
{
};

// Size: 0x4
enum class CrowdMapImpl_CellFlags
{
};

// Size: 0x4
enum class CrowdRegionType
{
};

// Size: 0x4
enum class CrowdUtil_ECrowdActorIdleMode
{
};

// Size: 0x4
enum class CrowdUtil_ECrowdActorMood
{
};

// Size: 0x4
enum class CrowdUtil_ECrowdDirection
{
};

// Size: 0x4
enum class CrowdUtil_ECrowdFacing
{
};

// Size: 0x4
enum class CrowdUtil_ECrowdSide
{
};

// Size: 0x4
enum class CrowdUtil_EDefaultStateTypes
{
};

// Size: 0x4
enum class DifficultyLevelEnum
{
};

// Size: 0x4
enum class EAIActorRelationshipType
{
};

// Size: 0x4
enum class EAIEventType
{
};

// Size: 0x4
enum class EAISharedEventType
{
};

// Size: 0x4
enum class EAchievement
{
};

// Size: 0x4
enum class EActBodyType
{
};

// Size: 0x4
enum class EActionType
{
};

// Size: 0x4
enum class EActorAnimationOrder
{
};

// Size: 0x4
enum class EActorCCPreset
{
};

// Size: 0x4
enum class EActorDeathType
{
};

// Size: 0x4
enum class EActorEmotionState
{
};

// Size: 0x4
enum class EActorGroup
{
};

// Size: 0x4
enum class EActorInteractionFlag
{
};

// Size: 0x4
enum class EActorPerceptionSensitivity
{
};

// Size: 0x4
enum class EActorRank
{
};

// Size: 0x4
enum class EActorType
{
};

// Size: 0x4
enum class EAimAssistMode
{
};

// Size: 0x4
enum class EAlertedDebugMode
{
};

// Size: 0x4
enum class EAlignment
{
};

// Size: 0x4
enum class EAnimBlendMode
{
};

// Size: 0x4
enum class EBaseMovementType
{
};

// Size: 0x4
enum class EBehaviorTreeVariableType
{
};

// Size: 0x4
enum class EBodyParts
{
};

// Size: 0x4
enum class EBooleanOption
{
};

// Size: 0x4
enum class EBulletType
{
};

// Size: 0x4
enum class EButtonDisplay
{
};

// Size: 0x4
enum class EButtonPressType
{
};

// Size: 0x4
enum class EButtonState
{
};

// Size: 0x4
enum class EBystanderPointType
{
};

// Size: 0x4
enum class ECCDUsage
{
};

// Size: 0x4
enum class ECCDecalEffect
{
};

// Size: 0x4
enum class ECCEmitterEffect
{
};

// Size: 0x4
enum class ECCWeaponAnimSet
{
};

// Size: 0x4
enum class ECOMUsage
{
};

// Size: 0x4
enum class ECPEvent
{
};

// Size: 0x4
enum class ECameraControls
{
};

// Size: 0x4
enum class ECameraShakerChannel
{
};

// Size: 0x4
enum class ECameraState
{
};

// Size: 0x4
enum class EChallengeResetMode
{
};

// Size: 0x4
enum class EChallengeReward
{
};

// Size: 0x4
enum class EChallengeSubType
{
};

// Size: 0x4
enum class ECheckpointPlayableMode
{
};

// Size: 0x4
enum class ECollidableLayer
{
};

// Size: 0x4
enum class ECollidableShape
{
};

// Size: 0x4
enum class ECollidablesType
{
};

// Size: 0x4
enum class ECollisionPriority
{
};

// Size: 0x4
enum class ECollisionResponse
{
};

// Size: 0x4
enum class ECommunicationBarMessage
{
};

// Size: 0x4
enum class ECommunicationBarState
{
};

// Size: 0x4
enum class ECompiledBehaviorType
{
};

// Size: 0x4
enum class ECompiledConditionType
{
};

// Size: 0x4
enum class EContentKitDLCInfoType
{
};

// Size: 0x4
enum class EContractCheckpointId
{
};

// Size: 0x4
enum class EContractExit
{
};

// Size: 0x4
enum class EContractMode
{
};

// Size: 0x4
enum class EContractUnlock
{
};

// Size: 0x4
enum class EControlButtonName
{
};

// Size: 0x4
enum class EControlledStates
{
};

// Size: 0x4
enum class EControllerButton
{
};

// Size: 0x4
enum class ECoordinateSpace
{
};

// Size: 0x4
enum class ECountry
{
};

// Size: 0x4
enum class ECoverPosition
{
};

// Size: 0x4
enum class ECrossHairType
{
};

// Size: 0x4
enum class ECrowdFlowCandidates
{
};

// Size: 0x4
enum class ECrowdFlowUsage
{
};

// Size: 0x4
enum class EDeathAnimationType
{
};

// Size: 0x4
enum class EDetachUsage
{
};

// Size: 0x4
enum class EDifficultyParamFloat
{
};

// Size: 0x4
enum class EDisturbanceType
{
};

// Size: 0x4
enum class EDynamicVariableType
{
};

// Size: 0x4
enum class EEntityOrdering
{
};

// Size: 0x4
enum class EFocusBarState
{
};

// Size: 0x4
enum class EGSAI_Situation
{
};

// Size: 0x4
enum class EGSBodyPart
{
};

// Size: 0x4
enum class EGSEvent
{
};

// Size: 0x4
enum class EGSExplodingPropType
{
};

// Size: 0x4
enum class EGSKillSituation
{
};

// Size: 0x4
enum class EGSKillVictim
{
};

// Size: 0x4
enum class EGait
{
};

// Size: 0x4
enum class EGameEventArgType
{
};

// Size: 0x4
enum class EGameTension
{
};

// Size: 0x4
enum class EGuardPointType
{
};

// Size: 0x4
enum class EHM5CharacterSize
{
};

// Size: 0x4
enum class EHM5DisguiseType
{
};

// Size: 0x4
enum class EHM5GameInputFlag
{
};

// Size: 0x4
enum class EHM5SoundBulletImpactVariation
{
};

// Size: 0x4
enum class EHM5SoundBulletType
{
};

// Size: 0x4
enum class EHM5SoundCloseCombatEvent
{
};

// Size: 0x4
enum class EHM5SoundFootstepEmitterTarget
{
};

// Size: 0x4
enum class EHM5SoundFootstepEvent
{
};

// Size: 0x4
enum class EHM5SoundFootstepStance
{
};

// Size: 0x4
enum class EHM5SoundFootwearType
{
};

// Size: 0x4
enum class EHM5SoundRicochetType
{
};

// Size: 0x4
enum class EHM5SoundShellImpactVariation
{
};

// Size: 0x4
enum class EHUDElement
{
};

// Size: 0x4
enum class EHUDIconFlags
{
};

// Size: 0x4
enum class EHUDIconType
{
};

// Size: 0x4
enum class EHUDMessageStatus
{
};

// Size: 0x4
enum class EHintMessageSoundType
{
};

// Size: 0x4
enum class EHintMessageType
{
};

// Size: 0x4
enum class EHitmanGState
{
};

// Size: 0x4
enum class EHitmanPermissionFlag
{
};

// Size: 0x4
enum class EInformationBarMessage
{
};

// Size: 0x4
enum class EKillType
{
};

// Size: 0x4
enum class EKitState
{
};

// Size: 0x4
enum class EKnownEntityPoseType
{
};

// Size: 0x4
enum class EKnownEntityType
{
};

// Size: 0x4
enum class ELastSoundTension
{
};

// Size: 0x4
enum class ELevelIndex
{
};

// Size: 0x4
enum class EMeBarState
{
};

// Size: 0x4
enum class EMenuActionId
{
};

// Size: 0x4
enum class EMenuId
{
};

// Size: 0x4
enum class EMenuStartupState
{
};

// Size: 0x4
enum class EMessageBarMessage
{
};

// Size: 0x4
enum class EMetaContent
{
};

// Size: 0x4
enum class EMorphemeEventId
{
};

// Size: 0x4
enum class EMotionType
{
};

// Size: 0x4
enum class EMoveEndState
{
};

// Size: 0x4
enum class EMoveSpeed
{
};

// Size: 0x4
enum class EMusicPlayGroup
{
};

// Size: 0x4
enum class EMusicPlayStartType
{
};

// Size: 0x4
enum class EMusicPlaylistPlayType
{
};

// Size: 0x4
enum class EMusicTrackExposingType
{
};

// Size: 0x4
enum class EMusicTransitionFadeType
{
};

// Size: 0x4
enum class EMusicTransitionType
{
};

// Size: 0x4
enum class EOSQueryManagerStatus
{
};

// Size: 0x4
enum class EOSWebServiceState
{
};

// Size: 0x4
enum class EObjectiveType
{
};

// Size: 0x4
enum class EOrderCompletionStatus
{
};

// Size: 0x4
enum class EParticleColorUsage
{
};

// Size: 0x4
enum class EParticleDecalSpawnEntity_Constraints
{
};

// Size: 0x4
enum class EParticleModifierImpulseDirections
{
};

// Size: 0x4
enum class EParticleSpritePivotLocation
{
};

// Size: 0x4
enum class EPathFinderBoxType
{
};

// Size: 0x4
enum class EPlayMode
{
};

// Size: 0x4
enum class EPostProcessorComponentType
{
};

// Size: 0x4
enum class EPushNotificationType
{
};

// Size: 0x4
enum class ERANDOM_DISTRIBUTION
{
};

// Size: 0x4
enum class ERatingCategory
{
};

// Size: 0x4
enum class ERatingTitle
{
};

// Size: 0x4
enum class ERatingTitleRequirement
{
};

// Size: 0x4
enum class ERayDetailLevel
{
};

// Size: 0x4
enum class ERayType
{
};

// Size: 0x4
enum class ERegionMask
{
};

// Size: 0x4
enum class ERenderGlowTypes
{
};

// Size: 0x4
enum class ESBCamProfileBone
{
};

// Size: 0x4
enum class ESBPose
{
};

// Size: 0x4
enum class ESOUND_3DROLLOFF_TYPE
{
};

// Size: 0x4
enum class ESOUND_MAXAUDIBLEBEHAVIOR
{
};

// Size: 0x4
enum class ESaveLoadSlotStatus
{
};

// Size: 0x4
enum class ESaveLoadStatus
{
};

// Size: 0x4
enum class EScreenAnchor
{
};

// Size: 0x4
enum class ESequencePreviewState
{
};

// Size: 0x4
enum class ESettingsParam
{
};

// Size: 0x4
enum class ESingletonIconType
{
};

// Size: 0x4
enum class ESituationJoinReason
{
};

// Size: 0x4
enum class ESituationType
{
};

// Size: 0x4
enum class ESmartBehaviorOrder
{
};

// Size: 0x4
enum class ESmartWaitCondition
{
};

// Size: 0x4
enum class ESmoothingMode
{
};

// Size: 0x4
enum class ESniperScoreMessageType
{
};

// Size: 0x4
enum class ESoundAmbienceReverbPreset
{
};

// Size: 0x4
enum class ESoundBlendLoopMode
{
};

// Size: 0x4
enum class ESoundChannelGroup
{
};

// Size: 0x4
enum class ESoundCollisionType
{
};

// Size: 0x4
enum class ESoundGateType
{
};

// Size: 0x4
enum class ESoundGlobalReverb
{
};

// Size: 0x4
enum class ESoundMaterialType
{
};

// Size: 0x4
enum class ESoundPlayParameters
{
};

// Size: 0x4
enum class ESoundReverbPreset
{
};

// Size: 0x4
enum class ESpeechPriority
{
};

// Size: 0x4
enum class ESpeed
{
};

// Size: 0x4
enum class EStandRepositionStrategy
{
};

// Size: 0x4
enum class EStealthSituation
{
};

// Size: 0x4
enum class ESubGoalTimerType
{
};

// Size: 0x4
enum class ESyncEvent
{
};

// Size: 0x4
enum class ETestEnumForPG2
{
};

// Size: 0x4
enum class ETextAlignment
{
};

// Size: 0x4
enum class EUIText
{
};

// Size: 0x4
enum class EValueUpdateStrategy
{
};

// Size: 0x4
enum class EVideoBufferSize
{
};

// Size: 0x4
enum class EVolumeTriggerEntityTypeFlags
{
};

// Size: 0x4
enum class EWaypointRotationAlignment
{
};

// Size: 0x4
enum class EWeaponAnimationCategory
{
};

// Size: 0x4
enum class EWeaponSpecialSituation
{
};

// Size: 0x4
enum class EWeaponUpgradeIcon
{
};

// Size: 0x4
enum class EWeaponUpgradeUse
{
};

// Size: 0x4
enum class HMTechniques_ETechnique
{
};

// Size: 0x4
class /*alignas(0)*/ IActorAction
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IActorAction& p_Other) const;
	bool operator!=(const IActorAction& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ IAnimPlayerEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IAnimPlayerEntity& p_Other) const;
	bool operator!=(const IAnimPlayerEntity& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ IBoneAnimator
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IBoneAnimator& p_Other) const;
	bool operator!=(const IBoneAnimator& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ IBoneCollidable
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IBoneCollidable& p_Other) const;
	bool operator!=(const IBoneCollidable& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
enum class ICameraEntity_EProjectionType
{
};

// Size: 0x4
class /*alignas(0)*/ IComponentInterface
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IComponentInterface& p_Other) const;
	bool operator!=(const IComponentInterface& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ IEventConsumerCollection
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IEventConsumerCollection& p_Other) const;
	bool operator!=(const IEventConsumerCollection& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ IHM5Door
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IHM5Door& p_Other) const;
	bool operator!=(const IHM5Door& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
enum class IHM5Door_ECPDoorLockType
{
};

// Size: 0x4
enum class IHM5Door_EInitialState
{
};

// Size: 0x4
enum class IHM5Door_EOpenDir
{
};

// Size: 0x4
enum class IHM5Door_EOpenMode
{
};

// Size: 0x4
enum class IHM5Door_eCloseMode
{
};

// Size: 0x4
enum class IHM5ItemWeapon_EHM5DeadlyThrowType
{
};

// Size: 0x4
class /*alignas(0)*/ IHM5WeaponInventory
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IHM5WeaponInventory& p_Other) const;
	bool operator!=(const IHM5WeaponInventory& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
enum class IHM5Zone_EZoneId
{
};

// Size: 0x4
enum class ILightEntity_EFrameIndexStrategy
{
};

// Size: 0x4
enum class ILightEntity_ELightType
{
};

// Size: 0x4
enum class ILightEntity_ERoomLightFlow
{
};

// Size: 0x4
class /*alignas(0)*/ IMorphemeCutSequenceAnimatable
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IMorphemeCutSequenceAnimatable& p_Other) const;
	bool operator!=(const IMorphemeCutSequenceAnimatable& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ IMorphemeEventConsumer
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IMorphemeEventConsumer& p_Other) const;
	bool operator!=(const IMorphemeEventConsumer& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x1
class /*alignas(1)*/ IRenderCompositorEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IRenderCompositorEntity& p_Other) const;
	bool operator!=(const IRenderCompositorEntity& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x4
enum class IRenderCompositorEntity_EMode
{
};

// Size: 0x4
enum class IRenderCompositorEntity_EViewportAnchor
{
};

// Size: 0x4
class /*alignas(0)*/ IRenderMaterialDescriptor
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IRenderMaterialDescriptor& p_Other) const;
	bool operator!=(const IRenderMaterialDescriptor& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
enum class IRenderMaterialEntity_EModifierOperation
{
};

// Size: 0x4
enum class IRoomEntity_EReasoningGridImportance
{
};

// Size: 0x4
enum class IScatterContainerEntity_EBrushStampMode
{
};

// Size: 0x4
enum class IScatterContainerEntity_EBrushType
{
};

// Size: 0x4
enum class IScatterContainerEntity_ECanvasClearMode
{
};

// Size: 0x4
enum class IScatterContainerEntity_ECanvasSize
{
};

// Size: 0x4
enum class IScatterContainerEntity_EResizeMode
{
};

// Size: 0x4
class /*alignas(0)*/ ISoundGroup
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ISoundGroup& p_Other) const;
	bool operator!=(const ISoundGroup& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ ISoundListenerPositionReceiver
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ISoundListenerPositionReceiver& p_Other) const;
	bool operator!=(const ISoundListenerPositionReceiver& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ ISoundUpdateListener
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ISoundUpdateListener& p_Other) const;
	bool operator!=(const ISoundUpdateListener& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ ISoundVolumetricGeomSplinePoint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ISoundVolumetricGeomSplinePoint& p_Other) const;
	bool operator!=(const ISoundVolumetricGeomSplinePoint& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(4)*/ IStreamingStateManagerEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IStreamingStateManagerEntity& p_Other) const;
	bool operator!=(const IStreamingStateManagerEntity& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ ITriggerListener
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ITriggerListener& p_Other) const;
	bool operator!=(const ITriggerListener& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ ITriggerShape
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ITriggerShape& p_Other) const;
	bool operator!=(const ITriggerShape& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ IValueEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const IValueEntity& p_Other) const;
	bool operator!=(const IValueEntity& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
enum class InputControlNamesp_eHM5InputAction
{
};

// Size: 0x4
enum class InputControlNamesp_eHM5InputActionID
{
};

// Size: 0x4
enum class InputControlNamesp_eHM5InputActionType
{
};

// Size: 0x4
enum class MenuWeaponUpgradeData_EUpgradeAction
{
};

// Size: 0x1
class /*alignas(1)*/ SActorSoundDefs
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SActorSoundDefs& p_Other) const;
	bool operator!=(const SActorSoundDefs& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x4
enum class SActorSoundDefs_EDefinition
{
};

// Size: 0xC
class /*alignas(4)*/ SBehaviorTreeEntityReference
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SBehaviorTreeEntityReference& p_Other) const;
	bool operator!=(const SBehaviorTreeEntityReference& p_Other) const { return !(*this == p_Other); }

	bool _AC99E46E; // 0x0
	uint8_t _pad1[3] {};
	ZString _EBF2DC42; // 0x4
};

// Size: 0xC
class /*alignas(4)*/ SBehaviorTreeEvaluationLogEntry
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SBehaviorTreeEvaluationLogEntry& p_Other) const;
	bool operator!=(const SBehaviorTreeEvaluationLogEntry& p_Other) const { return !(*this == p_Other); }

	uint32 _7A22B22E; // 0x0
	uint32 _217E868E; // 0x4
	bool _7E0EAB7D; // 0x8
	uint8_t _pad9[3] {};
};

// Size: 0x8
class /*alignas(4)*/ ZResourceID
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZResourceID& p_Other) const;
	bool operator!=(const ZResourceID& p_Other) const { return !(*this == p_Other); }

	ZString _4FB33326; // 0x0
};

// Size: 0x18
class /*alignas(4)*/ SBehaviorTreeEvaluationLog
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SBehaviorTreeEvaluationLog& p_Other) const;
	bool operator!=(const SBehaviorTreeEvaluationLog& p_Other) const { return !(*this == p_Other); }

	TArray<ZResourceID> _45584A12; // 0x0
	TArray<SBehaviorTreeEvaluationLogEntry> _B80AC610; // 0xC
};

// Size: 0x8
class /*alignas(4)*/ SBehaviorTreeInputPinCondition
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SBehaviorTreeInputPinCondition& p_Other) const;
	bool operator!=(const SBehaviorTreeInputPinCondition& p_Other) const { return !(*this == p_Other); }

	ZString _EBF2DC42; // 0x0
};

// Size: 0x18
class /*alignas(4)*/ SBehaviorTreeInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SBehaviorTreeInfo& p_Other) const;
	bool operator!=(const SBehaviorTreeInfo& p_Other) const { return !(*this == p_Other); }

	TArray<SBehaviorTreeEntityReference> _5AFAC781; // 0x0
	TArray<SBehaviorTreeInputPinCondition> _5940064D; // 0xC
};

// Size: 0x18
class /*alignas(4)*/ SBodyPartDamageMultipliers
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SBodyPartDamageMultipliers& p_Other) const;
	bool operator!=(const SBodyPartDamageMultipliers& p_Other) const { return !(*this == p_Other); }

	float32 _ADB3EF29; // 0x0
	float32 _DF51096C; // 0x4
	float32 _EBC4AEA7; // 0x8
	float32 _B2A446A3; // 0xC
	float32 _214EB7BD; // 0x10
	float32 _FB25522A; // 0x14
};

// Size: 0xC
class /*alignas(4)*/ SVector3
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SVector3& p_Other) const;
	bool operator!=(const SVector3& p_Other) const { return !(*this == p_Other); }

	float32 _8CDC1683; // 0x0
	float32 _FBDB2615; // 0x4
	float32 _62D277AF; // 0x8
};

// Size: 0xC
class /*alignas(4)*/ SBoneScalesList
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SBoneScalesList& p_Other) const;
	bool operator!=(const SBoneScalesList& p_Other) const { return !(*this == p_Other); }

	TArray<SVector3> _DB3D5286; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SCPProgressionState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCPProgressionState& p_Other) const;
	bool operator!=(const SCPProgressionState& p_Other) const { return !(*this == p_Other); }

	int32 _5B210A8A; // 0x0
	uint32 _7A6CA028; // 0x4
};

// Size: 0x8
class /*alignas(4)*/ SSubGoalProgressData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SSubGoalProgressData& p_Other) const;
	bool operator!=(const SSubGoalProgressData& p_Other) const { return !(*this == p_Other); }

	int32 _922CA259; // 0x0
	int32 _695969C0; // 0x4
};

// Size: 0x30
class /*alignas(8)*/ SFullGoalData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SFullGoalData& p_Other) const;
	bool operator!=(const SFullGoalData& p_Other) const { return !(*this == p_Other); }

	ELevelIndex _F0A2AB0C; // 0x0
	int32 _26ADCCFA; // 0x4
	EUIText _666BDA3D; // 0x8
	EUIText _DB5F5665; // 0xC
	int64 _286EC69B; // 0x10
	int32 _B66149DE; // 0x18
	bool _6C30550E; // 0x1C
	bool _89E24C20; // 0x1D
	bool _F2D0B7CB; // 0x1E
	bool _AD7C9C45; // 0x1F
	bool _E53983D3; // 0x20
	bool _87B6A2FF; // 0x21
	uint8_t _pad22[2] {};
	TArray<SSubGoalProgressData> _D4412377; // 0x24
};

// Size: 0x14
class /*alignas(4)*/ SChallengeData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SChallengeData& p_Other) const;
	bool operator!=(const SChallengeData& p_Other) const { return !(*this == p_Other); }

	TArray<SFullGoalData> _99B680D5; // 0x0
	int32 _954912E4; // 0xC
	int32 _3A82AA93; // 0x10
};

// Size: 0x1
class /*alignas(1)*/ SCheatData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCheatData& p_Other) const;
	bool operator!=(const SCheatData& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x8
class /*alignas(4)*/ STokenID
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const STokenID& p_Other) const;
	bool operator!=(const STokenID& p_Other) const { return !(*this == p_Other); }

	uint32 _CE3E2DE2; // 0x0
	bool _3589B0EA; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0xC
class /*alignas(4)*/ SCloseCombatWeaponSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCloseCombatWeaponSaveData& p_Other) const;
	bool operator!=(const SCloseCombatWeaponSaveData& p_Other) const { return !(*this == p_Other); }

	STokenID _DFE2E88A; // 0x0
	int32 _C82C9569; // 0x8
};

// Size: 0x8
class /*alignas(4)*/ SItemSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SItemSaveData& p_Other) const;
	bool operator!=(const SItemSaveData& p_Other) const { return !(*this == p_Other); }

	STokenID _DFE2E88A; // 0x0
};

// Size: 0x1C
class /*alignas(4)*/ SRangedWeaponSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SRangedWeaponSaveData& p_Other) const;
	bool operator!=(const SRangedWeaponSaveData& p_Other) const { return !(*this == p_Other); }

	STokenID _DFE2E88A; // 0x0
	int32 _F6939C84; // 0x8
	bool _B00640D9; // 0xC
	uint8_t _padD[3] {};
	TArray<bool> _433E339A; // 0x10
};

// Size: 0x80
class /*alignas(4)*/ SCheckpointSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCheckpointSaveData& p_Other) const;
	bool operator!=(const SCheckpointSaveData& p_Other) const { return !(*this == p_Other); }

	int32 _B714BBE4; // 0x0
	bool _87B6A2FF; // 0x4
	bool _AD7C9C45; // 0x5
	uint8_t _pad6[2] {};
	STokenID _AAD1A263; // 0x8
	int32 _79E8EE0C; // 0x10
	TFixedArray<uint32, 8> _A3682C66; // 0x14
	float32 _40DF8DEA; // 0x34
	float32 _57F16D6E; // 0x38
	TArray<bool> _F6EF6776; // 0x3C
	TArray<float32> _F617FC96; // 0x48
	TArray<SItemSaveData> _6C28792D; // 0x54
	TArray<SRangedWeaponSaveData> _B14E7CA0; // 0x60
	TArray<SCloseCombatWeaponSaveData> _694B8AEB; // 0x6C
	int32 _A01D27FD; // 0x78
	bool _4E143EF0; // 0x7C
	bool _6441B4DD; // 0x7D
	uint8_t _pad7E[2] {};
};

// Size: 0x10
class /*alignas(16)*/ float4
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const float4& p_Other) const;
	bool operator!=(const float4& p_Other) const { return !(*this == p_Other); }

	float32 _8CDC1683; // 0x0
	float32 _FBDB2615; // 0x4
	float32 _62D277AF; // 0x8
	float32 _1C630B12; // 0xC
};

// Size: 0x30
class /*alignas(16)*/ SCollidingParticle
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCollidingParticle& p_Other) const;
	bool operator!=(const SCollidingParticle& p_Other) const { return !(*this == p_Other); }

	float4 _E1195483; // 0x0
	float4 _19ED66DF; // 0x10
	uint32 _A81A0D87; // 0x20
	float32 _EA119EDC; // 0x24
	uint8_t _pad28[8] {};
};

// Size: 0xC
class /*alignas(4)*/ SColorRGB
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SColorRGB& p_Other) const;
	bool operator!=(const SColorRGB& p_Other) const { return !(*this == p_Other); }

	float32 _6C09FF9D; // 0x0
	float32 _01D41B76; // 0x4
	float32 _71BEEFF9; // 0x8
};

// Size: 0x10
class /*alignas(4)*/ SColorRGBA
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SColorRGBA& p_Other) const;
	bool operator!=(const SColorRGBA& p_Other) const { return !(*this == p_Other); }

	float32 _6C09FF9D; // 0x0
	float32 _01D41B76; // 0x4
	float32 _71BEEFF9; // 0x8
	float32 _E8B7BE43; // 0xC
};

// Size: 0x8
class /*alignas(4)*/ ZBehaviorTreeVariable
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZBehaviorTreeVariable& p_Other) const;
	bool operator!=(const ZBehaviorTreeVariable& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x10
class /*alignas(4)*/ SConditionBase
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SConditionBase& p_Other) const;
	bool operator!=(const SConditionBase& p_Other) const { return !(*this == p_Other); }

	ECompiledConditionType _4D167DA0; // 0x0
	uint32 _4C7AD911; // 0x4
	ZBehaviorTreeVariable _5A1512A0; // 0x8
};

// Size: 0x1
class /*alignas(1)*/ SContentKitBaseState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SContentKitBaseState& p_Other) const;
	bool operator!=(const SContentKitBaseState& p_Other) const { return !(*this == p_Other); }

	uint8 _16021251; // 0x0
};

// Size: 0xC
class /*alignas(4)*/ SContractUnlockStatus
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SContractUnlockStatus& p_Other) const;
	bool operator!=(const SContractUnlockStatus& p_Other) const { return !(*this == p_Other); }

	bool _09C31EA4; // 0x0
	uint8_t _pad1[3] {};
	ELevelIndex _9361233F; // 0x4
	int32 _3BD872AF; // 0x8
};

// Size: 0x10
class /*alignas(4)*/ SContractSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SContractSaveData& p_Other) const;
	bool operator!=(const SContractSaveData& p_Other) const { return !(*this == p_Other); }

	bool _C8FF2BBE; // 0x0
	uint8_t _pad1[3] {};
	TArray<SContractUnlockStatus> _5685F5AA; // 0x4
};

// Size: 0xC
class /*alignas(4)*/ SEntityTemplateProperty
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SEntityTemplateProperty& p_Other) const;
	bool operator!=(const SEntityTemplateProperty& p_Other) const { return !(*this == p_Other); }

	uint32 _DF9B3B62; // 0x0
	ZVariant _1D775834; // 0x4
};

// Size: 0x10
class /*alignas(4)*/ SCppEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCppEntity& p_Other) const;
	bool operator!=(const SCppEntity& p_Other) const { return !(*this == p_Other); }

	int32 _891D57ED; // 0x0
	TArray<SEntityTemplateProperty> _71206441; // 0x4
};

// Size: 0x10
class /*alignas(4)*/ SCppEntitySubsetInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCppEntitySubsetInfo& p_Other) const;
	bool operator!=(const SCppEntitySubsetInfo& p_Other) const { return !(*this == p_Other); }

	ZString _5E237E06; // 0x0
	TypeID _8CDE5729; // 0x8
	uint32 _0B0541BA; // 0xC
};

// Size: 0x10
class /*alignas(4)*/ SCppEntityBlueprint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCppEntityBlueprint& p_Other) const;
	bool operator!=(const SCppEntityBlueprint& p_Other) const { return !(*this == p_Other); }

	TypeID _B16D2E23; // 0x0
	TArray<SCppEntitySubsetInfo> _4D38375A; // 0x4
};

// Size: 0x24
class /*alignas(4)*/ SCppEntityTemplate
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCppEntityTemplate& p_Other) const;
	bool operator!=(const SCppEntityTemplate& p_Other) const { return !(*this == p_Other); }

	ZString _5F09C136; // 0x0
	TypeID _B16D2E23; // 0x8
	TArray<SEntityTemplateProperty> _71206441; // 0xC
	TArray<SCppEntitySubsetInfo> _4D38375A; // 0x18
};

// Size: 0x80
class /*alignas(128)*/ SCrowdCells
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCrowdCells& p_Other) const;
	bool operator!=(const SCrowdCells& p_Other) const { return !(*this == p_Other); }

	TFixedArray<uint8, 128> _193674BC; // 0x0
};

// Size: 0x18
class /*alignas(4)*/ SCrowdFlowChannel
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCrowdFlowChannel& p_Other) const;
	bool operator!=(const SCrowdFlowChannel& p_Other) const { return !(*this == p_Other); }

	TArray<uint8> _090A18A1; // 0x0
	TArray<uint16> _7B24AA84; // 0xC
};

// Size: 0x40
class /*alignas(16)*/ SMatrix
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SMatrix& p_Other) const;
	bool operator!=(const SMatrix& p_Other) const { return !(*this == p_Other); }

	float4 _CA3885CF; // 0x0
	float4 _F758AC7F; // 0x10
	float4 _B0F8D6AF; // 0x20
	float4 _B1E031B9; // 0x30
};

// Size: 0x10
class /*alignas(4)*/ SVector4
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SVector4& p_Other) const;
	bool operator!=(const SVector4& p_Other) const { return !(*this == p_Other); }

	float32 _8CDC1683; // 0x0
	float32 _FBDB2615; // 0x4
	float32 _62D277AF; // 0x8
	float32 _1C630B12; // 0xC
};

// Size: 0x4
class /*alignas(2)*/ ZCrowdGridPoint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZCrowdGridPoint& p_Other) const;
	bool operator!=(const ZCrowdGridPoint& p_Other) const { return !(*this == p_Other); }

	int16 _1A38845D; // 0x0
	uint8 _2352A656; // 0x2
	uint8_t _pad3[1] {};
};

// Size: 0xB0
class /*alignas(16)*/ SCrowdMapData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SCrowdMapData& p_Other) const;
	bool operator!=(const SCrowdMapData& p_Other) const { return !(*this == p_Other); }

	uint32 _42D4EEB9; // 0x0
	SVector4 _2B471851; // 0x4
	uint32 _2D4CACC1; // 0x14
	uint32 _5A4B9C57; // 0x18
	uint32 _B8B56835; // 0x1C
	uint32 _CFB258A3; // 0x20
	TArray<ZCrowdGridPoint> _74A2342B; // 0x24
	float32 _75260351; // 0x30
	float32 _2BF00558; // 0x34
	TArray<SCrowdCells> _F80A5618; // 0x38
	TArray<SCrowdFlowChannel> _95E7F03F; // 0x44
	float32 _097F70BB; // 0x50
	uint8_t _pad54[12] {};
	SMatrix _B8FF70AD; // 0x60
	SVector3 _24DC3226; // 0xA0
	float32 _5C6B6336; // 0xAC
};

// Size: 0x4
enum class SDLCItemSaveData_EDiscoverState
{
};

// Size: 0xC
class /*alignas(4)*/ SDLCItemSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SDLCItemSaveData& p_Other) const;
	bool operator!=(const SDLCItemSaveData& p_Other) const { return !(*this == p_Other); }

	SDLCItemSaveData_EDiscoverState _07186756; // 0x0
	STokenID _1942359E; // 0x4
};

// Size: 0x1
class /*alignas(1)*/ SDoorSoundDefs
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SDoorSoundDefs& p_Other) const;
	bool operator!=(const SDoorSoundDefs& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x4
enum class SDoorSoundDefs_EDefinition
{
};

// Size: 0x24
class /*alignas(4)*/ SEntityPinDescriptor
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SEntityPinDescriptor& p_Other) const;
	bool operator!=(const SEntityPinDescriptor& p_Other) const { return !(*this == p_Other); }

	ZString _A7056326; // 0x0
	ZString _A235C8C8; // 0x8
	ZResourceID _8CDE5729; // 0x10
	ZString _30C8A9AF; // 0x18
	bool _CD395B3D; // 0x20
	uint8_t _pad21[3] {};
};

// Size: 0x10
class /*alignas(4)*/ SEntityTemplateEntitySubset
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SEntityTemplateEntitySubset& p_Other) const;
	bool operator!=(const SEntityTemplateEntitySubset& p_Other) const { return !(*this == p_Other); }

	TypeID _524D42EA; // 0x0
	TArray<int32> _50EC64E5; // 0x4
};

// Size: 0x18
class /*alignas(4)*/ SEntityTemplatePinConnection
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SEntityTemplatePinConnection& p_Other) const;
	bool operator!=(const SEntityTemplatePinConnection& p_Other) const { return !(*this == p_Other); }

	int32 _9F3D30A8; // 0x0
	int32 _D698150F; // 0x4
	ZString _1C173300; // 0x8
	ZString _B7F4444D; // 0x10
};

// Size: 0x14
class /*alignas(4)*/ SEntityTemplatePropertyAlias
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SEntityTemplatePropertyAlias& p_Other) const;
	bool operator!=(const SEntityTemplatePropertyAlias& p_Other) const { return !(*this == p_Other); }

	ZString _0CF8B5AF; // 0x0
	int32 _CD460934; // 0x8
	ZString _1AE8D74E; // 0xC
};

// Size: 0xC
class /*alignas(4)*/ SEntityTemplateReference
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SEntityTemplateReference& p_Other) const;
	bool operator!=(const SEntityTemplateReference& p_Other) const { return !(*this == p_Other); }

	int32 _545B8135; // 0x0
	ZString _76BA0C0F; // 0x4
};

// Size: 0x20
class /*alignas(4)*/ SExposedEntityDescriptor
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SExposedEntityDescriptor& p_Other) const;
	bool operator!=(const SExposedEntityDescriptor& p_Other) const { return !(*this == p_Other); }

	ZString _A7056326; // 0x0
	ZString _A235C8C8; // 0x8
	ZString _69FCEBFA; // 0x10
	ZString _30C8A9AF; // 0x18
};

// Size: 0x8
class /*alignas(4)*/ SFRange
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SFRange& p_Other) const;
	bool operator!=(const SFRange& p_Other) const { return !(*this == p_Other); }

	float32 _C7D1CFC0; // 0x0
	float32 _FBDCF099; // 0x4
};

// Size: 0x84
class /*alignas(4)*/ SForwardSpawnData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SForwardSpawnData& p_Other) const;
	bool operator!=(const SForwardSpawnData& p_Other) const { return !(*this == p_Other); }

	int32 _21452EB3; // 0x0
	SCheckpointSaveData _3C3C4FC5; // 0x4
};

// Size: 0x30
class /*alignas(16)*/ SGProperties
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SGProperties& p_Other) const;
	bool operator!=(const SGProperties& p_Other) const { return !(*this == p_Other); }

	float4 _0967A27E; // 0x0
	float4 _356A9D27; // 0x10
	int32 _7E907DDA; // 0x20
	float32 _EE647576; // 0x24
	uint8_t _pad28[8] {};
};

// Size: 0x20
class /*alignas(16)*/ SGWaypoint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SGWaypoint& p_Other) const;
	bool operator!=(const SGWaypoint& p_Other) const { return !(*this == p_Other); }

	int16 _E916B8EA; // 0x0
	int16 _9E11887C; // 0x2
	int16 _0718D9C6; // 0x4
	int16 _701FE950; // 0x6
	int16 _EE7B7CF3; // 0x8
	int16 _997C4C65; // 0xA
	int16 _00751DDF; // 0xC
	int16 _77722D49; // 0xE
	float4 _28C55902; // 0x10
};

// Size: 0x60
class /*alignas(4)*/ SGameStats
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SGameStats& p_Other) const;
	bool operator!=(const SGameStats& p_Other) const { return !(*this == p_Other); }

	TArray<int32> _FF455411; // 0x0
	TArray<int32> _6DE2F9E0; // 0xC
	TArray<int32> _3D4C74E4; // 0x18
	TArray<int32> _011D512F; // 0x24
	TArray<int32> _56FE8642; // 0x30
	TArray<int32> _7C260CE4; // 0x3C
	TArray<int32> _64EB930E; // 0x48
	TArray<int32> _3289C9A4; // 0x54
};

// Size: 0x148
class /*alignas(8)*/ SGameStatsData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SGameStatsData& p_Other) const;
	bool operator!=(const SGameStatsData& p_Other) const { return !(*this == p_Other); }

	int32 _6BAA1C04; // 0x108
	uint32 _168A40C8; // 0x10C
	uint32 _0C0BA94D; // 0x110
	uint32 _77DE369D; // 0x114
	uint32 _7B2752ED; // 0x118
	uint32 _BF6C03A5; // 0x11C
	uint32 _3C76D906; // 0x120
	uint32 _1E315CEB; // 0x124
	uint32 _2D71587C; // 0x128
	uint32 _B597B3BD; // 0x12C
	uint32 _B96ED7CD; // 0x130
	uint32 _AC816C37; // 0x134
	uint32 _07DAB04B; // 0x138
	uint32 _259D35A6; // 0x13C
	uint32 _2527C938; // 0x140
	uint8_t _pad144[4] {};
};

// Size: 0x150
class /*alignas(8)*/ SGameStatsSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SGameStatsSaveData& p_Other) const;
	bool operator!=(const SGameStatsSaveData& p_Other) const { return !(*this == p_Other); }

	SGameStatsData _936E667C; // 0x0
	int32 _3A64A27F; // 0x148
	uint8_t _pad14C[4] {};
};

// Size: 0x4
enum class eAmmoType
{
};

// Size: 0x4
enum class eItemType
{
};

// Size: 0x14
class /*alignas(4)*/ SGameStatsWeapon
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SGameStatsWeapon& p_Other) const;
	bool operator!=(const SGameStatsWeapon& p_Other) const { return !(*this == p_Other); }

	eItemType _4B103D9F; // 0x0
	STokenID _23BDF767; // 0x4
	EWeaponSpecialSituation _5890F648; // 0xC
	eAmmoType _03DA47B8; // 0x10
};

// Size: 0x10
class /*alignas(4)*/ SLevelCPProgressionData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SLevelCPProgressionData& p_Other) const;
	bool operator!=(const SLevelCPProgressionData& p_Other) const { return !(*this == p_Other); }

	ELevelIndex _F0A2AB0C; // 0x0
	TArray<SCPProgressionState> _F0ABDD90; // 0x4
};

// Size: 0xC
class /*alignas(4)*/ SLevelProgressionData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SLevelProgressionData& p_Other) const;
	bool operator!=(const SLevelProgressionData& p_Other) const { return !(*this == p_Other); }

	ELevelIndex _F0A2AB0C; // 0x0
	int32 _CB578D5E; // 0x4
	int32 _1D5A80A8; // 0x8
};

// Size: 0x10
class /*alignas(4)*/ SLevelSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SLevelSaveData& p_Other) const;
	bool operator!=(const SLevelSaveData& p_Other) const { return !(*this == p_Other); }

	ELevelIndex _771C430C; // 0x0
	TArray<SCheckpointSaveData> _CA26BF0B; // 0x4
};

// Size: 0x18
class /*alignas(4)*/ SLoadRuntimeResourceResult
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SLoadRuntimeResourceResult& p_Other) const;
	bool operator!=(const SLoadRuntimeResourceResult& p_Other) const { return !(*this == p_Other); }

	ZString _7A3DE5D3; // 0x0
	ZString _AF5136A7; // 0x8
	ZString _7DBB26BA; // 0x10
};

// Size: 0x24
class /*alignas(4)*/ SMatrix33
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SMatrix33& p_Other) const;
	bool operator!=(const SMatrix33& p_Other) const { return !(*this == p_Other); }

	SVector3 _CA3885CF; // 0x0
	SVector3 _F758AC7F; // 0xC
	SVector3 _B0F8D6AF; // 0x18
};

// Size: 0x30
class /*alignas(4)*/ SMatrix43
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SMatrix43& p_Other) const;
	bool operator!=(const SMatrix43& p_Other) const { return !(*this == p_Other); }

	SVector3 _CA3885CF; // 0x0
	SVector3 _F758AC7F; // 0xC
	SVector3 _B0F8D6AF; // 0x18
	SVector3 _B1E031B9; // 0x24
};

// Size: 0x40
class /*alignas(4)*/ SMatrix44
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SMatrix44& p_Other) const;
	bool operator!=(const SMatrix44& p_Other) const { return !(*this == p_Other); }

	float32 _28CD86E9; // 0x0
	float32 _B1C4D753; // 0x4
	float32 _C6C3E7C5; // 0x8
	float32 _58A77266; // 0xC
	float32 _03E0D52A; // 0x10
	float32 _9AE98490; // 0x14
	float32 _EDEEB406; // 0x18
	float32 _738A21A5; // 0x1C
	float32 _1AFBE46B; // 0x20
	float32 _83F2B5D1; // 0x24
	float32 _F4F58547; // 0x28
	float32 _6A9110E4; // 0x2C
	float32 _55BA72AC; // 0x30
	float32 _CCB32316; // 0x34
	float32 _BBB41380; // 0x38
	float32 _25D08623; // 0x3C
};

// Size: 0x18
class /*alignas(4)*/ SMiscSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SMiscSaveData& p_Other) const;
	bool operator!=(const SMiscSaveData& p_Other) const { return !(*this == p_Other); }

	bool _DBCDACAE; // 0x0
	bool _E6559F40; // 0x1
	bool _3C4892A2; // 0x2
	uint8_t _pad3[1] {};
	STokenID _9D5D650C; // 0x4
	STokenID _C66C54EB; // 0xC
	uint32 _E9DA2719; // 0x14
};

// Size: 0x8
class /*alignas(4)*/ SNRange
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SNRange& p_Other) const;
	bool operator!=(const SNRange& p_Other) const { return !(*this == p_Other); }

	int32 _0265E72F; // 0x0
	int32 _3E68D876; // 0x4
};

// Size: 0x8
class /*alignas(4)*/ SPOISaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SPOISaveData& p_Other) const;
	bool operator!=(const SPOISaveData& p_Other) const { return !(*this == p_Other); }

	int32 _3B757F3E; // 0x0
	bool _26E32D49; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0x40
class /*alignas(4)*/ SRatingData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SRatingData& p_Other) const;
	bool operator!=(const SRatingData& p_Other) const { return !(*this == p_Other); }

	TArray<uint16> _64147134; // 0x0
	TArray<bool> _133F9C34; // 0xC
	TArray<bool> _911A2395; // 0x18
	TArray<DifficultyLevelEnum> _EC99D89C; // 0x24
	TArray<int32> _50471093; // 0x30
	int32 _0EBD8ED2; // 0x3C
};

// Size: 0x18
class /*alignas(4)*/ SRatingHighScoreData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SRatingHighScoreData& p_Other) const;
	bool operator!=(const SRatingHighScoreData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> _888ACA2B; // 0x0
	TArray<int8> _4E9FBCD6; // 0xC
};

// Size: 0x10
class /*alignas(4)*/ ZBitArray
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZBitArray& p_Other) const;
	bool operator!=(const ZBitArray& p_Other) const { return !(*this == p_Other); }

	TArray<uint8> _8E83B475; // 0x0
	uint32 _DA61D51D; // 0xC
};

// Size: 0x90
class /*alignas(16)*/ SReasoningGrid
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SReasoningGrid& p_Other) const;
	bool operator!=(const SReasoningGrid& p_Other) const { return !(*this == p_Other); }

	TArray<SGWaypoint> _0BD7E833; // 0x0
	ZBitArray _0439BC82; // 0xC
	ZBitArray _7FBA18A8; // 0x1C
	TArray<TArray<uint16>> _4FCDFF9C; // 0x2C
	TArray<TArray<uint16>> _B6A34009; // 0x38
	uint8_t _pad44[12] {};
	SGProperties _0D7AD80A; // 0x50
	uint32 _F7ACE02C; // 0x80
	uint32 _5321B64E; // 0x84
	uint8_t _pad88[8] {};
};

// Size: 0x1
class /*alignas(1)*/ SSerializedValue
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SSerializedValue& p_Other) const;
	bool operator!=(const SSerializedValue& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x8
class /*alignas(4)*/ SSettingsParamMultiplier
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SSettingsParamMultiplier& p_Other) const;
	bool operator!=(const SSettingsParamMultiplier& p_Other) const { return !(*this == p_Other); }

	ESettingsParam _EE282AB6; // 0x0
	float32 _B868A759; // 0x4
};

// Size: 0x10
class /*alignas(4)*/ STechniqueUnlockState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const STechniqueUnlockState& p_Other) const;
	bool operator!=(const STechniqueUnlockState& p_Other) const { return !(*this == p_Other); }

	STokenID _6001FCE6; // 0x0
	HMTechniques_ETechnique _A2634313; // 0x8
	int32 _49A3B9C5; // 0xC
};

// Size: 0x34
class /*alignas(4)*/ STechniquesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const STechniquesSaveData& p_Other) const;
	bool operator!=(const STechniquesSaveData& p_Other) const { return !(*this == p_Other); }

	TFixedArray<uint8, 10> _B5537A08; // 0x0
	uint8_t _padA[2] {};
	TArray<STechniqueUnlockState> _7ED76297; // 0xC
	TArray<bool> _949204C5; // 0x18
	STechniqueUnlockState _1BA6F5A6; // 0x24
};

// Size: 0x20
class /*alignas(4)*/ STemplateSubEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const STemplateSubEntity& p_Other) const;
	bool operator!=(const STemplateSubEntity& p_Other) const { return !(*this == p_Other); }

	int32 _21740EAA; // 0x0
	int32 _B01F3C73; // 0x4
	TArray<SEntityTemplateProperty> _71206441; // 0x8
	TArray<SEntityTemplateProperty> _E8548959; // 0x14
};

// Size: 0x14
class /*alignas(4)*/ STemplateEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const STemplateEntity& p_Other) const;
	bool operator!=(const STemplateEntity& p_Other) const { return !(*this == p_Other); }

	int32 _891D57ED; // 0x0
	int32 _14CF59EB; // 0x4
	TArray<STemplateSubEntity> _61ED060D; // 0x8
};

// Size: 0x40
class /*alignas(4)*/ STemplateSubEntityBlueprint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const STemplateSubEntityBlueprint& p_Other) const;
	bool operator!=(const STemplateSubEntityBlueprint& p_Other) const { return !(*this == p_Other); }

	int32 _21740EAA; // 0x0
	int32 _B01F3C73; // 0x4
	ZString _CDF5A865; // 0x8
	TArray<SEntityTemplatePropertyAlias> _17EB0A5A; // 0x10
	TArray<TPair<ZString,SEntityTemplateReference>> _025728B5; // 0x1C
	TArray<TPair<ZString,int32>> _268997DA; // 0x28
	TArray<TPair<ZString,SEntityTemplateEntitySubset>> _BF7B57C8; // 0x34
};

// Size: 0x34
class /*alignas(4)*/ STemplateEntityBlueprint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const STemplateEntityBlueprint& p_Other) const;
	bool operator!=(const STemplateEntityBlueprint& p_Other) const { return !(*this == p_Other); }

	int32 _14CF59EB; // 0x0
	TArray<STemplateSubEntityBlueprint> _61ED060D; // 0x4
	TArray<SEntityTemplatePinConnection> _213C670C; // 0x10
	TArray<SEntityTemplatePinConnection> _351BE901; // 0x1C
	TArray<SEntityTemplatePinConnection> _7CF08925; // 0x28
};

// Size: 0x10
class /*alignas(4)*/ STestMiniStruct
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const STestMiniStruct& p_Other) const;
	bool operator!=(const STestMiniStruct& p_Other) const { return !(*this == p_Other); }

	int32 _2F64A16D; // 0x0
	float32 _37FB5A4F; // 0x4
	ZString _8E5A0583; // 0x8
};

// Size: 0x24
class /*alignas(4)*/ STestStructure
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const STestStructure& p_Other) const;
	bool operator!=(const STestStructure& p_Other) const { return !(*this == p_Other); }

	float32 _AE05822C; // 0x0
	float32 _6C66AB72; // 0x4
	float32 _229E820A; // 0x8
	ZString _174D49E8; // 0xC
	STestMiniStruct _5E830AA7; // 0x14
};

// Size: 0xC
class /*alignas(4)*/ SUIOptionValue
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SUIOptionValue& p_Other) const;
	bool operator!=(const SUIOptionValue& p_Other) const { return !(*this == p_Other); }

	uint32 _8A90ABA9; // 0x0
	uint8 _8CDE5729; // 0x4
	uint8_t _pad5[3] {};
	int32 _FB289CBB; // 0x8
};

// Size: 0xC
class /*alignas(4)*/ SUIOptionsData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SUIOptionsData& p_Other) const;
	bool operator!=(const SUIOptionsData& p_Other) const { return !(*this == p_Other); }

	TArray<SUIOptionValue> _ADF3F363; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SVector2
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SVector2& p_Other) const;
	bool operator!=(const SVector2& p_Other) const { return !(*this == p_Other); }

	float32 _8CDC1683; // 0x0
	float32 _FBDB2615; // 0x4
};

// Size: 0x1
class /*alignas(1)*/ SWeaponSoundDefs
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const SWeaponSoundDefs& p_Other) const;
	bool operator!=(const SWeaponSoundDefs& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x4
enum class SWeaponSoundDefs_EDefinition
{
};

// Size: 0x4
enum class TeleportActionType
{
};

// Size: 0x4
enum class UserFBInventoryInfoNamesp_EOperationMode
{
};

// Size: 0x4
enum class ZActor_EShootIntensity
{
};

// Size: 0x4
enum class ZActorInstanceEntity_EFFXMode
{
};

// Size: 0x4
enum class ZBoneAttachEntity_EResetMode
{
};

// Size: 0x4
enum class ZBoneWeightRotationEntity_eRotationAxises
{
};

// Size: 0xC
class /*alignas(4)*/ ZCloseCombatDef_SActorNoise
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZCloseCombatDef_SActorNoise& p_Other) const;
	bool operator!=(const ZCloseCombatDef_SActorNoise& p_Other) const { return !(*this == p_Other); }

	SActorSoundDefs_EDefinition _28BC53B5; // 0x0
	EAIEventType _04153019; // 0x4
	float32 _A120F69F; // 0x8
};

// Size: 0x14
class /*alignas(4)*/ ZComponentCreator
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZComponentCreator& p_Other) const;
	bool operator!=(const ZComponentCreator& p_Other) const { return !(*this == p_Other); }

	ZString _D9EBDCBE; // 0x0
	TArray<ZVariant> _B9EA4804; // 0x8
};

// Size: 0x4
enum class ZConditionListEntity_EEvaluationType
{
};

// Size: 0x4
enum class ZContentKitEntity_EShowContent
{
};

// Size: 0x4
enum class ZContract_ZRestriction_EType
{
};

// Size: 0x4
enum class ZContractSearchEngineFlagEntity_EType
{
};

// Size: 0x4
enum class ZCrowdActorEntity_EActorResourceChangeFlags
{
};

// Size: 0xC
class /*alignas(4)*/ ZCurve
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZCurve& p_Other) const;
	bool operator!=(const ZCurve& p_Other) const { return !(*this == p_Other); }

	TArray<TFixedArray<float32, 8>> _ADF3F363; // 0x0
};

// Size: 0x4
enum class ZDLCDescriptor_EWhenToShowDiscoverMessage
{
};

// Size: 0x4
enum class ZDebugHM5GameTimeMultiplierEnt_eTMLDReason
{
};

// Size: 0x4
enum class ZDecalControllerEntity_ERotationType
{
};

// Size: 0x4
enum class ZDecalControllerEntity_EScaleType
{
};

// Size: 0x8
class /*alignas(4)*/ ZEntityID
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZEntityID& p_Other) const;
	bool operator!=(const ZEntityID& p_Other) const { return !(*this == p_Other); }

	ZString _5DC3D644; // 0x0
};

// Size: 0x4
class /*alignas(4)*/ ZEntityRef
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZEntityRef& p_Other) const;
	bool operator!=(const ZEntityRef& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x10
class /*alignas(4)*/ ZEntityReference
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZEntityReference& p_Other) const;
	bool operator!=(const ZEntityReference& p_Other) const { return !(*this == p_Other); }

	ZEntityID _3B6ADD1A; // 0x0
	ZString _5A1F34C2; // 0x8
};

// Size: 0x4
enum class ZGameEventListenerEntity_EGameEventType
{
};

// Size: 0x8
class /*alignas(8)*/ ZGameTime
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZGameTime& p_Other) const;
	bool operator!=(const ZGameTime& p_Other) const { return !(*this == p_Other); }

	int64 _4786AB66; // 0x0
};

// Size: 0x4
enum class ZHM5BodyContainer_EBCAnimSet
{
};

// Size: 0x4
enum class ZHM5BodyContainer_EBCBodyMode
{
};

// Size: 0x4
enum class ZHM5BodyContainer_eBCCloseMode
{
};

// Size: 0x4
enum class ZHM5BodySoundEventConsumer_EAnimSoundBody
{
};

// Size: 0x4
enum class ZHM5Closet_EClosetType
{
};

// Size: 0x4
enum class ZHM5ContextActionEntity_EInteraction
{
};

// Size: 0x4
enum class ZHM5CoverPlane_ESide
{
};

// Size: 0x4
enum class ZHM5CoverPlane_eCoverSize
{
};

// Size: 0x4
enum class ZHM5CoverPlane_eExtraPlaneProperty
{
};

// Size: 0x4
enum class ZHM5CrowdGenericEventConsumer_EEvent
{
};

// Size: 0x4
enum class ZHM5DynamicRayCastEntity_ECollideType
{
};

// Size: 0x4
enum class ZHM5FaceFXReactionEventConsumer_EEvent
{
};

// Size: 0x4
enum class ZHM5FaceFXSpecificEventConsumer_EEvent
{
};

// Size: 0x4
enum class ZHM5ForceCover_EFaceDirection
{
};

// Size: 0x4
enum class ZHM5ForceVentilatorShaft_EFaceDirection
{
};

// Size: 0x4
enum class ZHM5GenericEventConsumer_EEvent
{
};

// Size: 0x4
enum class ZHM5GuideJump_EForceDismountBehavior
{
};

// Size: 0x4
enum class ZHM5GuideJump_EForceDropDownDirection
{
};

// Size: 0x4
enum class ZHM5GuideJump_eJumpType
{
};

// Size: 0x4
enum class ZHM5HandSoundEventConsumer_EAnimSoundHand
{
};

// Size: 0x4
enum class ZHM5HitmanFocusModifier_EFocusAddRemove
{
};

// Size: 0x4
enum class ZHM5HitmanFocusModifier_EFocusValue
{
};

// Size: 0x4
enum class ZHM5HitmanHealthModifier_EHealthDrainType
{
};

// Size: 0x4
enum class ZHM5HitmanHealthModifier_EHealthValue
{
};

// Size: 0x4
enum class ZHM5HitmanWeaponModifier_EAddAmmo
{
};

// Size: 0x4
enum class ZHM5HitmanWeaponModifier_EDropWeapon
{
};

// Size: 0x4
enum class ZHM5IndicatorManager_EIndicatorType
{
};

// Size: 0x4
enum class ZHM5InteractiveCutsequenceInputEntity_EInputHandled
{
};

// Size: 0x4
enum class ZHM5InteractiveCutsequenceInputEntity_EInputType
{
};

// Size: 0x4
enum class ZHM5ItemCCWeapon_EUseTypes
{
};

// Size: 0x4
enum class ZHM5LedgeMount_EFaceDirection
{
};

// Size: 0x4
enum class ZHM5LedgeMount_ELedgeEndState
{
};

// Size: 0x4
enum class ZHM5SpecialSoundEventConsumer_EAnimSoundSpecial
{
};

// Size: 0x4
enum class ZHM5ValueEntity_bool_EForwardRule
{
};

// Size: 0x4
enum class ZHM5WeaponEventConsumer_EAnimWeapon
{
};

// Size: 0x4
class /*alignas(0)*/ ZHitmanMorphemePostProcessorFiberWireCallback
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZHitmanMorphemePostProcessorFiberWireCallback& p_Other) const;
	bool operator!=(const ZHitmanMorphemePostProcessorFiberWireCallback& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x4
class /*alignas(0)*/ ZHitmanMorphemePostProcessorLedgeHangCallback
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZHitmanMorphemePostProcessorLedgeHangCallback& p_Other) const;
	bool operator!=(const ZHitmanMorphemePostProcessorLedgeHangCallback& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x18
class /*alignas(4)*/ ZInventorySlot
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZInventorySlot& p_Other) const;
	bool operator!=(const ZInventorySlot& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[24] {};
};

// Size: 0x4
enum class ZInventorySlot_EInventorySlotType
{
};

// Size: 0x4
enum class ZLogicMultipleGate_EGateType
{
};

// Size: 0x4
enum class ZLookAtLogic_EAxisSelect
{
};

// Size: 0x4
enum class ZMirrorEntity_EMirrorBlur
{
};

// Size: 0x4
enum class ZMirrorEntity_EMirrorQuality
{
};

// Size: 0x4
enum class ZPathfinderDebugEntity_EDebugTestType
{
};

// Size: 0x4
enum class ZPointOfInterestEntity_POIType
{
};

// Size: 0x4
class /*alignas(0)*/ ZPostfilterGraphBaseNode
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZPostfilterGraphBaseNode& p_Other) const;
	bool operator!=(const ZPostfilterGraphBaseNode& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x8
class /*alignas(0)*/ ZPresenceState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZPresenceState& p_Other) const;
	bool operator!=(const ZPresenceState& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class ZRagdollAttacherEntity_EResetMode
{
};

// Size: 0x40
class /*alignas(16)*/ ZRayQueryInput
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZRayQueryInput& p_Other) const;
	bool operator!=(const ZRayQueryInput& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[64] {};
};

// Size: 0x4
enum class ZRenderGlobalEntity_EToneMappingType
{
};

// Size: 0x4
enum class ZRenderPostfilterParametersEntity_EDOFBlurType
{
};

// Size: 0x4
enum class ZRenderPostfilterParametersEntity_EHDRGlareType
{
};

// Size: 0x4
class /*alignas(4)*/ ZResourcePtr
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZResourcePtr& p_Other) const;
	bool operator!=(const ZResourcePtr& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[4] {};
};

// Size: 0x8
class /*alignas(4)*/ ZRuntimeResourceID
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZRuntimeResourceID& p_Other) const;
	bool operator!=(const ZRuntimeResourceID& p_Other) const { return !(*this == p_Other); }

	uint32 _0E06C207; // 0x0
	uint32 _9EC45A78; // 0x4
};

// Size: 0x24
class /*alignas(4)*/ ZSharedSensorDef_SVisibilitySetting
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZSharedSensorDef_SVisibilitySetting& p_Other) const;
	bool operator!=(const ZSharedSensorDef_SVisibilitySetting& p_Other) const { return !(*this == p_Other); }

	EActorPerceptionSensitivity _651CEEE5; // 0x0
	float32 _67E9CFAF; // 0x4
	float32 _7E8A37B8; // 0x8
	float32 _ED8C28F8; // 0xC
	float32 _44EB35D5; // 0x10
	float32 _AC96C91C; // 0x14
	float32 _E3F48D31; // 0x18
	float32 _2D17BA18; // 0x1C
	float32 _2AFC50C4; // 0x20
};

// Size: 0xF0
class /*alignas(16)*/ ZSoundBlendCollision
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZSoundBlendCollision& p_Other) const;
	bool operator!=(const ZSoundBlendCollision& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[240] {};
};

// Size: 0x4
enum class ZSoundChannelGroupDuckMaster_EDuckingChannelAttenuationMode
{
};

// Size: 0x4
enum class ZSpatialEntity_ERoomBehaviour
{
};

// Size: 0xC
class /*alignas(4)*/ ZSpeakerLevels
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZSpeakerLevels& p_Other) const;
	bool operator!=(const ZSpeakerLevels& p_Other) const { return !(*this == p_Other); }

	TArray<float32> _EB48D7FA; // 0x0
};

// Size: 0x8
class /*alignas(8)*/ ZTime
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteJson(void* p_Object, std::ostream& p_Stream);
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);

	bool operator==(const ZTime& p_Other) const;
	bool operator!=(const ZTime& p_Other) const { return !(*this == p_Other); }

	uint64 _D33B1D5A; // 0x0
};

// Size: 0x4
enum class ZWaveformGeneratorEntity_ECurveType
{
};

// Size: 0x4
enum class ZWaypointEntity_EMovementType
{
};

// Size: 0x4
enum class _EUIOptionKey
{
};

// Size: 0x4
enum class _EUIOptionType
{
};

// Size: 0x4
enum class eHitmanPermissionReason
{
};

// Size: 0x4
enum class eItemHands
{
};

// Size: 0x4
enum class eItemSize
{
};

// Size: 0x4
enum class eParticleEmitterBoxEntity_SpawnModes
{
};

// Size: 0x4
enum class eParticleEmitterMeshEntity_SpawnModes
{
};

// Size: 0x4
enum class eWeaponOperation
{
};

// Size: 0x4
enum class eWeaponType
{
};

#pragma pack(pop)
