/*
 * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing.
 *
 * If you wish to regenerate this file because of a game update use the ZHMTools CodeGen tool:
 * https://github.com/OrfeasZ/ZHMTools/releases
 */

#include "ZHMGen.h"
#include "ZHMProperties.h"
#include "ZHMEnums.h"
#include <External/simdjson_helpers.h>

ZHMTypeInfo BoneId::TypeInfo = ZHMTypeInfo("BoneId", sizeof(BoneId), alignof(BoneId), BoneId::WriteJson, BoneId::WriteSimpleJson, BoneId::FromSimpleJson, BoneId::Serialize, BoneId::Equals);

void BoneId::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<BoneId*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void BoneId::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<BoneId*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void BoneId::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	BoneId s_Object {};

	*reinterpret_cast<BoneId*>(p_Target) = s_Object;
}

void BoneId::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<BoneId*>(p_Object);

}

bool BoneId::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<BoneId*>(p_Left);
	auto* s_Right = reinterpret_cast<BoneId*>(p_Right);

	return *s_Left == *s_Right;
}

bool BoneId::operator==(const BoneId& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<BoneId>)
		return false;


	return true;
}

ZHMTypeInfo IActorAction::TypeInfo = ZHMTypeInfo("IActorAction", sizeof(IActorAction), alignof(IActorAction), IActorAction::WriteJson, IActorAction::WriteSimpleJson, IActorAction::FromSimpleJson, IActorAction::Serialize, IActorAction::Equals);

void IActorAction::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IActorAction*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorAction::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IActorAction*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IActorAction::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IActorAction s_Object {};

	*reinterpret_cast<IActorAction*>(p_Target) = s_Object;
}

void IActorAction::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IActorAction*>(p_Object);

}

bool IActorAction::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IActorAction*>(p_Left);
	auto* s_Right = reinterpret_cast<IActorAction*>(p_Right);

	return *s_Left == *s_Right;
}

bool IActorAction::operator==(const IActorAction& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IActorAction>)
		return false;


	return true;
}

ZHMTypeInfo IAnimPlayerEntity::TypeInfo = ZHMTypeInfo("IAnimPlayerEntity", sizeof(IAnimPlayerEntity), alignof(IAnimPlayerEntity), IAnimPlayerEntity::WriteJson, IAnimPlayerEntity::WriteSimpleJson, IAnimPlayerEntity::FromSimpleJson, IAnimPlayerEntity::Serialize, IAnimPlayerEntity::Equals);

void IAnimPlayerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IAnimPlayerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAnimPlayerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IAnimPlayerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IAnimPlayerEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IAnimPlayerEntity s_Object {};

	*reinterpret_cast<IAnimPlayerEntity*>(p_Target) = s_Object;
}

void IAnimPlayerEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IAnimPlayerEntity*>(p_Object);

}

bool IAnimPlayerEntity::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IAnimPlayerEntity*>(p_Left);
	auto* s_Right = reinterpret_cast<IAnimPlayerEntity*>(p_Right);

	return *s_Left == *s_Right;
}

bool IAnimPlayerEntity::operator==(const IAnimPlayerEntity& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IAnimPlayerEntity>)
		return false;


	return true;
}

ZHMTypeInfo IBoneAnimator::TypeInfo = ZHMTypeInfo("IBoneAnimator", sizeof(IBoneAnimator), alignof(IBoneAnimator), IBoneAnimator::WriteJson, IBoneAnimator::WriteSimpleJson, IBoneAnimator::FromSimpleJson, IBoneAnimator::Serialize, IBoneAnimator::Equals);

void IBoneAnimator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBoneAnimator*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneAnimator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBoneAnimator*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBoneAnimator::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBoneAnimator s_Object {};

	*reinterpret_cast<IBoneAnimator*>(p_Target) = s_Object;
}

void IBoneAnimator::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IBoneAnimator*>(p_Object);

}

bool IBoneAnimator::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IBoneAnimator*>(p_Left);
	auto* s_Right = reinterpret_cast<IBoneAnimator*>(p_Right);

	return *s_Left == *s_Right;
}

bool IBoneAnimator::operator==(const IBoneAnimator& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IBoneAnimator>)
		return false;


	return true;
}

ZHMTypeInfo IBoneCollidable::TypeInfo = ZHMTypeInfo("IBoneCollidable", sizeof(IBoneCollidable), alignof(IBoneCollidable), IBoneCollidable::WriteJson, IBoneCollidable::WriteSimpleJson, IBoneCollidable::FromSimpleJson, IBoneCollidable::Serialize, IBoneCollidable::Equals);

void IBoneCollidable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBoneCollidable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneCollidable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBoneCollidable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBoneCollidable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBoneCollidable s_Object {};

	*reinterpret_cast<IBoneCollidable*>(p_Target) = s_Object;
}

void IBoneCollidable::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IBoneCollidable*>(p_Object);

}

bool IBoneCollidable::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IBoneCollidable*>(p_Left);
	auto* s_Right = reinterpret_cast<IBoneCollidable*>(p_Right);

	return *s_Left == *s_Right;
}

bool IBoneCollidable::operator==(const IBoneCollidable& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IBoneCollidable>)
		return false;


	return true;
}

ZHMTypeInfo IComponentInterface::TypeInfo = ZHMTypeInfo("IComponentInterface", sizeof(IComponentInterface), alignof(IComponentInterface), IComponentInterface::WriteJson, IComponentInterface::WriteSimpleJson, IComponentInterface::FromSimpleJson, IComponentInterface::Serialize, IComponentInterface::Equals);

void IComponentInterface::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IComponentInterface*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IComponentInterface::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IComponentInterface*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IComponentInterface::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IComponentInterface s_Object {};

	*reinterpret_cast<IComponentInterface*>(p_Target) = s_Object;
}

void IComponentInterface::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IComponentInterface*>(p_Object);

}

bool IComponentInterface::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IComponentInterface*>(p_Left);
	auto* s_Right = reinterpret_cast<IComponentInterface*>(p_Right);

	return *s_Left == *s_Right;
}

bool IComponentInterface::operator==(const IComponentInterface& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IComponentInterface>)
		return false;


	return true;
}

ZHMTypeInfo IEventConsumerCollection::TypeInfo = ZHMTypeInfo("IEventConsumerCollection", sizeof(IEventConsumerCollection), alignof(IEventConsumerCollection), IEventConsumerCollection::WriteJson, IEventConsumerCollection::WriteSimpleJson, IEventConsumerCollection::FromSimpleJson, IEventConsumerCollection::Serialize, IEventConsumerCollection::Equals);

void IEventConsumerCollection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IEventConsumerCollection*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEventConsumerCollection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IEventConsumerCollection*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IEventConsumerCollection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IEventConsumerCollection s_Object {};

	*reinterpret_cast<IEventConsumerCollection*>(p_Target) = s_Object;
}

void IEventConsumerCollection::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IEventConsumerCollection*>(p_Object);

}

bool IEventConsumerCollection::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IEventConsumerCollection*>(p_Left);
	auto* s_Right = reinterpret_cast<IEventConsumerCollection*>(p_Right);

	return *s_Left == *s_Right;
}

bool IEventConsumerCollection::operator==(const IEventConsumerCollection& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IEventConsumerCollection>)
		return false;


	return true;
}

ZHMTypeInfo IHM5Door::TypeInfo = ZHMTypeInfo("IHM5Door", sizeof(IHM5Door), alignof(IHM5Door), IHM5Door::WriteJson, IHM5Door::WriteSimpleJson, IHM5Door::FromSimpleJson, IHM5Door::Serialize, IHM5Door::Equals);

void IHM5Door::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IHM5Door*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5Door::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IHM5Door*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IHM5Door::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IHM5Door s_Object {};

	*reinterpret_cast<IHM5Door*>(p_Target) = s_Object;
}

void IHM5Door::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IHM5Door*>(p_Object);

}

bool IHM5Door::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IHM5Door*>(p_Left);
	auto* s_Right = reinterpret_cast<IHM5Door*>(p_Right);

	return *s_Left == *s_Right;
}

bool IHM5Door::operator==(const IHM5Door& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IHM5Door>)
		return false;


	return true;
}

ZHMTypeInfo IHM5WeaponInventory::TypeInfo = ZHMTypeInfo("IHM5WeaponInventory", sizeof(IHM5WeaponInventory), alignof(IHM5WeaponInventory), IHM5WeaponInventory::WriteJson, IHM5WeaponInventory::WriteSimpleJson, IHM5WeaponInventory::FromSimpleJson, IHM5WeaponInventory::Serialize, IHM5WeaponInventory::Equals);

void IHM5WeaponInventory::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IHM5WeaponInventory*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5WeaponInventory::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IHM5WeaponInventory*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IHM5WeaponInventory::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IHM5WeaponInventory s_Object {};

	*reinterpret_cast<IHM5WeaponInventory*>(p_Target) = s_Object;
}

void IHM5WeaponInventory::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IHM5WeaponInventory*>(p_Object);

}

bool IHM5WeaponInventory::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IHM5WeaponInventory*>(p_Left);
	auto* s_Right = reinterpret_cast<IHM5WeaponInventory*>(p_Right);

	return *s_Left == *s_Right;
}

bool IHM5WeaponInventory::operator==(const IHM5WeaponInventory& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IHM5WeaponInventory>)
		return false;


	return true;
}

ZHMTypeInfo IMorphemeCutSequenceAnimatable::TypeInfo = ZHMTypeInfo("IMorphemeCutSequenceAnimatable", sizeof(IMorphemeCutSequenceAnimatable), alignof(IMorphemeCutSequenceAnimatable), IMorphemeCutSequenceAnimatable::WriteJson, IMorphemeCutSequenceAnimatable::WriteSimpleJson, IMorphemeCutSequenceAnimatable::FromSimpleJson, IMorphemeCutSequenceAnimatable::Serialize, IMorphemeCutSequenceAnimatable::Equals);

void IMorphemeCutSequenceAnimatable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeCutSequenceAnimatable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMorphemeCutSequenceAnimatable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMorphemeCutSequenceAnimatable s_Object {};

	*reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Target) = s_Object;
}

void IMorphemeCutSequenceAnimatable::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

}

bool IMorphemeCutSequenceAnimatable::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Left);
	auto* s_Right = reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Right);

	return *s_Left == *s_Right;
}

bool IMorphemeCutSequenceAnimatable::operator==(const IMorphemeCutSequenceAnimatable& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IMorphemeCutSequenceAnimatable>)
		return false;


	return true;
}

ZHMTypeInfo IMorphemeEventConsumer::TypeInfo = ZHMTypeInfo("IMorphemeEventConsumer", sizeof(IMorphemeEventConsumer), alignof(IMorphemeEventConsumer), IMorphemeEventConsumer::WriteJson, IMorphemeEventConsumer::WriteSimpleJson, IMorphemeEventConsumer::FromSimpleJson, IMorphemeEventConsumer::Serialize, IMorphemeEventConsumer::Equals);

void IMorphemeEventConsumer::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeEventConsumer*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeEventConsumer::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeEventConsumer*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMorphemeEventConsumer::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMorphemeEventConsumer s_Object {};

	*reinterpret_cast<IMorphemeEventConsumer*>(p_Target) = s_Object;
}

void IMorphemeEventConsumer::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IMorphemeEventConsumer*>(p_Object);

}

bool IMorphemeEventConsumer::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IMorphemeEventConsumer*>(p_Left);
	auto* s_Right = reinterpret_cast<IMorphemeEventConsumer*>(p_Right);

	return *s_Left == *s_Right;
}

bool IMorphemeEventConsumer::operator==(const IMorphemeEventConsumer& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IMorphemeEventConsumer>)
		return false;


	return true;
}

ZHMTypeInfo IRenderCompositorEntity::TypeInfo = ZHMTypeInfo("IRenderCompositorEntity", sizeof(IRenderCompositorEntity), alignof(IRenderCompositorEntity), IRenderCompositorEntity::WriteJson, IRenderCompositorEntity::WriteSimpleJson, IRenderCompositorEntity::FromSimpleJson, IRenderCompositorEntity::Serialize, IRenderCompositorEntity::Equals);

void IRenderCompositorEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IRenderCompositorEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderCompositorEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IRenderCompositorEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IRenderCompositorEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IRenderCompositorEntity s_Object {};

	*reinterpret_cast<IRenderCompositorEntity*>(p_Target) = s_Object;
}

void IRenderCompositorEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IRenderCompositorEntity*>(p_Object);

}

bool IRenderCompositorEntity::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IRenderCompositorEntity*>(p_Left);
	auto* s_Right = reinterpret_cast<IRenderCompositorEntity*>(p_Right);

	return *s_Left == *s_Right;
}

bool IRenderCompositorEntity::operator==(const IRenderCompositorEntity& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IRenderCompositorEntity>)
		return false;


	return true;
}

ZHMTypeInfo IRenderMaterialDescriptor::TypeInfo = ZHMTypeInfo("IRenderMaterialDescriptor", sizeof(IRenderMaterialDescriptor), alignof(IRenderMaterialDescriptor), IRenderMaterialDescriptor::WriteJson, IRenderMaterialDescriptor::WriteSimpleJson, IRenderMaterialDescriptor::FromSimpleJson, IRenderMaterialDescriptor::Serialize, IRenderMaterialDescriptor::Equals);

void IRenderMaterialDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IRenderMaterialDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderMaterialDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IRenderMaterialDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IRenderMaterialDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IRenderMaterialDescriptor s_Object {};

	*reinterpret_cast<IRenderMaterialDescriptor*>(p_Target) = s_Object;
}

void IRenderMaterialDescriptor::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IRenderMaterialDescriptor*>(p_Object);

}

bool IRenderMaterialDescriptor::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IRenderMaterialDescriptor*>(p_Left);
	auto* s_Right = reinterpret_cast<IRenderMaterialDescriptor*>(p_Right);

	return *s_Left == *s_Right;
}

bool IRenderMaterialDescriptor::operator==(const IRenderMaterialDescriptor& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IRenderMaterialDescriptor>)
		return false;


	return true;
}

ZHMTypeInfo ISoundGroup::TypeInfo = ZHMTypeInfo("ISoundGroup", sizeof(ISoundGroup), alignof(ISoundGroup), ISoundGroup::WriteJson, ISoundGroup::WriteSimpleJson, ISoundGroup::FromSimpleJson, ISoundGroup::Serialize, ISoundGroup::Equals);

void ISoundGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISoundGroup::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISoundGroup s_Object {};

	*reinterpret_cast<ISoundGroup*>(p_Target) = s_Object;
}

void ISoundGroup::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ISoundGroup*>(p_Object);

}

bool ISoundGroup::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ISoundGroup*>(p_Left);
	auto* s_Right = reinterpret_cast<ISoundGroup*>(p_Right);

	return *s_Left == *s_Right;
}

bool ISoundGroup::operator==(const ISoundGroup& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ISoundGroup>)
		return false;


	return true;
}

ZHMTypeInfo ISoundListenerPositionReceiver::TypeInfo = ZHMTypeInfo("ISoundListenerPositionReceiver", sizeof(ISoundListenerPositionReceiver), alignof(ISoundListenerPositionReceiver), ISoundListenerPositionReceiver::WriteJson, ISoundListenerPositionReceiver::WriteSimpleJson, ISoundListenerPositionReceiver::FromSimpleJson, ISoundListenerPositionReceiver::Serialize, ISoundListenerPositionReceiver::Equals);

void ISoundListenerPositionReceiver::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundListenerPositionReceiver*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundListenerPositionReceiver::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundListenerPositionReceiver*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISoundListenerPositionReceiver::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISoundListenerPositionReceiver s_Object {};

	*reinterpret_cast<ISoundListenerPositionReceiver*>(p_Target) = s_Object;
}

void ISoundListenerPositionReceiver::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ISoundListenerPositionReceiver*>(p_Object);

}

bool ISoundListenerPositionReceiver::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ISoundListenerPositionReceiver*>(p_Left);
	auto* s_Right = reinterpret_cast<ISoundListenerPositionReceiver*>(p_Right);

	return *s_Left == *s_Right;
}

bool ISoundListenerPositionReceiver::operator==(const ISoundListenerPositionReceiver& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ISoundListenerPositionReceiver>)
		return false;


	return true;
}

ZHMTypeInfo ISoundUpdateListener::TypeInfo = ZHMTypeInfo("ISoundUpdateListener", sizeof(ISoundUpdateListener), alignof(ISoundUpdateListener), ISoundUpdateListener::WriteJson, ISoundUpdateListener::WriteSimpleJson, ISoundUpdateListener::FromSimpleJson, ISoundUpdateListener::Serialize, ISoundUpdateListener::Equals);

void ISoundUpdateListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundUpdateListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundUpdateListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundUpdateListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISoundUpdateListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISoundUpdateListener s_Object {};

	*reinterpret_cast<ISoundUpdateListener*>(p_Target) = s_Object;
}

void ISoundUpdateListener::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ISoundUpdateListener*>(p_Object);

}

bool ISoundUpdateListener::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ISoundUpdateListener*>(p_Left);
	auto* s_Right = reinterpret_cast<ISoundUpdateListener*>(p_Right);

	return *s_Left == *s_Right;
}

bool ISoundUpdateListener::operator==(const ISoundUpdateListener& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ISoundUpdateListener>)
		return false;


	return true;
}

ZHMTypeInfo ISoundVolumetricGeomSplinePoint::TypeInfo = ZHMTypeInfo("ISoundVolumetricGeomSplinePoint", sizeof(ISoundVolumetricGeomSplinePoint), alignof(ISoundVolumetricGeomSplinePoint), ISoundVolumetricGeomSplinePoint::WriteJson, ISoundVolumetricGeomSplinePoint::WriteSimpleJson, ISoundVolumetricGeomSplinePoint::FromSimpleJson, ISoundVolumetricGeomSplinePoint::Serialize, ISoundVolumetricGeomSplinePoint::Equals);

void ISoundVolumetricGeomSplinePoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundVolumetricGeomSplinePoint*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundVolumetricGeomSplinePoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundVolumetricGeomSplinePoint*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISoundVolumetricGeomSplinePoint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISoundVolumetricGeomSplinePoint s_Object {};

	*reinterpret_cast<ISoundVolumetricGeomSplinePoint*>(p_Target) = s_Object;
}

void ISoundVolumetricGeomSplinePoint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ISoundVolumetricGeomSplinePoint*>(p_Object);

}

bool ISoundVolumetricGeomSplinePoint::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ISoundVolumetricGeomSplinePoint*>(p_Left);
	auto* s_Right = reinterpret_cast<ISoundVolumetricGeomSplinePoint*>(p_Right);

	return *s_Left == *s_Right;
}

bool ISoundVolumetricGeomSplinePoint::operator==(const ISoundVolumetricGeomSplinePoint& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ISoundVolumetricGeomSplinePoint>)
		return false;


	return true;
}

ZHMTypeInfo IStreamingStateManagerEntity::TypeInfo = ZHMTypeInfo("IStreamingStateManagerEntity", sizeof(IStreamingStateManagerEntity), alignof(IStreamingStateManagerEntity), IStreamingStateManagerEntity::WriteJson, IStreamingStateManagerEntity::WriteSimpleJson, IStreamingStateManagerEntity::FromSimpleJson, IStreamingStateManagerEntity::Serialize, IStreamingStateManagerEntity::Equals);

void IStreamingStateManagerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IStreamingStateManagerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IStreamingStateManagerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IStreamingStateManagerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IStreamingStateManagerEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IStreamingStateManagerEntity s_Object {};

	*reinterpret_cast<IStreamingStateManagerEntity*>(p_Target) = s_Object;
}

void IStreamingStateManagerEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IStreamingStateManagerEntity*>(p_Object);

}

bool IStreamingStateManagerEntity::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IStreamingStateManagerEntity*>(p_Left);
	auto* s_Right = reinterpret_cast<IStreamingStateManagerEntity*>(p_Right);

	return *s_Left == *s_Right;
}

bool IStreamingStateManagerEntity::operator==(const IStreamingStateManagerEntity& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IStreamingStateManagerEntity>)
		return false;


	return true;
}

ZHMTypeInfo ITriggerListener::TypeInfo = ZHMTypeInfo("ITriggerListener", sizeof(ITriggerListener), alignof(ITriggerListener), ITriggerListener::WriteJson, ITriggerListener::WriteSimpleJson, ITriggerListener::FromSimpleJson, ITriggerListener::Serialize, ITriggerListener::Equals);

void ITriggerListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ITriggerListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITriggerListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ITriggerListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ITriggerListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ITriggerListener s_Object {};

	*reinterpret_cast<ITriggerListener*>(p_Target) = s_Object;
}

void ITriggerListener::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ITriggerListener*>(p_Object);

}

bool ITriggerListener::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ITriggerListener*>(p_Left);
	auto* s_Right = reinterpret_cast<ITriggerListener*>(p_Right);

	return *s_Left == *s_Right;
}

bool ITriggerListener::operator==(const ITriggerListener& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ITriggerListener>)
		return false;


	return true;
}

ZHMTypeInfo ITriggerShape::TypeInfo = ZHMTypeInfo("ITriggerShape", sizeof(ITriggerShape), alignof(ITriggerShape), ITriggerShape::WriteJson, ITriggerShape::WriteSimpleJson, ITriggerShape::FromSimpleJson, ITriggerShape::Serialize, ITriggerShape::Equals);

void ITriggerShape::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ITriggerShape*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITriggerShape::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ITriggerShape*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ITriggerShape::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ITriggerShape s_Object {};

	*reinterpret_cast<ITriggerShape*>(p_Target) = s_Object;
}

void ITriggerShape::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ITriggerShape*>(p_Object);

}

bool ITriggerShape::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ITriggerShape*>(p_Left);
	auto* s_Right = reinterpret_cast<ITriggerShape*>(p_Right);

	return *s_Left == *s_Right;
}

bool ITriggerShape::operator==(const ITriggerShape& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ITriggerShape>)
		return false;


	return true;
}

ZHMTypeInfo IValueEntity::TypeInfo = ZHMTypeInfo("IValueEntity", sizeof(IValueEntity), alignof(IValueEntity), IValueEntity::WriteJson, IValueEntity::WriteSimpleJson, IValueEntity::FromSimpleJson, IValueEntity::Serialize, IValueEntity::Equals);

void IValueEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IValueEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IValueEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IValueEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IValueEntity s_Object {};

	*reinterpret_cast<IValueEntity*>(p_Target) = s_Object;
}

void IValueEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IValueEntity*>(p_Object);

}

bool IValueEntity::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<IValueEntity*>(p_Left);
	auto* s_Right = reinterpret_cast<IValueEntity*>(p_Right);

	return *s_Left == *s_Right;
}

bool IValueEntity::operator==(const IValueEntity& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<IValueEntity>)
		return false;


	return true;
}

ZHMTypeInfo SActorSoundDefs::TypeInfo = ZHMTypeInfo("SActorSoundDefs", sizeof(SActorSoundDefs), alignof(SActorSoundDefs), SActorSoundDefs::WriteJson, SActorSoundDefs::WriteSimpleJson, SActorSoundDefs::FromSimpleJson, SActorSoundDefs::Serialize, SActorSoundDefs::Equals);

void SActorSoundDefs::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSoundDefs*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SActorSoundDefs::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSoundDefs*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SActorSoundDefs::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSoundDefs s_Object {};

	*reinterpret_cast<SActorSoundDefs*>(p_Target) = s_Object;
}

void SActorSoundDefs::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorSoundDefs*>(p_Object);

}

bool SActorSoundDefs::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SActorSoundDefs*>(p_Left);
	auto* s_Right = reinterpret_cast<SActorSoundDefs*>(p_Right);

	return *s_Left == *s_Right;
}

bool SActorSoundDefs::operator==(const SActorSoundDefs& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SActorSoundDefs>)
		return false;


	return true;
}

ZHMTypeInfo SBehaviorTreeEntityReference::TypeInfo = ZHMTypeInfo("SBehaviorTreeEntityReference", sizeof(SBehaviorTreeEntityReference), alignof(SBehaviorTreeEntityReference), SBehaviorTreeEntityReference::WriteJson, SBehaviorTreeEntityReference::WriteSimpleJson, SBehaviorTreeEntityReference::FromSimpleJson, SBehaviorTreeEntityReference::Serialize, SBehaviorTreeEntityReference::Equals);

void SBehaviorTreeEntityReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEntityReference*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_AC99E46E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_AC99E46E);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EBF2DC42") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_EBF2DC42);
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEntityReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEntityReference*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_AC99E46E") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_AC99E46E);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EBF2DC42") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_EBF2DC42);

	p_Stream << "}";
}

void SBehaviorTreeEntityReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeEntityReference s_Object {};

	s_Object._AC99E46E = simdjson::from_json_bool(p_Document["_AC99E46E"]);

	s_Object._EBF2DC42 = std::string_view(p_Document["_EBF2DC42"]);

	*reinterpret_cast<SBehaviorTreeEntityReference*>(p_Target) = s_Object;
}

void SBehaviorTreeEntityReference::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEntityReference*>(p_Object);

	ZString::Serialize(&s_Object->_EBF2DC42, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeEntityReference, _EBF2DC42));
}

bool SBehaviorTreeEntityReference::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SBehaviorTreeEntityReference*>(p_Left);
	auto* s_Right = reinterpret_cast<SBehaviorTreeEntityReference*>(p_Right);

	return *s_Left == *s_Right;
}

bool SBehaviorTreeEntityReference::operator==(const SBehaviorTreeEntityReference& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SBehaviorTreeEntityReference>)
		return false;

	if (_AC99E46E != p_Other._AC99E46E) return false;
	if (_EBF2DC42 != p_Other._EBF2DC42) return false;

	return true;
}

ZHMTypeInfo SBehaviorTreeEvaluationLogEntry::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLogEntry", sizeof(SBehaviorTreeEvaluationLogEntry), alignof(SBehaviorTreeEvaluationLogEntry), SBehaviorTreeEvaluationLogEntry::WriteJson, SBehaviorTreeEvaluationLogEntry::WriteSimpleJson, SBehaviorTreeEvaluationLogEntry::FromSimpleJson, SBehaviorTreeEvaluationLogEntry::Serialize, SBehaviorTreeEvaluationLogEntry::Equals);

void SBehaviorTreeEvaluationLogEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_7A22B22E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_7A22B22E);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_217E868E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_217E868E);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7E0EAB7D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_7E0EAB7D);
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLogEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_7A22B22E") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_7A22B22E);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_217E868E") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_217E868E);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7E0EAB7D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_7E0EAB7D);

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLogEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeEvaluationLogEntry s_Object {};

	s_Object._7A22B22E = simdjson::from_json_uint32(p_Document["_7A22B22E"]);

	s_Object._217E868E = simdjson::from_json_uint32(p_Document["_217E868E"]);

	s_Object._7E0EAB7D = simdjson::from_json_bool(p_Document["_7E0EAB7D"]);

	*reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Target) = s_Object;
}

void SBehaviorTreeEvaluationLogEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

}

bool SBehaviorTreeEvaluationLogEntry::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Left);
	auto* s_Right = reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Right);

	return *s_Left == *s_Right;
}

bool SBehaviorTreeEvaluationLogEntry::operator==(const SBehaviorTreeEvaluationLogEntry& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SBehaviorTreeEvaluationLogEntry>)
		return false;

	if (_7A22B22E != p_Other._7A22B22E) return false;
	if (_217E868E != p_Other._217E868E) return false;
	if (_7E0EAB7D != p_Other._7E0EAB7D) return false;

	return true;
}

ZHMTypeInfo ZResourceID::TypeInfo = ZHMTypeInfo("ZResourceID", sizeof(ZResourceID), alignof(ZResourceID), ZResourceID::WriteJson, ZResourceID::WriteSimpleJson, ZResourceID::FromSimpleJson, ZResourceID::Serialize, ZResourceID::Equals);

void ZResourceID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZResourceID*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_4FB33326") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_4FB33326);
	p_Stream << "}";

	p_Stream << "}";
}

void ZResourceID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZResourceID*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_4FB33326") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_4FB33326);

	p_Stream << "}";
}

void ZResourceID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZResourceID s_Object {};

	s_Object._4FB33326 = std::string_view(p_Document["_4FB33326"]);

	*reinterpret_cast<ZResourceID*>(p_Target) = s_Object;
}

void ZResourceID::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZResourceID*>(p_Object);

	ZString::Serialize(&s_Object->_4FB33326, p_Serializer, p_OwnOffset + offsetof(ZResourceID, _4FB33326));
}

bool ZResourceID::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZResourceID*>(p_Left);
	auto* s_Right = reinterpret_cast<ZResourceID*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZResourceID::operator==(const ZResourceID& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZResourceID>)
		return false;

	if (_4FB33326 != p_Other._4FB33326) return false;

	return true;
}

ZHMTypeInfo SBehaviorTreeEvaluationLog::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLog", sizeof(SBehaviorTreeEvaluationLog), alignof(SBehaviorTreeEvaluationLog), SBehaviorTreeEvaluationLog::WriteJson, SBehaviorTreeEvaluationLog::WriteSimpleJson, SBehaviorTreeEvaluationLog::FromSimpleJson, SBehaviorTreeEvaluationLog::Serialize, SBehaviorTreeEvaluationLog::Equals);

void SBehaviorTreeEvaluationLog::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_45584A12") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<ZResourceID>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_45584A12.size(); ++i)
	{
		auto& s_Item0 = s_Object->_45584A12[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("ZResourceID") << ",\"$val\":";
		ZResourceID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_45584A12.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B80AC610") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SBehaviorTreeEvaluationLogEntry>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B80AC610.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B80AC610[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SBehaviorTreeEvaluationLogEntry") << ",\"$val\":";
		SBehaviorTreeEvaluationLogEntry::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_B80AC610.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLog::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_45584A12") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_45584A12.size(); ++i)
	{
		auto& s_Item0 = s_Object->_45584A12[i];
		ZResourceID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_45584A12.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B80AC610") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B80AC610.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B80AC610[i];
		SBehaviorTreeEvaluationLogEntry::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_B80AC610.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLog::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeEvaluationLog s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_45584A12"])
	{
		ZResourceID s_ArrayItem0;
		ZResourceID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._45584A12.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_B80AC610"])
	{
		SBehaviorTreeEvaluationLogEntry s_ArrayItem0;
		SBehaviorTreeEvaluationLogEntry::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._B80AC610.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Target) = s_Object;
}

void SBehaviorTreeEvaluationLog::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	TArray<ZResourceID>::Serialize(&s_Object->_45584A12, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeEvaluationLog, _45584A12));
	TArray<SBehaviorTreeEvaluationLogEntry>::Serialize(&s_Object->_B80AC610, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeEvaluationLog, _B80AC610));
}

bool SBehaviorTreeEvaluationLog::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Left);
	auto* s_Right = reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Right);

	return *s_Left == *s_Right;
}

bool SBehaviorTreeEvaluationLog::operator==(const SBehaviorTreeEvaluationLog& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SBehaviorTreeEvaluationLog>)
		return false;

	if (_45584A12 != p_Other._45584A12) return false;
	if (_B80AC610 != p_Other._B80AC610) return false;

	return true;
}

ZHMTypeInfo SBehaviorTreeInputPinCondition::TypeInfo = ZHMTypeInfo("SBehaviorTreeInputPinCondition", sizeof(SBehaviorTreeInputPinCondition), alignof(SBehaviorTreeInputPinCondition), SBehaviorTreeInputPinCondition::WriteJson, SBehaviorTreeInputPinCondition::WriteSimpleJson, SBehaviorTreeInputPinCondition::FromSimpleJson, SBehaviorTreeInputPinCondition::Serialize, SBehaviorTreeInputPinCondition::Equals);

void SBehaviorTreeInputPinCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_EBF2DC42") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_EBF2DC42);
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeInputPinCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_EBF2DC42") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_EBF2DC42);

	p_Stream << "}";
}

void SBehaviorTreeInputPinCondition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeInputPinCondition s_Object {};

	s_Object._EBF2DC42 = std::string_view(p_Document["_EBF2DC42"]);

	*reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Target) = s_Object;
}

void SBehaviorTreeInputPinCondition::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	ZString::Serialize(&s_Object->_EBF2DC42, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeInputPinCondition, _EBF2DC42));
}

bool SBehaviorTreeInputPinCondition::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Left);
	auto* s_Right = reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Right);

	return *s_Left == *s_Right;
}

bool SBehaviorTreeInputPinCondition::operator==(const SBehaviorTreeInputPinCondition& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SBehaviorTreeInputPinCondition>)
		return false;

	if (_EBF2DC42 != p_Other._EBF2DC42) return false;

	return true;
}

ZHMTypeInfo SBehaviorTreeInfo::TypeInfo = ZHMTypeInfo("SBehaviorTreeInfo", sizeof(SBehaviorTreeInfo), alignof(SBehaviorTreeInfo), SBehaviorTreeInfo::WriteJson, SBehaviorTreeInfo::WriteSimpleJson, SBehaviorTreeInfo::FromSimpleJson, SBehaviorTreeInfo::Serialize, SBehaviorTreeInfo::Equals);

void SBehaviorTreeInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_5AFAC781") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SBehaviorTreeEntityReference>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_5AFAC781.size(); ++i)
	{
		auto& s_Item0 = s_Object->_5AFAC781[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SBehaviorTreeEntityReference") << ",\"$val\":";
		SBehaviorTreeEntityReference::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_5AFAC781.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5940064D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SBehaviorTreeInputPinCondition>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_5940064D.size(); ++i)
	{
		auto& s_Item0 = s_Object->_5940064D[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SBehaviorTreeInputPinCondition") << ",\"$val\":";
		SBehaviorTreeInputPinCondition::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_5940064D.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_5AFAC781") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_5AFAC781.size(); ++i)
	{
		auto& s_Item0 = s_Object->_5AFAC781[i];
		SBehaviorTreeEntityReference::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_5AFAC781.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5940064D") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_5940064D.size(); ++i)
	{
		auto& s_Item0 = s_Object->_5940064D[i];
		SBehaviorTreeInputPinCondition::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_5940064D.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeInfo s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_5AFAC781"])
	{
		SBehaviorTreeEntityReference s_ArrayItem0;
		SBehaviorTreeEntityReference::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._5AFAC781.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_5940064D"])
	{
		SBehaviorTreeInputPinCondition s_ArrayItem0;
		SBehaviorTreeInputPinCondition::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._5940064D.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SBehaviorTreeInfo*>(p_Target) = s_Object;
}

void SBehaviorTreeInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInfo*>(p_Object);

	TArray<SBehaviorTreeEntityReference>::Serialize(&s_Object->_5AFAC781, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeInfo, _5AFAC781));
	TArray<SBehaviorTreeInputPinCondition>::Serialize(&s_Object->_5940064D, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeInfo, _5940064D));
}

bool SBehaviorTreeInfo::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SBehaviorTreeInfo*>(p_Left);
	auto* s_Right = reinterpret_cast<SBehaviorTreeInfo*>(p_Right);

	return *s_Left == *s_Right;
}

bool SBehaviorTreeInfo::operator==(const SBehaviorTreeInfo& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SBehaviorTreeInfo>)
		return false;

	if (_5AFAC781 != p_Other._5AFAC781) return false;
	if (_5940064D != p_Other._5940064D) return false;

	return true;
}

ZHMTypeInfo SBodyPartDamageMultipliers::TypeInfo = ZHMTypeInfo("SBodyPartDamageMultipliers", sizeof(SBodyPartDamageMultipliers), alignof(SBodyPartDamageMultipliers), SBodyPartDamageMultipliers::WriteJson, SBodyPartDamageMultipliers::WriteSimpleJson, SBodyPartDamageMultipliers::FromSimpleJson, SBodyPartDamageMultipliers::Serialize, SBodyPartDamageMultipliers::Equals);

void SBodyPartDamageMultipliers::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodyPartDamageMultipliers*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_ADB3EF29") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_ADB3EF29);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_DF51096C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_DF51096C);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EBC4AEA7") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_EBC4AEA7);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B2A446A3") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B2A446A3);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_214EB7BD") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_214EB7BD);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FB25522A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_FB25522A);
	p_Stream << "}";

	p_Stream << "}";
}

void SBodyPartDamageMultipliers::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodyPartDamageMultipliers*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_ADB3EF29") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_ADB3EF29);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_DF51096C") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_DF51096C);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EBC4AEA7") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_EBC4AEA7);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B2A446A3") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B2A446A3);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_214EB7BD") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_214EB7BD);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FB25522A") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_FB25522A);

	p_Stream << "}";
}

void SBodyPartDamageMultipliers::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBodyPartDamageMultipliers s_Object {};

	s_Object._ADB3EF29 = simdjson::from_json_float32(p_Document["_ADB3EF29"]);

	s_Object._DF51096C = simdjson::from_json_float32(p_Document["_DF51096C"]);

	s_Object._EBC4AEA7 = simdjson::from_json_float32(p_Document["_EBC4AEA7"]);

	s_Object._B2A446A3 = simdjson::from_json_float32(p_Document["_B2A446A3"]);

	s_Object._214EB7BD = simdjson::from_json_float32(p_Document["_214EB7BD"]);

	s_Object._FB25522A = simdjson::from_json_float32(p_Document["_FB25522A"]);

	*reinterpret_cast<SBodyPartDamageMultipliers*>(p_Target) = s_Object;
}

void SBodyPartDamageMultipliers::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBodyPartDamageMultipliers*>(p_Object);

}

bool SBodyPartDamageMultipliers::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SBodyPartDamageMultipliers*>(p_Left);
	auto* s_Right = reinterpret_cast<SBodyPartDamageMultipliers*>(p_Right);

	return *s_Left == *s_Right;
}

bool SBodyPartDamageMultipliers::operator==(const SBodyPartDamageMultipliers& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SBodyPartDamageMultipliers>)
		return false;

	if (_ADB3EF29 != p_Other._ADB3EF29) return false;
	if (_DF51096C != p_Other._DF51096C) return false;
	if (_EBC4AEA7 != p_Other._EBC4AEA7) return false;
	if (_B2A446A3 != p_Other._B2A446A3) return false;
	if (_214EB7BD != p_Other._214EB7BD) return false;
	if (_FB25522A != p_Other._FB25522A) return false;

	return true;
}

ZHMTypeInfo SVector3::TypeInfo = ZHMTypeInfo("SVector3", sizeof(SVector3), alignof(SVector3), SVector3::WriteJson, SVector3::WriteSimpleJson, SVector3::FromSimpleJson, SVector3::Serialize, SVector3::Equals);

void SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_8CDC1683") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDC1683);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDB2615") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDB2615);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_62D277AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_62D277AF);
	p_Stream << "}";

	p_Stream << "}";
}

void SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_8CDC1683") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDC1683);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDB2615") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDB2615);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_62D277AF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_62D277AF);

	p_Stream << "}";
}

void SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVector3 s_Object {};

	s_Object._8CDC1683 = simdjson::from_json_float32(p_Document["_8CDC1683"]);

	s_Object._FBDB2615 = simdjson::from_json_float32(p_Document["_FBDB2615"]);

	s_Object._62D277AF = simdjson::from_json_float32(p_Document["_62D277AF"]);

	*reinterpret_cast<SVector3*>(p_Target) = s_Object;
}

void SVector3::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVector3*>(p_Object);

}

bool SVector3::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SVector3*>(p_Left);
	auto* s_Right = reinterpret_cast<SVector3*>(p_Right);

	return *s_Left == *s_Right;
}

bool SVector3::operator==(const SVector3& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SVector3>)
		return false;

	if (_8CDC1683 != p_Other._8CDC1683) return false;
	if (_FBDB2615 != p_Other._FBDB2615) return false;
	if (_62D277AF != p_Other._62D277AF) return false;

	return true;
}

ZHMTypeInfo SBoneScalesList::TypeInfo = ZHMTypeInfo("SBoneScalesList", sizeof(SBoneScalesList), alignof(SBoneScalesList), SBoneScalesList::WriteJson, SBoneScalesList::WriteSimpleJson, SBoneScalesList::FromSimpleJson, SBoneScalesList::Serialize, SBoneScalesList::Equals);

void SBoneScalesList::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBoneScalesList*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_DB3D5286") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SVector3>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_DB3D5286.size(); ++i)
	{
		auto& s_Item0 = s_Object->_DB3D5286[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector3") << ",\"$val\":";
		SVector3::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_DB3D5286.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SBoneScalesList::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBoneScalesList*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_DB3D5286") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_DB3D5286.size(); ++i)
	{
		auto& s_Item0 = s_Object->_DB3D5286[i];
		SVector3::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_DB3D5286.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBoneScalesList::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBoneScalesList s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_DB3D5286"])
	{
		SVector3 s_ArrayItem0;
		SVector3::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._DB3D5286.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SBoneScalesList*>(p_Target) = s_Object;
}

void SBoneScalesList::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBoneScalesList*>(p_Object);

	TArray<SVector3>::Serialize(&s_Object->_DB3D5286, p_Serializer, p_OwnOffset + offsetof(SBoneScalesList, _DB3D5286));
}

bool SBoneScalesList::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SBoneScalesList*>(p_Left);
	auto* s_Right = reinterpret_cast<SBoneScalesList*>(p_Right);

	return *s_Left == *s_Right;
}

bool SBoneScalesList::operator==(const SBoneScalesList& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SBoneScalesList>)
		return false;

	if (_DB3D5286 != p_Other._DB3D5286) return false;

	return true;
}

ZHMTypeInfo SCPProgressionState::TypeInfo = ZHMTypeInfo("SCPProgressionState", sizeof(SCPProgressionState), alignof(SCPProgressionState), SCPProgressionState::WriteJson, SCPProgressionState::WriteSimpleJson, SCPProgressionState::FromSimpleJson, SCPProgressionState::Serialize, SCPProgressionState::Equals);

void SCPProgressionState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCPProgressionState*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_5B210A8A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_5B210A8A);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7A6CA028") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_7A6CA028);
	p_Stream << "}";

	p_Stream << "}";
}

void SCPProgressionState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCPProgressionState*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_5B210A8A") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_5B210A8A);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7A6CA028") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_7A6CA028);

	p_Stream << "}";
}

void SCPProgressionState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCPProgressionState s_Object {};

	s_Object._5B210A8A = simdjson::from_json_int32(p_Document["_5B210A8A"]);

	s_Object._7A6CA028 = simdjson::from_json_uint32(p_Document["_7A6CA028"]);

	*reinterpret_cast<SCPProgressionState*>(p_Target) = s_Object;
}

void SCPProgressionState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCPProgressionState*>(p_Object);

}

bool SCPProgressionState::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCPProgressionState*>(p_Left);
	auto* s_Right = reinterpret_cast<SCPProgressionState*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCPProgressionState::operator==(const SCPProgressionState& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCPProgressionState>)
		return false;

	if (_5B210A8A != p_Other._5B210A8A) return false;
	if (_7A6CA028 != p_Other._7A6CA028) return false;

	return true;
}

ZHMTypeInfo SSubGoalProgressData::TypeInfo = ZHMTypeInfo("SSubGoalProgressData", sizeof(SSubGoalProgressData), alignof(SSubGoalProgressData), SSubGoalProgressData::WriteJson, SSubGoalProgressData::WriteSimpleJson, SSubGoalProgressData::FromSimpleJson, SSubGoalProgressData::Serialize, SSubGoalProgressData::Equals);

void SSubGoalProgressData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSubGoalProgressData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_922CA259") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_922CA259);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_695969C0") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_695969C0);
	p_Stream << "}";

	p_Stream << "}";
}

void SSubGoalProgressData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSubGoalProgressData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_922CA259") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_922CA259);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_695969C0") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_695969C0);

	p_Stream << "}";
}

void SSubGoalProgressData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSubGoalProgressData s_Object {};

	s_Object._922CA259 = simdjson::from_json_int32(p_Document["_922CA259"]);

	s_Object._695969C0 = simdjson::from_json_int32(p_Document["_695969C0"]);

	*reinterpret_cast<SSubGoalProgressData*>(p_Target) = s_Object;
}

void SSubGoalProgressData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSubGoalProgressData*>(p_Object);

}

bool SSubGoalProgressData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SSubGoalProgressData*>(p_Left);
	auto* s_Right = reinterpret_cast<SSubGoalProgressData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SSubGoalProgressData::operator==(const SSubGoalProgressData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SSubGoalProgressData>)
		return false;

	if (_922CA259 != p_Other._922CA259) return false;
	if (_695969C0 != p_Other._695969C0) return false;

	return true;
}

ZHMTypeInfo SFullGoalData::TypeInfo = ZHMTypeInfo("SFullGoalData", sizeof(SFullGoalData), alignof(SFullGoalData), SFullGoalData::WriteJson, SFullGoalData::WriteSimpleJson, SFullGoalData::FromSimpleJson, SFullGoalData::Serialize, SFullGoalData::Equals);

void SFullGoalData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFullGoalData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_F0A2AB0C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ELevelIndex") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_F0A2AB0C)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_F0A2AB0C))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_26ADCCFA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_26ADCCFA);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_666BDA3D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("EUIText") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_666BDA3D)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EUIText", static_cast<int>(s_Object->_666BDA3D))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_DB5F5665") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("EUIText") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_DB5F5665)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EUIText", static_cast<int>(s_Object->_DB5F5665))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_286EC69B") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int64") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_286EC69B);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B66149DE") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B66149DE);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6C30550E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_6C30550E);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_89E24C20") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_89E24C20);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F2D0B7CB") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_F2D0B7CB);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AD7C9C45") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_AD7C9C45);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E53983D3") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_E53983D3);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_87B6A2FF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_87B6A2FF);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_D4412377") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SSubGoalProgressData>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_D4412377.size(); ++i)
	{
		auto& s_Item0 = s_Object->_D4412377[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SSubGoalProgressData") << ",\"$val\":";
		SSubGoalProgressData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_D4412377.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SFullGoalData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFullGoalData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_F0A2AB0C") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_F0A2AB0C)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_26ADCCFA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_26ADCCFA);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_666BDA3D") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EUIText", static_cast<int>(s_Object->_666BDA3D)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_DB5F5665") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EUIText", static_cast<int>(s_Object->_DB5F5665)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_286EC69B") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_286EC69B);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B66149DE") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B66149DE);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6C30550E") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_6C30550E);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_89E24C20") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_89E24C20);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F2D0B7CB") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_F2D0B7CB);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AD7C9C45") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_AD7C9C45);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E53983D3") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_E53983D3);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_87B6A2FF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_87B6A2FF);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_D4412377") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_D4412377.size(); ++i)
	{
		auto& s_Item0 = s_Object->_D4412377[i];
		SSubGoalProgressData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_D4412377.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SFullGoalData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFullGoalData s_Object {};

	s_Object._F0A2AB0C = static_cast<ELevelIndex>(ZHMEnums::GetEnumValueByName("ELevelIndex", std::string_view(p_Document["_F0A2AB0C"])));

	s_Object._26ADCCFA = simdjson::from_json_int32(p_Document["_26ADCCFA"]);

	s_Object._666BDA3D = static_cast<EUIText>(ZHMEnums::GetEnumValueByName("EUIText", std::string_view(p_Document["_666BDA3D"])));

	s_Object._DB5F5665 = static_cast<EUIText>(ZHMEnums::GetEnumValueByName("EUIText", std::string_view(p_Document["_DB5F5665"])));

	s_Object._286EC69B = simdjson::from_json_int64(p_Document["_286EC69B"]);

	s_Object._B66149DE = simdjson::from_json_int32(p_Document["_B66149DE"]);

	s_Object._6C30550E = simdjson::from_json_bool(p_Document["_6C30550E"]);

	s_Object._89E24C20 = simdjson::from_json_bool(p_Document["_89E24C20"]);

	s_Object._F2D0B7CB = simdjson::from_json_bool(p_Document["_F2D0B7CB"]);

	s_Object._AD7C9C45 = simdjson::from_json_bool(p_Document["_AD7C9C45"]);

	s_Object._E53983D3 = simdjson::from_json_bool(p_Document["_E53983D3"]);

	s_Object._87B6A2FF = simdjson::from_json_bool(p_Document["_87B6A2FF"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_D4412377"])
	{
		SSubGoalProgressData s_ArrayItem0;
		SSubGoalProgressData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._D4412377.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SFullGoalData*>(p_Target) = s_Object;
}

void SFullGoalData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFullGoalData*>(p_Object);

	TArray<SSubGoalProgressData>::Serialize(&s_Object->_D4412377, p_Serializer, p_OwnOffset + offsetof(SFullGoalData, _D4412377));
}

bool SFullGoalData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SFullGoalData*>(p_Left);
	auto* s_Right = reinterpret_cast<SFullGoalData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SFullGoalData::operator==(const SFullGoalData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SFullGoalData>)
		return false;

	if (_F0A2AB0C != p_Other._F0A2AB0C) return false;
	if (_26ADCCFA != p_Other._26ADCCFA) return false;
	if (_666BDA3D != p_Other._666BDA3D) return false;
	if (_DB5F5665 != p_Other._DB5F5665) return false;
	if (_286EC69B != p_Other._286EC69B) return false;
	if (_B66149DE != p_Other._B66149DE) return false;
	if (_6C30550E != p_Other._6C30550E) return false;
	if (_89E24C20 != p_Other._89E24C20) return false;
	if (_F2D0B7CB != p_Other._F2D0B7CB) return false;
	if (_AD7C9C45 != p_Other._AD7C9C45) return false;
	if (_E53983D3 != p_Other._E53983D3) return false;
	if (_87B6A2FF != p_Other._87B6A2FF) return false;
	if (_D4412377 != p_Other._D4412377) return false;

	return true;
}

ZHMTypeInfo SChallengeData::TypeInfo = ZHMTypeInfo("SChallengeData", sizeof(SChallengeData), alignof(SChallengeData), SChallengeData::WriteJson, SChallengeData::WriteSimpleJson, SChallengeData::FromSimpleJson, SChallengeData::Serialize, SChallengeData::Equals);

void SChallengeData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SChallengeData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_99B680D5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SFullGoalData>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_99B680D5.size(); ++i)
	{
		auto& s_Item0 = s_Object->_99B680D5[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SFullGoalData") << ",\"$val\":";
		SFullGoalData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_99B680D5.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_954912E4") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_954912E4);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3A82AA93") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_3A82AA93);
	p_Stream << "}";

	p_Stream << "}";
}

void SChallengeData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SChallengeData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_99B680D5") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_99B680D5.size(); ++i)
	{
		auto& s_Item0 = s_Object->_99B680D5[i];
		SFullGoalData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_99B680D5.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_954912E4") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_954912E4);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3A82AA93") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_3A82AA93);

	p_Stream << "}";
}

void SChallengeData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SChallengeData s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_99B680D5"])
	{
		SFullGoalData s_ArrayItem0;
		SFullGoalData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._99B680D5.push_back(s_ArrayItem0);
	}

	s_Object._954912E4 = simdjson::from_json_int32(p_Document["_954912E4"]);

	s_Object._3A82AA93 = simdjson::from_json_int32(p_Document["_3A82AA93"]);

	*reinterpret_cast<SChallengeData*>(p_Target) = s_Object;
}

void SChallengeData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SChallengeData*>(p_Object);

	TArray<SFullGoalData>::Serialize(&s_Object->_99B680D5, p_Serializer, p_OwnOffset + offsetof(SChallengeData, _99B680D5));
}

bool SChallengeData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SChallengeData*>(p_Left);
	auto* s_Right = reinterpret_cast<SChallengeData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SChallengeData::operator==(const SChallengeData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SChallengeData>)
		return false;

	if (_99B680D5 != p_Other._99B680D5) return false;
	if (_954912E4 != p_Other._954912E4) return false;
	if (_3A82AA93 != p_Other._3A82AA93) return false;

	return true;
}

ZHMTypeInfo SCheatData::TypeInfo = ZHMTypeInfo("SCheatData", sizeof(SCheatData), alignof(SCheatData), SCheatData::WriteJson, SCheatData::WriteSimpleJson, SCheatData::FromSimpleJson, SCheatData::Serialize, SCheatData::Equals);

void SCheatData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCheatData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SCheatData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCheatData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SCheatData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCheatData s_Object {};

	*reinterpret_cast<SCheatData*>(p_Target) = s_Object;
}

void SCheatData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCheatData*>(p_Object);

}

bool SCheatData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCheatData*>(p_Left);
	auto* s_Right = reinterpret_cast<SCheatData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCheatData::operator==(const SCheatData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCheatData>)
		return false;


	return true;
}

ZHMTypeInfo STokenID::TypeInfo = ZHMTypeInfo("STokenID", sizeof(STokenID), alignof(STokenID), STokenID::WriteJson, STokenID::WriteSimpleJson, STokenID::FromSimpleJson, STokenID::Serialize, STokenID::Equals);

void STokenID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STokenID*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_CE3E2DE2") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_CE3E2DE2);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3589B0EA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_3589B0EA);
	p_Stream << "}";

	p_Stream << "}";
}

void STokenID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STokenID*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_CE3E2DE2") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_CE3E2DE2);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3589B0EA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_3589B0EA);

	p_Stream << "}";
}

void STokenID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STokenID s_Object {};

	s_Object._CE3E2DE2 = simdjson::from_json_uint32(p_Document["_CE3E2DE2"]);

	s_Object._3589B0EA = simdjson::from_json_bool(p_Document["_3589B0EA"]);

	*reinterpret_cast<STokenID*>(p_Target) = s_Object;
}

void STokenID::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STokenID*>(p_Object);

}

bool STokenID::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<STokenID*>(p_Left);
	auto* s_Right = reinterpret_cast<STokenID*>(p_Right);

	return *s_Left == *s_Right;
}

bool STokenID::operator==(const STokenID& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<STokenID>)
		return false;

	if (_CE3E2DE2 != p_Other._CE3E2DE2) return false;
	if (_3589B0EA != p_Other._3589B0EA) return false;

	return true;
}

ZHMTypeInfo SCloseCombatWeaponSaveData::TypeInfo = ZHMTypeInfo("SCloseCombatWeaponSaveData", sizeof(SCloseCombatWeaponSaveData), alignof(SCloseCombatWeaponSaveData), SCloseCombatWeaponSaveData::WriteJson, SCloseCombatWeaponSaveData::WriteSimpleJson, SCloseCombatWeaponSaveData::FromSimpleJson, SCloseCombatWeaponSaveData::Serialize, SCloseCombatWeaponSaveData::Equals);

void SCloseCombatWeaponSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCloseCombatWeaponSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_DFE2E88A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STokenID") << ",\"$val\":";
	STokenID::WriteJson(&s_Object->_DFE2E88A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_C82C9569") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_C82C9569);
	p_Stream << "}";

	p_Stream << "}";
}

void SCloseCombatWeaponSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCloseCombatWeaponSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_DFE2E88A") << ":";
	STokenID::WriteSimpleJson(&s_Object->_DFE2E88A, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_C82C9569") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_C82C9569);

	p_Stream << "}";
}

void SCloseCombatWeaponSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCloseCombatWeaponSaveData s_Object {};

	{
		STokenID s_Item {};
		STokenID::FromSimpleJson(p_Document["_DFE2E88A"], &s_Item);
		s_Object._DFE2E88A = s_Item;
	}

	s_Object._C82C9569 = simdjson::from_json_int32(p_Document["_C82C9569"]);

	*reinterpret_cast<SCloseCombatWeaponSaveData*>(p_Target) = s_Object;
}

void SCloseCombatWeaponSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCloseCombatWeaponSaveData*>(p_Object);

	STokenID::Serialize(&s_Object->_DFE2E88A, p_Serializer, p_OwnOffset + offsetof(SCloseCombatWeaponSaveData, _DFE2E88A));
}

bool SCloseCombatWeaponSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCloseCombatWeaponSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SCloseCombatWeaponSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCloseCombatWeaponSaveData::operator==(const SCloseCombatWeaponSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCloseCombatWeaponSaveData>)
		return false;

	if (_DFE2E88A != p_Other._DFE2E88A) return false;
	if (_C82C9569 != p_Other._C82C9569) return false;

	return true;
}

ZHMTypeInfo SItemSaveData::TypeInfo = ZHMTypeInfo("SItemSaveData", sizeof(SItemSaveData), alignof(SItemSaveData), SItemSaveData::WriteJson, SItemSaveData::WriteSimpleJson, SItemSaveData::FromSimpleJson, SItemSaveData::Serialize, SItemSaveData::Equals);

void SItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_DFE2E88A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STokenID") << ",\"$val\":";
	STokenID::WriteJson(&s_Object->_DFE2E88A, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_DFE2E88A") << ":";
	STokenID::WriteSimpleJson(&s_Object->_DFE2E88A, p_Stream);

	p_Stream << "}";
}

void SItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemSaveData s_Object {};

	{
		STokenID s_Item {};
		STokenID::FromSimpleJson(p_Document["_DFE2E88A"], &s_Item);
		s_Object._DFE2E88A = s_Item;
	}

	*reinterpret_cast<SItemSaveData*>(p_Target) = s_Object;
}

void SItemSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemSaveData*>(p_Object);

	STokenID::Serialize(&s_Object->_DFE2E88A, p_Serializer, p_OwnOffset + offsetof(SItemSaveData, _DFE2E88A));
}

bool SItemSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SItemSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SItemSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SItemSaveData::operator==(const SItemSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SItemSaveData>)
		return false;

	if (_DFE2E88A != p_Other._DFE2E88A) return false;

	return true;
}

ZHMTypeInfo SRangedWeaponSaveData::TypeInfo = ZHMTypeInfo("SRangedWeaponSaveData", sizeof(SRangedWeaponSaveData), alignof(SRangedWeaponSaveData), SRangedWeaponSaveData::WriteJson, SRangedWeaponSaveData::WriteSimpleJson, SRangedWeaponSaveData::FromSimpleJson, SRangedWeaponSaveData::Serialize, SRangedWeaponSaveData::Equals);

void SRangedWeaponSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRangedWeaponSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_DFE2E88A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STokenID") << ",\"$val\":";
	STokenID::WriteJson(&s_Object->_DFE2E88A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F6939C84") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_F6939C84);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B00640D9") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B00640D9);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_433E339A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<bool>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_433E339A.size(); ++i)
	{
		auto& s_Item0 = s_Object->_433E339A[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_433E339A.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SRangedWeaponSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRangedWeaponSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_DFE2E88A") << ":";
	STokenID::WriteSimpleJson(&s_Object->_DFE2E88A, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F6939C84") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_F6939C84);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B00640D9") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B00640D9);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_433E339A") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_433E339A.size(); ++i)
	{
		auto& s_Item0 = s_Object->_433E339A[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_433E339A.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SRangedWeaponSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRangedWeaponSaveData s_Object {};

	{
		STokenID s_Item {};
		STokenID::FromSimpleJson(p_Document["_DFE2E88A"], &s_Item);
		s_Object._DFE2E88A = s_Item;
	}

	s_Object._F6939C84 = simdjson::from_json_int32(p_Document["_F6939C84"]);

	s_Object._B00640D9 = simdjson::from_json_bool(p_Document["_B00640D9"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_433E339A"])
	{
		s_Object._433E339A.push_back(simdjson::from_json_bool(s_Item0));
	}

	*reinterpret_cast<SRangedWeaponSaveData*>(p_Target) = s_Object;
}

void SRangedWeaponSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRangedWeaponSaveData*>(p_Object);

	STokenID::Serialize(&s_Object->_DFE2E88A, p_Serializer, p_OwnOffset + offsetof(SRangedWeaponSaveData, _DFE2E88A));
	TArray<bool>::Serialize(&s_Object->_433E339A, p_Serializer, p_OwnOffset + offsetof(SRangedWeaponSaveData, _433E339A));
}

bool SRangedWeaponSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SRangedWeaponSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SRangedWeaponSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SRangedWeaponSaveData::operator==(const SRangedWeaponSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SRangedWeaponSaveData>)
		return false;

	if (_DFE2E88A != p_Other._DFE2E88A) return false;
	if (_F6939C84 != p_Other._F6939C84) return false;
	if (_B00640D9 != p_Other._B00640D9) return false;
	if (_433E339A != p_Other._433E339A) return false;

	return true;
}

ZHMTypeInfo SCheckpointSaveData::TypeInfo = ZHMTypeInfo("SCheckpointSaveData", sizeof(SCheckpointSaveData), alignof(SCheckpointSaveData), SCheckpointSaveData::WriteJson, SCheckpointSaveData::WriteSimpleJson, SCheckpointSaveData::FromSimpleJson, SCheckpointSaveData::Serialize, SCheckpointSaveData::Equals);

void SCheckpointSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCheckpointSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_B714BBE4") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B714BBE4);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_87B6A2FF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_87B6A2FF);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AD7C9C45") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_AD7C9C45);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AAD1A263") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STokenID") << ",\"$val\":";
	STokenID::WriteJson(&s_Object->_AAD1A263, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_79E8EE0C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_79E8EE0C);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A3682C66") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TFixedArray<uint32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_A3682C66.size(); ++i)
	{
		auto& s_Item0 = s_Object->_A3682C66[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_A3682C66.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_40DF8DEA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_40DF8DEA);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_57F16D6E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_57F16D6E);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F6EF6776") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<bool>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_F6EF6776.size(); ++i)
	{
		auto& s_Item0 = s_Object->_F6EF6776[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_F6EF6776.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F617FC96") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<float32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_F617FC96.size(); ++i)
	{
		auto& s_Item0 = s_Object->_F617FC96[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_F617FC96.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6C28792D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SItemSaveData>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_6C28792D.size(); ++i)
	{
		auto& s_Item0 = s_Object->_6C28792D[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SItemSaveData") << ",\"$val\":";
		SItemSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_6C28792D.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B14E7CA0") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SRangedWeaponSaveData>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B14E7CA0.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B14E7CA0[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SRangedWeaponSaveData") << ",\"$val\":";
		SRangedWeaponSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_B14E7CA0.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_694B8AEB") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SCloseCombatWeaponSaveData>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_694B8AEB.size(); ++i)
	{
		auto& s_Item0 = s_Object->_694B8AEB[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SCloseCombatWeaponSaveData") << ",\"$val\":";
		SCloseCombatWeaponSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_694B8AEB.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A01D27FD") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_A01D27FD);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4E143EF0") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_4E143EF0);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6441B4DD") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_6441B4DD);
	p_Stream << "}";

	p_Stream << "}";
}

void SCheckpointSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCheckpointSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_B714BBE4") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B714BBE4);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_87B6A2FF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_87B6A2FF);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AD7C9C45") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_AD7C9C45);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AAD1A263") << ":";
	STokenID::WriteSimpleJson(&s_Object->_AAD1A263, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_79E8EE0C") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_79E8EE0C);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A3682C66") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_A3682C66.size(); ++i)
	{
		auto& s_Item0 = s_Object->_A3682C66[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_A3682C66.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_40DF8DEA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_40DF8DEA);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_57F16D6E") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_57F16D6E);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F6EF6776") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_F6EF6776.size(); ++i)
	{
		auto& s_Item0 = s_Object->_F6EF6776[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_F6EF6776.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F617FC96") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_F617FC96.size(); ++i)
	{
		auto& s_Item0 = s_Object->_F617FC96[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_F617FC96.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6C28792D") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_6C28792D.size(); ++i)
	{
		auto& s_Item0 = s_Object->_6C28792D[i];
		SItemSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_6C28792D.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B14E7CA0") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B14E7CA0.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B14E7CA0[i];
		SRangedWeaponSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_B14E7CA0.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_694B8AEB") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_694B8AEB.size(); ++i)
	{
		auto& s_Item0 = s_Object->_694B8AEB[i];
		SCloseCombatWeaponSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_694B8AEB.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A01D27FD") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_A01D27FD);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4E143EF0") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_4E143EF0);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6441B4DD") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_6441B4DD);

	p_Stream << "}";
}

void SCheckpointSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCheckpointSaveData s_Object {};

	s_Object._B714BBE4 = simdjson::from_json_int32(p_Document["_B714BBE4"]);

	s_Object._87B6A2FF = simdjson::from_json_bool(p_Document["_87B6A2FF"]);

	s_Object._AD7C9C45 = simdjson::from_json_bool(p_Document["_AD7C9C45"]);

	{
		STokenID s_Item {};
		STokenID::FromSimpleJson(p_Document["_AAD1A263"], &s_Item);
		s_Object._AAD1A263 = s_Item;
	}

	s_Object._79E8EE0C = simdjson::from_json_int32(p_Document["_79E8EE0C"]);

	{
	size_t s_Index0 = 0;
	for (simdjson::ondemand::value s_Item0 : p_Document["_A3682C66"])
	{
		s_Object._A3682C66[s_Index0] = simdjson::from_json_uint32(s_Item0);
		++s_Index0;
	}
	}

	s_Object._40DF8DEA = simdjson::from_json_float32(p_Document["_40DF8DEA"]);

	s_Object._57F16D6E = simdjson::from_json_float32(p_Document["_57F16D6E"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_F6EF6776"])
	{
		s_Object._F6EF6776.push_back(simdjson::from_json_bool(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_F617FC96"])
	{
		s_Object._F617FC96.push_back(simdjson::from_json_float32(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_6C28792D"])
	{
		SItemSaveData s_ArrayItem0;
		SItemSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._6C28792D.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_B14E7CA0"])
	{
		SRangedWeaponSaveData s_ArrayItem0;
		SRangedWeaponSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._B14E7CA0.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_694B8AEB"])
	{
		SCloseCombatWeaponSaveData s_ArrayItem0;
		SCloseCombatWeaponSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._694B8AEB.push_back(s_ArrayItem0);
	}

	s_Object._A01D27FD = simdjson::from_json_int32(p_Document["_A01D27FD"]);

	s_Object._4E143EF0 = simdjson::from_json_bool(p_Document["_4E143EF0"]);

	s_Object._6441B4DD = simdjson::from_json_bool(p_Document["_6441B4DD"]);

	*reinterpret_cast<SCheckpointSaveData*>(p_Target) = s_Object;
}

void SCheckpointSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCheckpointSaveData*>(p_Object);

	STokenID::Serialize(&s_Object->_AAD1A263, p_Serializer, p_OwnOffset + offsetof(SCheckpointSaveData, _AAD1A263));
	TFixedArray<uint32, 8>::Serialize(&s_Object->_A3682C66, p_Serializer, p_OwnOffset + offsetof(SCheckpointSaveData, _A3682C66));
	TArray<bool>::Serialize(&s_Object->_F6EF6776, p_Serializer, p_OwnOffset + offsetof(SCheckpointSaveData, _F6EF6776));
	TArray<float32>::Serialize(&s_Object->_F617FC96, p_Serializer, p_OwnOffset + offsetof(SCheckpointSaveData, _F617FC96));
	TArray<SItemSaveData>::Serialize(&s_Object->_6C28792D, p_Serializer, p_OwnOffset + offsetof(SCheckpointSaveData, _6C28792D));
	TArray<SRangedWeaponSaveData>::Serialize(&s_Object->_B14E7CA0, p_Serializer, p_OwnOffset + offsetof(SCheckpointSaveData, _B14E7CA0));
	TArray<SCloseCombatWeaponSaveData>::Serialize(&s_Object->_694B8AEB, p_Serializer, p_OwnOffset + offsetof(SCheckpointSaveData, _694B8AEB));
}

bool SCheckpointSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCheckpointSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SCheckpointSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCheckpointSaveData::operator==(const SCheckpointSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCheckpointSaveData>)
		return false;

	if (_B714BBE4 != p_Other._B714BBE4) return false;
	if (_87B6A2FF != p_Other._87B6A2FF) return false;
	if (_AD7C9C45 != p_Other._AD7C9C45) return false;
	if (_AAD1A263 != p_Other._AAD1A263) return false;
	if (_79E8EE0C != p_Other._79E8EE0C) return false;
	if (_A3682C66 != p_Other._A3682C66) return false;
	if (_40DF8DEA != p_Other._40DF8DEA) return false;
	if (_57F16D6E != p_Other._57F16D6E) return false;
	if (_F6EF6776 != p_Other._F6EF6776) return false;
	if (_F617FC96 != p_Other._F617FC96) return false;
	if (_6C28792D != p_Other._6C28792D) return false;
	if (_B14E7CA0 != p_Other._B14E7CA0) return false;
	if (_694B8AEB != p_Other._694B8AEB) return false;
	if (_A01D27FD != p_Other._A01D27FD) return false;
	if (_4E143EF0 != p_Other._4E143EF0) return false;
	if (_6441B4DD != p_Other._6441B4DD) return false;

	return true;
}

ZHMTypeInfo float4::TypeInfo = ZHMTypeInfo("float4", sizeof(float4), alignof(float4), float4::WriteJson, float4::WriteSimpleJson, float4::FromSimpleJson, float4::Serialize, float4::Equals);

void float4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<float4*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_8CDC1683") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDC1683);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDB2615") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDB2615);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_62D277AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_62D277AF);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1C630B12") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_1C630B12);
	p_Stream << "}";

	p_Stream << "}";
}

void float4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<float4*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_8CDC1683") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDC1683);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDB2615") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDB2615);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_62D277AF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_62D277AF);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1C630B12") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_1C630B12);

	p_Stream << "}";
}

void float4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	float4 s_Object {};

	s_Object._8CDC1683 = simdjson::from_json_float32(p_Document["_8CDC1683"]);

	s_Object._FBDB2615 = simdjson::from_json_float32(p_Document["_FBDB2615"]);

	s_Object._62D277AF = simdjson::from_json_float32(p_Document["_62D277AF"]);

	s_Object._1C630B12 = simdjson::from_json_float32(p_Document["_1C630B12"]);

	*reinterpret_cast<float4*>(p_Target) = s_Object;
}

void float4::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<float4*>(p_Object);

}

bool float4::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<float4*>(p_Left);
	auto* s_Right = reinterpret_cast<float4*>(p_Right);

	return *s_Left == *s_Right;
}

bool float4::operator==(const float4& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<float4>)
		return false;

	if (_8CDC1683 != p_Other._8CDC1683) return false;
	if (_FBDB2615 != p_Other._FBDB2615) return false;
	if (_62D277AF != p_Other._62D277AF) return false;
	if (_1C630B12 != p_Other._1C630B12) return false;

	return true;
}

ZHMTypeInfo SCollidingParticle::TypeInfo = ZHMTypeInfo("SCollidingParticle", sizeof(SCollidingParticle), alignof(SCollidingParticle), SCollidingParticle::WriteJson, SCollidingParticle::WriteSimpleJson, SCollidingParticle::FromSimpleJson, SCollidingParticle::Serialize, SCollidingParticle::Equals);

void SCollidingParticle::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCollidingParticle*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_E1195483") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float4") << ",\"$val\":";
	float4::WriteJson(&s_Object->_E1195483, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_19ED66DF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float4") << ",\"$val\":";
	float4::WriteJson(&s_Object->_19ED66DF, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A81A0D87") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_A81A0D87);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EA119EDC") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_EA119EDC);
	p_Stream << "}";

	p_Stream << "}";
}

void SCollidingParticle::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCollidingParticle*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_E1195483") << ":";
	float4::WriteSimpleJson(&s_Object->_E1195483, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_19ED66DF") << ":";
	float4::WriteSimpleJson(&s_Object->_19ED66DF, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A81A0D87") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_A81A0D87);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EA119EDC") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_EA119EDC);

	p_Stream << "}";
}

void SCollidingParticle::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCollidingParticle s_Object {};

	{
		float4 s_Item {};
		float4::FromSimpleJson(p_Document["_E1195483"], &s_Item);
		s_Object._E1195483 = s_Item;
	}

	{
		float4 s_Item {};
		float4::FromSimpleJson(p_Document["_19ED66DF"], &s_Item);
		s_Object._19ED66DF = s_Item;
	}

	s_Object._A81A0D87 = simdjson::from_json_uint32(p_Document["_A81A0D87"]);

	s_Object._EA119EDC = simdjson::from_json_float32(p_Document["_EA119EDC"]);

	*reinterpret_cast<SCollidingParticle*>(p_Target) = s_Object;
}

void SCollidingParticle::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCollidingParticle*>(p_Object);

	float4::Serialize(&s_Object->_E1195483, p_Serializer, p_OwnOffset + offsetof(SCollidingParticle, _E1195483));
	float4::Serialize(&s_Object->_19ED66DF, p_Serializer, p_OwnOffset + offsetof(SCollidingParticle, _19ED66DF));
}

bool SCollidingParticle::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCollidingParticle*>(p_Left);
	auto* s_Right = reinterpret_cast<SCollidingParticle*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCollidingParticle::operator==(const SCollidingParticle& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCollidingParticle>)
		return false;

	if (_E1195483 != p_Other._E1195483) return false;
	if (_19ED66DF != p_Other._19ED66DF) return false;
	if (_A81A0D87 != p_Other._A81A0D87) return false;
	if (_EA119EDC != p_Other._EA119EDC) return false;

	return true;
}

ZHMTypeInfo SColorRGB::TypeInfo = ZHMTypeInfo("SColorRGB", sizeof(SColorRGB), alignof(SColorRGB), SColorRGB::WriteJson, SColorRGB::WriteSimpleJson, SColorRGB::FromSimpleJson, SColorRGB::Serialize, SColorRGB::Equals);

void SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_6C09FF9D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_6C09FF9D);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_01D41B76") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_01D41B76);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71BEEFF9") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_71BEEFF9);
	p_Stream << "}";

	p_Stream << "}";
}

void SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_6C09FF9D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_6C09FF9D);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_01D41B76") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_01D41B76);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71BEEFF9") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_71BEEFF9);

	p_Stream << "}";
}

void SColorRGB::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SColorRGB s_Object {};

	s_Object._6C09FF9D = simdjson::from_json_float32(p_Document["_6C09FF9D"]);

	s_Object._01D41B76 = simdjson::from_json_float32(p_Document["_01D41B76"]);

	s_Object._71BEEFF9 = simdjson::from_json_float32(p_Document["_71BEEFF9"]);

	*reinterpret_cast<SColorRGB*>(p_Target) = s_Object;
}

void SColorRGB::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SColorRGB*>(p_Object);

}

bool SColorRGB::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SColorRGB*>(p_Left);
	auto* s_Right = reinterpret_cast<SColorRGB*>(p_Right);

	return *s_Left == *s_Right;
}

bool SColorRGB::operator==(const SColorRGB& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SColorRGB>)
		return false;

	if (_6C09FF9D != p_Other._6C09FF9D) return false;
	if (_01D41B76 != p_Other._01D41B76) return false;
	if (_71BEEFF9 != p_Other._71BEEFF9) return false;

	return true;
}

ZHMTypeInfo SColorRGBA::TypeInfo = ZHMTypeInfo("SColorRGBA", sizeof(SColorRGBA), alignof(SColorRGBA), SColorRGBA::WriteJson, SColorRGBA::WriteSimpleJson, SColorRGBA::FromSimpleJson, SColorRGBA::Serialize, SColorRGBA::Equals);

void SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_6C09FF9D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_6C09FF9D);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_01D41B76") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_01D41B76);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71BEEFF9") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_71BEEFF9);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E8B7BE43") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_E8B7BE43);
	p_Stream << "}";

	p_Stream << "}";
}

void SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_6C09FF9D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_6C09FF9D);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_01D41B76") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_01D41B76);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71BEEFF9") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_71BEEFF9);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E8B7BE43") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_E8B7BE43);

	p_Stream << "}";
}

void SColorRGBA::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SColorRGBA s_Object {};

	s_Object._6C09FF9D = simdjson::from_json_float32(p_Document["_6C09FF9D"]);

	s_Object._01D41B76 = simdjson::from_json_float32(p_Document["_01D41B76"]);

	s_Object._71BEEFF9 = simdjson::from_json_float32(p_Document["_71BEEFF9"]);

	s_Object._E8B7BE43 = simdjson::from_json_float32(p_Document["_E8B7BE43"]);

	*reinterpret_cast<SColorRGBA*>(p_Target) = s_Object;
}

void SColorRGBA::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SColorRGBA*>(p_Object);

}

bool SColorRGBA::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SColorRGBA*>(p_Left);
	auto* s_Right = reinterpret_cast<SColorRGBA*>(p_Right);

	return *s_Left == *s_Right;
}

bool SColorRGBA::operator==(const SColorRGBA& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SColorRGBA>)
		return false;

	if (_6C09FF9D != p_Other._6C09FF9D) return false;
	if (_01D41B76 != p_Other._01D41B76) return false;
	if (_71BEEFF9 != p_Other._71BEEFF9) return false;
	if (_E8B7BE43 != p_Other._E8B7BE43) return false;

	return true;
}

ZHMTypeInfo ZBehaviorTreeVariable::TypeInfo = ZHMTypeInfo("ZBehaviorTreeVariable", sizeof(ZBehaviorTreeVariable), alignof(ZBehaviorTreeVariable), ZBehaviorTreeVariable::WriteJson, ZBehaviorTreeVariable::WriteSimpleJson, ZBehaviorTreeVariable::FromSimpleJson, ZBehaviorTreeVariable::Serialize, ZBehaviorTreeVariable::Equals);

void ZBehaviorTreeVariable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZBehaviorTreeVariable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZBehaviorTreeVariable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZBehaviorTreeVariable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZBehaviorTreeVariable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZBehaviorTreeVariable s_Object {};

	*reinterpret_cast<ZBehaviorTreeVariable*>(p_Target) = s_Object;
}

void ZBehaviorTreeVariable::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZBehaviorTreeVariable*>(p_Object);

}

bool ZBehaviorTreeVariable::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZBehaviorTreeVariable*>(p_Left);
	auto* s_Right = reinterpret_cast<ZBehaviorTreeVariable*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZBehaviorTreeVariable::operator==(const ZBehaviorTreeVariable& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZBehaviorTreeVariable>)
		return false;


	return true;
}

ZHMTypeInfo SConditionBase::TypeInfo = ZHMTypeInfo("SConditionBase", sizeof(SConditionBase), alignof(SConditionBase), SConditionBase::WriteJson, SConditionBase::WriteSimpleJson, SConditionBase::FromSimpleJson, SConditionBase::Serialize, SConditionBase::Equals);

void SConditionBase::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConditionBase*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_4D167DA0") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ECompiledConditionType") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_4D167DA0)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ECompiledConditionType", static_cast<int>(s_Object->_4D167DA0))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4C7AD911") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_4C7AD911);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5A1512A0") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZBehaviorTreeVariable") << ",\"$val\":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->_5A1512A0, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SConditionBase::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConditionBase*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_4D167DA0") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ECompiledConditionType", static_cast<int>(s_Object->_4D167DA0)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4C7AD911") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_4C7AD911);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5A1512A0") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->_5A1512A0, p_Stream);

	p_Stream << "}";
}

void SConditionBase::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SConditionBase s_Object {};

	s_Object._4D167DA0 = static_cast<ECompiledConditionType>(ZHMEnums::GetEnumValueByName("ECompiledConditionType", std::string_view(p_Document["_4D167DA0"])));

	s_Object._4C7AD911 = simdjson::from_json_uint32(p_Document["_4C7AD911"]);

	{
		ZBehaviorTreeVariable s_Item {};
		ZBehaviorTreeVariable::FromSimpleJson(p_Document["_5A1512A0"], &s_Item);
		s_Object._5A1512A0 = s_Item;
	}

	*reinterpret_cast<SConditionBase*>(p_Target) = s_Object;
}

void SConditionBase::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SConditionBase*>(p_Object);

	ZBehaviorTreeVariable::Serialize(&s_Object->_5A1512A0, p_Serializer, p_OwnOffset + offsetof(SConditionBase, _5A1512A0));
}

bool SConditionBase::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SConditionBase*>(p_Left);
	auto* s_Right = reinterpret_cast<SConditionBase*>(p_Right);

	return *s_Left == *s_Right;
}

bool SConditionBase::operator==(const SConditionBase& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SConditionBase>)
		return false;

	if (_4D167DA0 != p_Other._4D167DA0) return false;
	if (_4C7AD911 != p_Other._4C7AD911) return false;
	if (_5A1512A0 != p_Other._5A1512A0) return false;

	return true;
}

ZHMTypeInfo SContentKitBaseState::TypeInfo = ZHMTypeInfo("SContentKitBaseState", sizeof(SContentKitBaseState), alignof(SContentKitBaseState), SContentKitBaseState::WriteJson, SContentKitBaseState::WriteSimpleJson, SContentKitBaseState::FromSimpleJson, SContentKitBaseState::Serialize, SContentKitBaseState::Equals);

void SContentKitBaseState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContentKitBaseState*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_16021251") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint8") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_16021251);
	p_Stream << "}";

	p_Stream << "}";
}

void SContentKitBaseState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContentKitBaseState*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_16021251") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_16021251);

	p_Stream << "}";
}

void SContentKitBaseState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContentKitBaseState s_Object {};

	s_Object._16021251 = simdjson::from_json_uint8(p_Document["_16021251"]);

	*reinterpret_cast<SContentKitBaseState*>(p_Target) = s_Object;
}

void SContentKitBaseState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SContentKitBaseState*>(p_Object);

}

bool SContentKitBaseState::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SContentKitBaseState*>(p_Left);
	auto* s_Right = reinterpret_cast<SContentKitBaseState*>(p_Right);

	return *s_Left == *s_Right;
}

bool SContentKitBaseState::operator==(const SContentKitBaseState& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SContentKitBaseState>)
		return false;

	if (_16021251 != p_Other._16021251) return false;

	return true;
}

ZHMTypeInfo SContractUnlockStatus::TypeInfo = ZHMTypeInfo("SContractUnlockStatus", sizeof(SContractUnlockStatus), alignof(SContractUnlockStatus), SContractUnlockStatus::WriteJson, SContractUnlockStatus::WriteSimpleJson, SContractUnlockStatus::FromSimpleJson, SContractUnlockStatus::Serialize, SContractUnlockStatus::Equals);

void SContractUnlockStatus::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractUnlockStatus*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_09C31EA4") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_09C31EA4);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9361233F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ELevelIndex") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_9361233F)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_9361233F))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3BD872AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_3BD872AF);
	p_Stream << "}";

	p_Stream << "}";
}

void SContractUnlockStatus::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractUnlockStatus*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_09C31EA4") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_09C31EA4);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9361233F") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_9361233F)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3BD872AF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_3BD872AF);

	p_Stream << "}";
}

void SContractUnlockStatus::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContractUnlockStatus s_Object {};

	s_Object._09C31EA4 = simdjson::from_json_bool(p_Document["_09C31EA4"]);

	s_Object._9361233F = static_cast<ELevelIndex>(ZHMEnums::GetEnumValueByName("ELevelIndex", std::string_view(p_Document["_9361233F"])));

	s_Object._3BD872AF = simdjson::from_json_int32(p_Document["_3BD872AF"]);

	*reinterpret_cast<SContractUnlockStatus*>(p_Target) = s_Object;
}

void SContractUnlockStatus::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SContractUnlockStatus*>(p_Object);

}

bool SContractUnlockStatus::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SContractUnlockStatus*>(p_Left);
	auto* s_Right = reinterpret_cast<SContractUnlockStatus*>(p_Right);

	return *s_Left == *s_Right;
}

bool SContractUnlockStatus::operator==(const SContractUnlockStatus& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SContractUnlockStatus>)
		return false;

	if (_09C31EA4 != p_Other._09C31EA4) return false;
	if (_9361233F != p_Other._9361233F) return false;
	if (_3BD872AF != p_Other._3BD872AF) return false;

	return true;
}

ZHMTypeInfo SContractSaveData::TypeInfo = ZHMTypeInfo("SContractSaveData", sizeof(SContractSaveData), alignof(SContractSaveData), SContractSaveData::WriteJson, SContractSaveData::WriteSimpleJson, SContractSaveData::FromSimpleJson, SContractSaveData::Serialize, SContractSaveData::Equals);

void SContractSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_C8FF2BBE") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_C8FF2BBE);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5685F5AA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SContractUnlockStatus>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_5685F5AA.size(); ++i)
	{
		auto& s_Item0 = s_Object->_5685F5AA[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SContractUnlockStatus") << ",\"$val\":";
		SContractUnlockStatus::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_5685F5AA.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SContractSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_C8FF2BBE") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_C8FF2BBE);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5685F5AA") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_5685F5AA.size(); ++i)
	{
		auto& s_Item0 = s_Object->_5685F5AA[i];
		SContractUnlockStatus::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_5685F5AA.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SContractSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContractSaveData s_Object {};

	s_Object._C8FF2BBE = simdjson::from_json_bool(p_Document["_C8FF2BBE"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_5685F5AA"])
	{
		SContractUnlockStatus s_ArrayItem0;
		SContractUnlockStatus::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._5685F5AA.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SContractSaveData*>(p_Target) = s_Object;
}

void SContractSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SContractSaveData*>(p_Object);

	TArray<SContractUnlockStatus>::Serialize(&s_Object->_5685F5AA, p_Serializer, p_OwnOffset + offsetof(SContractSaveData, _5685F5AA));
}

bool SContractSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SContractSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SContractSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SContractSaveData::operator==(const SContractSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SContractSaveData>)
		return false;

	if (_C8FF2BBE != p_Other._C8FF2BBE) return false;
	if (_5685F5AA != p_Other._5685F5AA) return false;

	return true;
}

ZHMTypeInfo SEntityTemplateProperty::TypeInfo = ZHMTypeInfo("SEntityTemplateProperty", sizeof(SEntityTemplateProperty), alignof(SEntityTemplateProperty), SEntityTemplateProperty::WriteJson, SEntityTemplateProperty::WriteSimpleJson, SEntityTemplateProperty::FromSimpleJson, SEntityTemplateProperty::Serialize, SEntityTemplateProperty::Equals);

void SEntityTemplateProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_DF9B3B62") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_DF9B3B62);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1D775834") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZVariant") << ",\"$val\":";
	ZVariant::WriteJson(&s_Object->_1D775834, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_DF9B3B62") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_DF9B3B62);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1D775834") << ":";
	ZVariant::WriteSimpleJson(&s_Object->_1D775834, p_Stream);

	p_Stream << "}";
}

void SEntityTemplateProperty::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateProperty s_Object {};

	s_Object._DF9B3B62 = simdjson::from_json_uint32(p_Document["_DF9B3B62"]);

	{
		ZVariant s_Item {};
		ZVariant::FromSimpleJson(p_Document["_1D775834"], &s_Item);
		s_Object._1D775834 = s_Item;
	}

	*reinterpret_cast<SEntityTemplateProperty*>(p_Target) = s_Object;
}

void SEntityTemplateProperty::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateProperty*>(p_Object);

	ZVariant::Serialize(&s_Object->_1D775834, p_Serializer, p_OwnOffset + offsetof(SEntityTemplateProperty, _1D775834));
}

bool SEntityTemplateProperty::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SEntityTemplateProperty*>(p_Left);
	auto* s_Right = reinterpret_cast<SEntityTemplateProperty*>(p_Right);

	return *s_Left == *s_Right;
}

bool SEntityTemplateProperty::operator==(const SEntityTemplateProperty& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SEntityTemplateProperty>)
		return false;

	if (_DF9B3B62 != p_Other._DF9B3B62) return false;
	if (_1D775834 != p_Other._1D775834) return false;

	return true;
}

ZHMTypeInfo SCppEntity::TypeInfo = ZHMTypeInfo("SCppEntity", sizeof(SCppEntity), alignof(SCppEntity), SCppEntity::WriteJson, SCppEntity::WriteSimpleJson, SCppEntity::FromSimpleJson, SCppEntity::Serialize, SCppEntity::Equals);

void SCppEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_891D57ED") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_891D57ED);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71206441") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SEntityTemplateProperty>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_71206441.size(); ++i)
	{
		auto& s_Item0 = s_Object->_71206441[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SEntityTemplateProperty") << ",\"$val\":";
		SEntityTemplateProperty::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_71206441.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCppEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_891D57ED") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_891D57ED);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71206441") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_71206441.size(); ++i)
	{
		auto& s_Item0 = s_Object->_71206441[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_71206441.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCppEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCppEntity s_Object {};

	s_Object._891D57ED = simdjson::from_json_int32(p_Document["_891D57ED"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_71206441"])
	{
		SEntityTemplateProperty s_ArrayItem0;
		SEntityTemplateProperty::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._71206441.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCppEntity*>(p_Target) = s_Object;
}

void SCppEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCppEntity*>(p_Object);

	TArray<SEntityTemplateProperty>::Serialize(&s_Object->_71206441, p_Serializer, p_OwnOffset + offsetof(SCppEntity, _71206441));
}

bool SCppEntity::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCppEntity*>(p_Left);
	auto* s_Right = reinterpret_cast<SCppEntity*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCppEntity::operator==(const SCppEntity& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCppEntity>)
		return false;

	if (_891D57ED != p_Other._891D57ED) return false;
	if (_71206441 != p_Other._71206441) return false;

	return true;
}

ZHMTypeInfo SCppEntitySubsetInfo::TypeInfo = ZHMTypeInfo("SCppEntitySubsetInfo", sizeof(SCppEntitySubsetInfo), alignof(SCppEntitySubsetInfo), SCppEntitySubsetInfo::WriteJson, SCppEntitySubsetInfo::WriteSimpleJson, SCppEntitySubsetInfo::FromSimpleJson, SCppEntitySubsetInfo::Serialize, SCppEntitySubsetInfo::Equals);

void SCppEntitySubsetInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntitySubsetInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_5E237E06") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_5E237E06);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_8CDE5729") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TypeID") << ",\"$val\":";
	TypeID::WriteJson(&s_Object->_8CDE5729, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0B0541BA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_0B0541BA);
	p_Stream << "}";

	p_Stream << "}";
}

void SCppEntitySubsetInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntitySubsetInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_5E237E06") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_5E237E06);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_8CDE5729") << ":";
	TypeID::WriteSimpleJson(&s_Object->_8CDE5729, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0B0541BA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_0B0541BA);

	p_Stream << "}";
}

void SCppEntitySubsetInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCppEntitySubsetInfo s_Object {};

	s_Object._5E237E06 = std::string_view(p_Document["_5E237E06"]);

	{
		TypeID s_Item {};
		TypeID::FromSimpleJson(p_Document["_8CDE5729"], &s_Item);
		s_Object._8CDE5729 = s_Item;
	}

	s_Object._0B0541BA = simdjson::from_json_uint32(p_Document["_0B0541BA"]);

	*reinterpret_cast<SCppEntitySubsetInfo*>(p_Target) = s_Object;
}

void SCppEntitySubsetInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCppEntitySubsetInfo*>(p_Object);

	ZString::Serialize(&s_Object->_5E237E06, p_Serializer, p_OwnOffset + offsetof(SCppEntitySubsetInfo, _5E237E06));
	TypeID::Serialize(&s_Object->_8CDE5729, p_Serializer, p_OwnOffset + offsetof(SCppEntitySubsetInfo, _8CDE5729));
}

bool SCppEntitySubsetInfo::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCppEntitySubsetInfo*>(p_Left);
	auto* s_Right = reinterpret_cast<SCppEntitySubsetInfo*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCppEntitySubsetInfo::operator==(const SCppEntitySubsetInfo& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCppEntitySubsetInfo>)
		return false;

	if (_5E237E06 != p_Other._5E237E06) return false;
	if (_8CDE5729 != p_Other._8CDE5729) return false;
	if (_0B0541BA != p_Other._0B0541BA) return false;

	return true;
}

ZHMTypeInfo SCppEntityBlueprint::TypeInfo = ZHMTypeInfo("SCppEntityBlueprint", sizeof(SCppEntityBlueprint), alignof(SCppEntityBlueprint), SCppEntityBlueprint::WriteJson, SCppEntityBlueprint::WriteSimpleJson, SCppEntityBlueprint::FromSimpleJson, SCppEntityBlueprint::Serialize, SCppEntityBlueprint::Equals);

void SCppEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_B16D2E23") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TypeID") << ",\"$val\":";
	TypeID::WriteJson(&s_Object->_B16D2E23, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4D38375A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SCppEntitySubsetInfo>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_4D38375A.size(); ++i)
	{
		auto& s_Item0 = s_Object->_4D38375A[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SCppEntitySubsetInfo") << ",\"$val\":";
		SCppEntitySubsetInfo::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_4D38375A.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCppEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_B16D2E23") << ":";
	TypeID::WriteSimpleJson(&s_Object->_B16D2E23, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4D38375A") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_4D38375A.size(); ++i)
	{
		auto& s_Item0 = s_Object->_4D38375A[i];
		SCppEntitySubsetInfo::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_4D38375A.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCppEntityBlueprint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCppEntityBlueprint s_Object {};

	{
		TypeID s_Item {};
		TypeID::FromSimpleJson(p_Document["_B16D2E23"], &s_Item);
		s_Object._B16D2E23 = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_4D38375A"])
	{
		SCppEntitySubsetInfo s_ArrayItem0;
		SCppEntitySubsetInfo::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._4D38375A.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCppEntityBlueprint*>(p_Target) = s_Object;
}

void SCppEntityBlueprint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCppEntityBlueprint*>(p_Object);

	TypeID::Serialize(&s_Object->_B16D2E23, p_Serializer, p_OwnOffset + offsetof(SCppEntityBlueprint, _B16D2E23));
	TArray<SCppEntitySubsetInfo>::Serialize(&s_Object->_4D38375A, p_Serializer, p_OwnOffset + offsetof(SCppEntityBlueprint, _4D38375A));
}

bool SCppEntityBlueprint::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCppEntityBlueprint*>(p_Left);
	auto* s_Right = reinterpret_cast<SCppEntityBlueprint*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCppEntityBlueprint::operator==(const SCppEntityBlueprint& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCppEntityBlueprint>)
		return false;

	if (_B16D2E23 != p_Other._B16D2E23) return false;
	if (_4D38375A != p_Other._4D38375A) return false;

	return true;
}

ZHMTypeInfo SCppEntityTemplate::TypeInfo = ZHMTypeInfo("SCppEntityTemplate", sizeof(SCppEntityTemplate), alignof(SCppEntityTemplate), SCppEntityTemplate::WriteJson, SCppEntityTemplate::WriteSimpleJson, SCppEntityTemplate::FromSimpleJson, SCppEntityTemplate::Serialize, SCppEntityTemplate::Equals);

void SCppEntityTemplate::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntityTemplate*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_5F09C136") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_5F09C136);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B16D2E23") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TypeID") << ",\"$val\":";
	TypeID::WriteJson(&s_Object->_B16D2E23, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71206441") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SEntityTemplateProperty>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_71206441.size(); ++i)
	{
		auto& s_Item0 = s_Object->_71206441[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SEntityTemplateProperty") << ",\"$val\":";
		SEntityTemplateProperty::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_71206441.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4D38375A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SCppEntitySubsetInfo>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_4D38375A.size(); ++i)
	{
		auto& s_Item0 = s_Object->_4D38375A[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SCppEntitySubsetInfo") << ",\"$val\":";
		SCppEntitySubsetInfo::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_4D38375A.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCppEntityTemplate::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntityTemplate*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_5F09C136") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_5F09C136);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B16D2E23") << ":";
	TypeID::WriteSimpleJson(&s_Object->_B16D2E23, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71206441") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_71206441.size(); ++i)
	{
		auto& s_Item0 = s_Object->_71206441[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_71206441.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4D38375A") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_4D38375A.size(); ++i)
	{
		auto& s_Item0 = s_Object->_4D38375A[i];
		SCppEntitySubsetInfo::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_4D38375A.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCppEntityTemplate::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCppEntityTemplate s_Object {};

	s_Object._5F09C136 = std::string_view(p_Document["_5F09C136"]);

	{
		TypeID s_Item {};
		TypeID::FromSimpleJson(p_Document["_B16D2E23"], &s_Item);
		s_Object._B16D2E23 = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_71206441"])
	{
		SEntityTemplateProperty s_ArrayItem0;
		SEntityTemplateProperty::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._71206441.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_4D38375A"])
	{
		SCppEntitySubsetInfo s_ArrayItem0;
		SCppEntitySubsetInfo::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._4D38375A.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCppEntityTemplate*>(p_Target) = s_Object;
}

void SCppEntityTemplate::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCppEntityTemplate*>(p_Object);

	ZString::Serialize(&s_Object->_5F09C136, p_Serializer, p_OwnOffset + offsetof(SCppEntityTemplate, _5F09C136));
	TypeID::Serialize(&s_Object->_B16D2E23, p_Serializer, p_OwnOffset + offsetof(SCppEntityTemplate, _B16D2E23));
	TArray<SEntityTemplateProperty>::Serialize(&s_Object->_71206441, p_Serializer, p_OwnOffset + offsetof(SCppEntityTemplate, _71206441));
	TArray<SCppEntitySubsetInfo>::Serialize(&s_Object->_4D38375A, p_Serializer, p_OwnOffset + offsetof(SCppEntityTemplate, _4D38375A));
}

bool SCppEntityTemplate::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCppEntityTemplate*>(p_Left);
	auto* s_Right = reinterpret_cast<SCppEntityTemplate*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCppEntityTemplate::operator==(const SCppEntityTemplate& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCppEntityTemplate>)
		return false;

	if (_5F09C136 != p_Other._5F09C136) return false;
	if (_B16D2E23 != p_Other._B16D2E23) return false;
	if (_71206441 != p_Other._71206441) return false;
	if (_4D38375A != p_Other._4D38375A) return false;

	return true;
}

ZHMTypeInfo SCrowdCells::TypeInfo = ZHMTypeInfo("SCrowdCells", sizeof(SCrowdCells), alignof(SCrowdCells), SCrowdCells::WriteJson, SCrowdCells::WriteSimpleJson, SCrowdCells::FromSimpleJson, SCrowdCells::Serialize, SCrowdCells::Equals);

void SCrowdCells::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdCells*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_193674BC") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TFixedArray<uint8>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_193674BC.size(); ++i)
	{
		auto& s_Item0 = s_Object->_193674BC[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("uint8") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_193674BC.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdCells::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdCells*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_193674BC") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_193674BC.size(); ++i)
	{
		auto& s_Item0 = s_Object->_193674BC[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_193674BC.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdCells::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdCells s_Object {};

	{
	size_t s_Index0 = 0;
	for (simdjson::ondemand::value s_Item0 : p_Document["_193674BC"])
	{
		s_Object._193674BC[s_Index0] = simdjson::from_json_uint8(s_Item0);
		++s_Index0;
	}
	}

	*reinterpret_cast<SCrowdCells*>(p_Target) = s_Object;
}

void SCrowdCells::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdCells*>(p_Object);

	TFixedArray<uint8, 128>::Serialize(&s_Object->_193674BC, p_Serializer, p_OwnOffset + offsetof(SCrowdCells, _193674BC));
}

bool SCrowdCells::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCrowdCells*>(p_Left);
	auto* s_Right = reinterpret_cast<SCrowdCells*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCrowdCells::operator==(const SCrowdCells& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCrowdCells>)
		return false;

	if (_193674BC != p_Other._193674BC) return false;

	return true;
}

ZHMTypeInfo SCrowdFlowChannel::TypeInfo = ZHMTypeInfo("SCrowdFlowChannel", sizeof(SCrowdFlowChannel), alignof(SCrowdFlowChannel), SCrowdFlowChannel::WriteJson, SCrowdFlowChannel::WriteSimpleJson, SCrowdFlowChannel::FromSimpleJson, SCrowdFlowChannel::Serialize, SCrowdFlowChannel::Equals);

void SCrowdFlowChannel::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdFlowChannel*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_090A18A1") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<uint8>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_090A18A1.size(); ++i)
	{
		auto& s_Item0 = s_Object->_090A18A1[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("uint8") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_090A18A1.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7B24AA84") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<uint16>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_7B24AA84.size(); ++i)
	{
		auto& s_Item0 = s_Object->_7B24AA84[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("uint16") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_7B24AA84.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdFlowChannel::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdFlowChannel*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_090A18A1") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_090A18A1.size(); ++i)
	{
		auto& s_Item0 = s_Object->_090A18A1[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_090A18A1.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7B24AA84") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_7B24AA84.size(); ++i)
	{
		auto& s_Item0 = s_Object->_7B24AA84[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_7B24AA84.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdFlowChannel::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdFlowChannel s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_090A18A1"])
	{
		s_Object._090A18A1.push_back(simdjson::from_json_uint8(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_7B24AA84"])
	{
		s_Object._7B24AA84.push_back(simdjson::from_json_uint16(s_Item0));
	}

	*reinterpret_cast<SCrowdFlowChannel*>(p_Target) = s_Object;
}

void SCrowdFlowChannel::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdFlowChannel*>(p_Object);

	TArray<uint8>::Serialize(&s_Object->_090A18A1, p_Serializer, p_OwnOffset + offsetof(SCrowdFlowChannel, _090A18A1));
	TArray<uint16>::Serialize(&s_Object->_7B24AA84, p_Serializer, p_OwnOffset + offsetof(SCrowdFlowChannel, _7B24AA84));
}

bool SCrowdFlowChannel::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCrowdFlowChannel*>(p_Left);
	auto* s_Right = reinterpret_cast<SCrowdFlowChannel*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCrowdFlowChannel::operator==(const SCrowdFlowChannel& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCrowdFlowChannel>)
		return false;

	if (_090A18A1 != p_Other._090A18A1) return false;
	if (_7B24AA84 != p_Other._7B24AA84) return false;

	return true;
}

ZHMTypeInfo SMatrix::TypeInfo = ZHMTypeInfo("SMatrix", sizeof(SMatrix), alignof(SMatrix), SMatrix::WriteJson, SMatrix::WriteSimpleJson, SMatrix::FromSimpleJson, SMatrix::Serialize, SMatrix::Equals);

void SMatrix::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_CA3885CF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float4") << ",\"$val\":";
	float4::WriteJson(&s_Object->_CA3885CF, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F758AC7F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float4") << ",\"$val\":";
	float4::WriteJson(&s_Object->_F758AC7F, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B0F8D6AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float4") << ",\"$val\":";
	float4::WriteJson(&s_Object->_B0F8D6AF, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B1E031B9") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float4") << ",\"$val\":";
	float4::WriteJson(&s_Object->_B1E031B9, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_CA3885CF") << ":";
	float4::WriteSimpleJson(&s_Object->_CA3885CF, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F758AC7F") << ":";
	float4::WriteSimpleJson(&s_Object->_F758AC7F, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B0F8D6AF") << ":";
	float4::WriteSimpleJson(&s_Object->_B0F8D6AF, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B1E031B9") << ":";
	float4::WriteSimpleJson(&s_Object->_B1E031B9, p_Stream);

	p_Stream << "}";
}

void SMatrix::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix s_Object {};

	{
		float4 s_Item {};
		float4::FromSimpleJson(p_Document["_CA3885CF"], &s_Item);
		s_Object._CA3885CF = s_Item;
	}

	{
		float4 s_Item {};
		float4::FromSimpleJson(p_Document["_F758AC7F"], &s_Item);
		s_Object._F758AC7F = s_Item;
	}

	{
		float4 s_Item {};
		float4::FromSimpleJson(p_Document["_B0F8D6AF"], &s_Item);
		s_Object._B0F8D6AF = s_Item;
	}

	{
		float4 s_Item {};
		float4::FromSimpleJson(p_Document["_B1E031B9"], &s_Item);
		s_Object._B1E031B9 = s_Item;
	}

	*reinterpret_cast<SMatrix*>(p_Target) = s_Object;
}

void SMatrix::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMatrix*>(p_Object);

	float4::Serialize(&s_Object->_CA3885CF, p_Serializer, p_OwnOffset + offsetof(SMatrix, _CA3885CF));
	float4::Serialize(&s_Object->_F758AC7F, p_Serializer, p_OwnOffset + offsetof(SMatrix, _F758AC7F));
	float4::Serialize(&s_Object->_B0F8D6AF, p_Serializer, p_OwnOffset + offsetof(SMatrix, _B0F8D6AF));
	float4::Serialize(&s_Object->_B1E031B9, p_Serializer, p_OwnOffset + offsetof(SMatrix, _B1E031B9));
}

bool SMatrix::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SMatrix*>(p_Left);
	auto* s_Right = reinterpret_cast<SMatrix*>(p_Right);

	return *s_Left == *s_Right;
}

bool SMatrix::operator==(const SMatrix& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SMatrix>)
		return false;

	if (_CA3885CF != p_Other._CA3885CF) return false;
	if (_F758AC7F != p_Other._F758AC7F) return false;
	if (_B0F8D6AF != p_Other._B0F8D6AF) return false;
	if (_B1E031B9 != p_Other._B1E031B9) return false;

	return true;
}

ZHMTypeInfo SVector4::TypeInfo = ZHMTypeInfo("SVector4", sizeof(SVector4), alignof(SVector4), SVector4::WriteJson, SVector4::WriteSimpleJson, SVector4::FromSimpleJson, SVector4::Serialize, SVector4::Equals);

void SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_8CDC1683") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDC1683);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDB2615") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDB2615);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_62D277AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_62D277AF);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1C630B12") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_1C630B12);
	p_Stream << "}";

	p_Stream << "}";
}

void SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_8CDC1683") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDC1683);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDB2615") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDB2615);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_62D277AF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_62D277AF);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1C630B12") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_1C630B12);

	p_Stream << "}";
}

void SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVector4 s_Object {};

	s_Object._8CDC1683 = simdjson::from_json_float32(p_Document["_8CDC1683"]);

	s_Object._FBDB2615 = simdjson::from_json_float32(p_Document["_FBDB2615"]);

	s_Object._62D277AF = simdjson::from_json_float32(p_Document["_62D277AF"]);

	s_Object._1C630B12 = simdjson::from_json_float32(p_Document["_1C630B12"]);

	*reinterpret_cast<SVector4*>(p_Target) = s_Object;
}

void SVector4::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVector4*>(p_Object);

}

bool SVector4::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SVector4*>(p_Left);
	auto* s_Right = reinterpret_cast<SVector4*>(p_Right);

	return *s_Left == *s_Right;
}

bool SVector4::operator==(const SVector4& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SVector4>)
		return false;

	if (_8CDC1683 != p_Other._8CDC1683) return false;
	if (_FBDB2615 != p_Other._FBDB2615) return false;
	if (_62D277AF != p_Other._62D277AF) return false;
	if (_1C630B12 != p_Other._1C630B12) return false;

	return true;
}

ZHMTypeInfo ZCrowdGridPoint::TypeInfo = ZHMTypeInfo("ZCrowdGridPoint", sizeof(ZCrowdGridPoint), alignof(ZCrowdGridPoint), ZCrowdGridPoint::WriteJson, ZCrowdGridPoint::WriteSimpleJson, ZCrowdGridPoint::FromSimpleJson, ZCrowdGridPoint::Serialize, ZCrowdGridPoint::Equals);

void ZCrowdGridPoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCrowdGridPoint*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_1A38845D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int16") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_1A38845D);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2352A656") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint8") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_2352A656);
	p_Stream << "}";

	p_Stream << "}";
}

void ZCrowdGridPoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCrowdGridPoint*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_1A38845D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_1A38845D);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2352A656") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_2352A656);

	p_Stream << "}";
}

void ZCrowdGridPoint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZCrowdGridPoint s_Object {};

	s_Object._1A38845D = simdjson::from_json_int16(p_Document["_1A38845D"]);

	s_Object._2352A656 = simdjson::from_json_uint8(p_Document["_2352A656"]);

	*reinterpret_cast<ZCrowdGridPoint*>(p_Target) = s_Object;
}

void ZCrowdGridPoint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZCrowdGridPoint*>(p_Object);

}

bool ZCrowdGridPoint::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZCrowdGridPoint*>(p_Left);
	auto* s_Right = reinterpret_cast<ZCrowdGridPoint*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZCrowdGridPoint::operator==(const ZCrowdGridPoint& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZCrowdGridPoint>)
		return false;

	if (_1A38845D != p_Other._1A38845D) return false;
	if (_2352A656 != p_Other._2352A656) return false;

	return true;
}

ZHMTypeInfo SCrowdMapData::TypeInfo = ZHMTypeInfo("SCrowdMapData", sizeof(SCrowdMapData), alignof(SCrowdMapData), SCrowdMapData::WriteJson, SCrowdMapData::WriteSimpleJson, SCrowdMapData::FromSimpleJson, SCrowdMapData::Serialize, SCrowdMapData::Equals);

void SCrowdMapData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdMapData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_42D4EEB9") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_42D4EEB9);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2B471851") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector4") << ",\"$val\":";
	SVector4::WriteJson(&s_Object->_2B471851, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2D4CACC1") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_2D4CACC1);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5A4B9C57") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_5A4B9C57);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B8B56835") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B8B56835);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CFB258A3") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_CFB258A3);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_74A2342B") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<ZCrowdGridPoint>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_74A2342B.size(); ++i)
	{
		auto& s_Item0 = s_Object->_74A2342B[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("ZCrowdGridPoint") << ",\"$val\":";
		ZCrowdGridPoint::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_74A2342B.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_75260351") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_75260351);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2BF00558") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_2BF00558);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F80A5618") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SCrowdCells>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_F80A5618.size(); ++i)
	{
		auto& s_Item0 = s_Object->_F80A5618[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SCrowdCells") << ",\"$val\":";
		SCrowdCells::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_F80A5618.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_95E7F03F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SCrowdFlowChannel>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_95E7F03F.size(); ++i)
	{
		auto& s_Item0 = s_Object->_95E7F03F[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SCrowdFlowChannel") << ",\"$val\":";
		SCrowdFlowChannel::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_95E7F03F.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_097F70BB") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_097F70BB);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B8FF70AD") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SMatrix") << ",\"$val\":";
	SMatrix::WriteJson(&s_Object->_B8FF70AD, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_24DC3226") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector3") << ",\"$val\":";
	SVector3::WriteJson(&s_Object->_24DC3226, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5C6B6336") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_5C6B6336);
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdMapData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdMapData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_42D4EEB9") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_42D4EEB9);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2B471851") << ":";
	SVector4::WriteSimpleJson(&s_Object->_2B471851, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2D4CACC1") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_2D4CACC1);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5A4B9C57") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_5A4B9C57);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B8B56835") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B8B56835);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CFB258A3") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_CFB258A3);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_74A2342B") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_74A2342B.size(); ++i)
	{
		auto& s_Item0 = s_Object->_74A2342B[i];
		ZCrowdGridPoint::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_74A2342B.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_75260351") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_75260351);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2BF00558") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_2BF00558);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F80A5618") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_F80A5618.size(); ++i)
	{
		auto& s_Item0 = s_Object->_F80A5618[i];
		SCrowdCells::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_F80A5618.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_95E7F03F") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_95E7F03F.size(); ++i)
	{
		auto& s_Item0 = s_Object->_95E7F03F[i];
		SCrowdFlowChannel::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_95E7F03F.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_097F70BB") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_097F70BB);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B8FF70AD") << ":";
	SMatrix::WriteSimpleJson(&s_Object->_B8FF70AD, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_24DC3226") << ":";
	SVector3::WriteSimpleJson(&s_Object->_24DC3226, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5C6B6336") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_5C6B6336);

	p_Stream << "}";
}

void SCrowdMapData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdMapData s_Object {};

	s_Object._42D4EEB9 = simdjson::from_json_uint32(p_Document["_42D4EEB9"]);

	{
		SVector4 s_Item {};
		SVector4::FromSimpleJson(p_Document["_2B471851"], &s_Item);
		s_Object._2B471851 = s_Item;
	}

	s_Object._2D4CACC1 = simdjson::from_json_uint32(p_Document["_2D4CACC1"]);

	s_Object._5A4B9C57 = simdjson::from_json_uint32(p_Document["_5A4B9C57"]);

	s_Object._B8B56835 = simdjson::from_json_uint32(p_Document["_B8B56835"]);

	s_Object._CFB258A3 = simdjson::from_json_uint32(p_Document["_CFB258A3"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_74A2342B"])
	{
		ZCrowdGridPoint s_ArrayItem0;
		ZCrowdGridPoint::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._74A2342B.push_back(s_ArrayItem0);
	}

	s_Object._75260351 = simdjson::from_json_float32(p_Document["_75260351"]);

	s_Object._2BF00558 = simdjson::from_json_float32(p_Document["_2BF00558"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_F80A5618"])
	{
		SCrowdCells s_ArrayItem0;
		SCrowdCells::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._F80A5618.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_95E7F03F"])
	{
		SCrowdFlowChannel s_ArrayItem0;
		SCrowdFlowChannel::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._95E7F03F.push_back(s_ArrayItem0);
	}

	s_Object._097F70BB = simdjson::from_json_float32(p_Document["_097F70BB"]);

	{
		SMatrix s_Item {};
		SMatrix::FromSimpleJson(p_Document["_B8FF70AD"], &s_Item);
		s_Object._B8FF70AD = s_Item;
	}

	{
		SVector3 s_Item {};
		SVector3::FromSimpleJson(p_Document["_24DC3226"], &s_Item);
		s_Object._24DC3226 = s_Item;
	}

	s_Object._5C6B6336 = simdjson::from_json_float32(p_Document["_5C6B6336"]);

	*reinterpret_cast<SCrowdMapData*>(p_Target) = s_Object;
}

void SCrowdMapData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdMapData*>(p_Object);

	SVector4::Serialize(&s_Object->_2B471851, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, _2B471851));
	TArray<ZCrowdGridPoint>::Serialize(&s_Object->_74A2342B, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, _74A2342B));
	TArray<SCrowdCells>::Serialize(&s_Object->_F80A5618, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, _F80A5618));
	TArray<SCrowdFlowChannel>::Serialize(&s_Object->_95E7F03F, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, _95E7F03F));
	SMatrix::Serialize(&s_Object->_B8FF70AD, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, _B8FF70AD));
	SVector3::Serialize(&s_Object->_24DC3226, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, _24DC3226));
}

bool SCrowdMapData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SCrowdMapData*>(p_Left);
	auto* s_Right = reinterpret_cast<SCrowdMapData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SCrowdMapData::operator==(const SCrowdMapData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SCrowdMapData>)
		return false;

	if (_42D4EEB9 != p_Other._42D4EEB9) return false;
	if (_2B471851 != p_Other._2B471851) return false;
	if (_2D4CACC1 != p_Other._2D4CACC1) return false;
	if (_5A4B9C57 != p_Other._5A4B9C57) return false;
	if (_B8B56835 != p_Other._B8B56835) return false;
	if (_CFB258A3 != p_Other._CFB258A3) return false;
	if (_74A2342B != p_Other._74A2342B) return false;
	if (_75260351 != p_Other._75260351) return false;
	if (_2BF00558 != p_Other._2BF00558) return false;
	if (_F80A5618 != p_Other._F80A5618) return false;
	if (_95E7F03F != p_Other._95E7F03F) return false;
	if (_097F70BB != p_Other._097F70BB) return false;
	if (_B8FF70AD != p_Other._B8FF70AD) return false;
	if (_24DC3226 != p_Other._24DC3226) return false;
	if (_5C6B6336 != p_Other._5C6B6336) return false;

	return true;
}

ZHMTypeInfo SDLCItemSaveData::TypeInfo = ZHMTypeInfo("SDLCItemSaveData", sizeof(SDLCItemSaveData), alignof(SDLCItemSaveData), SDLCItemSaveData::WriteJson, SDLCItemSaveData::WriteSimpleJson, SDLCItemSaveData::FromSimpleJson, SDLCItemSaveData::Serialize, SDLCItemSaveData::Equals);

void SDLCItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDLCItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_07186756") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SDLCItemSaveData.EDiscoverState") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_07186756)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("SDLCItemSaveData.EDiscoverState", static_cast<int>(s_Object->_07186756))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1942359E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STokenID") << ",\"$val\":";
	STokenID::WriteJson(&s_Object->_1942359E, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDLCItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDLCItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_07186756") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("SDLCItemSaveData.EDiscoverState", static_cast<int>(s_Object->_07186756)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1942359E") << ":";
	STokenID::WriteSimpleJson(&s_Object->_1942359E, p_Stream);

	p_Stream << "}";
}

void SDLCItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDLCItemSaveData s_Object {};

	s_Object._07186756 = static_cast<SDLCItemSaveData_EDiscoverState>(ZHMEnums::GetEnumValueByName("SDLCItemSaveData.EDiscoverState", std::string_view(p_Document["_07186756"])));

	{
		STokenID s_Item {};
		STokenID::FromSimpleJson(p_Document["_1942359E"], &s_Item);
		s_Object._1942359E = s_Item;
	}

	*reinterpret_cast<SDLCItemSaveData*>(p_Target) = s_Object;
}

void SDLCItemSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDLCItemSaveData*>(p_Object);

	STokenID::Serialize(&s_Object->_1942359E, p_Serializer, p_OwnOffset + offsetof(SDLCItemSaveData, _1942359E));
}

bool SDLCItemSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SDLCItemSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SDLCItemSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SDLCItemSaveData::operator==(const SDLCItemSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SDLCItemSaveData>)
		return false;

	if (_07186756 != p_Other._07186756) return false;
	if (_1942359E != p_Other._1942359E) return false;

	return true;
}

ZHMTypeInfo SDoorSoundDefs::TypeInfo = ZHMTypeInfo("SDoorSoundDefs", sizeof(SDoorSoundDefs), alignof(SDoorSoundDefs), SDoorSoundDefs::WriteJson, SDoorSoundDefs::WriteSimpleJson, SDoorSoundDefs::FromSimpleJson, SDoorSoundDefs::Serialize, SDoorSoundDefs::Equals);

void SDoorSoundDefs::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDoorSoundDefs*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SDoorSoundDefs::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDoorSoundDefs*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SDoorSoundDefs::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDoorSoundDefs s_Object {};

	*reinterpret_cast<SDoorSoundDefs*>(p_Target) = s_Object;
}

void SDoorSoundDefs::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDoorSoundDefs*>(p_Object);

}

bool SDoorSoundDefs::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SDoorSoundDefs*>(p_Left);
	auto* s_Right = reinterpret_cast<SDoorSoundDefs*>(p_Right);

	return *s_Left == *s_Right;
}

bool SDoorSoundDefs::operator==(const SDoorSoundDefs& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SDoorSoundDefs>)
		return false;


	return true;
}

ZHMTypeInfo SEntityPinDescriptor::TypeInfo = ZHMTypeInfo("SEntityPinDescriptor", sizeof(SEntityPinDescriptor), alignof(SEntityPinDescriptor), SEntityPinDescriptor::WriteJson, SEntityPinDescriptor::WriteSimpleJson, SEntityPinDescriptor::FromSimpleJson, SEntityPinDescriptor::Serialize, SEntityPinDescriptor::Equals);

void SEntityPinDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityPinDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_A7056326") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_A7056326);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A235C8C8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_A235C8C8);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_8CDE5729") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZResourceID") << ",\"$val\":";
	ZResourceID::WriteJson(&s_Object->_8CDE5729, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_30C8A9AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_30C8A9AF);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CD395B3D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_CD395B3D);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityPinDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityPinDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_A7056326") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_A7056326);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A235C8C8") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_A235C8C8);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_8CDE5729") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->_8CDE5729, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_30C8A9AF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_30C8A9AF);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CD395B3D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_CD395B3D);

	p_Stream << "}";
}

void SEntityPinDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityPinDescriptor s_Object {};

	s_Object._A7056326 = std::string_view(p_Document["_A7056326"]);

	s_Object._A235C8C8 = std::string_view(p_Document["_A235C8C8"]);

	{
		ZResourceID s_Item {};
		ZResourceID::FromSimpleJson(p_Document["_8CDE5729"], &s_Item);
		s_Object._8CDE5729 = s_Item;
	}

	s_Object._30C8A9AF = std::string_view(p_Document["_30C8A9AF"]);

	s_Object._CD395B3D = simdjson::from_json_bool(p_Document["_CD395B3D"]);

	*reinterpret_cast<SEntityPinDescriptor*>(p_Target) = s_Object;
}

void SEntityPinDescriptor::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityPinDescriptor*>(p_Object);

	ZString::Serialize(&s_Object->_A7056326, p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, _A7056326));
	ZString::Serialize(&s_Object->_A235C8C8, p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, _A235C8C8));
	ZResourceID::Serialize(&s_Object->_8CDE5729, p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, _8CDE5729));
	ZString::Serialize(&s_Object->_30C8A9AF, p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, _30C8A9AF));
}

bool SEntityPinDescriptor::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SEntityPinDescriptor*>(p_Left);
	auto* s_Right = reinterpret_cast<SEntityPinDescriptor*>(p_Right);

	return *s_Left == *s_Right;
}

bool SEntityPinDescriptor::operator==(const SEntityPinDescriptor& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SEntityPinDescriptor>)
		return false;

	if (_A7056326 != p_Other._A7056326) return false;
	if (_A235C8C8 != p_Other._A235C8C8) return false;
	if (_8CDE5729 != p_Other._8CDE5729) return false;
	if (_30C8A9AF != p_Other._30C8A9AF) return false;
	if (_CD395B3D != p_Other._CD395B3D) return false;

	return true;
}

ZHMTypeInfo SEntityTemplateEntitySubset::TypeInfo = ZHMTypeInfo("SEntityTemplateEntitySubset", sizeof(SEntityTemplateEntitySubset), alignof(SEntityTemplateEntitySubset), SEntityTemplateEntitySubset::WriteJson, SEntityTemplateEntitySubset::WriteSimpleJson, SEntityTemplateEntitySubset::FromSimpleJson, SEntityTemplateEntitySubset::Serialize, SEntityTemplateEntitySubset::Equals);

void SEntityTemplateEntitySubset::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateEntitySubset*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_524D42EA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TypeID") << ",\"$val\":";
	TypeID::WriteJson(&s_Object->_524D42EA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_50EC64E5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_50EC64E5.size(); ++i)
	{
		auto& s_Item0 = s_Object->_50EC64E5[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_50EC64E5.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateEntitySubset::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateEntitySubset*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_524D42EA") << ":";
	TypeID::WriteSimpleJson(&s_Object->_524D42EA, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_50EC64E5") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_50EC64E5.size(); ++i)
	{
		auto& s_Item0 = s_Object->_50EC64E5[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_50EC64E5.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTemplateEntitySubset::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateEntitySubset s_Object {};

	{
		TypeID s_Item {};
		TypeID::FromSimpleJson(p_Document["_524D42EA"], &s_Item);
		s_Object._524D42EA = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_50EC64E5"])
	{
		s_Object._50EC64E5.push_back(simdjson::from_json_int32(s_Item0));
	}

	*reinterpret_cast<SEntityTemplateEntitySubset*>(p_Target) = s_Object;
}

void SEntityTemplateEntitySubset::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateEntitySubset*>(p_Object);

	TypeID::Serialize(&s_Object->_524D42EA, p_Serializer, p_OwnOffset + offsetof(SEntityTemplateEntitySubset, _524D42EA));
	TArray<int32>::Serialize(&s_Object->_50EC64E5, p_Serializer, p_OwnOffset + offsetof(SEntityTemplateEntitySubset, _50EC64E5));
}

bool SEntityTemplateEntitySubset::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SEntityTemplateEntitySubset*>(p_Left);
	auto* s_Right = reinterpret_cast<SEntityTemplateEntitySubset*>(p_Right);

	return *s_Left == *s_Right;
}

bool SEntityTemplateEntitySubset::operator==(const SEntityTemplateEntitySubset& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SEntityTemplateEntitySubset>)
		return false;

	if (_524D42EA != p_Other._524D42EA) return false;
	if (_50EC64E5 != p_Other._50EC64E5) return false;

	return true;
}

ZHMTypeInfo SEntityTemplatePinConnection::TypeInfo = ZHMTypeInfo("SEntityTemplatePinConnection", sizeof(SEntityTemplatePinConnection), alignof(SEntityTemplatePinConnection), SEntityTemplatePinConnection::WriteJson, SEntityTemplatePinConnection::WriteSimpleJson, SEntityTemplatePinConnection::FromSimpleJson, SEntityTemplatePinConnection::Serialize, SEntityTemplatePinConnection::Equals);

void SEntityTemplatePinConnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_9F3D30A8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_9F3D30A8);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_D698150F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_D698150F);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1C173300") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_1C173300);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B7F4444D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B7F4444D);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePinConnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_9F3D30A8") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_9F3D30A8);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_D698150F") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_D698150F);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1C173300") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_1C173300);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B7F4444D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B7F4444D);

	p_Stream << "}";
}

void SEntityTemplatePinConnection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePinConnection s_Object {};

	s_Object._9F3D30A8 = simdjson::from_json_int32(p_Document["_9F3D30A8"]);

	s_Object._D698150F = simdjson::from_json_int32(p_Document["_D698150F"]);

	s_Object._1C173300 = std::string_view(p_Document["_1C173300"]);

	s_Object._B7F4444D = std::string_view(p_Document["_B7F4444D"]);

	*reinterpret_cast<SEntityTemplatePinConnection*>(p_Target) = s_Object;
}

void SEntityTemplatePinConnection::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePinConnection*>(p_Object);

	ZString::Serialize(&s_Object->_1C173300, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePinConnection, _1C173300));
	ZString::Serialize(&s_Object->_B7F4444D, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePinConnection, _B7F4444D));
}

bool SEntityTemplatePinConnection::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SEntityTemplatePinConnection*>(p_Left);
	auto* s_Right = reinterpret_cast<SEntityTemplatePinConnection*>(p_Right);

	return *s_Left == *s_Right;
}

bool SEntityTemplatePinConnection::operator==(const SEntityTemplatePinConnection& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SEntityTemplatePinConnection>)
		return false;

	if (_9F3D30A8 != p_Other._9F3D30A8) return false;
	if (_D698150F != p_Other._D698150F) return false;
	if (_1C173300 != p_Other._1C173300) return false;
	if (_B7F4444D != p_Other._B7F4444D) return false;

	return true;
}

ZHMTypeInfo SEntityTemplatePropertyAlias::TypeInfo = ZHMTypeInfo("SEntityTemplatePropertyAlias", sizeof(SEntityTemplatePropertyAlias), alignof(SEntityTemplatePropertyAlias), SEntityTemplatePropertyAlias::WriteJson, SEntityTemplatePropertyAlias::WriteSimpleJson, SEntityTemplatePropertyAlias::FromSimpleJson, SEntityTemplatePropertyAlias::Serialize, SEntityTemplatePropertyAlias::Equals);

void SEntityTemplatePropertyAlias::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_0CF8B5AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_0CF8B5AF);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CD460934") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_CD460934);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1AE8D74E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_1AE8D74E);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePropertyAlias::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_0CF8B5AF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_0CF8B5AF);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CD460934") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_CD460934);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1AE8D74E") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_1AE8D74E);

	p_Stream << "}";
}

void SEntityTemplatePropertyAlias::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePropertyAlias s_Object {};

	s_Object._0CF8B5AF = std::string_view(p_Document["_0CF8B5AF"]);

	s_Object._CD460934 = simdjson::from_json_int32(p_Document["_CD460934"]);

	s_Object._1AE8D74E = std::string_view(p_Document["_1AE8D74E"]);

	*reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Target) = s_Object;
}

void SEntityTemplatePropertyAlias::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Object);

	ZString::Serialize(&s_Object->_0CF8B5AF, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyAlias, _0CF8B5AF));
	ZString::Serialize(&s_Object->_1AE8D74E, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyAlias, _1AE8D74E));
}

bool SEntityTemplatePropertyAlias::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Left);
	auto* s_Right = reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Right);

	return *s_Left == *s_Right;
}

bool SEntityTemplatePropertyAlias::operator==(const SEntityTemplatePropertyAlias& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SEntityTemplatePropertyAlias>)
		return false;

	if (_0CF8B5AF != p_Other._0CF8B5AF) return false;
	if (_CD460934 != p_Other._CD460934) return false;
	if (_1AE8D74E != p_Other._1AE8D74E) return false;

	return true;
}

ZHMTypeInfo SEntityTemplateReference::TypeInfo = ZHMTypeInfo("SEntityTemplateReference", sizeof(SEntityTemplateReference), alignof(SEntityTemplateReference), SEntityTemplateReference::WriteJson, SEntityTemplateReference::WriteSimpleJson, SEntityTemplateReference::FromSimpleJson, SEntityTemplateReference::Serialize, SEntityTemplateReference::Equals);

void SEntityTemplateReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateReference*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_545B8135") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_545B8135);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_76BA0C0F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_76BA0C0F);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateReference*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_545B8135") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_545B8135);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_76BA0C0F") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_76BA0C0F);

	p_Stream << "}";
}

void SEntityTemplateReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateReference s_Object {};

	s_Object._545B8135 = simdjson::from_json_int32(p_Document["_545B8135"]);

	s_Object._76BA0C0F = std::string_view(p_Document["_76BA0C0F"]);

	*reinterpret_cast<SEntityTemplateReference*>(p_Target) = s_Object;
}

void SEntityTemplateReference::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateReference*>(p_Object);

	ZString::Serialize(&s_Object->_76BA0C0F, p_Serializer, p_OwnOffset + offsetof(SEntityTemplateReference, _76BA0C0F));
}

bool SEntityTemplateReference::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SEntityTemplateReference*>(p_Left);
	auto* s_Right = reinterpret_cast<SEntityTemplateReference*>(p_Right);

	return *s_Left == *s_Right;
}

bool SEntityTemplateReference::operator==(const SEntityTemplateReference& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SEntityTemplateReference>)
		return false;

	if (_545B8135 != p_Other._545B8135) return false;
	if (_76BA0C0F != p_Other._76BA0C0F) return false;

	return true;
}

ZHMTypeInfo SExposedEntityDescriptor::TypeInfo = ZHMTypeInfo("SExposedEntityDescriptor", sizeof(SExposedEntityDescriptor), alignof(SExposedEntityDescriptor), SExposedEntityDescriptor::WriteJson, SExposedEntityDescriptor::WriteSimpleJson, SExposedEntityDescriptor::FromSimpleJson, SExposedEntityDescriptor::Serialize, SExposedEntityDescriptor::Equals);

void SExposedEntityDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExposedEntityDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_A7056326") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_A7056326);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A235C8C8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_A235C8C8);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_69FCEBFA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_69FCEBFA);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_30C8A9AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_30C8A9AF);
	p_Stream << "}";

	p_Stream << "}";
}

void SExposedEntityDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExposedEntityDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_A7056326") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_A7056326);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A235C8C8") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_A235C8C8);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_69FCEBFA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_69FCEBFA);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_30C8A9AF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_30C8A9AF);

	p_Stream << "}";
}

void SExposedEntityDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExposedEntityDescriptor s_Object {};

	s_Object._A7056326 = std::string_view(p_Document["_A7056326"]);

	s_Object._A235C8C8 = std::string_view(p_Document["_A235C8C8"]);

	s_Object._69FCEBFA = std::string_view(p_Document["_69FCEBFA"]);

	s_Object._30C8A9AF = std::string_view(p_Document["_30C8A9AF"]);

	*reinterpret_cast<SExposedEntityDescriptor*>(p_Target) = s_Object;
}

void SExposedEntityDescriptor::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExposedEntityDescriptor*>(p_Object);

	ZString::Serialize(&s_Object->_A7056326, p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, _A7056326));
	ZString::Serialize(&s_Object->_A235C8C8, p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, _A235C8C8));
	ZString::Serialize(&s_Object->_69FCEBFA, p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, _69FCEBFA));
	ZString::Serialize(&s_Object->_30C8A9AF, p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, _30C8A9AF));
}

bool SExposedEntityDescriptor::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SExposedEntityDescriptor*>(p_Left);
	auto* s_Right = reinterpret_cast<SExposedEntityDescriptor*>(p_Right);

	return *s_Left == *s_Right;
}

bool SExposedEntityDescriptor::operator==(const SExposedEntityDescriptor& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SExposedEntityDescriptor>)
		return false;

	if (_A7056326 != p_Other._A7056326) return false;
	if (_A235C8C8 != p_Other._A235C8C8) return false;
	if (_69FCEBFA != p_Other._69FCEBFA) return false;
	if (_30C8A9AF != p_Other._30C8A9AF) return false;

	return true;
}

ZHMTypeInfo SFRange::TypeInfo = ZHMTypeInfo("SFRange", sizeof(SFRange), alignof(SFRange), SFRange::WriteJson, SFRange::WriteSimpleJson, SFRange::FromSimpleJson, SFRange::Serialize, SFRange::Equals);

void SFRange::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFRange*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_C7D1CFC0") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_C7D1CFC0);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDCF099") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDCF099);
	p_Stream << "}";

	p_Stream << "}";
}

void SFRange::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFRange*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_C7D1CFC0") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_C7D1CFC0);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDCF099") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDCF099);

	p_Stream << "}";
}

void SFRange::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFRange s_Object {};

	s_Object._C7D1CFC0 = simdjson::from_json_float32(p_Document["_C7D1CFC0"]);

	s_Object._FBDCF099 = simdjson::from_json_float32(p_Document["_FBDCF099"]);

	*reinterpret_cast<SFRange*>(p_Target) = s_Object;
}

void SFRange::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFRange*>(p_Object);

}

bool SFRange::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SFRange*>(p_Left);
	auto* s_Right = reinterpret_cast<SFRange*>(p_Right);

	return *s_Left == *s_Right;
}

bool SFRange::operator==(const SFRange& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SFRange>)
		return false;

	if (_C7D1CFC0 != p_Other._C7D1CFC0) return false;
	if (_FBDCF099 != p_Other._FBDCF099) return false;

	return true;
}

ZHMTypeInfo SForwardSpawnData::TypeInfo = ZHMTypeInfo("SForwardSpawnData", sizeof(SForwardSpawnData), alignof(SForwardSpawnData), SForwardSpawnData::WriteJson, SForwardSpawnData::WriteSimpleJson, SForwardSpawnData::FromSimpleJson, SForwardSpawnData::Serialize, SForwardSpawnData::Equals);

void SForwardSpawnData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SForwardSpawnData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_21452EB3") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_21452EB3);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3C3C4FC5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SCheckpointSaveData") << ",\"$val\":";
	SCheckpointSaveData::WriteJson(&s_Object->_3C3C4FC5, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SForwardSpawnData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SForwardSpawnData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_21452EB3") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_21452EB3);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3C3C4FC5") << ":";
	SCheckpointSaveData::WriteSimpleJson(&s_Object->_3C3C4FC5, p_Stream);

	p_Stream << "}";
}

void SForwardSpawnData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SForwardSpawnData s_Object {};

	s_Object._21452EB3 = simdjson::from_json_int32(p_Document["_21452EB3"]);

	{
		SCheckpointSaveData s_Item {};
		SCheckpointSaveData::FromSimpleJson(p_Document["_3C3C4FC5"], &s_Item);
		s_Object._3C3C4FC5 = s_Item;
	}

	*reinterpret_cast<SForwardSpawnData*>(p_Target) = s_Object;
}

void SForwardSpawnData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SForwardSpawnData*>(p_Object);

	SCheckpointSaveData::Serialize(&s_Object->_3C3C4FC5, p_Serializer, p_OwnOffset + offsetof(SForwardSpawnData, _3C3C4FC5));
}

bool SForwardSpawnData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SForwardSpawnData*>(p_Left);
	auto* s_Right = reinterpret_cast<SForwardSpawnData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SForwardSpawnData::operator==(const SForwardSpawnData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SForwardSpawnData>)
		return false;

	if (_21452EB3 != p_Other._21452EB3) return false;
	if (_3C3C4FC5 != p_Other._3C3C4FC5) return false;

	return true;
}

ZHMTypeInfo SGProperties::TypeInfo = ZHMTypeInfo("SGProperties", sizeof(SGProperties), alignof(SGProperties), SGProperties::WriteJson, SGProperties::WriteSimpleJson, SGProperties::FromSimpleJson, SGProperties::Serialize, SGProperties::Equals);

void SGProperties::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGProperties*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_0967A27E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float4") << ",\"$val\":";
	float4::WriteJson(&s_Object->_0967A27E, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_356A9D27") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float4") << ",\"$val\":";
	float4::WriteJson(&s_Object->_356A9D27, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7E907DDA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_7E907DDA);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EE647576") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_EE647576);
	p_Stream << "}";

	p_Stream << "}";
}

void SGProperties::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGProperties*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_0967A27E") << ":";
	float4::WriteSimpleJson(&s_Object->_0967A27E, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_356A9D27") << ":";
	float4::WriteSimpleJson(&s_Object->_356A9D27, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7E907DDA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_7E907DDA);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EE647576") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_EE647576);

	p_Stream << "}";
}

void SGProperties::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGProperties s_Object {};

	{
		float4 s_Item {};
		float4::FromSimpleJson(p_Document["_0967A27E"], &s_Item);
		s_Object._0967A27E = s_Item;
	}

	{
		float4 s_Item {};
		float4::FromSimpleJson(p_Document["_356A9D27"], &s_Item);
		s_Object._356A9D27 = s_Item;
	}

	s_Object._7E907DDA = simdjson::from_json_int32(p_Document["_7E907DDA"]);

	s_Object._EE647576 = simdjson::from_json_float32(p_Document["_EE647576"]);

	*reinterpret_cast<SGProperties*>(p_Target) = s_Object;
}

void SGProperties::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGProperties*>(p_Object);

	float4::Serialize(&s_Object->_0967A27E, p_Serializer, p_OwnOffset + offsetof(SGProperties, _0967A27E));
	float4::Serialize(&s_Object->_356A9D27, p_Serializer, p_OwnOffset + offsetof(SGProperties, _356A9D27));
}

bool SGProperties::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SGProperties*>(p_Left);
	auto* s_Right = reinterpret_cast<SGProperties*>(p_Right);

	return *s_Left == *s_Right;
}

bool SGProperties::operator==(const SGProperties& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SGProperties>)
		return false;

	if (_0967A27E != p_Other._0967A27E) return false;
	if (_356A9D27 != p_Other._356A9D27) return false;
	if (_7E907DDA != p_Other._7E907DDA) return false;
	if (_EE647576 != p_Other._EE647576) return false;

	return true;
}

ZHMTypeInfo SGWaypoint::TypeInfo = ZHMTypeInfo("SGWaypoint", sizeof(SGWaypoint), alignof(SGWaypoint), SGWaypoint::WriteJson, SGWaypoint::WriteSimpleJson, SGWaypoint::FromSimpleJson, SGWaypoint::Serialize, SGWaypoint::Equals);

void SGWaypoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGWaypoint*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_E916B8EA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int16") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_E916B8EA);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9E11887C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int16") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_9E11887C);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0718D9C6") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int16") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_0718D9C6);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_701FE950") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int16") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_701FE950);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EE7B7CF3") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int16") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_EE7B7CF3);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_997C4C65") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int16") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_997C4C65);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_00751DDF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int16") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_00751DDF);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_77722D49") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int16") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_77722D49);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_28C55902") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float4") << ",\"$val\":";
	float4::WriteJson(&s_Object->_28C55902, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SGWaypoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGWaypoint*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_E916B8EA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_E916B8EA);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9E11887C") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_9E11887C);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0718D9C6") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_0718D9C6);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_701FE950") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_701FE950);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EE7B7CF3") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_EE7B7CF3);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_997C4C65") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_997C4C65);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_00751DDF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_00751DDF);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_77722D49") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_77722D49);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_28C55902") << ":";
	float4::WriteSimpleJson(&s_Object->_28C55902, p_Stream);

	p_Stream << "}";
}

void SGWaypoint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGWaypoint s_Object {};

	s_Object._E916B8EA = simdjson::from_json_int16(p_Document["_E916B8EA"]);

	s_Object._9E11887C = simdjson::from_json_int16(p_Document["_9E11887C"]);

	s_Object._0718D9C6 = simdjson::from_json_int16(p_Document["_0718D9C6"]);

	s_Object._701FE950 = simdjson::from_json_int16(p_Document["_701FE950"]);

	s_Object._EE7B7CF3 = simdjson::from_json_int16(p_Document["_EE7B7CF3"]);

	s_Object._997C4C65 = simdjson::from_json_int16(p_Document["_997C4C65"]);

	s_Object._00751DDF = simdjson::from_json_int16(p_Document["_00751DDF"]);

	s_Object._77722D49 = simdjson::from_json_int16(p_Document["_77722D49"]);

	{
		float4 s_Item {};
		float4::FromSimpleJson(p_Document["_28C55902"], &s_Item);
		s_Object._28C55902 = s_Item;
	}

	*reinterpret_cast<SGWaypoint*>(p_Target) = s_Object;
}

void SGWaypoint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGWaypoint*>(p_Object);

	float4::Serialize(&s_Object->_28C55902, p_Serializer, p_OwnOffset + offsetof(SGWaypoint, _28C55902));
}

bool SGWaypoint::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SGWaypoint*>(p_Left);
	auto* s_Right = reinterpret_cast<SGWaypoint*>(p_Right);

	return *s_Left == *s_Right;
}

bool SGWaypoint::operator==(const SGWaypoint& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SGWaypoint>)
		return false;

	if (_E916B8EA != p_Other._E916B8EA) return false;
	if (_9E11887C != p_Other._9E11887C) return false;
	if (_0718D9C6 != p_Other._0718D9C6) return false;
	if (_701FE950 != p_Other._701FE950) return false;
	if (_EE7B7CF3 != p_Other._EE7B7CF3) return false;
	if (_997C4C65 != p_Other._997C4C65) return false;
	if (_00751DDF != p_Other._00751DDF) return false;
	if (_77722D49 != p_Other._77722D49) return false;
	if (_28C55902 != p_Other._28C55902) return false;

	return true;
}

ZHMTypeInfo SGameStats::TypeInfo = ZHMTypeInfo("SGameStats", sizeof(SGameStats), alignof(SGameStats), SGameStats::WriteJson, SGameStats::WriteSimpleJson, SGameStats::FromSimpleJson, SGameStats::Serialize, SGameStats::Equals);

void SGameStats::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStats*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_FF455411") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_FF455411.size(); ++i)
	{
		auto& s_Item0 = s_Object->_FF455411[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_FF455411.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6DE2F9E0") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_6DE2F9E0.size(); ++i)
	{
		auto& s_Item0 = s_Object->_6DE2F9E0[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_6DE2F9E0.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3D4C74E4") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_3D4C74E4.size(); ++i)
	{
		auto& s_Item0 = s_Object->_3D4C74E4[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_3D4C74E4.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_011D512F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_011D512F.size(); ++i)
	{
		auto& s_Item0 = s_Object->_011D512F[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_011D512F.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_56FE8642") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_56FE8642.size(); ++i)
	{
		auto& s_Item0 = s_Object->_56FE8642[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_56FE8642.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7C260CE4") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_7C260CE4.size(); ++i)
	{
		auto& s_Item0 = s_Object->_7C260CE4[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_7C260CE4.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_64EB930E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_64EB930E.size(); ++i)
	{
		auto& s_Item0 = s_Object->_64EB930E[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_64EB930E.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3289C9A4") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_3289C9A4.size(); ++i)
	{
		auto& s_Item0 = s_Object->_3289C9A4[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_3289C9A4.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SGameStats::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStats*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_FF455411") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_FF455411.size(); ++i)
	{
		auto& s_Item0 = s_Object->_FF455411[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_FF455411.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6DE2F9E0") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_6DE2F9E0.size(); ++i)
	{
		auto& s_Item0 = s_Object->_6DE2F9E0[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_6DE2F9E0.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3D4C74E4") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_3D4C74E4.size(); ++i)
	{
		auto& s_Item0 = s_Object->_3D4C74E4[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_3D4C74E4.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_011D512F") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_011D512F.size(); ++i)
	{
		auto& s_Item0 = s_Object->_011D512F[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_011D512F.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_56FE8642") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_56FE8642.size(); ++i)
	{
		auto& s_Item0 = s_Object->_56FE8642[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_56FE8642.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7C260CE4") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_7C260CE4.size(); ++i)
	{
		auto& s_Item0 = s_Object->_7C260CE4[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_7C260CE4.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_64EB930E") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_64EB930E.size(); ++i)
	{
		auto& s_Item0 = s_Object->_64EB930E[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_64EB930E.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3289C9A4") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_3289C9A4.size(); ++i)
	{
		auto& s_Item0 = s_Object->_3289C9A4[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_3289C9A4.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGameStats::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameStats s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_FF455411"])
	{
		s_Object._FF455411.push_back(simdjson::from_json_int32(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_6DE2F9E0"])
	{
		s_Object._6DE2F9E0.push_back(simdjson::from_json_int32(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_3D4C74E4"])
	{
		s_Object._3D4C74E4.push_back(simdjson::from_json_int32(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_011D512F"])
	{
		s_Object._011D512F.push_back(simdjson::from_json_int32(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_56FE8642"])
	{
		s_Object._56FE8642.push_back(simdjson::from_json_int32(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_7C260CE4"])
	{
		s_Object._7C260CE4.push_back(simdjson::from_json_int32(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_64EB930E"])
	{
		s_Object._64EB930E.push_back(simdjson::from_json_int32(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_3289C9A4"])
	{
		s_Object._3289C9A4.push_back(simdjson::from_json_int32(s_Item0));
	}

	*reinterpret_cast<SGameStats*>(p_Target) = s_Object;
}

void SGameStats::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameStats*>(p_Object);

	TArray<int32>::Serialize(&s_Object->_FF455411, p_Serializer, p_OwnOffset + offsetof(SGameStats, _FF455411));
	TArray<int32>::Serialize(&s_Object->_6DE2F9E0, p_Serializer, p_OwnOffset + offsetof(SGameStats, _6DE2F9E0));
	TArray<int32>::Serialize(&s_Object->_3D4C74E4, p_Serializer, p_OwnOffset + offsetof(SGameStats, _3D4C74E4));
	TArray<int32>::Serialize(&s_Object->_011D512F, p_Serializer, p_OwnOffset + offsetof(SGameStats, _011D512F));
	TArray<int32>::Serialize(&s_Object->_56FE8642, p_Serializer, p_OwnOffset + offsetof(SGameStats, _56FE8642));
	TArray<int32>::Serialize(&s_Object->_7C260CE4, p_Serializer, p_OwnOffset + offsetof(SGameStats, _7C260CE4));
	TArray<int32>::Serialize(&s_Object->_64EB930E, p_Serializer, p_OwnOffset + offsetof(SGameStats, _64EB930E));
	TArray<int32>::Serialize(&s_Object->_3289C9A4, p_Serializer, p_OwnOffset + offsetof(SGameStats, _3289C9A4));
}

bool SGameStats::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SGameStats*>(p_Left);
	auto* s_Right = reinterpret_cast<SGameStats*>(p_Right);

	return *s_Left == *s_Right;
}

bool SGameStats::operator==(const SGameStats& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SGameStats>)
		return false;

	if (_FF455411 != p_Other._FF455411) return false;
	if (_6DE2F9E0 != p_Other._6DE2F9E0) return false;
	if (_3D4C74E4 != p_Other._3D4C74E4) return false;
	if (_011D512F != p_Other._011D512F) return false;
	if (_56FE8642 != p_Other._56FE8642) return false;
	if (_7C260CE4 != p_Other._7C260CE4) return false;
	if (_64EB930E != p_Other._64EB930E) return false;
	if (_3289C9A4 != p_Other._3289C9A4) return false;

	return true;
}

ZHMTypeInfo SGameStatsData::TypeInfo = ZHMTypeInfo("SGameStatsData", sizeof(SGameStatsData), alignof(SGameStatsData), SGameStatsData::WriteJson, SGameStatsData::WriteSimpleJson, SGameStatsData::FromSimpleJson, SGameStatsData::Serialize, SGameStatsData::Equals);

void SGameStatsData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStatsData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_6BAA1C04") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_6BAA1C04);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_168A40C8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_168A40C8);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0C0BA94D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_0C0BA94D);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_77DE369D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_77DE369D);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7B2752ED") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_7B2752ED);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_BF6C03A5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_BF6C03A5);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3C76D906") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_3C76D906);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1E315CEB") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_1E315CEB);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2D71587C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_2D71587C);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B597B3BD") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B597B3BD);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B96ED7CD") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B96ED7CD);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AC816C37") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_AC816C37);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_07DAB04B") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_07DAB04B);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_259D35A6") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_259D35A6);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2527C938") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_2527C938);
	p_Stream << "}";

	p_Stream << "}";
}

void SGameStatsData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStatsData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_6BAA1C04") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_6BAA1C04);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_168A40C8") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_168A40C8);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0C0BA94D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_0C0BA94D);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_77DE369D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_77DE369D);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7B2752ED") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_7B2752ED);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_BF6C03A5") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_BF6C03A5);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3C76D906") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_3C76D906);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1E315CEB") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_1E315CEB);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2D71587C") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_2D71587C);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B597B3BD") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B597B3BD);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B96ED7CD") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B96ED7CD);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AC816C37") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_AC816C37);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_07DAB04B") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_07DAB04B);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_259D35A6") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_259D35A6);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2527C938") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_2527C938);

	p_Stream << "}";
}

void SGameStatsData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameStatsData s_Object {};

	s_Object._6BAA1C04 = simdjson::from_json_int32(p_Document["_6BAA1C04"]);

	s_Object._168A40C8 = simdjson::from_json_uint32(p_Document["_168A40C8"]);

	s_Object._0C0BA94D = simdjson::from_json_uint32(p_Document["_0C0BA94D"]);

	s_Object._77DE369D = simdjson::from_json_uint32(p_Document["_77DE369D"]);

	s_Object._7B2752ED = simdjson::from_json_uint32(p_Document["_7B2752ED"]);

	s_Object._BF6C03A5 = simdjson::from_json_uint32(p_Document["_BF6C03A5"]);

	s_Object._3C76D906 = simdjson::from_json_uint32(p_Document["_3C76D906"]);

	s_Object._1E315CEB = simdjson::from_json_uint32(p_Document["_1E315CEB"]);

	s_Object._2D71587C = simdjson::from_json_uint32(p_Document["_2D71587C"]);

	s_Object._B597B3BD = simdjson::from_json_uint32(p_Document["_B597B3BD"]);

	s_Object._B96ED7CD = simdjson::from_json_uint32(p_Document["_B96ED7CD"]);

	s_Object._AC816C37 = simdjson::from_json_uint32(p_Document["_AC816C37"]);

	s_Object._07DAB04B = simdjson::from_json_uint32(p_Document["_07DAB04B"]);

	s_Object._259D35A6 = simdjson::from_json_uint32(p_Document["_259D35A6"]);

	s_Object._2527C938 = simdjson::from_json_uint32(p_Document["_2527C938"]);

	*reinterpret_cast<SGameStatsData*>(p_Target) = s_Object;
}

void SGameStatsData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameStatsData*>(p_Object);

}

bool SGameStatsData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SGameStatsData*>(p_Left);
	auto* s_Right = reinterpret_cast<SGameStatsData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SGameStatsData::operator==(const SGameStatsData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SGameStatsData>)
		return false;

	if (_6BAA1C04 != p_Other._6BAA1C04) return false;
	if (_168A40C8 != p_Other._168A40C8) return false;
	if (_0C0BA94D != p_Other._0C0BA94D) return false;
	if (_77DE369D != p_Other._77DE369D) return false;
	if (_7B2752ED != p_Other._7B2752ED) return false;
	if (_BF6C03A5 != p_Other._BF6C03A5) return false;
	if (_3C76D906 != p_Other._3C76D906) return false;
	if (_1E315CEB != p_Other._1E315CEB) return false;
	if (_2D71587C != p_Other._2D71587C) return false;
	if (_B597B3BD != p_Other._B597B3BD) return false;
	if (_B96ED7CD != p_Other._B96ED7CD) return false;
	if (_AC816C37 != p_Other._AC816C37) return false;
	if (_07DAB04B != p_Other._07DAB04B) return false;
	if (_259D35A6 != p_Other._259D35A6) return false;
	if (_2527C938 != p_Other._2527C938) return false;

	return true;
}

ZHMTypeInfo SGameStatsSaveData::TypeInfo = ZHMTypeInfo("SGameStatsSaveData", sizeof(SGameStatsSaveData), alignof(SGameStatsSaveData), SGameStatsSaveData::WriteJson, SGameStatsSaveData::WriteSimpleJson, SGameStatsSaveData::FromSimpleJson, SGameStatsSaveData::Serialize, SGameStatsSaveData::Equals);

void SGameStatsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStatsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_936E667C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SGameStatsData") << ",\"$val\":";
	SGameStatsData::WriteJson(&s_Object->_936E667C, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3A64A27F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_3A64A27F);
	p_Stream << "}";

	p_Stream << "}";
}

void SGameStatsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStatsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_936E667C") << ":";
	SGameStatsData::WriteSimpleJson(&s_Object->_936E667C, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3A64A27F") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_3A64A27F);

	p_Stream << "}";
}

void SGameStatsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameStatsSaveData s_Object {};

	{
		SGameStatsData s_Item {};
		SGameStatsData::FromSimpleJson(p_Document["_936E667C"], &s_Item);
		s_Object._936E667C = s_Item;
	}

	s_Object._3A64A27F = simdjson::from_json_int32(p_Document["_3A64A27F"]);

	*reinterpret_cast<SGameStatsSaveData*>(p_Target) = s_Object;
}

void SGameStatsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameStatsSaveData*>(p_Object);

	SGameStatsData::Serialize(&s_Object->_936E667C, p_Serializer, p_OwnOffset + offsetof(SGameStatsSaveData, _936E667C));
}

bool SGameStatsSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SGameStatsSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SGameStatsSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SGameStatsSaveData::operator==(const SGameStatsSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SGameStatsSaveData>)
		return false;

	if (_936E667C != p_Other._936E667C) return false;
	if (_3A64A27F != p_Other._3A64A27F) return false;

	return true;
}

ZHMTypeInfo SGameStatsWeapon::TypeInfo = ZHMTypeInfo("SGameStatsWeapon", sizeof(SGameStatsWeapon), alignof(SGameStatsWeapon), SGameStatsWeapon::WriteJson, SGameStatsWeapon::WriteSimpleJson, SGameStatsWeapon::FromSimpleJson, SGameStatsWeapon::Serialize, SGameStatsWeapon::Equals);

void SGameStatsWeapon::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStatsWeapon*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_4B103D9F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("eItemType") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_4B103D9F)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("eItemType", static_cast<int>(s_Object->_4B103D9F))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_23BDF767") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STokenID") << ",\"$val\":";
	STokenID::WriteJson(&s_Object->_23BDF767, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5890F648") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("EWeaponSpecialSituation") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_5890F648)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EWeaponSpecialSituation", static_cast<int>(s_Object->_5890F648))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_03DA47B8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("eAmmoType") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_03DA47B8)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("eAmmoType", static_cast<int>(s_Object->_03DA47B8))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SGameStatsWeapon::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStatsWeapon*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_4B103D9F") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("eItemType", static_cast<int>(s_Object->_4B103D9F)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_23BDF767") << ":";
	STokenID::WriteSimpleJson(&s_Object->_23BDF767, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5890F648") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EWeaponSpecialSituation", static_cast<int>(s_Object->_5890F648)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_03DA47B8") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("eAmmoType", static_cast<int>(s_Object->_03DA47B8)));

	p_Stream << "}";
}

void SGameStatsWeapon::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameStatsWeapon s_Object {};

	s_Object._4B103D9F = static_cast<eItemType>(ZHMEnums::GetEnumValueByName("eItemType", std::string_view(p_Document["_4B103D9F"])));

	{
		STokenID s_Item {};
		STokenID::FromSimpleJson(p_Document["_23BDF767"], &s_Item);
		s_Object._23BDF767 = s_Item;
	}

	s_Object._5890F648 = static_cast<EWeaponSpecialSituation>(ZHMEnums::GetEnumValueByName("EWeaponSpecialSituation", std::string_view(p_Document["_5890F648"])));

	s_Object._03DA47B8 = static_cast<eAmmoType>(ZHMEnums::GetEnumValueByName("eAmmoType", std::string_view(p_Document["_03DA47B8"])));

	*reinterpret_cast<SGameStatsWeapon*>(p_Target) = s_Object;
}

void SGameStatsWeapon::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameStatsWeapon*>(p_Object);

	STokenID::Serialize(&s_Object->_23BDF767, p_Serializer, p_OwnOffset + offsetof(SGameStatsWeapon, _23BDF767));
}

bool SGameStatsWeapon::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SGameStatsWeapon*>(p_Left);
	auto* s_Right = reinterpret_cast<SGameStatsWeapon*>(p_Right);

	return *s_Left == *s_Right;
}

bool SGameStatsWeapon::operator==(const SGameStatsWeapon& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SGameStatsWeapon>)
		return false;

	if (_4B103D9F != p_Other._4B103D9F) return false;
	if (_23BDF767 != p_Other._23BDF767) return false;
	if (_5890F648 != p_Other._5890F648) return false;
	if (_03DA47B8 != p_Other._03DA47B8) return false;

	return true;
}

ZHMTypeInfo SLevelCPProgressionData::TypeInfo = ZHMTypeInfo("SLevelCPProgressionData", sizeof(SLevelCPProgressionData), alignof(SLevelCPProgressionData), SLevelCPProgressionData::WriteJson, SLevelCPProgressionData::WriteSimpleJson, SLevelCPProgressionData::FromSimpleJson, SLevelCPProgressionData::Serialize, SLevelCPProgressionData::Equals);

void SLevelCPProgressionData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelCPProgressionData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_F0A2AB0C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ELevelIndex") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_F0A2AB0C)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_F0A2AB0C))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F0ABDD90") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SCPProgressionState>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_F0ABDD90.size(); ++i)
	{
		auto& s_Item0 = s_Object->_F0ABDD90[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SCPProgressionState") << ",\"$val\":";
		SCPProgressionState::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_F0ABDD90.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SLevelCPProgressionData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelCPProgressionData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_F0A2AB0C") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_F0A2AB0C)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F0ABDD90") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_F0ABDD90.size(); ++i)
	{
		auto& s_Item0 = s_Object->_F0ABDD90[i];
		SCPProgressionState::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_F0ABDD90.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLevelCPProgressionData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLevelCPProgressionData s_Object {};

	s_Object._F0A2AB0C = static_cast<ELevelIndex>(ZHMEnums::GetEnumValueByName("ELevelIndex", std::string_view(p_Document["_F0A2AB0C"])));

	for (simdjson::ondemand::value s_Item0 : p_Document["_F0ABDD90"])
	{
		SCPProgressionState s_ArrayItem0;
		SCPProgressionState::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._F0ABDD90.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SLevelCPProgressionData*>(p_Target) = s_Object;
}

void SLevelCPProgressionData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLevelCPProgressionData*>(p_Object);

	TArray<SCPProgressionState>::Serialize(&s_Object->_F0ABDD90, p_Serializer, p_OwnOffset + offsetof(SLevelCPProgressionData, _F0ABDD90));
}

bool SLevelCPProgressionData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SLevelCPProgressionData*>(p_Left);
	auto* s_Right = reinterpret_cast<SLevelCPProgressionData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SLevelCPProgressionData::operator==(const SLevelCPProgressionData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SLevelCPProgressionData>)
		return false;

	if (_F0A2AB0C != p_Other._F0A2AB0C) return false;
	if (_F0ABDD90 != p_Other._F0ABDD90) return false;

	return true;
}

ZHMTypeInfo SLevelProgressionData::TypeInfo = ZHMTypeInfo("SLevelProgressionData", sizeof(SLevelProgressionData), alignof(SLevelProgressionData), SLevelProgressionData::WriteJson, SLevelProgressionData::WriteSimpleJson, SLevelProgressionData::FromSimpleJson, SLevelProgressionData::Serialize, SLevelProgressionData::Equals);

void SLevelProgressionData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelProgressionData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_F0A2AB0C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ELevelIndex") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_F0A2AB0C)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_F0A2AB0C))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CB578D5E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_CB578D5E);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1D5A80A8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_1D5A80A8);
	p_Stream << "}";

	p_Stream << "}";
}

void SLevelProgressionData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelProgressionData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_F0A2AB0C") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_F0A2AB0C)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CB578D5E") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_CB578D5E);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1D5A80A8") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_1D5A80A8);

	p_Stream << "}";
}

void SLevelProgressionData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLevelProgressionData s_Object {};

	s_Object._F0A2AB0C = static_cast<ELevelIndex>(ZHMEnums::GetEnumValueByName("ELevelIndex", std::string_view(p_Document["_F0A2AB0C"])));

	s_Object._CB578D5E = simdjson::from_json_int32(p_Document["_CB578D5E"]);

	s_Object._1D5A80A8 = simdjson::from_json_int32(p_Document["_1D5A80A8"]);

	*reinterpret_cast<SLevelProgressionData*>(p_Target) = s_Object;
}

void SLevelProgressionData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLevelProgressionData*>(p_Object);

}

bool SLevelProgressionData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SLevelProgressionData*>(p_Left);
	auto* s_Right = reinterpret_cast<SLevelProgressionData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SLevelProgressionData::operator==(const SLevelProgressionData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SLevelProgressionData>)
		return false;

	if (_F0A2AB0C != p_Other._F0A2AB0C) return false;
	if (_CB578D5E != p_Other._CB578D5E) return false;
	if (_1D5A80A8 != p_Other._1D5A80A8) return false;

	return true;
}

ZHMTypeInfo SLevelSaveData::TypeInfo = ZHMTypeInfo("SLevelSaveData", sizeof(SLevelSaveData), alignof(SLevelSaveData), SLevelSaveData::WriteJson, SLevelSaveData::WriteSimpleJson, SLevelSaveData::FromSimpleJson, SLevelSaveData::Serialize, SLevelSaveData::Equals);

void SLevelSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_771C430C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ELevelIndex") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_771C430C)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_771C430C))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CA26BF0B") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SCheckpointSaveData>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_CA26BF0B.size(); ++i)
	{
		auto& s_Item0 = s_Object->_CA26BF0B[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SCheckpointSaveData") << ",\"$val\":";
		SCheckpointSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_CA26BF0B.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SLevelSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_771C430C") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ELevelIndex", static_cast<int>(s_Object->_771C430C)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CA26BF0B") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_CA26BF0B.size(); ++i)
	{
		auto& s_Item0 = s_Object->_CA26BF0B[i];
		SCheckpointSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_CA26BF0B.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLevelSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLevelSaveData s_Object {};

	s_Object._771C430C = static_cast<ELevelIndex>(ZHMEnums::GetEnumValueByName("ELevelIndex", std::string_view(p_Document["_771C430C"])));

	for (simdjson::ondemand::value s_Item0 : p_Document["_CA26BF0B"])
	{
		SCheckpointSaveData s_ArrayItem0;
		SCheckpointSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._CA26BF0B.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SLevelSaveData*>(p_Target) = s_Object;
}

void SLevelSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLevelSaveData*>(p_Object);

	TArray<SCheckpointSaveData>::Serialize(&s_Object->_CA26BF0B, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, _CA26BF0B));
}

bool SLevelSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SLevelSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SLevelSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SLevelSaveData::operator==(const SLevelSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SLevelSaveData>)
		return false;

	if (_771C430C != p_Other._771C430C) return false;
	if (_CA26BF0B != p_Other._CA26BF0B) return false;

	return true;
}

ZHMTypeInfo SLoadRuntimeResourceResult::TypeInfo = ZHMTypeInfo("SLoadRuntimeResourceResult", sizeof(SLoadRuntimeResourceResult), alignof(SLoadRuntimeResourceResult), SLoadRuntimeResourceResult::WriteJson, SLoadRuntimeResourceResult::WriteSimpleJson, SLoadRuntimeResourceResult::FromSimpleJson, SLoadRuntimeResourceResult::Serialize, SLoadRuntimeResourceResult::Equals);

void SLoadRuntimeResourceResult::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLoadRuntimeResourceResult*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_7A3DE5D3") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_7A3DE5D3);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AF5136A7") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_AF5136A7);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7DBB26BA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_7DBB26BA);
	p_Stream << "}";

	p_Stream << "}";
}

void SLoadRuntimeResourceResult::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLoadRuntimeResourceResult*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_7A3DE5D3") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_7A3DE5D3);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AF5136A7") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_AF5136A7);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7DBB26BA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_7DBB26BA);

	p_Stream << "}";
}

void SLoadRuntimeResourceResult::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLoadRuntimeResourceResult s_Object {};

	s_Object._7A3DE5D3 = std::string_view(p_Document["_7A3DE5D3"]);

	s_Object._AF5136A7 = std::string_view(p_Document["_AF5136A7"]);

	s_Object._7DBB26BA = std::string_view(p_Document["_7DBB26BA"]);

	*reinterpret_cast<SLoadRuntimeResourceResult*>(p_Target) = s_Object;
}

void SLoadRuntimeResourceResult::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLoadRuntimeResourceResult*>(p_Object);

	ZString::Serialize(&s_Object->_7A3DE5D3, p_Serializer, p_OwnOffset + offsetof(SLoadRuntimeResourceResult, _7A3DE5D3));
	ZString::Serialize(&s_Object->_AF5136A7, p_Serializer, p_OwnOffset + offsetof(SLoadRuntimeResourceResult, _AF5136A7));
	ZString::Serialize(&s_Object->_7DBB26BA, p_Serializer, p_OwnOffset + offsetof(SLoadRuntimeResourceResult, _7DBB26BA));
}

bool SLoadRuntimeResourceResult::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SLoadRuntimeResourceResult*>(p_Left);
	auto* s_Right = reinterpret_cast<SLoadRuntimeResourceResult*>(p_Right);

	return *s_Left == *s_Right;
}

bool SLoadRuntimeResourceResult::operator==(const SLoadRuntimeResourceResult& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SLoadRuntimeResourceResult>)
		return false;

	if (_7A3DE5D3 != p_Other._7A3DE5D3) return false;
	if (_AF5136A7 != p_Other._AF5136A7) return false;
	if (_7DBB26BA != p_Other._7DBB26BA) return false;

	return true;
}

ZHMTypeInfo SMatrix33::TypeInfo = ZHMTypeInfo("SMatrix33", sizeof(SMatrix33), alignof(SMatrix33), SMatrix33::WriteJson, SMatrix33::WriteSimpleJson, SMatrix33::FromSimpleJson, SMatrix33::Serialize, SMatrix33::Equals);

void SMatrix33::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix33*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_CA3885CF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector3") << ",\"$val\":";
	SVector3::WriteJson(&s_Object->_CA3885CF, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F758AC7F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector3") << ",\"$val\":";
	SVector3::WriteJson(&s_Object->_F758AC7F, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B0F8D6AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector3") << ",\"$val\":";
	SVector3::WriteJson(&s_Object->_B0F8D6AF, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix33::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix33*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_CA3885CF") << ":";
	SVector3::WriteSimpleJson(&s_Object->_CA3885CF, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F758AC7F") << ":";
	SVector3::WriteSimpleJson(&s_Object->_F758AC7F, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B0F8D6AF") << ":";
	SVector3::WriteSimpleJson(&s_Object->_B0F8D6AF, p_Stream);

	p_Stream << "}";
}

void SMatrix33::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix33 s_Object {};

	{
		SVector3 s_Item {};
		SVector3::FromSimpleJson(p_Document["_CA3885CF"], &s_Item);
		s_Object._CA3885CF = s_Item;
	}

	{
		SVector3 s_Item {};
		SVector3::FromSimpleJson(p_Document["_F758AC7F"], &s_Item);
		s_Object._F758AC7F = s_Item;
	}

	{
		SVector3 s_Item {};
		SVector3::FromSimpleJson(p_Document["_B0F8D6AF"], &s_Item);
		s_Object._B0F8D6AF = s_Item;
	}

	*reinterpret_cast<SMatrix33*>(p_Target) = s_Object;
}

void SMatrix33::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMatrix33*>(p_Object);

	SVector3::Serialize(&s_Object->_CA3885CF, p_Serializer, p_OwnOffset + offsetof(SMatrix33, _CA3885CF));
	SVector3::Serialize(&s_Object->_F758AC7F, p_Serializer, p_OwnOffset + offsetof(SMatrix33, _F758AC7F));
	SVector3::Serialize(&s_Object->_B0F8D6AF, p_Serializer, p_OwnOffset + offsetof(SMatrix33, _B0F8D6AF));
}

bool SMatrix33::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SMatrix33*>(p_Left);
	auto* s_Right = reinterpret_cast<SMatrix33*>(p_Right);

	return *s_Left == *s_Right;
}

bool SMatrix33::operator==(const SMatrix33& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SMatrix33>)
		return false;

	if (_CA3885CF != p_Other._CA3885CF) return false;
	if (_F758AC7F != p_Other._F758AC7F) return false;
	if (_B0F8D6AF != p_Other._B0F8D6AF) return false;

	return true;
}

ZHMTypeInfo SMatrix43::TypeInfo = ZHMTypeInfo("SMatrix43", sizeof(SMatrix43), alignof(SMatrix43), SMatrix43::WriteJson, SMatrix43::WriteSimpleJson, SMatrix43::FromSimpleJson, SMatrix43::Serialize, SMatrix43::Equals);

void SMatrix43::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix43*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_CA3885CF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector3") << ",\"$val\":";
	SVector3::WriteJson(&s_Object->_CA3885CF, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F758AC7F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector3") << ",\"$val\":";
	SVector3::WriteJson(&s_Object->_F758AC7F, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B0F8D6AF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector3") << ",\"$val\":";
	SVector3::WriteJson(&s_Object->_B0F8D6AF, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B1E031B9") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SVector3") << ",\"$val\":";
	SVector3::WriteJson(&s_Object->_B1E031B9, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix43::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix43*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_CA3885CF") << ":";
	SVector3::WriteSimpleJson(&s_Object->_CA3885CF, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F758AC7F") << ":";
	SVector3::WriteSimpleJson(&s_Object->_F758AC7F, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B0F8D6AF") << ":";
	SVector3::WriteSimpleJson(&s_Object->_B0F8D6AF, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B1E031B9") << ":";
	SVector3::WriteSimpleJson(&s_Object->_B1E031B9, p_Stream);

	p_Stream << "}";
}

void SMatrix43::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix43 s_Object {};

	{
		SVector3 s_Item {};
		SVector3::FromSimpleJson(p_Document["_CA3885CF"], &s_Item);
		s_Object._CA3885CF = s_Item;
	}

	{
		SVector3 s_Item {};
		SVector3::FromSimpleJson(p_Document["_F758AC7F"], &s_Item);
		s_Object._F758AC7F = s_Item;
	}

	{
		SVector3 s_Item {};
		SVector3::FromSimpleJson(p_Document["_B0F8D6AF"], &s_Item);
		s_Object._B0F8D6AF = s_Item;
	}

	{
		SVector3 s_Item {};
		SVector3::FromSimpleJson(p_Document["_B1E031B9"], &s_Item);
		s_Object._B1E031B9 = s_Item;
	}

	*reinterpret_cast<SMatrix43*>(p_Target) = s_Object;
}

void SMatrix43::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMatrix43*>(p_Object);

	SVector3::Serialize(&s_Object->_CA3885CF, p_Serializer, p_OwnOffset + offsetof(SMatrix43, _CA3885CF));
	SVector3::Serialize(&s_Object->_F758AC7F, p_Serializer, p_OwnOffset + offsetof(SMatrix43, _F758AC7F));
	SVector3::Serialize(&s_Object->_B0F8D6AF, p_Serializer, p_OwnOffset + offsetof(SMatrix43, _B0F8D6AF));
	SVector3::Serialize(&s_Object->_B1E031B9, p_Serializer, p_OwnOffset + offsetof(SMatrix43, _B1E031B9));
}

bool SMatrix43::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SMatrix43*>(p_Left);
	auto* s_Right = reinterpret_cast<SMatrix43*>(p_Right);

	return *s_Left == *s_Right;
}

bool SMatrix43::operator==(const SMatrix43& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SMatrix43>)
		return false;

	if (_CA3885CF != p_Other._CA3885CF) return false;
	if (_F758AC7F != p_Other._F758AC7F) return false;
	if (_B0F8D6AF != p_Other._B0F8D6AF) return false;
	if (_B1E031B9 != p_Other._B1E031B9) return false;

	return true;
}

ZHMTypeInfo SMatrix44::TypeInfo = ZHMTypeInfo("SMatrix44", sizeof(SMatrix44), alignof(SMatrix44), SMatrix44::WriteJson, SMatrix44::WriteSimpleJson, SMatrix44::FromSimpleJson, SMatrix44::Serialize, SMatrix44::Equals);

void SMatrix44::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix44*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_28CD86E9") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_28CD86E9);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B1C4D753") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B1C4D753);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_C6C3E7C5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_C6C3E7C5);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_58A77266") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_58A77266);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_03E0D52A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_03E0D52A);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9AE98490") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_9AE98490);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EDEEB406") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_EDEEB406);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_738A21A5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_738A21A5);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1AFBE46B") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_1AFBE46B);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_83F2B5D1") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_83F2B5D1);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F4F58547") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_F4F58547);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6A9110E4") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_6A9110E4);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_55BA72AC") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_55BA72AC);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CCB32316") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_CCB32316);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_BBB41380") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_BBB41380);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_25D08623") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_25D08623);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix44::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix44*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_28CD86E9") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_28CD86E9);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B1C4D753") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B1C4D753);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_C6C3E7C5") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_C6C3E7C5);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_58A77266") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_58A77266);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_03E0D52A") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_03E0D52A);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9AE98490") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_9AE98490);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EDEEB406") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_EDEEB406);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_738A21A5") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_738A21A5);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1AFBE46B") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_1AFBE46B);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_83F2B5D1") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_83F2B5D1);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F4F58547") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_F4F58547);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6A9110E4") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_6A9110E4);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_55BA72AC") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_55BA72AC);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CCB32316") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_CCB32316);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_BBB41380") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_BBB41380);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_25D08623") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_25D08623);

	p_Stream << "}";
}

void SMatrix44::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix44 s_Object {};

	s_Object._28CD86E9 = simdjson::from_json_float32(p_Document["_28CD86E9"]);

	s_Object._B1C4D753 = simdjson::from_json_float32(p_Document["_B1C4D753"]);

	s_Object._C6C3E7C5 = simdjson::from_json_float32(p_Document["_C6C3E7C5"]);

	s_Object._58A77266 = simdjson::from_json_float32(p_Document["_58A77266"]);

	s_Object._03E0D52A = simdjson::from_json_float32(p_Document["_03E0D52A"]);

	s_Object._9AE98490 = simdjson::from_json_float32(p_Document["_9AE98490"]);

	s_Object._EDEEB406 = simdjson::from_json_float32(p_Document["_EDEEB406"]);

	s_Object._738A21A5 = simdjson::from_json_float32(p_Document["_738A21A5"]);

	s_Object._1AFBE46B = simdjson::from_json_float32(p_Document["_1AFBE46B"]);

	s_Object._83F2B5D1 = simdjson::from_json_float32(p_Document["_83F2B5D1"]);

	s_Object._F4F58547 = simdjson::from_json_float32(p_Document["_F4F58547"]);

	s_Object._6A9110E4 = simdjson::from_json_float32(p_Document["_6A9110E4"]);

	s_Object._55BA72AC = simdjson::from_json_float32(p_Document["_55BA72AC"]);

	s_Object._CCB32316 = simdjson::from_json_float32(p_Document["_CCB32316"]);

	s_Object._BBB41380 = simdjson::from_json_float32(p_Document["_BBB41380"]);

	s_Object._25D08623 = simdjson::from_json_float32(p_Document["_25D08623"]);

	*reinterpret_cast<SMatrix44*>(p_Target) = s_Object;
}

void SMatrix44::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMatrix44*>(p_Object);

}

bool SMatrix44::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SMatrix44*>(p_Left);
	auto* s_Right = reinterpret_cast<SMatrix44*>(p_Right);

	return *s_Left == *s_Right;
}

bool SMatrix44::operator==(const SMatrix44& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SMatrix44>)
		return false;

	if (_28CD86E9 != p_Other._28CD86E9) return false;
	if (_B1C4D753 != p_Other._B1C4D753) return false;
	if (_C6C3E7C5 != p_Other._C6C3E7C5) return false;
	if (_58A77266 != p_Other._58A77266) return false;
	if (_03E0D52A != p_Other._03E0D52A) return false;
	if (_9AE98490 != p_Other._9AE98490) return false;
	if (_EDEEB406 != p_Other._EDEEB406) return false;
	if (_738A21A5 != p_Other._738A21A5) return false;
	if (_1AFBE46B != p_Other._1AFBE46B) return false;
	if (_83F2B5D1 != p_Other._83F2B5D1) return false;
	if (_F4F58547 != p_Other._F4F58547) return false;
	if (_6A9110E4 != p_Other._6A9110E4) return false;
	if (_55BA72AC != p_Other._55BA72AC) return false;
	if (_CCB32316 != p_Other._CCB32316) return false;
	if (_BBB41380 != p_Other._BBB41380) return false;
	if (_25D08623 != p_Other._25D08623) return false;

	return true;
}

ZHMTypeInfo SMiscSaveData::TypeInfo = ZHMTypeInfo("SMiscSaveData", sizeof(SMiscSaveData), alignof(SMiscSaveData), SMiscSaveData::WriteJson, SMiscSaveData::WriteSimpleJson, SMiscSaveData::FromSimpleJson, SMiscSaveData::Serialize, SMiscSaveData::Equals);

void SMiscSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMiscSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_DBCDACAE") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_DBCDACAE);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E6559F40") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_E6559F40);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3C4892A2") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_3C4892A2);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9D5D650C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STokenID") << ",\"$val\":";
	STokenID::WriteJson(&s_Object->_9D5D650C, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_C66C54EB") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STokenID") << ",\"$val\":";
	STokenID::WriteJson(&s_Object->_C66C54EB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E9DA2719") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_E9DA2719);
	p_Stream << "}";

	p_Stream << "}";
}

void SMiscSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMiscSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_DBCDACAE") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_DBCDACAE);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E6559F40") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_E6559F40);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3C4892A2") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_3C4892A2);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9D5D650C") << ":";
	STokenID::WriteSimpleJson(&s_Object->_9D5D650C, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_C66C54EB") << ":";
	STokenID::WriteSimpleJson(&s_Object->_C66C54EB, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E9DA2719") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_E9DA2719);

	p_Stream << "}";
}

void SMiscSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMiscSaveData s_Object {};

	s_Object._DBCDACAE = simdjson::from_json_bool(p_Document["_DBCDACAE"]);

	s_Object._E6559F40 = simdjson::from_json_bool(p_Document["_E6559F40"]);

	s_Object._3C4892A2 = simdjson::from_json_bool(p_Document["_3C4892A2"]);

	{
		STokenID s_Item {};
		STokenID::FromSimpleJson(p_Document["_9D5D650C"], &s_Item);
		s_Object._9D5D650C = s_Item;
	}

	{
		STokenID s_Item {};
		STokenID::FromSimpleJson(p_Document["_C66C54EB"], &s_Item);
		s_Object._C66C54EB = s_Item;
	}

	s_Object._E9DA2719 = simdjson::from_json_uint32(p_Document["_E9DA2719"]);

	*reinterpret_cast<SMiscSaveData*>(p_Target) = s_Object;
}

void SMiscSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMiscSaveData*>(p_Object);

	STokenID::Serialize(&s_Object->_9D5D650C, p_Serializer, p_OwnOffset + offsetof(SMiscSaveData, _9D5D650C));
	STokenID::Serialize(&s_Object->_C66C54EB, p_Serializer, p_OwnOffset + offsetof(SMiscSaveData, _C66C54EB));
}

bool SMiscSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SMiscSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SMiscSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SMiscSaveData::operator==(const SMiscSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SMiscSaveData>)
		return false;

	if (_DBCDACAE != p_Other._DBCDACAE) return false;
	if (_E6559F40 != p_Other._E6559F40) return false;
	if (_3C4892A2 != p_Other._3C4892A2) return false;
	if (_9D5D650C != p_Other._9D5D650C) return false;
	if (_C66C54EB != p_Other._C66C54EB) return false;
	if (_E9DA2719 != p_Other._E9DA2719) return false;

	return true;
}

ZHMTypeInfo SNRange::TypeInfo = ZHMTypeInfo("SNRange", sizeof(SNRange), alignof(SNRange), SNRange::WriteJson, SNRange::WriteSimpleJson, SNRange::FromSimpleJson, SNRange::Serialize, SNRange::Equals);

void SNRange::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SNRange*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_0265E72F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_0265E72F);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3E68D876") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_3E68D876);
	p_Stream << "}";

	p_Stream << "}";
}

void SNRange::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SNRange*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_0265E72F") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_0265E72F);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_3E68D876") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_3E68D876);

	p_Stream << "}";
}

void SNRange::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SNRange s_Object {};

	s_Object._0265E72F = simdjson::from_json_int32(p_Document["_0265E72F"]);

	s_Object._3E68D876 = simdjson::from_json_int32(p_Document["_3E68D876"]);

	*reinterpret_cast<SNRange*>(p_Target) = s_Object;
}

void SNRange::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SNRange*>(p_Object);

}

bool SNRange::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SNRange*>(p_Left);
	auto* s_Right = reinterpret_cast<SNRange*>(p_Right);

	return *s_Left == *s_Right;
}

bool SNRange::operator==(const SNRange& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SNRange>)
		return false;

	if (_0265E72F != p_Other._0265E72F) return false;
	if (_3E68D876 != p_Other._3E68D876) return false;

	return true;
}

ZHMTypeInfo SPOISaveData::TypeInfo = ZHMTypeInfo("SPOISaveData", sizeof(SPOISaveData), alignof(SPOISaveData), SPOISaveData::WriteJson, SPOISaveData::WriteSimpleJson, SPOISaveData::FromSimpleJson, SPOISaveData::Serialize, SPOISaveData::Equals);

void SPOISaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPOISaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_3B757F3E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_3B757F3E);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_26E32D49") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_26E32D49);
	p_Stream << "}";

	p_Stream << "}";
}

void SPOISaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPOISaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_3B757F3E") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_3B757F3E);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_26E32D49") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_26E32D49);

	p_Stream << "}";
}

void SPOISaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPOISaveData s_Object {};

	s_Object._3B757F3E = simdjson::from_json_int32(p_Document["_3B757F3E"]);

	s_Object._26E32D49 = simdjson::from_json_bool(p_Document["_26E32D49"]);

	*reinterpret_cast<SPOISaveData*>(p_Target) = s_Object;
}

void SPOISaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPOISaveData*>(p_Object);

}

bool SPOISaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SPOISaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<SPOISaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SPOISaveData::operator==(const SPOISaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SPOISaveData>)
		return false;

	if (_3B757F3E != p_Other._3B757F3E) return false;
	if (_26E32D49 != p_Other._26E32D49) return false;

	return true;
}

ZHMTypeInfo SRatingData::TypeInfo = ZHMTypeInfo("SRatingData", sizeof(SRatingData), alignof(SRatingData), SRatingData::WriteJson, SRatingData::WriteSimpleJson, SRatingData::FromSimpleJson, SRatingData::Serialize, SRatingData::Equals);

void SRatingData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRatingData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_64147134") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<uint16>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_64147134.size(); ++i)
	{
		auto& s_Item0 = s_Object->_64147134[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("uint16") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_64147134.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_133F9C34") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<bool>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_133F9C34.size(); ++i)
	{
		auto& s_Item0 = s_Object->_133F9C34[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_133F9C34.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_911A2395") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<bool>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_911A2395.size(); ++i)
	{
		auto& s_Item0 = s_Object->_911A2395[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_911A2395.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EC99D89C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<DifficultyLevelEnum>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_EC99D89C.size(); ++i)
	{
		auto& s_Item0 = s_Object->_EC99D89C[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("DifficultyLevelEnum") << ",\"$val\":";
		p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Item0)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("DifficultyLevelEnum", static_cast<int>(s_Item0))) << "}";
		p_Stream << "}";

		if (i < s_Object->_EC99D89C.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_50471093") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_50471093.size(); ++i)
	{
		auto& s_Item0 = s_Object->_50471093[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_50471093.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0EBD8ED2") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_0EBD8ED2);
	p_Stream << "}";

	p_Stream << "}";
}

void SRatingData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRatingData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_64147134") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_64147134.size(); ++i)
	{
		auto& s_Item0 = s_Object->_64147134[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_64147134.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_133F9C34") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_133F9C34.size(); ++i)
	{
		auto& s_Item0 = s_Object->_133F9C34[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_133F9C34.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_911A2395") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_911A2395.size(); ++i)
	{
		auto& s_Item0 = s_Object->_911A2395[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_911A2395.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_EC99D89C") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_EC99D89C.size(); ++i)
	{
		auto& s_Item0 = s_Object->_EC99D89C[i];
		p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("DifficultyLevelEnum", static_cast<int>(s_Item0)));

		if (i < s_Object->_EC99D89C.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_50471093") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_50471093.size(); ++i)
	{
		auto& s_Item0 = s_Object->_50471093[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_50471093.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0EBD8ED2") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_0EBD8ED2);

	p_Stream << "}";
}

void SRatingData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRatingData s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_64147134"])
	{
		s_Object._64147134.push_back(simdjson::from_json_uint16(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_133F9C34"])
	{
		s_Object._133F9C34.push_back(simdjson::from_json_bool(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_911A2395"])
	{
		s_Object._911A2395.push_back(simdjson::from_json_bool(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_EC99D89C"])
	{
		s_Object._EC99D89C.push_back(static_cast<DifficultyLevelEnum>(ZHMEnums::GetEnumValueByName("DifficultyLevelEnum", std::string_view(s_Item0))));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_50471093"])
	{
		s_Object._50471093.push_back(simdjson::from_json_int32(s_Item0));
	}

	s_Object._0EBD8ED2 = simdjson::from_json_int32(p_Document["_0EBD8ED2"]);

	*reinterpret_cast<SRatingData*>(p_Target) = s_Object;
}

void SRatingData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRatingData*>(p_Object);

	TArray<uint16>::Serialize(&s_Object->_64147134, p_Serializer, p_OwnOffset + offsetof(SRatingData, _64147134));
	TArray<bool>::Serialize(&s_Object->_133F9C34, p_Serializer, p_OwnOffset + offsetof(SRatingData, _133F9C34));
	TArray<bool>::Serialize(&s_Object->_911A2395, p_Serializer, p_OwnOffset + offsetof(SRatingData, _911A2395));
	TArray<DifficultyLevelEnum>::Serialize(&s_Object->_EC99D89C, p_Serializer, p_OwnOffset + offsetof(SRatingData, _EC99D89C));
	TArray<int32>::Serialize(&s_Object->_50471093, p_Serializer, p_OwnOffset + offsetof(SRatingData, _50471093));
}

bool SRatingData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SRatingData*>(p_Left);
	auto* s_Right = reinterpret_cast<SRatingData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SRatingData::operator==(const SRatingData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SRatingData>)
		return false;

	if (_64147134 != p_Other._64147134) return false;
	if (_133F9C34 != p_Other._133F9C34) return false;
	if (_911A2395 != p_Other._911A2395) return false;
	if (_EC99D89C != p_Other._EC99D89C) return false;
	if (_50471093 != p_Other._50471093) return false;
	if (_0EBD8ED2 != p_Other._0EBD8ED2) return false;

	return true;
}

ZHMTypeInfo SRatingHighScoreData::TypeInfo = ZHMTypeInfo("SRatingHighScoreData", sizeof(SRatingHighScoreData), alignof(SRatingHighScoreData), SRatingHighScoreData::WriteJson, SRatingHighScoreData::WriteSimpleJson, SRatingHighScoreData::FromSimpleJson, SRatingHighScoreData::Serialize, SRatingHighScoreData::Equals);

void SRatingHighScoreData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRatingHighScoreData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_888ACA2B") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<uint32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_888ACA2B.size(); ++i)
	{
		auto& s_Item0 = s_Object->_888ACA2B[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_888ACA2B.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4E9FBCD6") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<int8>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_4E9FBCD6.size(); ++i)
	{
		auto& s_Item0 = s_Object->_4E9FBCD6[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("int8") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_4E9FBCD6.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SRatingHighScoreData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRatingHighScoreData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_888ACA2B") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_888ACA2B.size(); ++i)
	{
		auto& s_Item0 = s_Object->_888ACA2B[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_888ACA2B.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4E9FBCD6") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_4E9FBCD6.size(); ++i)
	{
		auto& s_Item0 = s_Object->_4E9FBCD6[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_4E9FBCD6.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SRatingHighScoreData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRatingHighScoreData s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_888ACA2B"])
	{
		s_Object._888ACA2B.push_back(simdjson::from_json_uint32(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_4E9FBCD6"])
	{
		s_Object._4E9FBCD6.push_back(simdjson::from_json_int8(s_Item0));
	}

	*reinterpret_cast<SRatingHighScoreData*>(p_Target) = s_Object;
}

void SRatingHighScoreData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRatingHighScoreData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->_888ACA2B, p_Serializer, p_OwnOffset + offsetof(SRatingHighScoreData, _888ACA2B));
	TArray<int8>::Serialize(&s_Object->_4E9FBCD6, p_Serializer, p_OwnOffset + offsetof(SRatingHighScoreData, _4E9FBCD6));
}

bool SRatingHighScoreData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SRatingHighScoreData*>(p_Left);
	auto* s_Right = reinterpret_cast<SRatingHighScoreData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SRatingHighScoreData::operator==(const SRatingHighScoreData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SRatingHighScoreData>)
		return false;

	if (_888ACA2B != p_Other._888ACA2B) return false;
	if (_4E9FBCD6 != p_Other._4E9FBCD6) return false;

	return true;
}

ZHMTypeInfo ZBitArray::TypeInfo = ZHMTypeInfo("ZBitArray", sizeof(ZBitArray), alignof(ZBitArray), ZBitArray::WriteJson, ZBitArray::WriteSimpleJson, ZBitArray::FromSimpleJson, ZBitArray::Serialize, ZBitArray::Equals);

void ZBitArray::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZBitArray*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_8E83B475") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<uint8>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_8E83B475.size(); ++i)
	{
		auto& s_Item0 = s_Object->_8E83B475[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("uint8") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_8E83B475.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_DA61D51D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_DA61D51D);
	p_Stream << "}";

	p_Stream << "}";
}

void ZBitArray::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZBitArray*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_8E83B475") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_8E83B475.size(); ++i)
	{
		auto& s_Item0 = s_Object->_8E83B475[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_8E83B475.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_DA61D51D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_DA61D51D);

	p_Stream << "}";
}

void ZBitArray::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZBitArray s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_8E83B475"])
	{
		s_Object._8E83B475.push_back(simdjson::from_json_uint8(s_Item0));
	}

	s_Object._DA61D51D = simdjson::from_json_uint32(p_Document["_DA61D51D"]);

	*reinterpret_cast<ZBitArray*>(p_Target) = s_Object;
}

void ZBitArray::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZBitArray*>(p_Object);

	TArray<uint8>::Serialize(&s_Object->_8E83B475, p_Serializer, p_OwnOffset + offsetof(ZBitArray, _8E83B475));
}

bool ZBitArray::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZBitArray*>(p_Left);
	auto* s_Right = reinterpret_cast<ZBitArray*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZBitArray::operator==(const ZBitArray& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZBitArray>)
		return false;

	if (_8E83B475 != p_Other._8E83B475) return false;
	if (_DA61D51D != p_Other._DA61D51D) return false;

	return true;
}

ZHMTypeInfo SReasoningGrid::TypeInfo = ZHMTypeInfo("SReasoningGrid", sizeof(SReasoningGrid), alignof(SReasoningGrid), SReasoningGrid::WriteJson, SReasoningGrid::WriteSimpleJson, SReasoningGrid::FromSimpleJson, SReasoningGrid::Serialize, SReasoningGrid::Equals);

void SReasoningGrid::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SReasoningGrid*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_0BD7E833") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SGWaypoint>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_0BD7E833.size(); ++i)
	{
		auto& s_Item0 = s_Object->_0BD7E833[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SGWaypoint") << ",\"$val\":";
		SGWaypoint::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_0BD7E833.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0439BC82") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZBitArray") << ",\"$val\":";
	ZBitArray::WriteJson(&s_Object->_0439BC82, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7FBA18A8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZBitArray") << ",\"$val\":";
	ZBitArray::WriteJson(&s_Object->_7FBA18A8, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4FCDFF9C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<TArray<uint16>>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_4FCDFF9C.size(); ++i)
	{
		auto& s_Item0 = s_Object->_4FCDFF9C[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<uint16>") << ",\"$val\":";
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			p_Stream << "{\"$type\":" << simdjson::as_json_string("uint16") << ",\"$val\":";
			p_Stream << simdjson::as_json_string(s_Item1);
			p_Stream << "}";

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}
		p_Stream << "]";
		p_Stream << "}";

		if (i < s_Object->_4FCDFF9C.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B6A34009") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<TArray<uint16>>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B6A34009.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B6A34009[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<uint16>") << ",\"$val\":";
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			p_Stream << "{\"$type\":" << simdjson::as_json_string("uint16") << ",\"$val\":";
			p_Stream << simdjson::as_json_string(s_Item1);
			p_Stream << "}";

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}
		p_Stream << "]";
		p_Stream << "}";

		if (i < s_Object->_B6A34009.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0D7AD80A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SGProperties") << ",\"$val\":";
	SGProperties::WriteJson(&s_Object->_0D7AD80A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F7ACE02C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_F7ACE02C);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5321B64E") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_5321B64E);
	p_Stream << "}";

	p_Stream << "}";
}

void SReasoningGrid::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SReasoningGrid*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_0BD7E833") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_0BD7E833.size(); ++i)
	{
		auto& s_Item0 = s_Object->_0BD7E833[i];
		SGWaypoint::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_0BD7E833.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0439BC82") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->_0439BC82, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7FBA18A8") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->_7FBA18A8, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_4FCDFF9C") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_4FCDFF9C.size(); ++i)
	{
		auto& s_Item0 = s_Object->_4FCDFF9C[i];
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			p_Stream << simdjson::as_json_string(s_Item1);

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}

		p_Stream << "]";

		if (i < s_Object->_4FCDFF9C.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B6A34009") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B6A34009.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B6A34009[i];
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			p_Stream << simdjson::as_json_string(s_Item1);

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}

		p_Stream << "]";

		if (i < s_Object->_B6A34009.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_0D7AD80A") << ":";
	SGProperties::WriteSimpleJson(&s_Object->_0D7AD80A, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_F7ACE02C") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_F7ACE02C);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5321B64E") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_5321B64E);

	p_Stream << "}";
}

void SReasoningGrid::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SReasoningGrid s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_0BD7E833"])
	{
		SGWaypoint s_ArrayItem0;
		SGWaypoint::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._0BD7E833.push_back(s_ArrayItem0);
	}

	{
		ZBitArray s_Item {};
		ZBitArray::FromSimpleJson(p_Document["_0439BC82"], &s_Item);
		s_Object._0439BC82 = s_Item;
	}

	{
		ZBitArray s_Item {};
		ZBitArray::FromSimpleJson(p_Document["_7FBA18A8"], &s_Item);
		s_Object._7FBA18A8 = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_4FCDFF9C"])
	{
		TArray<uint16> s_ArrayItem0;
		for (simdjson::ondemand::value s_Item1 : s_Item0)
		{
			s_ArrayItem0.push_back(simdjson::from_json_uint16(s_Item1));
		}
		s_Object._4FCDFF9C.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_B6A34009"])
	{
		TArray<uint16> s_ArrayItem0;
		for (simdjson::ondemand::value s_Item1 : s_Item0)
		{
			s_ArrayItem0.push_back(simdjson::from_json_uint16(s_Item1));
		}
		s_Object._B6A34009.push_back(s_ArrayItem0);
	}

	{
		SGProperties s_Item {};
		SGProperties::FromSimpleJson(p_Document["_0D7AD80A"], &s_Item);
		s_Object._0D7AD80A = s_Item;
	}

	s_Object._F7ACE02C = simdjson::from_json_uint32(p_Document["_F7ACE02C"]);

	s_Object._5321B64E = simdjson::from_json_uint32(p_Document["_5321B64E"]);

	*reinterpret_cast<SReasoningGrid*>(p_Target) = s_Object;
}

void SReasoningGrid::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SReasoningGrid*>(p_Object);

	TArray<SGWaypoint>::Serialize(&s_Object->_0BD7E833, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, _0BD7E833));
	ZBitArray::Serialize(&s_Object->_0439BC82, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, _0439BC82));
	ZBitArray::Serialize(&s_Object->_7FBA18A8, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, _7FBA18A8));
	TArray<TArray<uint16>>::Serialize(&s_Object->_4FCDFF9C, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, _4FCDFF9C));
	TArray<TArray<uint16>>::Serialize(&s_Object->_B6A34009, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, _B6A34009));
	SGProperties::Serialize(&s_Object->_0D7AD80A, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, _0D7AD80A));
}

bool SReasoningGrid::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SReasoningGrid*>(p_Left);
	auto* s_Right = reinterpret_cast<SReasoningGrid*>(p_Right);

	return *s_Left == *s_Right;
}

bool SReasoningGrid::operator==(const SReasoningGrid& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SReasoningGrid>)
		return false;

	if (_0BD7E833 != p_Other._0BD7E833) return false;
	if (_0439BC82 != p_Other._0439BC82) return false;
	if (_7FBA18A8 != p_Other._7FBA18A8) return false;
	if (_4FCDFF9C != p_Other._4FCDFF9C) return false;
	if (_B6A34009 != p_Other._B6A34009) return false;
	if (_0D7AD80A != p_Other._0D7AD80A) return false;
	if (_F7ACE02C != p_Other._F7ACE02C) return false;
	if (_5321B64E != p_Other._5321B64E) return false;

	return true;
}

ZHMTypeInfo SSerializedValue::TypeInfo = ZHMTypeInfo("SSerializedValue", sizeof(SSerializedValue), alignof(SSerializedValue), SSerializedValue::WriteJson, SSerializedValue::WriteSimpleJson, SSerializedValue::FromSimpleJson, SSerializedValue::Serialize, SSerializedValue::Equals);

void SSerializedValue::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSerializedValue*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SSerializedValue::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSerializedValue*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SSerializedValue::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSerializedValue s_Object {};

	*reinterpret_cast<SSerializedValue*>(p_Target) = s_Object;
}

void SSerializedValue::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSerializedValue*>(p_Object);

}

bool SSerializedValue::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SSerializedValue*>(p_Left);
	auto* s_Right = reinterpret_cast<SSerializedValue*>(p_Right);

	return *s_Left == *s_Right;
}

bool SSerializedValue::operator==(const SSerializedValue& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SSerializedValue>)
		return false;


	return true;
}

ZHMTypeInfo SSettingsParamMultiplier::TypeInfo = ZHMTypeInfo("SSettingsParamMultiplier", sizeof(SSettingsParamMultiplier), alignof(SSettingsParamMultiplier), SSettingsParamMultiplier::WriteJson, SSettingsParamMultiplier::WriteSimpleJson, SSettingsParamMultiplier::FromSimpleJson, SSettingsParamMultiplier::Serialize, SSettingsParamMultiplier::Equals);

void SSettingsParamMultiplier::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSettingsParamMultiplier*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_EE282AB6") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ESettingsParam") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_EE282AB6)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ESettingsParam", static_cast<int>(s_Object->_EE282AB6))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B868A759") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B868A759);
	p_Stream << "}";

	p_Stream << "}";
}

void SSettingsParamMultiplier::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSettingsParamMultiplier*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_EE282AB6") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("ESettingsParam", static_cast<int>(s_Object->_EE282AB6)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B868A759") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B868A759);

	p_Stream << "}";
}

void SSettingsParamMultiplier::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSettingsParamMultiplier s_Object {};

	s_Object._EE282AB6 = static_cast<ESettingsParam>(ZHMEnums::GetEnumValueByName("ESettingsParam", std::string_view(p_Document["_EE282AB6"])));

	s_Object._B868A759 = simdjson::from_json_float32(p_Document["_B868A759"]);

	*reinterpret_cast<SSettingsParamMultiplier*>(p_Target) = s_Object;
}

void SSettingsParamMultiplier::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSettingsParamMultiplier*>(p_Object);

}

bool SSettingsParamMultiplier::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SSettingsParamMultiplier*>(p_Left);
	auto* s_Right = reinterpret_cast<SSettingsParamMultiplier*>(p_Right);

	return *s_Left == *s_Right;
}

bool SSettingsParamMultiplier::operator==(const SSettingsParamMultiplier& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SSettingsParamMultiplier>)
		return false;

	if (_EE282AB6 != p_Other._EE282AB6) return false;
	if (_B868A759 != p_Other._B868A759) return false;

	return true;
}

ZHMTypeInfo STechniqueUnlockState::TypeInfo = ZHMTypeInfo("STechniqueUnlockState", sizeof(STechniqueUnlockState), alignof(STechniqueUnlockState), STechniqueUnlockState::WriteJson, STechniqueUnlockState::WriteSimpleJson, STechniqueUnlockState::FromSimpleJson, STechniqueUnlockState::Serialize, STechniqueUnlockState::Equals);

void STechniqueUnlockState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STechniqueUnlockState*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_6001FCE6") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STokenID") << ",\"$val\":";
	STokenID::WriteJson(&s_Object->_6001FCE6, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A2634313") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("HMTechniques.ETechnique") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_A2634313)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("HMTechniques.ETechnique", static_cast<int>(s_Object->_A2634313))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_49A3B9C5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_49A3B9C5);
	p_Stream << "}";

	p_Stream << "}";
}

void STechniqueUnlockState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STechniqueUnlockState*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_6001FCE6") << ":";
	STokenID::WriteSimpleJson(&s_Object->_6001FCE6, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A2634313") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("HMTechniques.ETechnique", static_cast<int>(s_Object->_A2634313)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_49A3B9C5") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_49A3B9C5);

	p_Stream << "}";
}

void STechniqueUnlockState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STechniqueUnlockState s_Object {};

	{
		STokenID s_Item {};
		STokenID::FromSimpleJson(p_Document["_6001FCE6"], &s_Item);
		s_Object._6001FCE6 = s_Item;
	}

	s_Object._A2634313 = static_cast<HMTechniques_ETechnique>(ZHMEnums::GetEnumValueByName("HMTechniques.ETechnique", std::string_view(p_Document["_A2634313"])));

	s_Object._49A3B9C5 = simdjson::from_json_int32(p_Document["_49A3B9C5"]);

	*reinterpret_cast<STechniqueUnlockState*>(p_Target) = s_Object;
}

void STechniqueUnlockState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STechniqueUnlockState*>(p_Object);

	STokenID::Serialize(&s_Object->_6001FCE6, p_Serializer, p_OwnOffset + offsetof(STechniqueUnlockState, _6001FCE6));
}

bool STechniqueUnlockState::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<STechniqueUnlockState*>(p_Left);
	auto* s_Right = reinterpret_cast<STechniqueUnlockState*>(p_Right);

	return *s_Left == *s_Right;
}

bool STechniqueUnlockState::operator==(const STechniqueUnlockState& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<STechniqueUnlockState>)
		return false;

	if (_6001FCE6 != p_Other._6001FCE6) return false;
	if (_A2634313 != p_Other._A2634313) return false;
	if (_49A3B9C5 != p_Other._49A3B9C5) return false;

	return true;
}

ZHMTypeInfo STechniquesSaveData::TypeInfo = ZHMTypeInfo("STechniquesSaveData", sizeof(STechniquesSaveData), alignof(STechniquesSaveData), STechniquesSaveData::WriteJson, STechniquesSaveData::WriteSimpleJson, STechniquesSaveData::FromSimpleJson, STechniquesSaveData::Serialize, STechniquesSaveData::Equals);

void STechniquesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STechniquesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_B5537A08") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TFixedArray<uint8>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B5537A08.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B5537A08[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("uint8") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_B5537A08.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7ED76297") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<STechniqueUnlockState>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_7ED76297.size(); ++i)
	{
		auto& s_Item0 = s_Object->_7ED76297[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("STechniqueUnlockState") << ",\"$val\":";
		STechniqueUnlockState::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_7ED76297.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_949204C5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<bool>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_949204C5.size(); ++i)
	{
		auto& s_Item0 = s_Object->_949204C5[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("bool") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_949204C5.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1BA6F5A6") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STechniqueUnlockState") << ",\"$val\":";
	STechniqueUnlockState::WriteJson(&s_Object->_1BA6F5A6, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STechniquesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STechniquesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_B5537A08") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B5537A08.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B5537A08[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_B5537A08.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7ED76297") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_7ED76297.size(); ++i)
	{
		auto& s_Item0 = s_Object->_7ED76297[i];
		STechniqueUnlockState::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_7ED76297.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_949204C5") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_949204C5.size(); ++i)
	{
		auto& s_Item0 = s_Object->_949204C5[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_949204C5.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_1BA6F5A6") << ":";
	STechniqueUnlockState::WriteSimpleJson(&s_Object->_1BA6F5A6, p_Stream);

	p_Stream << "}";
}

void STechniquesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STechniquesSaveData s_Object {};

	{
	size_t s_Index0 = 0;
	for (simdjson::ondemand::value s_Item0 : p_Document["_B5537A08"])
	{
		s_Object._B5537A08[s_Index0] = simdjson::from_json_uint8(s_Item0);
		++s_Index0;
	}
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_7ED76297"])
	{
		STechniqueUnlockState s_ArrayItem0;
		STechniqueUnlockState::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._7ED76297.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_949204C5"])
	{
		s_Object._949204C5.push_back(simdjson::from_json_bool(s_Item0));
	}

	{
		STechniqueUnlockState s_Item {};
		STechniqueUnlockState::FromSimpleJson(p_Document["_1BA6F5A6"], &s_Item);
		s_Object._1BA6F5A6 = s_Item;
	}

	*reinterpret_cast<STechniquesSaveData*>(p_Target) = s_Object;
}

void STechniquesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STechniquesSaveData*>(p_Object);

	TFixedArray<uint8, 10>::Serialize(&s_Object->_B5537A08, p_Serializer, p_OwnOffset + offsetof(STechniquesSaveData, _B5537A08));
	TArray<STechniqueUnlockState>::Serialize(&s_Object->_7ED76297, p_Serializer, p_OwnOffset + offsetof(STechniquesSaveData, _7ED76297));
	TArray<bool>::Serialize(&s_Object->_949204C5, p_Serializer, p_OwnOffset + offsetof(STechniquesSaveData, _949204C5));
	STechniqueUnlockState::Serialize(&s_Object->_1BA6F5A6, p_Serializer, p_OwnOffset + offsetof(STechniquesSaveData, _1BA6F5A6));
}

bool STechniquesSaveData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<STechniquesSaveData*>(p_Left);
	auto* s_Right = reinterpret_cast<STechniquesSaveData*>(p_Right);

	return *s_Left == *s_Right;
}

bool STechniquesSaveData::operator==(const STechniquesSaveData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<STechniquesSaveData>)
		return false;

	if (_B5537A08 != p_Other._B5537A08) return false;
	if (_7ED76297 != p_Other._7ED76297) return false;
	if (_949204C5 != p_Other._949204C5) return false;
	if (_1BA6F5A6 != p_Other._1BA6F5A6) return false;

	return true;
}

ZHMTypeInfo STemplateSubEntity::TypeInfo = ZHMTypeInfo("STemplateSubEntity", sizeof(STemplateSubEntity), alignof(STemplateSubEntity), STemplateSubEntity::WriteJson, STemplateSubEntity::WriteSimpleJson, STemplateSubEntity::FromSimpleJson, STemplateSubEntity::Serialize, STemplateSubEntity::Equals);

void STemplateSubEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateSubEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_21740EAA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_21740EAA);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B01F3C73") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B01F3C73);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71206441") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SEntityTemplateProperty>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_71206441.size(); ++i)
	{
		auto& s_Item0 = s_Object->_71206441[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SEntityTemplateProperty") << ",\"$val\":";
		SEntityTemplateProperty::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_71206441.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E8548959") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SEntityTemplateProperty>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_E8548959.size(); ++i)
	{
		auto& s_Item0 = s_Object->_E8548959[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SEntityTemplateProperty") << ",\"$val\":";
		SEntityTemplateProperty::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_E8548959.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STemplateSubEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateSubEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_21740EAA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_21740EAA);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B01F3C73") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B01F3C73);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_71206441") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_71206441.size(); ++i)
	{
		auto& s_Item0 = s_Object->_71206441[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_71206441.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E8548959") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_E8548959.size(); ++i)
	{
		auto& s_Item0 = s_Object->_E8548959[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_E8548959.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateSubEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateSubEntity s_Object {};

	s_Object._21740EAA = simdjson::from_json_int32(p_Document["_21740EAA"]);

	s_Object._B01F3C73 = simdjson::from_json_int32(p_Document["_B01F3C73"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_71206441"])
	{
		SEntityTemplateProperty s_ArrayItem0;
		SEntityTemplateProperty::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._71206441.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_E8548959"])
	{
		SEntityTemplateProperty s_ArrayItem0;
		SEntityTemplateProperty::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._E8548959.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STemplateSubEntity*>(p_Target) = s_Object;
}

void STemplateSubEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STemplateSubEntity*>(p_Object);

	TArray<SEntityTemplateProperty>::Serialize(&s_Object->_71206441, p_Serializer, p_OwnOffset + offsetof(STemplateSubEntity, _71206441));
	TArray<SEntityTemplateProperty>::Serialize(&s_Object->_E8548959, p_Serializer, p_OwnOffset + offsetof(STemplateSubEntity, _E8548959));
}

bool STemplateSubEntity::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<STemplateSubEntity*>(p_Left);
	auto* s_Right = reinterpret_cast<STemplateSubEntity*>(p_Right);

	return *s_Left == *s_Right;
}

bool STemplateSubEntity::operator==(const STemplateSubEntity& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<STemplateSubEntity>)
		return false;

	if (_21740EAA != p_Other._21740EAA) return false;
	if (_B01F3C73 != p_Other._B01F3C73) return false;
	if (_71206441 != p_Other._71206441) return false;
	if (_E8548959 != p_Other._E8548959) return false;

	return true;
}

ZHMTypeInfo STemplateEntity::TypeInfo = ZHMTypeInfo("STemplateEntity", sizeof(STemplateEntity), alignof(STemplateEntity), STemplateEntity::WriteJson, STemplateEntity::WriteSimpleJson, STemplateEntity::FromSimpleJson, STemplateEntity::Serialize, STemplateEntity::Equals);

void STemplateEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_891D57ED") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_891D57ED);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_14CF59EB") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_14CF59EB);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_61ED060D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<STemplateSubEntity>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_61ED060D.size(); ++i)
	{
		auto& s_Item0 = s_Object->_61ED060D[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("STemplateSubEntity") << ",\"$val\":";
		STemplateSubEntity::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_61ED060D.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STemplateEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_891D57ED") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_891D57ED);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_14CF59EB") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_14CF59EB);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_61ED060D") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_61ED060D.size(); ++i)
	{
		auto& s_Item0 = s_Object->_61ED060D[i];
		STemplateSubEntity::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_61ED060D.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateEntity s_Object {};

	s_Object._891D57ED = simdjson::from_json_int32(p_Document["_891D57ED"]);

	s_Object._14CF59EB = simdjson::from_json_int32(p_Document["_14CF59EB"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_61ED060D"])
	{
		STemplateSubEntity s_ArrayItem0;
		STemplateSubEntity::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._61ED060D.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STemplateEntity*>(p_Target) = s_Object;
}

void STemplateEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STemplateEntity*>(p_Object);

	TArray<STemplateSubEntity>::Serialize(&s_Object->_61ED060D, p_Serializer, p_OwnOffset + offsetof(STemplateEntity, _61ED060D));
}

bool STemplateEntity::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<STemplateEntity*>(p_Left);
	auto* s_Right = reinterpret_cast<STemplateEntity*>(p_Right);

	return *s_Left == *s_Right;
}

bool STemplateEntity::operator==(const STemplateEntity& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<STemplateEntity>)
		return false;

	if (_891D57ED != p_Other._891D57ED) return false;
	if (_14CF59EB != p_Other._14CF59EB) return false;
	if (_61ED060D != p_Other._61ED060D) return false;

	return true;
}

ZHMTypeInfo STemplateSubEntityBlueprint::TypeInfo = ZHMTypeInfo("STemplateSubEntityBlueprint", sizeof(STemplateSubEntityBlueprint), alignof(STemplateSubEntityBlueprint), STemplateSubEntityBlueprint::WriteJson, STemplateSubEntityBlueprint::WriteSimpleJson, STemplateSubEntityBlueprint::FromSimpleJson, STemplateSubEntityBlueprint::Serialize, STemplateSubEntityBlueprint::Equals);

void STemplateSubEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateSubEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_21740EAA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_21740EAA);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B01F3C73") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_B01F3C73);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CDF5A865") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_CDF5A865);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_17EB0A5A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SEntityTemplatePropertyAlias>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_17EB0A5A.size(); ++i)
	{
		auto& s_Item0 = s_Object->_17EB0A5A[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SEntityTemplatePropertyAlias") << ",\"$val\":";
		SEntityTemplatePropertyAlias::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_17EB0A5A.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_025728B5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<TPair<ZString,SEntityTemplateReference>>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_025728B5.size(); ++i)
	{
		auto& s_Item0 = s_Object->_025728B5[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("TPair<ZString,SEntityTemplateReference>") << ",\"$val\":";
		TPair<ZString,SEntityTemplateReference>::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_025728B5.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_268997DA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<TPair<ZString,int32>>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_268997DA.size(); ++i)
	{
		auto& s_Item0 = s_Object->_268997DA[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("TPair<ZString,int32>") << ",\"$val\":";
		TPair<ZString,int32>::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_268997DA.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_BF7B57C8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<TPair<ZString,SEntityTemplateEntitySubset>>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_BF7B57C8.size(); ++i)
	{
		auto& s_Item0 = s_Object->_BF7B57C8[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("TPair<ZString,SEntityTemplateEntitySubset>") << ",\"$val\":";
		TPair<ZString,SEntityTemplateEntitySubset>::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_BF7B57C8.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STemplateSubEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateSubEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_21740EAA") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_21740EAA);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B01F3C73") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_B01F3C73);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_CDF5A865") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_CDF5A865);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_17EB0A5A") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_17EB0A5A.size(); ++i)
	{
		auto& s_Item0 = s_Object->_17EB0A5A[i];
		SEntityTemplatePropertyAlias::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_17EB0A5A.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_025728B5") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_025728B5.size(); ++i)
	{
		auto& s_Item0 = s_Object->_025728B5[i];
		TPair<ZString,SEntityTemplateReference>::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_025728B5.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_268997DA") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_268997DA.size(); ++i)
	{
		auto& s_Item0 = s_Object->_268997DA[i];
		TPair<ZString,int32>::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_268997DA.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_BF7B57C8") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_BF7B57C8.size(); ++i)
	{
		auto& s_Item0 = s_Object->_BF7B57C8[i];
		TPair<ZString,SEntityTemplateEntitySubset>::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_BF7B57C8.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateSubEntityBlueprint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateSubEntityBlueprint s_Object {};

	s_Object._21740EAA = simdjson::from_json_int32(p_Document["_21740EAA"]);

	s_Object._B01F3C73 = simdjson::from_json_int32(p_Document["_B01F3C73"]);

	s_Object._CDF5A865 = std::string_view(p_Document["_CDF5A865"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_17EB0A5A"])
	{
		SEntityTemplatePropertyAlias s_ArrayItem0;
		SEntityTemplatePropertyAlias::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._17EB0A5A.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_025728B5"])
	{
		TPair<ZString,SEntityTemplateReference> s_ArrayItem0;
		TPair<ZString,SEntityTemplateReference>::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._025728B5.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_268997DA"])
	{
		TPair<ZString,int32> s_ArrayItem0;
		TPair<ZString,int32>::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._268997DA.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_BF7B57C8"])
	{
		TPair<ZString,SEntityTemplateEntitySubset> s_ArrayItem0;
		TPair<ZString,SEntityTemplateEntitySubset>::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._BF7B57C8.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STemplateSubEntityBlueprint*>(p_Target) = s_Object;
}

void STemplateSubEntityBlueprint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STemplateSubEntityBlueprint*>(p_Object);

	ZString::Serialize(&s_Object->_CDF5A865, p_Serializer, p_OwnOffset + offsetof(STemplateSubEntityBlueprint, _CDF5A865));
	TArray<SEntityTemplatePropertyAlias>::Serialize(&s_Object->_17EB0A5A, p_Serializer, p_OwnOffset + offsetof(STemplateSubEntityBlueprint, _17EB0A5A));
	TArray<TPair<ZString,SEntityTemplateReference>>::Serialize(&s_Object->_025728B5, p_Serializer, p_OwnOffset + offsetof(STemplateSubEntityBlueprint, _025728B5));
	TArray<TPair<ZString,int32>>::Serialize(&s_Object->_268997DA, p_Serializer, p_OwnOffset + offsetof(STemplateSubEntityBlueprint, _268997DA));
	TArray<TPair<ZString,SEntityTemplateEntitySubset>>::Serialize(&s_Object->_BF7B57C8, p_Serializer, p_OwnOffset + offsetof(STemplateSubEntityBlueprint, _BF7B57C8));
}

bool STemplateSubEntityBlueprint::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<STemplateSubEntityBlueprint*>(p_Left);
	auto* s_Right = reinterpret_cast<STemplateSubEntityBlueprint*>(p_Right);

	return *s_Left == *s_Right;
}

bool STemplateSubEntityBlueprint::operator==(const STemplateSubEntityBlueprint& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<STemplateSubEntityBlueprint>)
		return false;

	if (_21740EAA != p_Other._21740EAA) return false;
	if (_B01F3C73 != p_Other._B01F3C73) return false;
	if (_CDF5A865 != p_Other._CDF5A865) return false;
	if (_17EB0A5A != p_Other._17EB0A5A) return false;
	if (_025728B5 != p_Other._025728B5) return false;
	if (_268997DA != p_Other._268997DA) return false;
	if (_BF7B57C8 != p_Other._BF7B57C8) return false;

	return true;
}

ZHMTypeInfo STemplateEntityBlueprint::TypeInfo = ZHMTypeInfo("STemplateEntityBlueprint", sizeof(STemplateEntityBlueprint), alignof(STemplateEntityBlueprint), STemplateEntityBlueprint::WriteJson, STemplateEntityBlueprint::WriteSimpleJson, STemplateEntityBlueprint::FromSimpleJson, STemplateEntityBlueprint::Serialize, STemplateEntityBlueprint::Equals);

void STemplateEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_14CF59EB") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_14CF59EB);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_61ED060D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<STemplateSubEntityBlueprint>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_61ED060D.size(); ++i)
	{
		auto& s_Item0 = s_Object->_61ED060D[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("STemplateSubEntityBlueprint") << ",\"$val\":";
		STemplateSubEntityBlueprint::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_61ED060D.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_213C670C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SEntityTemplatePinConnection>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_213C670C.size(); ++i)
	{
		auto& s_Item0 = s_Object->_213C670C[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SEntityTemplatePinConnection") << ",\"$val\":";
		SEntityTemplatePinConnection::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_213C670C.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_351BE901") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SEntityTemplatePinConnection>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_351BE901.size(); ++i)
	{
		auto& s_Item0 = s_Object->_351BE901[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SEntityTemplatePinConnection") << ",\"$val\":";
		SEntityTemplatePinConnection::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_351BE901.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7CF08925") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SEntityTemplatePinConnection>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_7CF08925.size(); ++i)
	{
		auto& s_Item0 = s_Object->_7CF08925[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SEntityTemplatePinConnection") << ",\"$val\":";
		SEntityTemplatePinConnection::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_7CF08925.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STemplateEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_14CF59EB") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_14CF59EB);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_61ED060D") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_61ED060D.size(); ++i)
	{
		auto& s_Item0 = s_Object->_61ED060D[i];
		STemplateSubEntityBlueprint::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_61ED060D.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_213C670C") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_213C670C.size(); ++i)
	{
		auto& s_Item0 = s_Object->_213C670C[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_213C670C.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_351BE901") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_351BE901.size(); ++i)
	{
		auto& s_Item0 = s_Object->_351BE901[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_351BE901.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7CF08925") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_7CF08925.size(); ++i)
	{
		auto& s_Item0 = s_Object->_7CF08925[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_7CF08925.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntityBlueprint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateEntityBlueprint s_Object {};

	s_Object._14CF59EB = simdjson::from_json_int32(p_Document["_14CF59EB"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_61ED060D"])
	{
		STemplateSubEntityBlueprint s_ArrayItem0;
		STemplateSubEntityBlueprint::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._61ED060D.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_213C670C"])
	{
		SEntityTemplatePinConnection s_ArrayItem0;
		SEntityTemplatePinConnection::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._213C670C.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_351BE901"])
	{
		SEntityTemplatePinConnection s_ArrayItem0;
		SEntityTemplatePinConnection::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._351BE901.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_7CF08925"])
	{
		SEntityTemplatePinConnection s_ArrayItem0;
		SEntityTemplatePinConnection::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._7CF08925.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STemplateEntityBlueprint*>(p_Target) = s_Object;
}

void STemplateEntityBlueprint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STemplateEntityBlueprint*>(p_Object);

	TArray<STemplateSubEntityBlueprint>::Serialize(&s_Object->_61ED060D, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, _61ED060D));
	TArray<SEntityTemplatePinConnection>::Serialize(&s_Object->_213C670C, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, _213C670C));
	TArray<SEntityTemplatePinConnection>::Serialize(&s_Object->_351BE901, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, _351BE901));
	TArray<SEntityTemplatePinConnection>::Serialize(&s_Object->_7CF08925, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, _7CF08925));
}

bool STemplateEntityBlueprint::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<STemplateEntityBlueprint*>(p_Left);
	auto* s_Right = reinterpret_cast<STemplateEntityBlueprint*>(p_Right);

	return *s_Left == *s_Right;
}

bool STemplateEntityBlueprint::operator==(const STemplateEntityBlueprint& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<STemplateEntityBlueprint>)
		return false;

	if (_14CF59EB != p_Other._14CF59EB) return false;
	if (_61ED060D != p_Other._61ED060D) return false;
	if (_213C670C != p_Other._213C670C) return false;
	if (_351BE901 != p_Other._351BE901) return false;
	if (_7CF08925 != p_Other._7CF08925) return false;

	return true;
}

ZHMTypeInfo STestMiniStruct::TypeInfo = ZHMTypeInfo("STestMiniStruct", sizeof(STestMiniStruct), alignof(STestMiniStruct), STestMiniStruct::WriteJson, STestMiniStruct::WriteSimpleJson, STestMiniStruct::FromSimpleJson, STestMiniStruct::Serialize, STestMiniStruct::Equals);

void STestMiniStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STestMiniStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_2F64A16D") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_2F64A16D);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_37FB5A4F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_37FB5A4F);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_8E5A0583") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_8E5A0583);
	p_Stream << "}";

	p_Stream << "}";
}

void STestMiniStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STestMiniStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_2F64A16D") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_2F64A16D);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_37FB5A4F") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_37FB5A4F);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_8E5A0583") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_8E5A0583);

	p_Stream << "}";
}

void STestMiniStruct::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STestMiniStruct s_Object {};

	s_Object._2F64A16D = simdjson::from_json_int32(p_Document["_2F64A16D"]);

	s_Object._37FB5A4F = simdjson::from_json_float32(p_Document["_37FB5A4F"]);

	s_Object._8E5A0583 = std::string_view(p_Document["_8E5A0583"]);

	*reinterpret_cast<STestMiniStruct*>(p_Target) = s_Object;
}

void STestMiniStruct::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STestMiniStruct*>(p_Object);

	ZString::Serialize(&s_Object->_8E5A0583, p_Serializer, p_OwnOffset + offsetof(STestMiniStruct, _8E5A0583));
}

bool STestMiniStruct::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<STestMiniStruct*>(p_Left);
	auto* s_Right = reinterpret_cast<STestMiniStruct*>(p_Right);

	return *s_Left == *s_Right;
}

bool STestMiniStruct::operator==(const STestMiniStruct& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<STestMiniStruct>)
		return false;

	if (_2F64A16D != p_Other._2F64A16D) return false;
	if (_37FB5A4F != p_Other._37FB5A4F) return false;
	if (_8E5A0583 != p_Other._8E5A0583) return false;

	return true;
}

ZHMTypeInfo STestStructure::TypeInfo = ZHMTypeInfo("STestStructure", sizeof(STestStructure), alignof(STestStructure), STestStructure::WriteJson, STestStructure::WriteSimpleJson, STestStructure::FromSimpleJson, STestStructure::Serialize, STestStructure::Equals);

void STestStructure::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STestStructure*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_AE05822C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_AE05822C);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6C66AB72") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_6C66AB72);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_229E820A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_229E820A);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_174D49E8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_174D49E8);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5E830AA7") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("STestMiniStruct") << ",\"$val\":";
	STestMiniStruct::WriteJson(&s_Object->_5E830AA7, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STestStructure::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STestStructure*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_AE05822C") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_AE05822C);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_6C66AB72") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_6C66AB72);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_229E820A") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_229E820A);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_174D49E8") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_174D49E8);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5E830AA7") << ":";
	STestMiniStruct::WriteSimpleJson(&s_Object->_5E830AA7, p_Stream);

	p_Stream << "}";
}

void STestStructure::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STestStructure s_Object {};

	s_Object._AE05822C = simdjson::from_json_float32(p_Document["_AE05822C"]);

	s_Object._6C66AB72 = simdjson::from_json_float32(p_Document["_6C66AB72"]);

	s_Object._229E820A = simdjson::from_json_float32(p_Document["_229E820A"]);

	s_Object._174D49E8 = std::string_view(p_Document["_174D49E8"]);

	{
		STestMiniStruct s_Item {};
		STestMiniStruct::FromSimpleJson(p_Document["_5E830AA7"], &s_Item);
		s_Object._5E830AA7 = s_Item;
	}

	*reinterpret_cast<STestStructure*>(p_Target) = s_Object;
}

void STestStructure::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STestStructure*>(p_Object);

	ZString::Serialize(&s_Object->_174D49E8, p_Serializer, p_OwnOffset + offsetof(STestStructure, _174D49E8));
	STestMiniStruct::Serialize(&s_Object->_5E830AA7, p_Serializer, p_OwnOffset + offsetof(STestStructure, _5E830AA7));
}

bool STestStructure::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<STestStructure*>(p_Left);
	auto* s_Right = reinterpret_cast<STestStructure*>(p_Right);

	return *s_Left == *s_Right;
}

bool STestStructure::operator==(const STestStructure& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<STestStructure>)
		return false;

	if (_AE05822C != p_Other._AE05822C) return false;
	if (_6C66AB72 != p_Other._6C66AB72) return false;
	if (_229E820A != p_Other._229E820A) return false;
	if (_174D49E8 != p_Other._174D49E8) return false;
	if (_5E830AA7 != p_Other._5E830AA7) return false;

	return true;
}

ZHMTypeInfo SUIOptionValue::TypeInfo = ZHMTypeInfo("SUIOptionValue", sizeof(SUIOptionValue), alignof(SUIOptionValue), SUIOptionValue::WriteJson, SUIOptionValue::WriteSimpleJson, SUIOptionValue::FromSimpleJson, SUIOptionValue::Serialize, SUIOptionValue::Equals);

void SUIOptionValue::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIOptionValue*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_8A90ABA9") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_8A90ABA9);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_8CDE5729") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint8") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDE5729);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FB289CBB") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_FB289CBB);
	p_Stream << "}";

	p_Stream << "}";
}

void SUIOptionValue::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIOptionValue*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_8A90ABA9") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_8A90ABA9);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_8CDE5729") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDE5729);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FB289CBB") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_FB289CBB);

	p_Stream << "}";
}

void SUIOptionValue::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SUIOptionValue s_Object {};

	s_Object._8A90ABA9 = simdjson::from_json_uint32(p_Document["_8A90ABA9"]);

	s_Object._8CDE5729 = simdjson::from_json_uint8(p_Document["_8CDE5729"]);

	s_Object._FB289CBB = simdjson::from_json_int32(p_Document["_FB289CBB"]);

	*reinterpret_cast<SUIOptionValue*>(p_Target) = s_Object;
}

void SUIOptionValue::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SUIOptionValue*>(p_Object);

}

bool SUIOptionValue::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SUIOptionValue*>(p_Left);
	auto* s_Right = reinterpret_cast<SUIOptionValue*>(p_Right);

	return *s_Left == *s_Right;
}

bool SUIOptionValue::operator==(const SUIOptionValue& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SUIOptionValue>)
		return false;

	if (_8A90ABA9 != p_Other._8A90ABA9) return false;
	if (_8CDE5729 != p_Other._8CDE5729) return false;
	if (_FB289CBB != p_Other._FB289CBB) return false;

	return true;
}

ZHMTypeInfo SUIOptionsData::TypeInfo = ZHMTypeInfo("SUIOptionsData", sizeof(SUIOptionsData), alignof(SUIOptionsData), SUIOptionsData::WriteJson, SUIOptionsData::WriteSimpleJson, SUIOptionsData::FromSimpleJson, SUIOptionsData::Serialize, SUIOptionsData::Equals);

void SUIOptionsData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIOptionsData*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_ADF3F363") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<SUIOptionValue>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_ADF3F363.size(); ++i)
	{
		auto& s_Item0 = s_Object->_ADF3F363[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("SUIOptionValue") << ",\"$val\":";
		SUIOptionValue::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_ADF3F363.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SUIOptionsData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIOptionsData*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_ADF3F363") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_ADF3F363.size(); ++i)
	{
		auto& s_Item0 = s_Object->_ADF3F363[i];
		SUIOptionValue::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_ADF3F363.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SUIOptionsData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SUIOptionsData s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_ADF3F363"])
	{
		SUIOptionValue s_ArrayItem0;
		SUIOptionValue::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._ADF3F363.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SUIOptionsData*>(p_Target) = s_Object;
}

void SUIOptionsData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SUIOptionsData*>(p_Object);

	TArray<SUIOptionValue>::Serialize(&s_Object->_ADF3F363, p_Serializer, p_OwnOffset + offsetof(SUIOptionsData, _ADF3F363));
}

bool SUIOptionsData::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SUIOptionsData*>(p_Left);
	auto* s_Right = reinterpret_cast<SUIOptionsData*>(p_Right);

	return *s_Left == *s_Right;
}

bool SUIOptionsData::operator==(const SUIOptionsData& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SUIOptionsData>)
		return false;

	if (_ADF3F363 != p_Other._ADF3F363) return false;

	return true;
}

ZHMTypeInfo SVector2::TypeInfo = ZHMTypeInfo("SVector2", sizeof(SVector2), alignof(SVector2), SVector2::WriteJson, SVector2::WriteSimpleJson, SVector2::FromSimpleJson, SVector2::Serialize, SVector2::Equals);

void SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_8CDC1683") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDC1683);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDB2615") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDB2615);
	p_Stream << "}";

	p_Stream << "}";
}

void SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_8CDC1683") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_8CDC1683);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_FBDB2615") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_FBDB2615);

	p_Stream << "}";
}

void SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVector2 s_Object {};

	s_Object._8CDC1683 = simdjson::from_json_float32(p_Document["_8CDC1683"]);

	s_Object._FBDB2615 = simdjson::from_json_float32(p_Document["_FBDB2615"]);

	*reinterpret_cast<SVector2*>(p_Target) = s_Object;
}

void SVector2::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVector2*>(p_Object);

}

bool SVector2::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SVector2*>(p_Left);
	auto* s_Right = reinterpret_cast<SVector2*>(p_Right);

	return *s_Left == *s_Right;
}

bool SVector2::operator==(const SVector2& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SVector2>)
		return false;

	if (_8CDC1683 != p_Other._8CDC1683) return false;
	if (_FBDB2615 != p_Other._FBDB2615) return false;

	return true;
}

ZHMTypeInfo SWeaponSoundDefs::TypeInfo = ZHMTypeInfo("SWeaponSoundDefs", sizeof(SWeaponSoundDefs), alignof(SWeaponSoundDefs), SWeaponSoundDefs::WriteJson, SWeaponSoundDefs::WriteSimpleJson, SWeaponSoundDefs::FromSimpleJson, SWeaponSoundDefs::Serialize, SWeaponSoundDefs::Equals);

void SWeaponSoundDefs::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWeaponSoundDefs*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SWeaponSoundDefs::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWeaponSoundDefs*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SWeaponSoundDefs::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWeaponSoundDefs s_Object {};

	*reinterpret_cast<SWeaponSoundDefs*>(p_Target) = s_Object;
}

void SWeaponSoundDefs::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SWeaponSoundDefs*>(p_Object);

}

bool SWeaponSoundDefs::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<SWeaponSoundDefs*>(p_Left);
	auto* s_Right = reinterpret_cast<SWeaponSoundDefs*>(p_Right);

	return *s_Left == *s_Right;
}

bool SWeaponSoundDefs::operator==(const SWeaponSoundDefs& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<SWeaponSoundDefs>)
		return false;


	return true;
}

ZHMTypeInfo ZCloseCombatDef_SActorNoise::TypeInfo = ZHMTypeInfo("ZCloseCombatDef.SActorNoise", sizeof(ZCloseCombatDef_SActorNoise), alignof(ZCloseCombatDef_SActorNoise), ZCloseCombatDef_SActorNoise::WriteJson, ZCloseCombatDef_SActorNoise::WriteSimpleJson, ZCloseCombatDef_SActorNoise::FromSimpleJson, ZCloseCombatDef_SActorNoise::Serialize, ZCloseCombatDef_SActorNoise::Equals);

void ZCloseCombatDef_SActorNoise::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCloseCombatDef_SActorNoise*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_28BC53B5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("SActorSoundDefs.EDefinition") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_28BC53B5)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("SActorSoundDefs.EDefinition", static_cast<int>(s_Object->_28BC53B5))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_04153019") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("EAIEventType") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_04153019)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->_04153019))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A120F69F") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_A120F69F);
	p_Stream << "}";

	p_Stream << "}";
}

void ZCloseCombatDef_SActorNoise::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCloseCombatDef_SActorNoise*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_28BC53B5") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("SActorSoundDefs.EDefinition", static_cast<int>(s_Object->_28BC53B5)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_04153019") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->_04153019)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_A120F69F") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_A120F69F);

	p_Stream << "}";
}

void ZCloseCombatDef_SActorNoise::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZCloseCombatDef_SActorNoise s_Object {};

	s_Object._28BC53B5 = static_cast<SActorSoundDefs_EDefinition>(ZHMEnums::GetEnumValueByName("SActorSoundDefs.EDefinition", std::string_view(p_Document["_28BC53B5"])));

	s_Object._04153019 = static_cast<EAIEventType>(ZHMEnums::GetEnumValueByName("EAIEventType", std::string_view(p_Document["_04153019"])));

	s_Object._A120F69F = simdjson::from_json_float32(p_Document["_A120F69F"]);

	*reinterpret_cast<ZCloseCombatDef_SActorNoise*>(p_Target) = s_Object;
}

void ZCloseCombatDef_SActorNoise::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZCloseCombatDef_SActorNoise*>(p_Object);

}

bool ZCloseCombatDef_SActorNoise::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZCloseCombatDef_SActorNoise*>(p_Left);
	auto* s_Right = reinterpret_cast<ZCloseCombatDef_SActorNoise*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZCloseCombatDef_SActorNoise::operator==(const ZCloseCombatDef_SActorNoise& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZCloseCombatDef_SActorNoise>)
		return false;

	if (_28BC53B5 != p_Other._28BC53B5) return false;
	if (_04153019 != p_Other._04153019) return false;
	if (_A120F69F != p_Other._A120F69F) return false;

	return true;
}

ZHMTypeInfo ZComponentCreator::TypeInfo = ZHMTypeInfo("ZComponentCreator", sizeof(ZComponentCreator), alignof(ZComponentCreator), ZComponentCreator::WriteJson, ZComponentCreator::WriteSimpleJson, ZComponentCreator::FromSimpleJson, ZComponentCreator::Serialize, ZComponentCreator::Equals);

void ZComponentCreator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZComponentCreator*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_D9EBDCBE") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_D9EBDCBE);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B9EA4804") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<ZVariant>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B9EA4804.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B9EA4804[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("ZVariant") << ",\"$val\":";
		ZVariant::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_B9EA4804.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZComponentCreator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZComponentCreator*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_D9EBDCBE") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_D9EBDCBE);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_B9EA4804") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_B9EA4804.size(); ++i)
	{
		auto& s_Item0 = s_Object->_B9EA4804[i];
		ZVariant::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_B9EA4804.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZComponentCreator::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZComponentCreator s_Object {};

	s_Object._D9EBDCBE = std::string_view(p_Document["_D9EBDCBE"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["_B9EA4804"])
	{
		ZVariant s_ArrayItem0;
		ZVariant::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._B9EA4804.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<ZComponentCreator*>(p_Target) = s_Object;
}

void ZComponentCreator::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZComponentCreator*>(p_Object);

	ZString::Serialize(&s_Object->_D9EBDCBE, p_Serializer, p_OwnOffset + offsetof(ZComponentCreator, _D9EBDCBE));
	TArray<ZVariant>::Serialize(&s_Object->_B9EA4804, p_Serializer, p_OwnOffset + offsetof(ZComponentCreator, _B9EA4804));
}

bool ZComponentCreator::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZComponentCreator*>(p_Left);
	auto* s_Right = reinterpret_cast<ZComponentCreator*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZComponentCreator::operator==(const ZComponentCreator& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZComponentCreator>)
		return false;

	if (_D9EBDCBE != p_Other._D9EBDCBE) return false;
	if (_B9EA4804 != p_Other._B9EA4804) return false;

	return true;
}

ZHMTypeInfo ZCurve::TypeInfo = ZHMTypeInfo("ZCurve", sizeof(ZCurve), alignof(ZCurve), ZCurve::WriteJson, ZCurve::WriteSimpleJson, ZCurve::FromSimpleJson, ZCurve::Serialize, ZCurve::Equals);

void ZCurve::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCurve*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_ADF3F363") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<TFixedArray<float32>>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_ADF3F363.size(); ++i)
	{
		auto& s_Item0 = s_Object->_ADF3F363[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("TFixedArray<float32>") << ",\"$val\":";
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
			p_Stream << simdjson::as_json_string(s_Item1);
			p_Stream << "}";

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}
		p_Stream << "]";
		p_Stream << "}";

		if (i < s_Object->_ADF3F363.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZCurve::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCurve*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_ADF3F363") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_ADF3F363.size(); ++i)
	{
		auto& s_Item0 = s_Object->_ADF3F363[i];
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			p_Stream << simdjson::as_json_string(s_Item1);

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}

		p_Stream << "]";

		if (i < s_Object->_ADF3F363.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZCurve::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZCurve s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_ADF3F363"])
	{
		TFixedArray<float32, 8> s_ArrayItem0;
		{
		size_t s_Index1 = 0;
		for (simdjson::ondemand::value s_Item1 : s_Item0)
		{
			s_ArrayItem0[s_Index1] = simdjson::from_json_float32(s_Item1);
			++s_Index1;
		}
		}
		s_Object._ADF3F363.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<ZCurve*>(p_Target) = s_Object;
}

void ZCurve::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZCurve*>(p_Object);

	TArray<TFixedArray<float32, 8>>::Serialize(&s_Object->_ADF3F363, p_Serializer, p_OwnOffset + offsetof(ZCurve, _ADF3F363));
}

bool ZCurve::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZCurve*>(p_Left);
	auto* s_Right = reinterpret_cast<ZCurve*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZCurve::operator==(const ZCurve& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZCurve>)
		return false;

	if (_ADF3F363 != p_Other._ADF3F363) return false;

	return true;
}

ZHMTypeInfo ZEntityID::TypeInfo = ZHMTypeInfo("ZEntityID", sizeof(ZEntityID), alignof(ZEntityID), ZEntityID::WriteJson, ZEntityID::WriteSimpleJson, ZEntityID::FromSimpleJson, ZEntityID::Serialize, ZEntityID::Equals);

void ZEntityID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityID*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_5DC3D644") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_5DC3D644);
	p_Stream << "}";

	p_Stream << "}";
}

void ZEntityID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityID*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_5DC3D644") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_5DC3D644);

	p_Stream << "}";
}

void ZEntityID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityID s_Object {};

	s_Object._5DC3D644 = std::string_view(p_Document["_5DC3D644"]);

	*reinterpret_cast<ZEntityID*>(p_Target) = s_Object;
}

void ZEntityID::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZEntityID*>(p_Object);

	ZString::Serialize(&s_Object->_5DC3D644, p_Serializer, p_OwnOffset + offsetof(ZEntityID, _5DC3D644));
}

bool ZEntityID::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZEntityID*>(p_Left);
	auto* s_Right = reinterpret_cast<ZEntityID*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZEntityID::operator==(const ZEntityID& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZEntityID>)
		return false;

	if (_5DC3D644 != p_Other._5DC3D644) return false;

	return true;
}

ZHMTypeInfo ZEntityRef::TypeInfo = ZHMTypeInfo("ZEntityRef", sizeof(ZEntityRef), alignof(ZEntityRef), ZEntityRef::WriteJson, ZEntityRef::WriteSimpleJson, ZEntityRef::FromSimpleJson, ZEntityRef::Serialize, ZEntityRef::Equals);

void ZEntityRef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityRef*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEntityRef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityRef*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZEntityRef::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityRef s_Object {};

	*reinterpret_cast<ZEntityRef*>(p_Target) = s_Object;
}

void ZEntityRef::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZEntityRef*>(p_Object);

}

bool ZEntityRef::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZEntityRef*>(p_Left);
	auto* s_Right = reinterpret_cast<ZEntityRef*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZEntityRef::operator==(const ZEntityRef& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZEntityRef>)
		return false;


	return true;
}

ZHMTypeInfo ZEntityReference::TypeInfo = ZHMTypeInfo("ZEntityReference", sizeof(ZEntityReference), alignof(ZEntityReference), ZEntityReference::WriteJson, ZEntityReference::WriteSimpleJson, ZEntityReference::FromSimpleJson, ZEntityReference::Serialize, ZEntityReference::Equals);

void ZEntityReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityReference*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_3B6ADD1A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZEntityID") << ",\"$val\":";
	ZEntityID::WriteJson(&s_Object->_3B6ADD1A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5A1F34C2") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("ZString") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_5A1F34C2);
	p_Stream << "}";

	p_Stream << "}";
}

void ZEntityReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityReference*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_3B6ADD1A") << ":";
	ZEntityID::WriteSimpleJson(&s_Object->_3B6ADD1A, p_Stream);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_5A1F34C2") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_5A1F34C2);

	p_Stream << "}";
}

void ZEntityReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityReference s_Object {};

	{
		ZEntityID s_Item {};
		ZEntityID::FromSimpleJson(p_Document["_3B6ADD1A"], &s_Item);
		s_Object._3B6ADD1A = s_Item;
	}

	s_Object._5A1F34C2 = std::string_view(p_Document["_5A1F34C2"]);

	*reinterpret_cast<ZEntityReference*>(p_Target) = s_Object;
}

void ZEntityReference::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZEntityReference*>(p_Object);

	ZEntityID::Serialize(&s_Object->_3B6ADD1A, p_Serializer, p_OwnOffset + offsetof(ZEntityReference, _3B6ADD1A));
	ZString::Serialize(&s_Object->_5A1F34C2, p_Serializer, p_OwnOffset + offsetof(ZEntityReference, _5A1F34C2));
}

bool ZEntityReference::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZEntityReference*>(p_Left);
	auto* s_Right = reinterpret_cast<ZEntityReference*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZEntityReference::operator==(const ZEntityReference& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZEntityReference>)
		return false;

	if (_3B6ADD1A != p_Other._3B6ADD1A) return false;
	if (_5A1F34C2 != p_Other._5A1F34C2) return false;

	return true;
}

ZHMTypeInfo ZGameTime::TypeInfo = ZHMTypeInfo("ZGameTime", sizeof(ZGameTime), alignof(ZGameTime), ZGameTime::WriteJson, ZGameTime::WriteSimpleJson, ZGameTime::FromSimpleJson, ZGameTime::Serialize, ZGameTime::Equals);

void ZGameTime::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGameTime*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_4786AB66") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("int64") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_4786AB66);
	p_Stream << "}";

	p_Stream << "}";
}

void ZGameTime::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGameTime*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_4786AB66") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_4786AB66);

	p_Stream << "}";
}

void ZGameTime::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGameTime s_Object {};

	s_Object._4786AB66 = simdjson::from_json_int64(p_Document["_4786AB66"]);

	*reinterpret_cast<ZGameTime*>(p_Target) = s_Object;
}

void ZGameTime::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZGameTime*>(p_Object);

}

bool ZGameTime::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZGameTime*>(p_Left);
	auto* s_Right = reinterpret_cast<ZGameTime*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZGameTime::operator==(const ZGameTime& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZGameTime>)
		return false;

	if (_4786AB66 != p_Other._4786AB66) return false;

	return true;
}

ZHMTypeInfo ZHitmanMorphemePostProcessorFiberWireCallback::TypeInfo = ZHMTypeInfo("ZHitmanMorphemePostProcessorFiberWireCallback", sizeof(ZHitmanMorphemePostProcessorFiberWireCallback), alignof(ZHitmanMorphemePostProcessorFiberWireCallback), ZHitmanMorphemePostProcessorFiberWireCallback::WriteJson, ZHitmanMorphemePostProcessorFiberWireCallback::WriteSimpleJson, ZHitmanMorphemePostProcessorFiberWireCallback::FromSimpleJson, ZHitmanMorphemePostProcessorFiberWireCallback::Serialize, ZHitmanMorphemePostProcessorFiberWireCallback::Equals);

void ZHitmanMorphemePostProcessorFiberWireCallback::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHitmanMorphemePostProcessorFiberWireCallback*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZHitmanMorphemePostProcessorFiberWireCallback::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHitmanMorphemePostProcessorFiberWireCallback*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZHitmanMorphemePostProcessorFiberWireCallback::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHitmanMorphemePostProcessorFiberWireCallback s_Object {};

	*reinterpret_cast<ZHitmanMorphemePostProcessorFiberWireCallback*>(p_Target) = s_Object;
}

void ZHitmanMorphemePostProcessorFiberWireCallback::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHitmanMorphemePostProcessorFiberWireCallback*>(p_Object);

}

bool ZHitmanMorphemePostProcessorFiberWireCallback::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZHitmanMorphemePostProcessorFiberWireCallback*>(p_Left);
	auto* s_Right = reinterpret_cast<ZHitmanMorphemePostProcessorFiberWireCallback*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZHitmanMorphemePostProcessorFiberWireCallback::operator==(const ZHitmanMorphemePostProcessorFiberWireCallback& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZHitmanMorphemePostProcessorFiberWireCallback>)
		return false;


	return true;
}

ZHMTypeInfo ZHitmanMorphemePostProcessorLedgeHangCallback::TypeInfo = ZHMTypeInfo("ZHitmanMorphemePostProcessorLedgeHangCallback", sizeof(ZHitmanMorphemePostProcessorLedgeHangCallback), alignof(ZHitmanMorphemePostProcessorLedgeHangCallback), ZHitmanMorphemePostProcessorLedgeHangCallback::WriteJson, ZHitmanMorphemePostProcessorLedgeHangCallback::WriteSimpleJson, ZHitmanMorphemePostProcessorLedgeHangCallback::FromSimpleJson, ZHitmanMorphemePostProcessorLedgeHangCallback::Serialize, ZHitmanMorphemePostProcessorLedgeHangCallback::Equals);

void ZHitmanMorphemePostProcessorLedgeHangCallback::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHitmanMorphemePostProcessorLedgeHangCallback*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZHitmanMorphemePostProcessorLedgeHangCallback::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHitmanMorphemePostProcessorLedgeHangCallback*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZHitmanMorphemePostProcessorLedgeHangCallback::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHitmanMorphemePostProcessorLedgeHangCallback s_Object {};

	*reinterpret_cast<ZHitmanMorphemePostProcessorLedgeHangCallback*>(p_Target) = s_Object;
}

void ZHitmanMorphemePostProcessorLedgeHangCallback::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHitmanMorphemePostProcessorLedgeHangCallback*>(p_Object);

}

bool ZHitmanMorphemePostProcessorLedgeHangCallback::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZHitmanMorphemePostProcessorLedgeHangCallback*>(p_Left);
	auto* s_Right = reinterpret_cast<ZHitmanMorphemePostProcessorLedgeHangCallback*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZHitmanMorphemePostProcessorLedgeHangCallback::operator==(const ZHitmanMorphemePostProcessorLedgeHangCallback& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZHitmanMorphemePostProcessorLedgeHangCallback>)
		return false;


	return true;
}

ZHMTypeInfo ZInventorySlot::TypeInfo = ZHMTypeInfo("ZInventorySlot", sizeof(ZInventorySlot), alignof(ZInventorySlot), ZInventorySlot::WriteJson, ZInventorySlot::WriteSimpleJson, ZInventorySlot::FromSimpleJson, ZInventorySlot::Serialize, ZInventorySlot::Equals);

void ZInventorySlot::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInventorySlot*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZInventorySlot::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInventorySlot*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZInventorySlot::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInventorySlot s_Object {};

	*reinterpret_cast<ZInventorySlot*>(p_Target) = s_Object;
}

void ZInventorySlot::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZInventorySlot*>(p_Object);

}

bool ZInventorySlot::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZInventorySlot*>(p_Left);
	auto* s_Right = reinterpret_cast<ZInventorySlot*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZInventorySlot::operator==(const ZInventorySlot& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZInventorySlot>)
		return false;


	return true;
}

ZHMTypeInfo ZPostfilterGraphBaseNode::TypeInfo = ZHMTypeInfo("ZPostfilterGraphBaseNode", sizeof(ZPostfilterGraphBaseNode), alignof(ZPostfilterGraphBaseNode), ZPostfilterGraphBaseNode::WriteJson, ZPostfilterGraphBaseNode::WriteSimpleJson, ZPostfilterGraphBaseNode::FromSimpleJson, ZPostfilterGraphBaseNode::Serialize, ZPostfilterGraphBaseNode::Equals);

void ZPostfilterGraphBaseNode::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPostfilterGraphBaseNode::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZPostfilterGraphBaseNode::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZPostfilterGraphBaseNode s_Object {};

	*reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Target) = s_Object;
}

void ZPostfilterGraphBaseNode::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Object);

}

bool ZPostfilterGraphBaseNode::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Left);
	auto* s_Right = reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZPostfilterGraphBaseNode::operator==(const ZPostfilterGraphBaseNode& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZPostfilterGraphBaseNode>)
		return false;


	return true;
}

ZHMTypeInfo ZPresenceState::TypeInfo = ZHMTypeInfo("ZPresenceState", sizeof(ZPresenceState), alignof(ZPresenceState), ZPresenceState::WriteJson, ZPresenceState::WriteSimpleJson, ZPresenceState::FromSimpleJson, ZPresenceState::Serialize, ZPresenceState::Equals);

void ZPresenceState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPresenceState*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPresenceState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPresenceState*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZPresenceState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZPresenceState s_Object {};

	*reinterpret_cast<ZPresenceState*>(p_Target) = s_Object;
}

void ZPresenceState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZPresenceState*>(p_Object);

}

bool ZPresenceState::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZPresenceState*>(p_Left);
	auto* s_Right = reinterpret_cast<ZPresenceState*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZPresenceState::operator==(const ZPresenceState& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZPresenceState>)
		return false;


	return true;
}

ZHMTypeInfo ZRayQueryInput::TypeInfo = ZHMTypeInfo("ZRayQueryInput", sizeof(ZRayQueryInput), alignof(ZRayQueryInput), ZRayQueryInput::WriteJson, ZRayQueryInput::WriteSimpleJson, ZRayQueryInput::FromSimpleJson, ZRayQueryInput::Serialize, ZRayQueryInput::Equals);

void ZRayQueryInput::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRayQueryInput*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZRayQueryInput::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRayQueryInput*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZRayQueryInput::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZRayQueryInput s_Object {};

	*reinterpret_cast<ZRayQueryInput*>(p_Target) = s_Object;
}

void ZRayQueryInput::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZRayQueryInput*>(p_Object);

}

bool ZRayQueryInput::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZRayQueryInput*>(p_Left);
	auto* s_Right = reinterpret_cast<ZRayQueryInput*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZRayQueryInput::operator==(const ZRayQueryInput& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZRayQueryInput>)
		return false;


	return true;
}

ZHMTypeInfo ZResourcePtr::TypeInfo = ZHMTypeInfo("ZResourcePtr", sizeof(ZResourcePtr), alignof(ZResourcePtr), ZResourcePtr::WriteJson, ZResourcePtr::WriteSimpleJson, ZResourcePtr::FromSimpleJson, ZResourcePtr::Serialize, ZResourcePtr::Equals);

void ZResourcePtr::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZResourcePtr*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZResourcePtr::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZResourcePtr*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZResourcePtr::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZResourcePtr s_Object {};

	*reinterpret_cast<ZResourcePtr*>(p_Target) = s_Object;
}

void ZResourcePtr::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZResourcePtr*>(p_Object);

}

bool ZResourcePtr::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZResourcePtr*>(p_Left);
	auto* s_Right = reinterpret_cast<ZResourcePtr*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZResourcePtr::operator==(const ZResourcePtr& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZResourcePtr>)
		return false;


	return true;
}

ZHMTypeInfo ZRuntimeResourceID::TypeInfo = ZHMTypeInfo("ZRuntimeResourceID", sizeof(ZRuntimeResourceID), alignof(ZRuntimeResourceID), ZRuntimeResourceID::WriteJson, ZRuntimeResourceID::WriteSimpleJson, ZRuntimeResourceID::FromSimpleJson, ZRuntimeResourceID::Serialize, ZRuntimeResourceID::Equals);

void ZRuntimeResourceID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRuntimeResourceID*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_0E06C207") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_0E06C207);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9EC45A78") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_9EC45A78);
	p_Stream << "}";

	p_Stream << "}";
}

void ZRuntimeResourceID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRuntimeResourceID*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_0E06C207") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_0E06C207);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_9EC45A78") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_9EC45A78);

	p_Stream << "}";
}

void ZRuntimeResourceID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZRuntimeResourceID s_Object {};

	s_Object._0E06C207 = simdjson::from_json_uint32(p_Document["_0E06C207"]);

	s_Object._9EC45A78 = simdjson::from_json_uint32(p_Document["_9EC45A78"]);

	*reinterpret_cast<ZRuntimeResourceID*>(p_Target) = s_Object;
}

void ZRuntimeResourceID::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZRuntimeResourceID*>(p_Object);

	p_Serializer.RegisterRuntimeResourceId(p_OwnOffset);
}

bool ZRuntimeResourceID::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZRuntimeResourceID*>(p_Left);
	auto* s_Right = reinterpret_cast<ZRuntimeResourceID*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZRuntimeResourceID::operator==(const ZRuntimeResourceID& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZRuntimeResourceID>)
		return false;

	if (_0E06C207 != p_Other._0E06C207) return false;
	if (_9EC45A78 != p_Other._9EC45A78) return false;

	return true;
}

ZHMTypeInfo ZSharedSensorDef_SVisibilitySetting::TypeInfo = ZHMTypeInfo("ZSharedSensorDef.SVisibilitySetting", sizeof(ZSharedSensorDef_SVisibilitySetting), alignof(ZSharedSensorDef_SVisibilitySetting), ZSharedSensorDef_SVisibilitySetting::WriteJson, ZSharedSensorDef_SVisibilitySetting::WriteSimpleJson, ZSharedSensorDef_SVisibilitySetting::FromSimpleJson, ZSharedSensorDef_SVisibilitySetting::Serialize, ZSharedSensorDef_SVisibilitySetting::Equals);

void ZSharedSensorDef_SVisibilitySetting::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_651CEEE5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("EActorPerceptionSensitivity") << ",\"$val\":";
	p_Stream << "{\"$enumVal\":" << simdjson::as_json_string(static_cast<int64_t>(s_Object->_651CEEE5)) << ",\"$enumValName\":" << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EActorPerceptionSensitivity", static_cast<int>(s_Object->_651CEEE5))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_67E9CFAF") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_67E9CFAF);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7E8A37B8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_7E8A37B8);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_ED8C28F8") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_ED8C28F8);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_44EB35D5") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_44EB35D5);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AC96C91C") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_AC96C91C);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E3F48D31") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_E3F48D31);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2D17BA18") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_2D17BA18);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2AFC50C4") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_2AFC50C4);
	p_Stream << "}";

	p_Stream << "}";
}

void ZSharedSensorDef_SVisibilitySetting::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_651CEEE5") << ":";
	p_Stream << simdjson::as_json_string(ZHMEnums::GetEnumValueName("EActorPerceptionSensitivity", static_cast<int>(s_Object->_651CEEE5)));
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_67E9CFAF") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_67E9CFAF);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_7E8A37B8") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_7E8A37B8);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_ED8C28F8") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_ED8C28F8);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_44EB35D5") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_44EB35D5);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_AC96C91C") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_AC96C91C);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_E3F48D31") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_E3F48D31);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2D17BA18") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_2D17BA18);
	p_Stream << ",";

	p_Stream << simdjson::as_json_string("_2AFC50C4") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_2AFC50C4);

	p_Stream << "}";
}

void ZSharedSensorDef_SVisibilitySetting::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSharedSensorDef_SVisibilitySetting s_Object {};

	s_Object._651CEEE5 = static_cast<EActorPerceptionSensitivity>(ZHMEnums::GetEnumValueByName("EActorPerceptionSensitivity", std::string_view(p_Document["_651CEEE5"])));

	s_Object._67E9CFAF = simdjson::from_json_float32(p_Document["_67E9CFAF"]);

	s_Object._7E8A37B8 = simdjson::from_json_float32(p_Document["_7E8A37B8"]);

	s_Object._ED8C28F8 = simdjson::from_json_float32(p_Document["_ED8C28F8"]);

	s_Object._44EB35D5 = simdjson::from_json_float32(p_Document["_44EB35D5"]);

	s_Object._AC96C91C = simdjson::from_json_float32(p_Document["_AC96C91C"]);

	s_Object._E3F48D31 = simdjson::from_json_float32(p_Document["_E3F48D31"]);

	s_Object._2D17BA18 = simdjson::from_json_float32(p_Document["_2D17BA18"]);

	s_Object._2AFC50C4 = simdjson::from_json_float32(p_Document["_2AFC50C4"]);

	*reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Target) = s_Object;
}

void ZSharedSensorDef_SVisibilitySetting::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Object);

}

bool ZSharedSensorDef_SVisibilitySetting::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Left);
	auto* s_Right = reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZSharedSensorDef_SVisibilitySetting::operator==(const ZSharedSensorDef_SVisibilitySetting& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZSharedSensorDef_SVisibilitySetting>)
		return false;

	if (_651CEEE5 != p_Other._651CEEE5) return false;
	if (_67E9CFAF != p_Other._67E9CFAF) return false;
	if (_7E8A37B8 != p_Other._7E8A37B8) return false;
	if (_ED8C28F8 != p_Other._ED8C28F8) return false;
	if (_44EB35D5 != p_Other._44EB35D5) return false;
	if (_AC96C91C != p_Other._AC96C91C) return false;
	if (_E3F48D31 != p_Other._E3F48D31) return false;
	if (_2D17BA18 != p_Other._2D17BA18) return false;
	if (_2AFC50C4 != p_Other._2AFC50C4) return false;

	return true;
}

ZHMTypeInfo ZSoundBlendCollision::TypeInfo = ZHMTypeInfo("ZSoundBlendCollision", sizeof(ZSoundBlendCollision), alignof(ZSoundBlendCollision), ZSoundBlendCollision::WriteJson, ZSoundBlendCollision::WriteSimpleJson, ZSoundBlendCollision::FromSimpleJson, ZSoundBlendCollision::Serialize, ZSoundBlendCollision::Equals);

void ZSoundBlendCollision::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSoundBlendCollision*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSoundBlendCollision::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSoundBlendCollision*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZSoundBlendCollision::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSoundBlendCollision s_Object {};

	*reinterpret_cast<ZSoundBlendCollision*>(p_Target) = s_Object;
}

void ZSoundBlendCollision::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSoundBlendCollision*>(p_Object);

}

bool ZSoundBlendCollision::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZSoundBlendCollision*>(p_Left);
	auto* s_Right = reinterpret_cast<ZSoundBlendCollision*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZSoundBlendCollision::operator==(const ZSoundBlendCollision& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZSoundBlendCollision>)
		return false;


	return true;
}

ZHMTypeInfo ZSpeakerLevels::TypeInfo = ZHMTypeInfo("ZSpeakerLevels", sizeof(ZSpeakerLevels), alignof(ZSpeakerLevels), ZSpeakerLevels::WriteJson, ZSpeakerLevels::WriteSimpleJson, ZSpeakerLevels::FromSimpleJson, ZSpeakerLevels::Serialize, ZSpeakerLevels::Equals);

void ZSpeakerLevels::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSpeakerLevels*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_EB48D7FA") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("TArray<float32>") << ",\"$val\":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_EB48D7FA.size(); ++i)
	{
		auto& s_Item0 = s_Object->_EB48D7FA[i];
		p_Stream << "{\"$type\":" << simdjson::as_json_string("float32") << ",\"$val\":";
		p_Stream << simdjson::as_json_string(s_Item0);
		p_Stream << "}";

		if (i < s_Object->_EB48D7FA.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZSpeakerLevels::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSpeakerLevels*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_EB48D7FA") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_EB48D7FA.size(); ++i)
	{
		auto& s_Item0 = s_Object->_EB48D7FA[i];
		p_Stream << simdjson::as_json_string(s_Item0);

		if (i < s_Object->_EB48D7FA.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZSpeakerLevels::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSpeakerLevels s_Object {};

	for (simdjson::ondemand::value s_Item0 : p_Document["_EB48D7FA"])
	{
		s_Object._EB48D7FA.push_back(simdjson::from_json_float32(s_Item0));
	}

	*reinterpret_cast<ZSpeakerLevels*>(p_Target) = s_Object;
}

void ZSpeakerLevels::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSpeakerLevels*>(p_Object);

	TArray<float32>::Serialize(&s_Object->_EB48D7FA, p_Serializer, p_OwnOffset + offsetof(ZSpeakerLevels, _EB48D7FA));
}

bool ZSpeakerLevels::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZSpeakerLevels*>(p_Left);
	auto* s_Right = reinterpret_cast<ZSpeakerLevels*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZSpeakerLevels::operator==(const ZSpeakerLevels& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZSpeakerLevels>)
		return false;

	if (_EB48D7FA != p_Other._EB48D7FA) return false;

	return true;
}

ZHMTypeInfo ZTime::TypeInfo = ZHMTypeInfo("ZTime", sizeof(ZTime), alignof(ZTime), ZTime::WriteJson, ZTime::WriteSimpleJson, ZTime::FromSimpleJson, ZTime::Serialize, ZTime::Equals);

void ZTime::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZTime*>(p_Object);

	p_Stream << "{";
	p_Stream << simdjson::as_json_string("_D33B1D5A") << ":";
	p_Stream << "{\"$type\":" << simdjson::as_json_string("uint64") << ",\"$val\":";
	p_Stream << simdjson::as_json_string(s_Object->_D33B1D5A);
	p_Stream << "}";

	p_Stream << "}";
}

void ZTime::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZTime*>(p_Object);

	p_Stream << "{";

	p_Stream << simdjson::as_json_string("_D33B1D5A") << ":";
	p_Stream << simdjson::as_json_string(s_Object->_D33B1D5A);

	p_Stream << "}";
}

void ZTime::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZTime s_Object {};

	s_Object._D33B1D5A = simdjson::from_json_uint64(p_Document["_D33B1D5A"]);

	*reinterpret_cast<ZTime*>(p_Target) = s_Object;
}

void ZTime::Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZTime*>(p_Object);

}

bool ZTime::Equals(void* p_Left, void* p_Right)
{
	auto* s_Left = reinterpret_cast<ZTime*>(p_Left);
	auto* s_Right = reinterpret_cast<ZTime*>(p_Right);

	return *s_Left == *s_Right;
}

bool ZTime::operator==(const ZTime& p_Other) const
{
	if constexpr (!ZHMTypeSupportsEquality_v<ZTime>)
		return false;

	if (_D33B1D5A != p_Other._D33B1D5A) return false;

	return true;
}

